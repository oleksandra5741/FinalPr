/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 120);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {var require;//! moment.js
//! version : 2.19.3
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! momentjs.com

;(function (global, factory) {
     true ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : global.moment = factory();
})(this, function () {
    'use strict';

    var hookCallback;

    function hooks() {
        return hookCallback.apply(null, arguments);
    }

    // This is done to register the method called with moment()
    // without creating circular dependencies.
    function setHookCallback(callback) {
        hookCallback = callback;
    }

    function isArray(input) {
        return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';
    }

    function isObject(input) {
        // IE8 will treat undefined and null as object if it wasn't for
        // input != null
        return input != null && Object.prototype.toString.call(input) === '[object Object]';
    }

    function isObjectEmpty(obj) {
        if (Object.getOwnPropertyNames) {
            return Object.getOwnPropertyNames(obj).length === 0;
        } else {
            var k;
            for (k in obj) {
                if (obj.hasOwnProperty(k)) {
                    return false;
                }
            }
            return true;
        }
    }

    function isUndefined(input) {
        return input === void 0;
    }

    function isNumber(input) {
        return typeof input === 'number' || Object.prototype.toString.call(input) === '[object Number]';
    }

    function isDate(input) {
        return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
    }

    function map(arr, fn) {
        var res = [],
            i;
        for (i = 0; i < arr.length; ++i) {
            res.push(fn(arr[i], i));
        }
        return res;
    }

    function hasOwnProp(a, b) {
        return Object.prototype.hasOwnProperty.call(a, b);
    }

    function extend(a, b) {
        for (var i in b) {
            if (hasOwnProp(b, i)) {
                a[i] = b[i];
            }
        }

        if (hasOwnProp(b, 'toString')) {
            a.toString = b.toString;
        }

        if (hasOwnProp(b, 'valueOf')) {
            a.valueOf = b.valueOf;
        }

        return a;
    }

    function createUTC(input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, true).utc();
    }

    function defaultParsingFlags() {
        // We need to deep clone this object.
        return {
            empty: false,
            unusedTokens: [],
            unusedInput: [],
            overflow: -2,
            charsLeftOver: 0,
            nullInput: false,
            invalidMonth: null,
            invalidFormat: false,
            userInvalidated: false,
            iso: false,
            parsedDateParts: [],
            meridiem: null,
            rfc2822: false,
            weekdayMismatch: false
        };
    }

    function getParsingFlags(m) {
        if (m._pf == null) {
            m._pf = defaultParsingFlags();
        }
        return m._pf;
    }

    var some;
    if (Array.prototype.some) {
        some = Array.prototype.some;
    } else {
        some = function (fun) {
            var t = Object(this);
            var len = t.length >>> 0;

            for (var i = 0; i < len; i++) {
                if (i in t && fun.call(this, t[i], i, t)) {
                    return true;
                }
            }

            return false;
        };
    }

    function isValid(m) {
        if (m._isValid == null) {
            var flags = getParsingFlags(m);
            var parsedParts = some.call(flags.parsedDateParts, function (i) {
                return i != null;
            });
            var isNowValid = !isNaN(m._d.getTime()) && flags.overflow < 0 && !flags.empty && !flags.invalidMonth && !flags.invalidWeekday && !flags.weekdayMismatch && !flags.nullInput && !flags.invalidFormat && !flags.userInvalidated && (!flags.meridiem || flags.meridiem && parsedParts);

            if (m._strict) {
                isNowValid = isNowValid && flags.charsLeftOver === 0 && flags.unusedTokens.length === 0 && flags.bigHour === undefined;
            }

            if (Object.isFrozen == null || !Object.isFrozen(m)) {
                m._isValid = isNowValid;
            } else {
                return isNowValid;
            }
        }
        return m._isValid;
    }

    function createInvalid(flags) {
        var m = createUTC(NaN);
        if (flags != null) {
            extend(getParsingFlags(m), flags);
        } else {
            getParsingFlags(m).userInvalidated = true;
        }

        return m;
    }

    // Plugins that add properties should also add the key here (null value),
    // so we can properly clone ourselves.
    var momentProperties = hooks.momentProperties = [];

    function copyConfig(to, from) {
        var i, prop, val;

        if (!isUndefined(from._isAMomentObject)) {
            to._isAMomentObject = from._isAMomentObject;
        }
        if (!isUndefined(from._i)) {
            to._i = from._i;
        }
        if (!isUndefined(from._f)) {
            to._f = from._f;
        }
        if (!isUndefined(from._l)) {
            to._l = from._l;
        }
        if (!isUndefined(from._strict)) {
            to._strict = from._strict;
        }
        if (!isUndefined(from._tzm)) {
            to._tzm = from._tzm;
        }
        if (!isUndefined(from._isUTC)) {
            to._isUTC = from._isUTC;
        }
        if (!isUndefined(from._offset)) {
            to._offset = from._offset;
        }
        if (!isUndefined(from._pf)) {
            to._pf = getParsingFlags(from);
        }
        if (!isUndefined(from._locale)) {
            to._locale = from._locale;
        }

        if (momentProperties.length > 0) {
            for (i = 0; i < momentProperties.length; i++) {
                prop = momentProperties[i];
                val = from[prop];
                if (!isUndefined(val)) {
                    to[prop] = val;
                }
            }
        }

        return to;
    }

    var updateInProgress = false;

    // Moment prototype object
    function Moment(config) {
        copyConfig(this, config);
        this._d = new Date(config._d != null ? config._d.getTime() : NaN);
        if (!this.isValid()) {
            this._d = new Date(NaN);
        }
        // Prevent infinite loop in case updateOffset creates new moment
        // objects.
        if (updateInProgress === false) {
            updateInProgress = true;
            hooks.updateOffset(this);
            updateInProgress = false;
        }
    }

    function isMoment(obj) {
        return obj instanceof Moment || obj != null && obj._isAMomentObject != null;
    }

    function absFloor(number) {
        if (number < 0) {
            // -0 -> 0
            return Math.ceil(number) || 0;
        } else {
            return Math.floor(number);
        }
    }

    function toInt(argumentForCoercion) {
        var coercedNumber = +argumentForCoercion,
            value = 0;

        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
            value = absFloor(coercedNumber);
        }

        return value;
    }

    // compare two arrays, return the number of differences
    function compareArrays(array1, array2, dontConvert) {
        var len = Math.min(array1.length, array2.length),
            lengthDiff = Math.abs(array1.length - array2.length),
            diffs = 0,
            i;
        for (i = 0; i < len; i++) {
            if (dontConvert && array1[i] !== array2[i] || !dontConvert && toInt(array1[i]) !== toInt(array2[i])) {
                diffs++;
            }
        }
        return diffs + lengthDiff;
    }

    function warn(msg) {
        if (hooks.suppressDeprecationWarnings === false && typeof console !== 'undefined' && console.warn) {
            console.warn('Deprecation warning: ' + msg);
        }
    }

    function deprecate(msg, fn) {
        var firstTime = true;

        return extend(function () {
            if (hooks.deprecationHandler != null) {
                hooks.deprecationHandler(null, msg);
            }
            if (firstTime) {
                var args = [];
                var arg;
                for (var i = 0; i < arguments.length; i++) {
                    arg = '';
                    if (typeof arguments[i] === 'object') {
                        arg += '\n[' + i + '] ';
                        for (var key in arguments[0]) {
                            arg += key + ': ' + arguments[0][key] + ', ';
                        }
                        arg = arg.slice(0, -2); // Remove trailing comma and space
                    } else {
                        arg = arguments[i];
                    }
                    args.push(arg);
                }
                warn(msg + '\nArguments: ' + Array.prototype.slice.call(args).join('') + '\n' + new Error().stack);
                firstTime = false;
            }
            return fn.apply(this, arguments);
        }, fn);
    }

    var deprecations = {};

    function deprecateSimple(name, msg) {
        if (hooks.deprecationHandler != null) {
            hooks.deprecationHandler(name, msg);
        }
        if (!deprecations[name]) {
            warn(msg);
            deprecations[name] = true;
        }
    }

    hooks.suppressDeprecationWarnings = false;
    hooks.deprecationHandler = null;

    function isFunction(input) {
        return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
    }

    function set(config) {
        var prop, i;
        for (i in config) {
            prop = config[i];
            if (isFunction(prop)) {
                this[i] = prop;
            } else {
                this['_' + i] = prop;
            }
        }
        this._config = config;
        // Lenient ordinal parsing accepts just a number in addition to
        // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
        // TODO: Remove "ordinalParse" fallback in next major release.
        this._dayOfMonthOrdinalParseLenient = new RegExp((this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) + '|' + /\d{1,2}/.source);
    }

    function mergeConfigs(parentConfig, childConfig) {
        var res = extend({}, parentConfig),
            prop;
        for (prop in childConfig) {
            if (hasOwnProp(childConfig, prop)) {
                if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
                    res[prop] = {};
                    extend(res[prop], parentConfig[prop]);
                    extend(res[prop], childConfig[prop]);
                } else if (childConfig[prop] != null) {
                    res[prop] = childConfig[prop];
                } else {
                    delete res[prop];
                }
            }
        }
        for (prop in parentConfig) {
            if (hasOwnProp(parentConfig, prop) && !hasOwnProp(childConfig, prop) && isObject(parentConfig[prop])) {
                // make sure changes to properties don't modify parent config
                res[prop] = extend({}, res[prop]);
            }
        }
        return res;
    }

    function Locale(config) {
        if (config != null) {
            this.set(config);
        }
    }

    var keys;

    if (Object.keys) {
        keys = Object.keys;
    } else {
        keys = function (obj) {
            var i,
                res = [];
            for (i in obj) {
                if (hasOwnProp(obj, i)) {
                    res.push(i);
                }
            }
            return res;
        };
    }

    var defaultCalendar = {
        sameDay: '[Today at] LT',
        nextDay: '[Tomorrow at] LT',
        nextWeek: 'dddd [at] LT',
        lastDay: '[Yesterday at] LT',
        lastWeek: '[Last] dddd [at] LT',
        sameElse: 'L'
    };

    function calendar(key, mom, now) {
        var output = this._calendar[key] || this._calendar['sameElse'];
        return isFunction(output) ? output.call(mom, now) : output;
    }

    var defaultLongDateFormat = {
        LTS: 'h:mm:ss A',
        LT: 'h:mm A',
        L: 'MM/DD/YYYY',
        LL: 'MMMM D, YYYY',
        LLL: 'MMMM D, YYYY h:mm A',
        LLLL: 'dddd, MMMM D, YYYY h:mm A'
    };

    function longDateFormat(key) {
        var format = this._longDateFormat[key],
            formatUpper = this._longDateFormat[key.toUpperCase()];

        if (format || !formatUpper) {
            return format;
        }

        this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {
            return val.slice(1);
        });

        return this._longDateFormat[key];
    }

    var defaultInvalidDate = 'Invalid date';

    function invalidDate() {
        return this._invalidDate;
    }

    var defaultOrdinal = '%d';
    var defaultDayOfMonthOrdinalParse = /\d{1,2}/;

    function ordinal(number) {
        return this._ordinal.replace('%d', number);
    }

    var defaultRelativeTime = {
        future: 'in %s',
        past: '%s ago',
        s: 'a few seconds',
        ss: '%d seconds',
        m: 'a minute',
        mm: '%d minutes',
        h: 'an hour',
        hh: '%d hours',
        d: 'a day',
        dd: '%d days',
        M: 'a month',
        MM: '%d months',
        y: 'a year',
        yy: '%d years'
    };

    function relativeTime(number, withoutSuffix, string, isFuture) {
        var output = this._relativeTime[string];
        return isFunction(output) ? output(number, withoutSuffix, string, isFuture) : output.replace(/%d/i, number);
    }

    function pastFuture(diff, output) {
        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
        return isFunction(format) ? format(output) : format.replace(/%s/i, output);
    }

    var aliases = {};

    function addUnitAlias(unit, shorthand) {
        var lowerCase = unit.toLowerCase();
        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
    }

    function normalizeUnits(units) {
        return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
    }

    function normalizeObjectUnits(inputObject) {
        var normalizedInput = {},
            normalizedProp,
            prop;

        for (prop in inputObject) {
            if (hasOwnProp(inputObject, prop)) {
                normalizedProp = normalizeUnits(prop);
                if (normalizedProp) {
                    normalizedInput[normalizedProp] = inputObject[prop];
                }
            }
        }

        return normalizedInput;
    }

    var priorities = {};

    function addUnitPriority(unit, priority) {
        priorities[unit] = priority;
    }

    function getPrioritizedUnits(unitsObj) {
        var units = [];
        for (var u in unitsObj) {
            units.push({ unit: u, priority: priorities[u] });
        }
        units.sort(function (a, b) {
            return a.priority - b.priority;
        });
        return units;
    }

    function zeroFill(number, targetLength, forceSign) {
        var absNumber = '' + Math.abs(number),
            zerosToFill = targetLength - absNumber.length,
            sign = number >= 0;
        return (sign ? forceSign ? '+' : '' : '-') + Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
    }

    var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;

    var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;

    var formatFunctions = {};

    var formatTokenFunctions = {};

    // token:    'M'
    // padded:   ['MM', 2]
    // ordinal:  'Mo'
    // callback: function () { this.month() + 1 }
    function addFormatToken(token, padded, ordinal, callback) {
        var func = callback;
        if (typeof callback === 'string') {
            func = function () {
                return this[callback]();
            };
        }
        if (token) {
            formatTokenFunctions[token] = func;
        }
        if (padded) {
            formatTokenFunctions[padded[0]] = function () {
                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
            };
        }
        if (ordinal) {
            formatTokenFunctions[ordinal] = function () {
                return this.localeData().ordinal(func.apply(this, arguments), token);
            };
        }
    }

    function removeFormattingTokens(input) {
        if (input.match(/\[[\s\S]/)) {
            return input.replace(/^\[|\]$/g, '');
        }
        return input.replace(/\\/g, '');
    }

    function makeFormatFunction(format) {
        var array = format.match(formattingTokens),
            i,
            length;

        for (i = 0, length = array.length; i < length; i++) {
            if (formatTokenFunctions[array[i]]) {
                array[i] = formatTokenFunctions[array[i]];
            } else {
                array[i] = removeFormattingTokens(array[i]);
            }
        }

        return function (mom) {
            var output = '',
                i;
            for (i = 0; i < length; i++) {
                output += isFunction(array[i]) ? array[i].call(mom, format) : array[i];
            }
            return output;
        };
    }

    // format date using native date object
    function formatMoment(m, format) {
        if (!m.isValid()) {
            return m.localeData().invalidDate();
        }

        format = expandFormat(format, m.localeData());
        formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);

        return formatFunctions[format](m);
    }

    function expandFormat(format, locale) {
        var i = 5;

        function replaceLongDateFormatTokens(input) {
            return locale.longDateFormat(input) || input;
        }

        localFormattingTokens.lastIndex = 0;
        while (i >= 0 && localFormattingTokens.test(format)) {
            format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
            localFormattingTokens.lastIndex = 0;
            i -= 1;
        }

        return format;
    }

    var match1 = /\d/; //       0 - 9
    var match2 = /\d\d/; //      00 - 99
    var match3 = /\d{3}/; //     000 - 999
    var match4 = /\d{4}/; //    0000 - 9999
    var match6 = /[+-]?\d{6}/; // -999999 - 999999
    var match1to2 = /\d\d?/; //       0 - 99
    var match3to4 = /\d\d\d\d?/; //     999 - 9999
    var match5to6 = /\d\d\d\d\d\d?/; //   99999 - 999999
    var match1to3 = /\d{1,3}/; //       0 - 999
    var match1to4 = /\d{1,4}/; //       0 - 9999
    var match1to6 = /[+-]?\d{1,6}/; // -999999 - 999999

    var matchUnsigned = /\d+/; //       0 - inf
    var matchSigned = /[+-]?\d+/; //    -inf - inf

    var matchOffset = /Z|[+-]\d\d:?\d\d/gi; // +00:00 -00:00 +0000 -0000 or Z
    var matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi; // +00 -00 +00:00 -00:00 +0000 -0000 or Z

    var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/; // 123456789 123456789.123

    // any word (or two) characters or numbers including two/three word month in arabic.
    // includes scottish gaelic two word and hyphenated months
    var matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i;

    var regexes = {};

    function addRegexToken(token, regex, strictRegex) {
        regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {
            return isStrict && strictRegex ? strictRegex : regex;
        };
    }

    function getParseRegexForToken(token, config) {
        if (!hasOwnProp(regexes, token)) {
            return new RegExp(unescapeFormat(token));
        }

        return regexes[token](config._strict, config._locale);
    }

    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
    function unescapeFormat(s) {
        return regexEscape(s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
            return p1 || p2 || p3 || p4;
        }));
    }

    function regexEscape(s) {
        return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
    }

    var tokens = {};

    function addParseToken(token, callback) {
        var i,
            func = callback;
        if (typeof token === 'string') {
            token = [token];
        }
        if (isNumber(callback)) {
            func = function (input, array) {
                array[callback] = toInt(input);
            };
        }
        for (i = 0; i < token.length; i++) {
            tokens[token[i]] = func;
        }
    }

    function addWeekParseToken(token, callback) {
        addParseToken(token, function (input, array, config, token) {
            config._w = config._w || {};
            callback(input, config._w, config, token);
        });
    }

    function addTimeToArrayFromToken(token, input, config) {
        if (input != null && hasOwnProp(tokens, token)) {
            tokens[token](input, config._a, config, token);
        }
    }

    var YEAR = 0;
    var MONTH = 1;
    var DATE = 2;
    var HOUR = 3;
    var MINUTE = 4;
    var SECOND = 5;
    var MILLISECOND = 6;
    var WEEK = 7;
    var WEEKDAY = 8;

    // FORMATTING

    addFormatToken('Y', 0, 0, function () {
        var y = this.year();
        return y <= 9999 ? '' + y : '+' + y;
    });

    addFormatToken(0, ['YY', 2], 0, function () {
        return this.year() % 100;
    });

    addFormatToken(0, ['YYYY', 4], 0, 'year');
    addFormatToken(0, ['YYYYY', 5], 0, 'year');
    addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

    // ALIASES

    addUnitAlias('year', 'y');

    // PRIORITIES

    addUnitPriority('year', 1);

    // PARSING

    addRegexToken('Y', matchSigned);
    addRegexToken('YY', match1to2, match2);
    addRegexToken('YYYY', match1to4, match4);
    addRegexToken('YYYYY', match1to6, match6);
    addRegexToken('YYYYYY', match1to6, match6);

    addParseToken(['YYYYY', 'YYYYYY'], YEAR);
    addParseToken('YYYY', function (input, array) {
        array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
    });
    addParseToken('YY', function (input, array) {
        array[YEAR] = hooks.parseTwoDigitYear(input);
    });
    addParseToken('Y', function (input, array) {
        array[YEAR] = parseInt(input, 10);
    });

    // HELPERS

    function daysInYear(year) {
        return isLeapYear(year) ? 366 : 365;
    }

    function isLeapYear(year) {
        return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
    }

    // HOOKS

    hooks.parseTwoDigitYear = function (input) {
        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
    };

    // MOMENTS

    var getSetYear = makeGetSet('FullYear', true);

    function getIsLeapYear() {
        return isLeapYear(this.year());
    }

    function makeGetSet(unit, keepTime) {
        return function (value) {
            if (value != null) {
                set$1(this, unit, value);
                hooks.updateOffset(this, keepTime);
                return this;
            } else {
                return get(this, unit);
            }
        };
    }

    function get(mom, unit) {
        return mom.isValid() ? mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;
    }

    function set$1(mom, unit, value) {
        if (mom.isValid() && !isNaN(value)) {
            if (unit === 'FullYear' && isLeapYear(mom.year()) && mom.month() === 1 && mom.date() === 29) {
                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value, mom.month(), daysInMonth(value, mom.month()));
            } else {
                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
            }
        }
    }

    // MOMENTS

    function stringGet(units) {
        units = normalizeUnits(units);
        if (isFunction(this[units])) {
            return this[units]();
        }
        return this;
    }

    function stringSet(units, value) {
        if (typeof units === 'object') {
            units = normalizeObjectUnits(units);
            var prioritized = getPrioritizedUnits(units);
            for (var i = 0; i < prioritized.length; i++) {
                this[prioritized[i].unit](units[prioritized[i].unit]);
            }
        } else {
            units = normalizeUnits(units);
            if (isFunction(this[units])) {
                return this[units](value);
            }
        }
        return this;
    }

    function mod(n, x) {
        return (n % x + x) % x;
    }

    var indexOf;

    if (Array.prototype.indexOf) {
        indexOf = Array.prototype.indexOf;
    } else {
        indexOf = function (o) {
            // I know
            var i;
            for (i = 0; i < this.length; ++i) {
                if (this[i] === o) {
                    return i;
                }
            }
            return -1;
        };
    }

    function daysInMonth(year, month) {
        if (isNaN(year) || isNaN(month)) {
            return NaN;
        }
        var modMonth = mod(month, 12);
        year += (month - modMonth) / 12;
        return modMonth === 1 ? isLeapYear(year) ? 29 : 28 : 31 - modMonth % 7 % 2;
    }

    // FORMATTING

    addFormatToken('M', ['MM', 2], 'Mo', function () {
        return this.month() + 1;
    });

    addFormatToken('MMM', 0, 0, function (format) {
        return this.localeData().monthsShort(this, format);
    });

    addFormatToken('MMMM', 0, 0, function (format) {
        return this.localeData().months(this, format);
    });

    // ALIASES

    addUnitAlias('month', 'M');

    // PRIORITY

    addUnitPriority('month', 8);

    // PARSING

    addRegexToken('M', match1to2);
    addRegexToken('MM', match1to2, match2);
    addRegexToken('MMM', function (isStrict, locale) {
        return locale.monthsShortRegex(isStrict);
    });
    addRegexToken('MMMM', function (isStrict, locale) {
        return locale.monthsRegex(isStrict);
    });

    addParseToken(['M', 'MM'], function (input, array) {
        array[MONTH] = toInt(input) - 1;
    });

    addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
        var month = config._locale.monthsParse(input, token, config._strict);
        // if we didn't find a month name, mark the date as invalid.
        if (month != null) {
            array[MONTH] = month;
        } else {
            getParsingFlags(config).invalidMonth = input;
        }
    });

    // LOCALES

    var MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/;
    var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');
    function localeMonths(m, format) {
        if (!m) {
            return isArray(this._months) ? this._months : this._months['standalone'];
        }
        return isArray(this._months) ? this._months[m.month()] : this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];
    }

    var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');
    function localeMonthsShort(m, format) {
        if (!m) {
            return isArray(this._monthsShort) ? this._monthsShort : this._monthsShort['standalone'];
        }
        return isArray(this._monthsShort) ? this._monthsShort[m.month()] : this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];
    }

    function handleStrictParse(monthName, format, strict) {
        var i,
            ii,
            mom,
            llc = monthName.toLocaleLowerCase();
        if (!this._monthsParse) {
            // this is not used
            this._monthsParse = [];
            this._longMonthsParse = [];
            this._shortMonthsParse = [];
            for (i = 0; i < 12; ++i) {
                mom = createUTC([2000, i]);
                this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();
                this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
            }
        }

        if (strict) {
            if (format === 'MMM') {
                ii = indexOf.call(this._shortMonthsParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._longMonthsParse, llc);
                return ii !== -1 ? ii : null;
            }
        } else {
            if (format === 'MMM') {
                ii = indexOf.call(this._shortMonthsParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._longMonthsParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._longMonthsParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortMonthsParse, llc);
                return ii !== -1 ? ii : null;
            }
        }
    }

    function localeMonthsParse(monthName, format, strict) {
        var i, mom, regex;

        if (this._monthsParseExact) {
            return handleStrictParse.call(this, monthName, format, strict);
        }

        if (!this._monthsParse) {
            this._monthsParse = [];
            this._longMonthsParse = [];
            this._shortMonthsParse = [];
        }

        // TODO: add sorting
        // Sorting makes sure if one month (or abbr) is a prefix of another
        // see sorting in computeMonthsParse
        for (i = 0; i < 12; i++) {
            // make the regex if we don't have it already
            mom = createUTC([2000, i]);
            if (strict && !this._longMonthsParse[i]) {
                this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
                this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
            }
            if (!strict && !this._monthsParse[i]) {
                regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }
            // test the regex
            if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
                return i;
            } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
                return i;
            } else if (!strict && this._monthsParse[i].test(monthName)) {
                return i;
            }
        }
    }

    // MOMENTS

    function setMonth(mom, value) {
        var dayOfMonth;

        if (!mom.isValid()) {
            // No op
            return mom;
        }

        if (typeof value === 'string') {
            if (/^\d+$/.test(value)) {
                value = toInt(value);
            } else {
                value = mom.localeData().monthsParse(value);
                // TODO: Another silent failure?
                if (!isNumber(value)) {
                    return mom;
                }
            }
        }

        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
        return mom;
    }

    function getSetMonth(value) {
        if (value != null) {
            setMonth(this, value);
            hooks.updateOffset(this, true);
            return this;
        } else {
            return get(this, 'Month');
        }
    }

    function getDaysInMonth() {
        return daysInMonth(this.year(), this.month());
    }

    var defaultMonthsShortRegex = matchWord;
    function monthsShortRegex(isStrict) {
        if (this._monthsParseExact) {
            if (!hasOwnProp(this, '_monthsRegex')) {
                computeMonthsParse.call(this);
            }
            if (isStrict) {
                return this._monthsShortStrictRegex;
            } else {
                return this._monthsShortRegex;
            }
        } else {
            if (!hasOwnProp(this, '_monthsShortRegex')) {
                this._monthsShortRegex = defaultMonthsShortRegex;
            }
            return this._monthsShortStrictRegex && isStrict ? this._monthsShortStrictRegex : this._monthsShortRegex;
        }
    }

    var defaultMonthsRegex = matchWord;
    function monthsRegex(isStrict) {
        if (this._monthsParseExact) {
            if (!hasOwnProp(this, '_monthsRegex')) {
                computeMonthsParse.call(this);
            }
            if (isStrict) {
                return this._monthsStrictRegex;
            } else {
                return this._monthsRegex;
            }
        } else {
            if (!hasOwnProp(this, '_monthsRegex')) {
                this._monthsRegex = defaultMonthsRegex;
            }
            return this._monthsStrictRegex && isStrict ? this._monthsStrictRegex : this._monthsRegex;
        }
    }

    function computeMonthsParse() {
        function cmpLenRev(a, b) {
            return b.length - a.length;
        }

        var shortPieces = [],
            longPieces = [],
            mixedPieces = [],
            i,
            mom;
        for (i = 0; i < 12; i++) {
            // make the regex if we don't have it already
            mom = createUTC([2000, i]);
            shortPieces.push(this.monthsShort(mom, ''));
            longPieces.push(this.months(mom, ''));
            mixedPieces.push(this.months(mom, ''));
            mixedPieces.push(this.monthsShort(mom, ''));
        }
        // Sorting makes sure if one month (or abbr) is a prefix of another it
        // will match the longer piece.
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        for (i = 0; i < 12; i++) {
            shortPieces[i] = regexEscape(shortPieces[i]);
            longPieces[i] = regexEscape(longPieces[i]);
        }
        for (i = 0; i < 24; i++) {
            mixedPieces[i] = regexEscape(mixedPieces[i]);
        }

        this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._monthsShortRegex = this._monthsRegex;
        this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
        this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
    }

    function createDate(y, m, d, h, M, s, ms) {
        // can't just apply() to create a date:
        // https://stackoverflow.com/q/181348
        var date = new Date(y, m, d, h, M, s, ms);

        // the date constructor remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0 && isFinite(date.getFullYear())) {
            date.setFullYear(y);
        }
        return date;
    }

    function createUTCDate(y) {
        var date = new Date(Date.UTC.apply(null, arguments));

        // the Date.UTC function remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0 && isFinite(date.getUTCFullYear())) {
            date.setUTCFullYear(y);
        }
        return date;
    }

    // start-of-first-week - start-of-year
    function firstWeekOffset(year, dow, doy) {
        var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
        fwd = 7 + dow - doy,

        // first-week day local weekday -- which local weekday is fwd
        fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;

        return -fwdlw + fwd - 1;
    }

    // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
    function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
        var localWeekday = (7 + weekday - dow) % 7,
            weekOffset = firstWeekOffset(year, dow, doy),
            dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
            resYear,
            resDayOfYear;

        if (dayOfYear <= 0) {
            resYear = year - 1;
            resDayOfYear = daysInYear(resYear) + dayOfYear;
        } else if (dayOfYear > daysInYear(year)) {
            resYear = year + 1;
            resDayOfYear = dayOfYear - daysInYear(year);
        } else {
            resYear = year;
            resDayOfYear = dayOfYear;
        }

        return {
            year: resYear,
            dayOfYear: resDayOfYear
        };
    }

    function weekOfYear(mom, dow, doy) {
        var weekOffset = firstWeekOffset(mom.year(), dow, doy),
            week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
            resWeek,
            resYear;

        if (week < 1) {
            resYear = mom.year() - 1;
            resWeek = week + weeksInYear(resYear, dow, doy);
        } else if (week > weeksInYear(mom.year(), dow, doy)) {
            resWeek = week - weeksInYear(mom.year(), dow, doy);
            resYear = mom.year() + 1;
        } else {
            resYear = mom.year();
            resWeek = week;
        }

        return {
            week: resWeek,
            year: resYear
        };
    }

    function weeksInYear(year, dow, doy) {
        var weekOffset = firstWeekOffset(year, dow, doy),
            weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
    }

    // FORMATTING

    addFormatToken('w', ['ww', 2], 'wo', 'week');
    addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

    // ALIASES

    addUnitAlias('week', 'w');
    addUnitAlias('isoWeek', 'W');

    // PRIORITIES

    addUnitPriority('week', 5);
    addUnitPriority('isoWeek', 5);

    // PARSING

    addRegexToken('w', match1to2);
    addRegexToken('ww', match1to2, match2);
    addRegexToken('W', match1to2);
    addRegexToken('WW', match1to2, match2);

    addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {
        week[token.substr(0, 1)] = toInt(input);
    });

    // HELPERS

    // LOCALES

    function localeWeek(mom) {
        return weekOfYear(mom, this._week.dow, this._week.doy).week;
    }

    var defaultLocaleWeek = {
        dow: 0, // Sunday is the first day of the week.
        doy: 6 // The week that contains Jan 1st is the first week of the year.
    };

    function localeFirstDayOfWeek() {
        return this._week.dow;
    }

    function localeFirstDayOfYear() {
        return this._week.doy;
    }

    // MOMENTS

    function getSetWeek(input) {
        var week = this.localeData().week(this);
        return input == null ? week : this.add((input - week) * 7, 'd');
    }

    function getSetISOWeek(input) {
        var week = weekOfYear(this, 1, 4).week;
        return input == null ? week : this.add((input - week) * 7, 'd');
    }

    // FORMATTING

    addFormatToken('d', 0, 'do', 'day');

    addFormatToken('dd', 0, 0, function (format) {
        return this.localeData().weekdaysMin(this, format);
    });

    addFormatToken('ddd', 0, 0, function (format) {
        return this.localeData().weekdaysShort(this, format);
    });

    addFormatToken('dddd', 0, 0, function (format) {
        return this.localeData().weekdays(this, format);
    });

    addFormatToken('e', 0, 0, 'weekday');
    addFormatToken('E', 0, 0, 'isoWeekday');

    // ALIASES

    addUnitAlias('day', 'd');
    addUnitAlias('weekday', 'e');
    addUnitAlias('isoWeekday', 'E');

    // PRIORITY
    addUnitPriority('day', 11);
    addUnitPriority('weekday', 11);
    addUnitPriority('isoWeekday', 11);

    // PARSING

    addRegexToken('d', match1to2);
    addRegexToken('e', match1to2);
    addRegexToken('E', match1to2);
    addRegexToken('dd', function (isStrict, locale) {
        return locale.weekdaysMinRegex(isStrict);
    });
    addRegexToken('ddd', function (isStrict, locale) {
        return locale.weekdaysShortRegex(isStrict);
    });
    addRegexToken('dddd', function (isStrict, locale) {
        return locale.weekdaysRegex(isStrict);
    });

    addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
        var weekday = config._locale.weekdaysParse(input, token, config._strict);
        // if we didn't get a weekday name, mark the date as invalid
        if (weekday != null) {
            week.d = weekday;
        } else {
            getParsingFlags(config).invalidWeekday = input;
        }
    });

    addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
        week[token] = toInt(input);
    });

    // HELPERS

    function parseWeekday(input, locale) {
        if (typeof input !== 'string') {
            return input;
        }

        if (!isNaN(input)) {
            return parseInt(input, 10);
        }

        input = locale.weekdaysParse(input);
        if (typeof input === 'number') {
            return input;
        }

        return null;
    }

    function parseIsoWeekday(input, locale) {
        if (typeof input === 'string') {
            return locale.weekdaysParse(input) % 7 || 7;
        }
        return isNaN(input) ? null : input;
    }

    // LOCALES

    var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');
    function localeWeekdays(m, format) {
        if (!m) {
            return isArray(this._weekdays) ? this._weekdays : this._weekdays['standalone'];
        }
        return isArray(this._weekdays) ? this._weekdays[m.day()] : this._weekdays[this._weekdays.isFormat.test(format) ? 'format' : 'standalone'][m.day()];
    }

    var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');
    function localeWeekdaysShort(m) {
        return m ? this._weekdaysShort[m.day()] : this._weekdaysShort;
    }

    var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');
    function localeWeekdaysMin(m) {
        return m ? this._weekdaysMin[m.day()] : this._weekdaysMin;
    }

    function handleStrictParse$1(weekdayName, format, strict) {
        var i,
            ii,
            mom,
            llc = weekdayName.toLocaleLowerCase();
        if (!this._weekdaysParse) {
            this._weekdaysParse = [];
            this._shortWeekdaysParse = [];
            this._minWeekdaysParse = [];

            for (i = 0; i < 7; ++i) {
                mom = createUTC([2000, 1]).day(i);
                this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();
                this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();
                this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
            }
        }

        if (strict) {
            if (format === 'dddd') {
                ii = indexOf.call(this._weekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else if (format === 'ddd') {
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            }
        } else {
            if (format === 'dddd') {
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else if (format === 'ddd') {
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._minWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            }
        }
    }

    function localeWeekdaysParse(weekdayName, format, strict) {
        var i, mom, regex;

        if (this._weekdaysParseExact) {
            return handleStrictParse$1.call(this, weekdayName, format, strict);
        }

        if (!this._weekdaysParse) {
            this._weekdaysParse = [];
            this._minWeekdaysParse = [];
            this._shortWeekdaysParse = [];
            this._fullWeekdaysParse = [];
        }

        for (i = 0; i < 7; i++) {
            // make the regex if we don't have it already

            mom = createUTC([2000, 1]).day(i);
            if (strict && !this._fullWeekdaysParse[i]) {
                this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\.?') + '$', 'i');
                this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\.?') + '$', 'i');
                this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\.?') + '$', 'i');
            }
            if (!this._weekdaysParse[i]) {
                regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }
            // test the regex
            if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {
                return i;
            } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {
                return i;
            } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {
                return i;
            } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
                return i;
            }
        }
    }

    // MOMENTS

    function getSetDayOfWeek(input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
        if (input != null) {
            input = parseWeekday(input, this.localeData());
            return this.add(input - day, 'd');
        } else {
            return day;
        }
    }

    function getSetLocaleDayOfWeek(input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
        return input == null ? weekday : this.add(input - weekday, 'd');
    }

    function getSetISODayOfWeek(input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }

        // behaves the same as moment#day except
        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
        // as a setter, sunday should belong to the previous week.

        if (input != null) {
            var weekday = parseIsoWeekday(input, this.localeData());
            return this.day(this.day() % 7 ? weekday : weekday - 7);
        } else {
            return this.day() || 7;
        }
    }

    var defaultWeekdaysRegex = matchWord;
    function weekdaysRegex(isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysStrictRegex;
            } else {
                return this._weekdaysRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                this._weekdaysRegex = defaultWeekdaysRegex;
            }
            return this._weekdaysStrictRegex && isStrict ? this._weekdaysStrictRegex : this._weekdaysRegex;
        }
    }

    var defaultWeekdaysShortRegex = matchWord;
    function weekdaysShortRegex(isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysShortStrictRegex;
            } else {
                return this._weekdaysShortRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysShortRegex')) {
                this._weekdaysShortRegex = defaultWeekdaysShortRegex;
            }
            return this._weekdaysShortStrictRegex && isStrict ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
        }
    }

    var defaultWeekdaysMinRegex = matchWord;
    function weekdaysMinRegex(isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysMinStrictRegex;
            } else {
                return this._weekdaysMinRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysMinRegex')) {
                this._weekdaysMinRegex = defaultWeekdaysMinRegex;
            }
            return this._weekdaysMinStrictRegex && isStrict ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
        }
    }

    function computeWeekdaysParse() {
        function cmpLenRev(a, b) {
            return b.length - a.length;
        }

        var minPieces = [],
            shortPieces = [],
            longPieces = [],
            mixedPieces = [],
            i,
            mom,
            minp,
            shortp,
            longp;
        for (i = 0; i < 7; i++) {
            // make the regex if we don't have it already
            mom = createUTC([2000, 1]).day(i);
            minp = this.weekdaysMin(mom, '');
            shortp = this.weekdaysShort(mom, '');
            longp = this.weekdays(mom, '');
            minPieces.push(minp);
            shortPieces.push(shortp);
            longPieces.push(longp);
            mixedPieces.push(minp);
            mixedPieces.push(shortp);
            mixedPieces.push(longp);
        }
        // Sorting makes sure if one weekday (or abbr) is a prefix of another it
        // will match the longer piece.
        minPieces.sort(cmpLenRev);
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        for (i = 0; i < 7; i++) {
            shortPieces[i] = regexEscape(shortPieces[i]);
            longPieces[i] = regexEscape(longPieces[i]);
            mixedPieces[i] = regexEscape(mixedPieces[i]);
        }

        this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._weekdaysShortRegex = this._weekdaysRegex;
        this._weekdaysMinRegex = this._weekdaysRegex;

        this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
        this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
        this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');
    }

    // FORMATTING

    function hFormat() {
        return this.hours() % 12 || 12;
    }

    function kFormat() {
        return this.hours() || 24;
    }

    addFormatToken('H', ['HH', 2], 0, 'hour');
    addFormatToken('h', ['hh', 2], 0, hFormat);
    addFormatToken('k', ['kk', 2], 0, kFormat);

    addFormatToken('hmm', 0, 0, function () {
        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
    });

    addFormatToken('hmmss', 0, 0, function () {
        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
    });

    addFormatToken('Hmm', 0, 0, function () {
        return '' + this.hours() + zeroFill(this.minutes(), 2);
    });

    addFormatToken('Hmmss', 0, 0, function () {
        return '' + this.hours() + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
    });

    function meridiem(token, lowercase) {
        addFormatToken(token, 0, 0, function () {
            return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
        });
    }

    meridiem('a', true);
    meridiem('A', false);

    // ALIASES

    addUnitAlias('hour', 'h');

    // PRIORITY
    addUnitPriority('hour', 13);

    // PARSING

    function matchMeridiem(isStrict, locale) {
        return locale._meridiemParse;
    }

    addRegexToken('a', matchMeridiem);
    addRegexToken('A', matchMeridiem);
    addRegexToken('H', match1to2);
    addRegexToken('h', match1to2);
    addRegexToken('k', match1to2);
    addRegexToken('HH', match1to2, match2);
    addRegexToken('hh', match1to2, match2);
    addRegexToken('kk', match1to2, match2);

    addRegexToken('hmm', match3to4);
    addRegexToken('hmmss', match5to6);
    addRegexToken('Hmm', match3to4);
    addRegexToken('Hmmss', match5to6);

    addParseToken(['H', 'HH'], HOUR);
    addParseToken(['k', 'kk'], function (input, array, config) {
        var kInput = toInt(input);
        array[HOUR] = kInput === 24 ? 0 : kInput;
    });
    addParseToken(['a', 'A'], function (input, array, config) {
        config._isPm = config._locale.isPM(input);
        config._meridiem = input;
    });
    addParseToken(['h', 'hh'], function (input, array, config) {
        array[HOUR] = toInt(input);
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('hmm', function (input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('hmmss', function (input, array, config) {
        var pos1 = input.length - 4;
        var pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('Hmm', function (input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
    });
    addParseToken('Hmmss', function (input, array, config) {
        var pos1 = input.length - 4;
        var pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
    });

    // LOCALES

    function localeIsPM(input) {
        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
        // Using charAt should be more compatible.
        return (input + '').toLowerCase().charAt(0) === 'p';
    }

    var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;
    function localeMeridiem(hours, minutes, isLower) {
        if (hours > 11) {
            return isLower ? 'pm' : 'PM';
        } else {
            return isLower ? 'am' : 'AM';
        }
    }

    // MOMENTS

    // Setting the hour should keep the time, because the user explicitly
    // specified which hour he wants. So trying to maintain the same hour (in
    // a new timezone) makes sense. Adding/subtracting hours does not follow
    // this rule.
    var getSetHour = makeGetSet('Hours', true);

    // months
    // week
    // weekdays
    // meridiem
    var baseConfig = {
        calendar: defaultCalendar,
        longDateFormat: defaultLongDateFormat,
        invalidDate: defaultInvalidDate,
        ordinal: defaultOrdinal,
        dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
        relativeTime: defaultRelativeTime,

        months: defaultLocaleMonths,
        monthsShort: defaultLocaleMonthsShort,

        week: defaultLocaleWeek,

        weekdays: defaultLocaleWeekdays,
        weekdaysMin: defaultLocaleWeekdaysMin,
        weekdaysShort: defaultLocaleWeekdaysShort,

        meridiemParse: defaultLocaleMeridiemParse
    };

    // internal storage for locale config files
    var locales = {};
    var localeFamilies = {};
    var globalLocale;

    function normalizeLocale(key) {
        return key ? key.toLowerCase().replace('_', '-') : key;
    }

    // pick the locale from the array
    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
    function chooseLocale(names) {
        var i = 0,
            j,
            next,
            locale,
            split;

        while (i < names.length) {
            split = normalizeLocale(names[i]).split('-');
            j = split.length;
            next = normalizeLocale(names[i + 1]);
            next = next ? next.split('-') : null;
            while (j > 0) {
                locale = loadLocale(split.slice(0, j).join('-'));
                if (locale) {
                    return locale;
                }
                if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
                    //the next array item is better than a shallower substring of this one
                    break;
                }
                j--;
            }
            i++;
        }
        return null;
    }

    function loadLocale(name) {
        var oldLocale = null;
        // TODO: Find a better way to register and load all the locales in Node
        if (!locales[name] && typeof module !== 'undefined' && module && module.exports) {
            try {
                oldLocale = globalLocale._abbr;
                var aliasedRequire = require;
                __webpack_require__(125)("./" + name);
                getSetGlobalLocale(oldLocale);
            } catch (e) {}
        }
        return locales[name];
    }

    // This function will load locale and then set the global locale.  If
    // no arguments are passed in, it will simply return the current global
    // locale key.
    function getSetGlobalLocale(key, values) {
        var data;
        if (key) {
            if (isUndefined(values)) {
                data = getLocale(key);
            } else {
                data = defineLocale(key, values);
            }

            if (data) {
                // moment.duration._locale = moment._locale = data;
                globalLocale = data;
            }
        }

        return globalLocale._abbr;
    }

    function defineLocale(name, config) {
        if (config !== null) {
            var parentConfig = baseConfig;
            config.abbr = name;
            if (locales[name] != null) {
                deprecateSimple('defineLocaleOverride', 'use moment.updateLocale(localeName, config) to change ' + 'an existing locale. moment.defineLocale(localeName, ' + 'config) should only be used for creating a new locale ' + 'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');
                parentConfig = locales[name]._config;
            } else if (config.parentLocale != null) {
                if (locales[config.parentLocale] != null) {
                    parentConfig = locales[config.parentLocale]._config;
                } else {
                    if (!localeFamilies[config.parentLocale]) {
                        localeFamilies[config.parentLocale] = [];
                    }
                    localeFamilies[config.parentLocale].push({
                        name: name,
                        config: config
                    });
                    return null;
                }
            }
            locales[name] = new Locale(mergeConfigs(parentConfig, config));

            if (localeFamilies[name]) {
                localeFamilies[name].forEach(function (x) {
                    defineLocale(x.name, x.config);
                });
            }

            // backwards compat for now: also set the locale
            // make sure we set the locale AFTER all child locales have been
            // created, so we won't end up with the child locale set.
            getSetGlobalLocale(name);

            return locales[name];
        } else {
            // useful for testing
            delete locales[name];
            return null;
        }
    }

    function updateLocale(name, config) {
        if (config != null) {
            var locale,
                tmpLocale,
                parentConfig = baseConfig;
            // MERGE
            tmpLocale = loadLocale(name);
            if (tmpLocale != null) {
                parentConfig = tmpLocale._config;
            }
            config = mergeConfigs(parentConfig, config);
            locale = new Locale(config);
            locale.parentLocale = locales[name];
            locales[name] = locale;

            // backwards compat for now: also set the locale
            getSetGlobalLocale(name);
        } else {
            // pass null for config to unupdate, useful for tests
            if (locales[name] != null) {
                if (locales[name].parentLocale != null) {
                    locales[name] = locales[name].parentLocale;
                } else if (locales[name] != null) {
                    delete locales[name];
                }
            }
        }
        return locales[name];
    }

    // returns locale data
    function getLocale(key) {
        var locale;

        if (key && key._locale && key._locale._abbr) {
            key = key._locale._abbr;
        }

        if (!key) {
            return globalLocale;
        }

        if (!isArray(key)) {
            //short-circuit everything else
            locale = loadLocale(key);
            if (locale) {
                return locale;
            }
            key = [key];
        }

        return chooseLocale(key);
    }

    function listLocales() {
        return keys(locales);
    }

    function checkOverflow(m) {
        var overflow;
        var a = m._a;

        if (a && getParsingFlags(m).overflow === -2) {
            overflow = a[MONTH] < 0 || a[MONTH] > 11 ? MONTH : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH]) ? DATE : a[HOUR] < 0 || a[HOUR] > 24 || a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0) ? HOUR : a[MINUTE] < 0 || a[MINUTE] > 59 ? MINUTE : a[SECOND] < 0 || a[SECOND] > 59 ? SECOND : a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND : -1;

            if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
                overflow = DATE;
            }
            if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
                overflow = WEEK;
            }
            if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
                overflow = WEEKDAY;
            }

            getParsingFlags(m).overflow = overflow;
        }

        return m;
    }

    // Pick the first defined of two or three arguments.
    function defaults(a, b, c) {
        if (a != null) {
            return a;
        }
        if (b != null) {
            return b;
        }
        return c;
    }

    function currentDateArray(config) {
        // hooks is actually the exported moment object
        var nowValue = new Date(hooks.now());
        if (config._useUTC) {
            return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];
        }
        return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
    }

    // convert an array to a date.
    // the array should mirror the parameters below
    // note: all values past the year are optional and will default to the lowest possible value.
    // [year, month, day , hour, minute, second, millisecond]
    function configFromArray(config) {
        var i,
            date,
            input = [],
            currentDate,
            yearToUse;

        if (config._d) {
            return;
        }

        currentDate = currentDateArray(config);

        //compute day of the year from weeks and weekdays
        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
            dayOfYearFromWeekInfo(config);
        }

        //if the day of the year is set, figure out what it is
        if (config._dayOfYear != null) {
            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

            if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {
                getParsingFlags(config)._overflowDayOfYear = true;
            }

            date = createUTCDate(yearToUse, 0, config._dayOfYear);
            config._a[MONTH] = date.getUTCMonth();
            config._a[DATE] = date.getUTCDate();
        }

        // Default to current date.
        // * if no year, month, day of month are given, default to today
        // * if day of month is given, default month and year
        // * if month is given, default only year
        // * if year is given, don't default anything
        for (i = 0; i < 3 && config._a[i] == null; ++i) {
            config._a[i] = input[i] = currentDate[i];
        }

        // Zero out whatever was not defaulted, including time
        for (; i < 7; i++) {
            config._a[i] = input[i] = config._a[i] == null ? i === 2 ? 1 : 0 : config._a[i];
        }

        // Check for 24:00:00.000
        if (config._a[HOUR] === 24 && config._a[MINUTE] === 0 && config._a[SECOND] === 0 && config._a[MILLISECOND] === 0) {
            config._nextDay = true;
            config._a[HOUR] = 0;
        }

        config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
        // Apply timezone offset from input. The actual utcOffset can be changed
        // with parseZone.
        if (config._tzm != null) {
            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
        }

        if (config._nextDay) {
            config._a[HOUR] = 24;
        }

        // check for mismatching day of week
        if (config._w && typeof config._w.d !== 'undefined' && config._w.d !== config._d.getDay()) {
            getParsingFlags(config).weekdayMismatch = true;
        }
    }

    function dayOfYearFromWeekInfo(config) {
        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;

        w = config._w;
        if (w.GG != null || w.W != null || w.E != null) {
            dow = 1;
            doy = 4;

            // TODO: We need to take the current isoWeekYear, but that depends on
            // how we interpret now (local, utc, fixed offset). So create
            // a now version of current config (take local/utc/offset flags, and
            // create now).
            weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);
            week = defaults(w.W, 1);
            weekday = defaults(w.E, 1);
            if (weekday < 1 || weekday > 7) {
                weekdayOverflow = true;
            }
        } else {
            dow = config._locale._week.dow;
            doy = config._locale._week.doy;

            var curWeek = weekOfYear(createLocal(), dow, doy);

            weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);

            // Default to current week.
            week = defaults(w.w, curWeek.week);

            if (w.d != null) {
                // weekday -- low day numbers are considered next week
                weekday = w.d;
                if (weekday < 0 || weekday > 6) {
                    weekdayOverflow = true;
                }
            } else if (w.e != null) {
                // local weekday -- counting starts from begining of week
                weekday = w.e + dow;
                if (w.e < 0 || w.e > 6) {
                    weekdayOverflow = true;
                }
            } else {
                // default to begining of week
                weekday = dow;
            }
        }
        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
            getParsingFlags(config)._overflowWeeks = true;
        } else if (weekdayOverflow != null) {
            getParsingFlags(config)._overflowWeekday = true;
        } else {
            temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
            config._a[YEAR] = temp.year;
            config._dayOfYear = temp.dayOfYear;
        }
    }

    // iso 8601 regex
    // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
    var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
    var basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;

    var tzRegex = /Z|[+-]\d\d(?::?\d\d)?/;

    var isoDates = [['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/], ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/], ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/], ['GGGG-[W]WW', /\d{4}-W\d\d/, false], ['YYYY-DDD', /\d{4}-\d{3}/], ['YYYY-MM', /\d{4}-\d\d/, false], ['YYYYYYMMDD', /[+-]\d{10}/], ['YYYYMMDD', /\d{8}/],
    // YYYYMM is NOT allowed by the standard
    ['GGGG[W]WWE', /\d{4}W\d{3}/], ['GGGG[W]WW', /\d{4}W\d{2}/, false], ['YYYYDDD', /\d{7}/]];

    // iso time formats and regexes
    var isoTimes = [['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/], ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/], ['HH:mm:ss', /\d\d:\d\d:\d\d/], ['HH:mm', /\d\d:\d\d/], ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/], ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/], ['HHmmss', /\d\d\d\d\d\d/], ['HHmm', /\d\d\d\d/], ['HH', /\d\d/]];

    var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i;

    // date from iso format
    function configFromISO(config) {
        var i,
            l,
            string = config._i,
            match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
            allowTime,
            dateFormat,
            timeFormat,
            tzFormat;

        if (match) {
            getParsingFlags(config).iso = true;

            for (i = 0, l = isoDates.length; i < l; i++) {
                if (isoDates[i][1].exec(match[1])) {
                    dateFormat = isoDates[i][0];
                    allowTime = isoDates[i][2] !== false;
                    break;
                }
            }
            if (dateFormat == null) {
                config._isValid = false;
                return;
            }
            if (match[3]) {
                for (i = 0, l = isoTimes.length; i < l; i++) {
                    if (isoTimes[i][1].exec(match[3])) {
                        // match[2] should be 'T' or space
                        timeFormat = (match[2] || ' ') + isoTimes[i][0];
                        break;
                    }
                }
                if (timeFormat == null) {
                    config._isValid = false;
                    return;
                }
            }
            if (!allowTime && timeFormat != null) {
                config._isValid = false;
                return;
            }
            if (match[4]) {
                if (tzRegex.exec(match[4])) {
                    tzFormat = 'Z';
                } else {
                    config._isValid = false;
                    return;
                }
            }
            config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
            configFromStringAndFormat(config);
        } else {
            config._isValid = false;
        }
    }

    // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3
    var rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/;

    function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
        var result = [untruncateYear(yearStr), defaultLocaleMonthsShort.indexOf(monthStr), parseInt(dayStr, 10), parseInt(hourStr, 10), parseInt(minuteStr, 10)];

        if (secondStr) {
            result.push(parseInt(secondStr, 10));
        }

        return result;
    }

    function untruncateYear(yearStr) {
        var year = parseInt(yearStr, 10);
        if (year <= 49) {
            return 2000 + year;
        } else if (year <= 999) {
            return 1900 + year;
        }
        return year;
    }

    function preprocessRFC2822(s) {
        // Remove comments and folding whitespace and replace multiple-spaces with a single space
        return s.replace(/\([^)]*\)|[\n\t]/g, ' ').replace(/(\s\s+)/g, ' ').trim();
    }

    function checkWeekday(weekdayStr, parsedInput, config) {
        if (weekdayStr) {
            // TODO: Replace the vanilla JS Date object with an indepentent day-of-week check.
            var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),
                weekdayActual = new Date(parsedInput[0], parsedInput[1], parsedInput[2]).getDay();
            if (weekdayProvided !== weekdayActual) {
                getParsingFlags(config).weekdayMismatch = true;
                config._isValid = false;
                return false;
            }
        }
        return true;
    }

    var obsOffsets = {
        UT: 0,
        GMT: 0,
        EDT: -4 * 60,
        EST: -5 * 60,
        CDT: -5 * 60,
        CST: -6 * 60,
        MDT: -6 * 60,
        MST: -7 * 60,
        PDT: -7 * 60,
        PST: -8 * 60
    };

    function calculateOffset(obsOffset, militaryOffset, numOffset) {
        if (obsOffset) {
            return obsOffsets[obsOffset];
        } else if (militaryOffset) {
            // the only allowed military tz is Z
            return 0;
        } else {
            var hm = parseInt(numOffset, 10);
            var m = hm % 100,
                h = (hm - m) / 100;
            return h * 60 + m;
        }
    }

    // date and time from ref 2822 format
    function configFromRFC2822(config) {
        var match = rfc2822.exec(preprocessRFC2822(config._i));
        if (match) {
            var parsedArray = extractFromRFC2822Strings(match[4], match[3], match[2], match[5], match[6], match[7]);
            if (!checkWeekday(match[1], parsedArray, config)) {
                return;
            }

            config._a = parsedArray;
            config._tzm = calculateOffset(match[8], match[9], match[10]);

            config._d = createUTCDate.apply(null, config._a);
            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);

            getParsingFlags(config).rfc2822 = true;
        } else {
            config._isValid = false;
        }
    }

    // date from iso format or fallback
    function configFromString(config) {
        var matched = aspNetJsonRegex.exec(config._i);

        if (matched !== null) {
            config._d = new Date(+matched[1]);
            return;
        }

        configFromISO(config);
        if (config._isValid === false) {
            delete config._isValid;
        } else {
            return;
        }

        configFromRFC2822(config);
        if (config._isValid === false) {
            delete config._isValid;
        } else {
            return;
        }

        // Final attempt, use Input Fallback
        hooks.createFromInputFallback(config);
    }

    hooks.createFromInputFallback = deprecate('value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' + 'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' + 'discouraged and will be removed in an upcoming major release. Please refer to ' + 'http://momentjs.com/guides/#/warnings/js-date/ for more info.', function (config) {
        config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
    });

    // constant that refers to the ISO standard
    hooks.ISO_8601 = function () {};

    // constant that refers to the RFC 2822 form
    hooks.RFC_2822 = function () {};

    // date from string and format string
    function configFromStringAndFormat(config) {
        // TODO: Move this to another part of the creation flow to prevent circular deps
        if (config._f === hooks.ISO_8601) {
            configFromISO(config);
            return;
        }
        if (config._f === hooks.RFC_2822) {
            configFromRFC2822(config);
            return;
        }
        config._a = [];
        getParsingFlags(config).empty = true;

        // This array is used to make a Date, either with `new Date` or `Date.UTC`
        var string = '' + config._i,
            i,
            parsedInput,
            tokens,
            token,
            skipped,
            stringLength = string.length,
            totalParsedInputLength = 0;

        tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];

        for (i = 0; i < tokens.length; i++) {
            token = tokens[i];
            parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
            // console.log('token', token, 'parsedInput', parsedInput,
            //         'regex', getParseRegexForToken(token, config));
            if (parsedInput) {
                skipped = string.substr(0, string.indexOf(parsedInput));
                if (skipped.length > 0) {
                    getParsingFlags(config).unusedInput.push(skipped);
                }
                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
                totalParsedInputLength += parsedInput.length;
            }
            // don't parse if it's not a known token
            if (formatTokenFunctions[token]) {
                if (parsedInput) {
                    getParsingFlags(config).empty = false;
                } else {
                    getParsingFlags(config).unusedTokens.push(token);
                }
                addTimeToArrayFromToken(token, parsedInput, config);
            } else if (config._strict && !parsedInput) {
                getParsingFlags(config).unusedTokens.push(token);
            }
        }

        // add remaining unparsed input length to the string
        getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
        if (string.length > 0) {
            getParsingFlags(config).unusedInput.push(string);
        }

        // clear _12h flag if hour is <= 12
        if (config._a[HOUR] <= 12 && getParsingFlags(config).bigHour === true && config._a[HOUR] > 0) {
            getParsingFlags(config).bigHour = undefined;
        }

        getParsingFlags(config).parsedDateParts = config._a.slice(0);
        getParsingFlags(config).meridiem = config._meridiem;
        // handle meridiem
        config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);

        configFromArray(config);
        checkOverflow(config);
    }

    function meridiemFixWrap(locale, hour, meridiem) {
        var isPm;

        if (meridiem == null) {
            // nothing to do
            return hour;
        }
        if (locale.meridiemHour != null) {
            return locale.meridiemHour(hour, meridiem);
        } else if (locale.isPM != null) {
            // Fallback
            isPm = locale.isPM(meridiem);
            if (isPm && hour < 12) {
                hour += 12;
            }
            if (!isPm && hour === 12) {
                hour = 0;
            }
            return hour;
        } else {
            // this is not supposed to happen
            return hour;
        }
    }

    // date from string and array of format strings
    function configFromStringAndArray(config) {
        var tempConfig, bestMoment, scoreToBeat, i, currentScore;

        if (config._f.length === 0) {
            getParsingFlags(config).invalidFormat = true;
            config._d = new Date(NaN);
            return;
        }

        for (i = 0; i < config._f.length; i++) {
            currentScore = 0;
            tempConfig = copyConfig({}, config);
            if (config._useUTC != null) {
                tempConfig._useUTC = config._useUTC;
            }
            tempConfig._f = config._f[i];
            configFromStringAndFormat(tempConfig);

            if (!isValid(tempConfig)) {
                continue;
            }

            // if there is any input that was not parsed add a penalty for that format
            currentScore += getParsingFlags(tempConfig).charsLeftOver;

            //or tokens
            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;

            getParsingFlags(tempConfig).score = currentScore;

            if (scoreToBeat == null || currentScore < scoreToBeat) {
                scoreToBeat = currentScore;
                bestMoment = tempConfig;
            }
        }

        extend(config, bestMoment || tempConfig);
    }

    function configFromObject(config) {
        if (config._d) {
            return;
        }

        var i = normalizeObjectUnits(config._i);
        config._a = map([i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond], function (obj) {
            return obj && parseInt(obj, 10);
        });

        configFromArray(config);
    }

    function createFromConfig(config) {
        var res = new Moment(checkOverflow(prepareConfig(config)));
        if (res._nextDay) {
            // Adding is smart enough around DST
            res.add(1, 'd');
            res._nextDay = undefined;
        }

        return res;
    }

    function prepareConfig(config) {
        var input = config._i,
            format = config._f;

        config._locale = config._locale || getLocale(config._l);

        if (input === null || format === undefined && input === '') {
            return createInvalid({ nullInput: true });
        }

        if (typeof input === 'string') {
            config._i = input = config._locale.preparse(input);
        }

        if (isMoment(input)) {
            return new Moment(checkOverflow(input));
        } else if (isDate(input)) {
            config._d = input;
        } else if (isArray(format)) {
            configFromStringAndArray(config);
        } else if (format) {
            configFromStringAndFormat(config);
        } else {
            configFromInput(config);
        }

        if (!isValid(config)) {
            config._d = null;
        }

        return config;
    }

    function configFromInput(config) {
        var input = config._i;
        if (isUndefined(input)) {
            config._d = new Date(hooks.now());
        } else if (isDate(input)) {
            config._d = new Date(input.valueOf());
        } else if (typeof input === 'string') {
            configFromString(config);
        } else if (isArray(input)) {
            config._a = map(input.slice(0), function (obj) {
                return parseInt(obj, 10);
            });
            configFromArray(config);
        } else if (isObject(input)) {
            configFromObject(config);
        } else if (isNumber(input)) {
            // from milliseconds
            config._d = new Date(input);
        } else {
            hooks.createFromInputFallback(config);
        }
    }

    function createLocalOrUTC(input, format, locale, strict, isUTC) {
        var c = {};

        if (locale === true || locale === false) {
            strict = locale;
            locale = undefined;
        }

        if (isObject(input) && isObjectEmpty(input) || isArray(input) && input.length === 0) {
            input = undefined;
        }
        // object construction must be done this way.
        // https://github.com/moment/moment/issues/1423
        c._isAMomentObject = true;
        c._useUTC = c._isUTC = isUTC;
        c._l = locale;
        c._i = input;
        c._f = format;
        c._strict = strict;

        return createFromConfig(c);
    }

    function createLocal(input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, false);
    }

    var prototypeMin = deprecate('moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/', function () {
        var other = createLocal.apply(null, arguments);
        if (this.isValid() && other.isValid()) {
            return other < this ? this : other;
        } else {
            return createInvalid();
        }
    });

    var prototypeMax = deprecate('moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/', function () {
        var other = createLocal.apply(null, arguments);
        if (this.isValid() && other.isValid()) {
            return other > this ? this : other;
        } else {
            return createInvalid();
        }
    });

    // Pick a moment m from moments so that m[fn](other) is true for all
    // other. This relies on the function fn to be transitive.
    //
    // moments should either be an array of moment objects or an array, whose
    // first element is an array of moment objects.
    function pickBy(fn, moments) {
        var res, i;
        if (moments.length === 1 && isArray(moments[0])) {
            moments = moments[0];
        }
        if (!moments.length) {
            return createLocal();
        }
        res = moments[0];
        for (i = 1; i < moments.length; ++i) {
            if (!moments[i].isValid() || moments[i][fn](res)) {
                res = moments[i];
            }
        }
        return res;
    }

    // TODO: Use [].sort instead?
    function min() {
        var args = [].slice.call(arguments, 0);

        return pickBy('isBefore', args);
    }

    function max() {
        var args = [].slice.call(arguments, 0);

        return pickBy('isAfter', args);
    }

    var now = function () {
        return Date.now ? Date.now() : +new Date();
    };

    var ordering = ['year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', 'millisecond'];

    function isDurationValid(m) {
        for (var key in m) {
            if (!(indexOf.call(ordering, key) !== -1 && (m[key] == null || !isNaN(m[key])))) {
                return false;
            }
        }

        var unitHasDecimal = false;
        for (var i = 0; i < ordering.length; ++i) {
            if (m[ordering[i]]) {
                if (unitHasDecimal) {
                    return false; // only allow non-integers for smallest unit
                }
                if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
                    unitHasDecimal = true;
                }
            }
        }

        return true;
    }

    function isValid$1() {
        return this._isValid;
    }

    function createInvalid$1() {
        return createDuration(NaN);
    }

    function Duration(duration) {
        var normalizedInput = normalizeObjectUnits(duration),
            years = normalizedInput.year || 0,
            quarters = normalizedInput.quarter || 0,
            months = normalizedInput.month || 0,
            weeks = normalizedInput.week || 0,
            days = normalizedInput.day || 0,
            hours = normalizedInput.hour || 0,
            minutes = normalizedInput.minute || 0,
            seconds = normalizedInput.second || 0,
            milliseconds = normalizedInput.millisecond || 0;

        this._isValid = isDurationValid(normalizedInput);

        // representation for dateAddRemove
        this._milliseconds = +milliseconds + seconds * 1e3 + // 1000
        minutes * 6e4 + // 1000 * 60
        hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
        // Because of dateAddRemove treats 24 hours as different from a
        // day when working around DST, we need to store them separately
        this._days = +days + weeks * 7;
        // It is impossible to translate months into days without knowing
        // which months you are are talking about, so we have to store
        // it separately.
        this._months = +months + quarters * 3 + years * 12;

        this._data = {};

        this._locale = getLocale();

        this._bubble();
    }

    function isDuration(obj) {
        return obj instanceof Duration;
    }

    function absRound(number) {
        if (number < 0) {
            return Math.round(-1 * number) * -1;
        } else {
            return Math.round(number);
        }
    }

    // FORMATTING

    function offset(token, separator) {
        addFormatToken(token, 0, 0, function () {
            var offset = this.utcOffset();
            var sign = '+';
            if (offset < 0) {
                offset = -offset;
                sign = '-';
            }
            return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~offset % 60, 2);
        });
    }

    offset('Z', ':');
    offset('ZZ', '');

    // PARSING

    addRegexToken('Z', matchShortOffset);
    addRegexToken('ZZ', matchShortOffset);
    addParseToken(['Z', 'ZZ'], function (input, array, config) {
        config._useUTC = true;
        config._tzm = offsetFromString(matchShortOffset, input);
    });

    // HELPERS

    // timezone chunker
    // '+10:00' > ['10',  '00']
    // '-1530'  > ['-15', '30']
    var chunkOffset = /([\+\-]|\d\d)/gi;

    function offsetFromString(matcher, string) {
        var matches = (string || '').match(matcher);

        if (matches === null) {
            return null;
        }

        var chunk = matches[matches.length - 1] || [];
        var parts = (chunk + '').match(chunkOffset) || ['-', 0, 0];
        var minutes = +(parts[1] * 60) + toInt(parts[2]);

        return minutes === 0 ? 0 : parts[0] === '+' ? minutes : -minutes;
    }

    // Return a moment from input, that is local/utc/zone equivalent to model.
    function cloneWithOffset(input, model) {
        var res, diff;
        if (model._isUTC) {
            res = model.clone();
            diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
            // Use low-level api, because this fn is low-level api.
            res._d.setTime(res._d.valueOf() + diff);
            hooks.updateOffset(res, false);
            return res;
        } else {
            return createLocal(input).local();
        }
    }

    function getDateOffset(m) {
        // On Firefox.24 Date#getTimezoneOffset returns a floating point.
        // https://github.com/moment/moment/pull/1871
        return -Math.round(m._d.getTimezoneOffset() / 15) * 15;
    }

    // HOOKS

    // This function will be called whenever a moment is mutated.
    // It is intended to keep the offset in sync with the timezone.
    hooks.updateOffset = function () {};

    // MOMENTS

    // keepLocalTime = true means only change the timezone, without
    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
    // +0200, so we adjust the time as needed, to be valid.
    //
    // Keeping the time actually adds/subtracts (one hour)
    // from the actual represented time. That is why we call updateOffset
    // a second time. In case it wants us to change the offset again
    // _changeInProgress == true case, then we have to adjust, because
    // there is no such time in the given timezone.
    function getSetOffset(input, keepLocalTime, keepMinutes) {
        var offset = this._offset || 0,
            localAdjust;
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        if (input != null) {
            if (typeof input === 'string') {
                input = offsetFromString(matchShortOffset, input);
                if (input === null) {
                    return this;
                }
            } else if (Math.abs(input) < 16 && !keepMinutes) {
                input = input * 60;
            }
            if (!this._isUTC && keepLocalTime) {
                localAdjust = getDateOffset(this);
            }
            this._offset = input;
            this._isUTC = true;
            if (localAdjust != null) {
                this.add(localAdjust, 'm');
            }
            if (offset !== input) {
                if (!keepLocalTime || this._changeInProgress) {
                    addSubtract(this, createDuration(input - offset, 'm'), 1, false);
                } else if (!this._changeInProgress) {
                    this._changeInProgress = true;
                    hooks.updateOffset(this, true);
                    this._changeInProgress = null;
                }
            }
            return this;
        } else {
            return this._isUTC ? offset : getDateOffset(this);
        }
    }

    function getSetZone(input, keepLocalTime) {
        if (input != null) {
            if (typeof input !== 'string') {
                input = -input;
            }

            this.utcOffset(input, keepLocalTime);

            return this;
        } else {
            return -this.utcOffset();
        }
    }

    function setOffsetToUTC(keepLocalTime) {
        return this.utcOffset(0, keepLocalTime);
    }

    function setOffsetToLocal(keepLocalTime) {
        if (this._isUTC) {
            this.utcOffset(0, keepLocalTime);
            this._isUTC = false;

            if (keepLocalTime) {
                this.subtract(getDateOffset(this), 'm');
            }
        }
        return this;
    }

    function setOffsetToParsedOffset() {
        if (this._tzm != null) {
            this.utcOffset(this._tzm, false, true);
        } else if (typeof this._i === 'string') {
            var tZone = offsetFromString(matchOffset, this._i);
            if (tZone != null) {
                this.utcOffset(tZone);
            } else {
                this.utcOffset(0, true);
            }
        }
        return this;
    }

    function hasAlignedHourOffset(input) {
        if (!this.isValid()) {
            return false;
        }
        input = input ? createLocal(input).utcOffset() : 0;

        return (this.utcOffset() - input) % 60 === 0;
    }

    function isDaylightSavingTime() {
        return this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset();
    }

    function isDaylightSavingTimeShifted() {
        if (!isUndefined(this._isDSTShifted)) {
            return this._isDSTShifted;
        }

        var c = {};

        copyConfig(c, this);
        c = prepareConfig(c);

        if (c._a) {
            var other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
            this._isDSTShifted = this.isValid() && compareArrays(c._a, other.toArray()) > 0;
        } else {
            this._isDSTShifted = false;
        }

        return this._isDSTShifted;
    }

    function isLocal() {
        return this.isValid() ? !this._isUTC : false;
    }

    function isUtcOffset() {
        return this.isValid() ? this._isUTC : false;
    }

    function isUtc() {
        return this.isValid() ? this._isUTC && this._offset === 0 : false;
    }

    // ASP.NET json date format regex
    var aspNetRegex = /^(\-|\+)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/;

    // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
    // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
    // and further modified to allow for strings containing both week and day
    var isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;

    function createDuration(input, key) {
        var duration = input,

        // matching against regexp is expensive, do it on demand
        match = null,
            sign,
            ret,
            diffRes;

        if (isDuration(input)) {
            duration = {
                ms: input._milliseconds,
                d: input._days,
                M: input._months
            };
        } else if (isNumber(input)) {
            duration = {};
            if (key) {
                duration[key] = input;
            } else {
                duration.milliseconds = input;
            }
        } else if (!!(match = aspNetRegex.exec(input))) {
            sign = match[1] === '-' ? -1 : 1;
            duration = {
                y: 0,
                d: toInt(match[DATE]) * sign,
                h: toInt(match[HOUR]) * sign,
                m: toInt(match[MINUTE]) * sign,
                s: toInt(match[SECOND]) * sign,
                ms: toInt(absRound(match[MILLISECOND] * 1000)) * sign // the millisecond decimal point is included in the match
            };
        } else if (!!(match = isoRegex.exec(input))) {
            sign = match[1] === '-' ? -1 : match[1] === '+' ? 1 : 1;
            duration = {
                y: parseIso(match[2], sign),
                M: parseIso(match[3], sign),
                w: parseIso(match[4], sign),
                d: parseIso(match[5], sign),
                h: parseIso(match[6], sign),
                m: parseIso(match[7], sign),
                s: parseIso(match[8], sign)
            };
        } else if (duration == null) {
            // checks for null or undefined
            duration = {};
        } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {
            diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));

            duration = {};
            duration.ms = diffRes.milliseconds;
            duration.M = diffRes.months;
        }

        ret = new Duration(duration);

        if (isDuration(input) && hasOwnProp(input, '_locale')) {
            ret._locale = input._locale;
        }

        return ret;
    }

    createDuration.fn = Duration.prototype;
    createDuration.invalid = createInvalid$1;

    function parseIso(inp, sign) {
        // We'd normally use ~~inp for this, but unfortunately it also
        // converts floats to ints.
        // inp may be undefined, so careful calling replace on it.
        var res = inp && parseFloat(inp.replace(',', '.'));
        // apply sign while we're at it
        return (isNaN(res) ? 0 : res) * sign;
    }

    function positiveMomentsDifference(base, other) {
        var res = { milliseconds: 0, months: 0 };

        res.months = other.month() - base.month() + (other.year() - base.year()) * 12;
        if (base.clone().add(res.months, 'M').isAfter(other)) {
            --res.months;
        }

        res.milliseconds = +other - +base.clone().add(res.months, 'M');

        return res;
    }

    function momentsDifference(base, other) {
        var res;
        if (!(base.isValid() && other.isValid())) {
            return { milliseconds: 0, months: 0 };
        }

        other = cloneWithOffset(other, base);
        if (base.isBefore(other)) {
            res = positiveMomentsDifference(base, other);
        } else {
            res = positiveMomentsDifference(other, base);
            res.milliseconds = -res.milliseconds;
            res.months = -res.months;
        }

        return res;
    }

    // TODO: remove 'name' arg after deprecation is removed
    function createAdder(direction, name) {
        return function (val, period) {
            var dur, tmp;
            //invert the arguments, but complain about it
            if (period !== null && !isNaN(+period)) {
                deprecateSimple(name, 'moment().' + name + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' + 'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');
                tmp = val;val = period;period = tmp;
            }

            val = typeof val === 'string' ? +val : val;
            dur = createDuration(val, period);
            addSubtract(this, dur, direction);
            return this;
        };
    }

    function addSubtract(mom, duration, isAdding, updateOffset) {
        var milliseconds = duration._milliseconds,
            days = absRound(duration._days),
            months = absRound(duration._months);

        if (!mom.isValid()) {
            // No op
            return;
        }

        updateOffset = updateOffset == null ? true : updateOffset;

        if (months) {
            setMonth(mom, get(mom, 'Month') + months * isAdding);
        }
        if (days) {
            set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
        }
        if (milliseconds) {
            mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
        }
        if (updateOffset) {
            hooks.updateOffset(mom, days || months);
        }
    }

    var add = createAdder(1, 'add');
    var subtract = createAdder(-1, 'subtract');

    function getCalendarFormat(myMoment, now) {
        var diff = myMoment.diff(now, 'days', true);
        return diff < -6 ? 'sameElse' : diff < -1 ? 'lastWeek' : diff < 0 ? 'lastDay' : diff < 1 ? 'sameDay' : diff < 2 ? 'nextDay' : diff < 7 ? 'nextWeek' : 'sameElse';
    }

    function calendar$1(time, formats) {
        // We want to compare the start of today, vs this.
        // Getting start-of-today depends on whether we're local/utc/offset or not.
        var now = time || createLocal(),
            sod = cloneWithOffset(now, this).startOf('day'),
            format = hooks.calendarFormat(this, sod) || 'sameElse';

        var output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);

        return this.format(output || this.localeData().calendar(format, this, createLocal(now)));
    }

    function clone() {
        return new Moment(this);
    }

    function isAfter(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
        if (units === 'millisecond') {
            return this.valueOf() > localInput.valueOf();
        } else {
            return localInput.valueOf() < this.clone().startOf(units).valueOf();
        }
    }

    function isBefore(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
        if (units === 'millisecond') {
            return this.valueOf() < localInput.valueOf();
        } else {
            return this.clone().endOf(units).valueOf() < localInput.valueOf();
        }
    }

    function isBetween(from, to, units, inclusivity) {
        inclusivity = inclusivity || '()';
        return (inclusivity[0] === '(' ? this.isAfter(from, units) : !this.isBefore(from, units)) && (inclusivity[1] === ')' ? this.isBefore(to, units) : !this.isAfter(to, units));
    }

    function isSame(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input),
            inputMs;
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(units || 'millisecond');
        if (units === 'millisecond') {
            return this.valueOf() === localInput.valueOf();
        } else {
            inputMs = localInput.valueOf();
            return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
        }
    }

    function isSameOrAfter(input, units) {
        return this.isSame(input, units) || this.isAfter(input, units);
    }

    function isSameOrBefore(input, units) {
        return this.isSame(input, units) || this.isBefore(input, units);
    }

    function diff(input, units, asFloat) {
        var that, zoneDelta, delta, output;

        if (!this.isValid()) {
            return NaN;
        }

        that = cloneWithOffset(input, this);

        if (!that.isValid()) {
            return NaN;
        }

        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;

        units = normalizeUnits(units);

        switch (units) {
            case 'year':
                output = monthDiff(this, that) / 12;break;
            case 'month':
                output = monthDiff(this, that);break;
            case 'quarter':
                output = monthDiff(this, that) / 3;break;
            case 'second':
                output = (this - that) / 1e3;break; // 1000
            case 'minute':
                output = (this - that) / 6e4;break; // 1000 * 60
            case 'hour':
                output = (this - that) / 36e5;break; // 1000 * 60 * 60
            case 'day':
                output = (this - that - zoneDelta) / 864e5;break; // 1000 * 60 * 60 * 24, negate dst
            case 'week':
                output = (this - that - zoneDelta) / 6048e5;break; // 1000 * 60 * 60 * 24 * 7, negate dst
            default:
                output = this - that;
        }

        return asFloat ? output : absFloor(output);
    }

    function monthDiff(a, b) {
        // difference in months
        var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()),

        // b is in (anchor - 1 month, anchor + 1 month)
        anchor = a.clone().add(wholeMonthDiff, 'months'),
            anchor2,
            adjust;

        if (b - anchor < 0) {
            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
            // linear across the month
            adjust = (b - anchor) / (anchor - anchor2);
        } else {
            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
            // linear across the month
            adjust = (b - anchor) / (anchor2 - anchor);
        }

        //check for negative zero, return zero if negative zero
        return -(wholeMonthDiff + adjust) || 0;
    }

    hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
    hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';

    function toString() {
        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
    }

    function toISOString() {
        if (!this.isValid()) {
            return null;
        }
        var m = this.clone().utc();
        if (m.year() < 0 || m.year() > 9999) {
            return formatMoment(m, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
        }
        if (isFunction(Date.prototype.toISOString)) {
            // native implementation is ~50x faster, use it when we can
            return this.toDate().toISOString();
        }
        return formatMoment(m, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
    }

    /**
     * Return a human readable representation of a moment that can
     * also be evaluated to get a new moment which is the same
     *
     * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
     */
    function inspect() {
        if (!this.isValid()) {
            return 'moment.invalid(/* ' + this._i + ' */)';
        }
        var func = 'moment';
        var zone = '';
        if (!this.isLocal()) {
            func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
            zone = 'Z';
        }
        var prefix = '[' + func + '("]';
        var year = 0 <= this.year() && this.year() <= 9999 ? 'YYYY' : 'YYYYYY';
        var datetime = '-MM-DD[T]HH:mm:ss.SSS';
        var suffix = zone + '[")]';

        return this.format(prefix + year + datetime + suffix);
    }

    function format(inputString) {
        if (!inputString) {
            inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
        }
        var output = formatMoment(this, inputString);
        return this.localeData().postformat(output);
    }

    function from(time, withoutSuffix) {
        if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
            return createDuration({ to: this, from: time }).locale(this.locale()).humanize(!withoutSuffix);
        } else {
            return this.localeData().invalidDate();
        }
    }

    function fromNow(withoutSuffix) {
        return this.from(createLocal(), withoutSuffix);
    }

    function to(time, withoutSuffix) {
        if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
            return createDuration({ from: this, to: time }).locale(this.locale()).humanize(!withoutSuffix);
        } else {
            return this.localeData().invalidDate();
        }
    }

    function toNow(withoutSuffix) {
        return this.to(createLocal(), withoutSuffix);
    }

    // If passed a locale key, it will set the locale for this
    // instance.  Otherwise, it will return the locale configuration
    // variables for this instance.
    function locale(key) {
        var newLocaleData;

        if (key === undefined) {
            return this._locale._abbr;
        } else {
            newLocaleData = getLocale(key);
            if (newLocaleData != null) {
                this._locale = newLocaleData;
            }
            return this;
        }
    }

    var lang = deprecate('moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.', function (key) {
        if (key === undefined) {
            return this.localeData();
        } else {
            return this.locale(key);
        }
    });

    function localeData() {
        return this._locale;
    }

    function startOf(units) {
        units = normalizeUnits(units);
        // the following switch intentionally omits break keywords
        // to utilize falling through the cases.
        switch (units) {
            case 'year':
                this.month(0);
            /* falls through */
            case 'quarter':
            case 'month':
                this.date(1);
            /* falls through */
            case 'week':
            case 'isoWeek':
            case 'day':
            case 'date':
                this.hours(0);
            /* falls through */
            case 'hour':
                this.minutes(0);
            /* falls through */
            case 'minute':
                this.seconds(0);
            /* falls through */
            case 'second':
                this.milliseconds(0);
        }

        // weeks are a special case
        if (units === 'week') {
            this.weekday(0);
        }
        if (units === 'isoWeek') {
            this.isoWeekday(1);
        }

        // quarters are also special
        if (units === 'quarter') {
            this.month(Math.floor(this.month() / 3) * 3);
        }

        return this;
    }

    function endOf(units) {
        units = normalizeUnits(units);
        if (units === undefined || units === 'millisecond') {
            return this;
        }

        // 'date' is an alias for 'day', so it should be considered as such.
        if (units === 'date') {
            units = 'day';
        }

        return this.startOf(units).add(1, units === 'isoWeek' ? 'week' : units).subtract(1, 'ms');
    }

    function valueOf() {
        return this._d.valueOf() - (this._offset || 0) * 60000;
    }

    function unix() {
        return Math.floor(this.valueOf() / 1000);
    }

    function toDate() {
        return new Date(this.valueOf());
    }

    function toArray() {
        var m = this;
        return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
    }

    function toObject() {
        var m = this;
        return {
            years: m.year(),
            months: m.month(),
            date: m.date(),
            hours: m.hours(),
            minutes: m.minutes(),
            seconds: m.seconds(),
            milliseconds: m.milliseconds()
        };
    }

    function toJSON() {
        // new Date(NaN).toJSON() === null
        return this.isValid() ? this.toISOString() : null;
    }

    function isValid$2() {
        return isValid(this);
    }

    function parsingFlags() {
        return extend({}, getParsingFlags(this));
    }

    function invalidAt() {
        return getParsingFlags(this).overflow;
    }

    function creationData() {
        return {
            input: this._i,
            format: this._f,
            locale: this._locale,
            isUTC: this._isUTC,
            strict: this._strict
        };
    }

    // FORMATTING

    addFormatToken(0, ['gg', 2], 0, function () {
        return this.weekYear() % 100;
    });

    addFormatToken(0, ['GG', 2], 0, function () {
        return this.isoWeekYear() % 100;
    });

    function addWeekYearFormatToken(token, getter) {
        addFormatToken(0, [token, token.length], 0, getter);
    }

    addWeekYearFormatToken('gggg', 'weekYear');
    addWeekYearFormatToken('ggggg', 'weekYear');
    addWeekYearFormatToken('GGGG', 'isoWeekYear');
    addWeekYearFormatToken('GGGGG', 'isoWeekYear');

    // ALIASES

    addUnitAlias('weekYear', 'gg');
    addUnitAlias('isoWeekYear', 'GG');

    // PRIORITY

    addUnitPriority('weekYear', 1);
    addUnitPriority('isoWeekYear', 1);

    // PARSING

    addRegexToken('G', matchSigned);
    addRegexToken('g', matchSigned);
    addRegexToken('GG', match1to2, match2);
    addRegexToken('gg', match1to2, match2);
    addRegexToken('GGGG', match1to4, match4);
    addRegexToken('gggg', match1to4, match4);
    addRegexToken('GGGGG', match1to6, match6);
    addRegexToken('ggggg', match1to6, match6);

    addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {
        week[token.substr(0, 2)] = toInt(input);
    });

    addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
        week[token] = hooks.parseTwoDigitYear(input);
    });

    // MOMENTS

    function getSetWeekYear(input) {
        return getSetWeekYearHelper.call(this, input, this.week(), this.weekday(), this.localeData()._week.dow, this.localeData()._week.doy);
    }

    function getSetISOWeekYear(input) {
        return getSetWeekYearHelper.call(this, input, this.isoWeek(), this.isoWeekday(), 1, 4);
    }

    function getISOWeeksInYear() {
        return weeksInYear(this.year(), 1, 4);
    }

    function getWeeksInYear() {
        var weekInfo = this.localeData()._week;
        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
    }

    function getSetWeekYearHelper(input, week, weekday, dow, doy) {
        var weeksTarget;
        if (input == null) {
            return weekOfYear(this, dow, doy).year;
        } else {
            weeksTarget = weeksInYear(input, dow, doy);
            if (week > weeksTarget) {
                week = weeksTarget;
            }
            return setWeekAll.call(this, input, week, weekday, dow, doy);
        }
    }

    function setWeekAll(weekYear, week, weekday, dow, doy) {
        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
            date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);

        this.year(date.getUTCFullYear());
        this.month(date.getUTCMonth());
        this.date(date.getUTCDate());
        return this;
    }

    // FORMATTING

    addFormatToken('Q', 0, 'Qo', 'quarter');

    // ALIASES

    addUnitAlias('quarter', 'Q');

    // PRIORITY

    addUnitPriority('quarter', 7);

    // PARSING

    addRegexToken('Q', match1);
    addParseToken('Q', function (input, array) {
        array[MONTH] = (toInt(input) - 1) * 3;
    });

    // MOMENTS

    function getSetQuarter(input) {
        return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
    }

    // FORMATTING

    addFormatToken('D', ['DD', 2], 'Do', 'date');

    // ALIASES

    addUnitAlias('date', 'D');

    // PRIOROITY
    addUnitPriority('date', 9);

    // PARSING

    addRegexToken('D', match1to2);
    addRegexToken('DD', match1to2, match2);
    addRegexToken('Do', function (isStrict, locale) {
        // TODO: Remove "ordinalParse" fallback in next major release.
        return isStrict ? locale._dayOfMonthOrdinalParse || locale._ordinalParse : locale._dayOfMonthOrdinalParseLenient;
    });

    addParseToken(['D', 'DD'], DATE);
    addParseToken('Do', function (input, array) {
        array[DATE] = toInt(input.match(match1to2)[0], 10);
    });

    // MOMENTS

    var getSetDayOfMonth = makeGetSet('Date', true);

    // FORMATTING

    addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

    // ALIASES

    addUnitAlias('dayOfYear', 'DDD');

    // PRIORITY
    addUnitPriority('dayOfYear', 4);

    // PARSING

    addRegexToken('DDD', match1to3);
    addRegexToken('DDDD', match3);
    addParseToken(['DDD', 'DDDD'], function (input, array, config) {
        config._dayOfYear = toInt(input);
    });

    // HELPERS

    // MOMENTS

    function getSetDayOfYear(input) {
        var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
        return input == null ? dayOfYear : this.add(input - dayOfYear, 'd');
    }

    // FORMATTING

    addFormatToken('m', ['mm', 2], 0, 'minute');

    // ALIASES

    addUnitAlias('minute', 'm');

    // PRIORITY

    addUnitPriority('minute', 14);

    // PARSING

    addRegexToken('m', match1to2);
    addRegexToken('mm', match1to2, match2);
    addParseToken(['m', 'mm'], MINUTE);

    // MOMENTS

    var getSetMinute = makeGetSet('Minutes', false);

    // FORMATTING

    addFormatToken('s', ['ss', 2], 0, 'second');

    // ALIASES

    addUnitAlias('second', 's');

    // PRIORITY

    addUnitPriority('second', 15);

    // PARSING

    addRegexToken('s', match1to2);
    addRegexToken('ss', match1to2, match2);
    addParseToken(['s', 'ss'], SECOND);

    // MOMENTS

    var getSetSecond = makeGetSet('Seconds', false);

    // FORMATTING

    addFormatToken('S', 0, 0, function () {
        return ~~(this.millisecond() / 100);
    });

    addFormatToken(0, ['SS', 2], 0, function () {
        return ~~(this.millisecond() / 10);
    });

    addFormatToken(0, ['SSS', 3], 0, 'millisecond');
    addFormatToken(0, ['SSSS', 4], 0, function () {
        return this.millisecond() * 10;
    });
    addFormatToken(0, ['SSSSS', 5], 0, function () {
        return this.millisecond() * 100;
    });
    addFormatToken(0, ['SSSSSS', 6], 0, function () {
        return this.millisecond() * 1000;
    });
    addFormatToken(0, ['SSSSSSS', 7], 0, function () {
        return this.millisecond() * 10000;
    });
    addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
        return this.millisecond() * 100000;
    });
    addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
        return this.millisecond() * 1000000;
    });

    // ALIASES

    addUnitAlias('millisecond', 'ms');

    // PRIORITY

    addUnitPriority('millisecond', 16);

    // PARSING

    addRegexToken('S', match1to3, match1);
    addRegexToken('SS', match1to3, match2);
    addRegexToken('SSS', match1to3, match3);

    var token;
    for (token = 'SSSS'; token.length <= 9; token += 'S') {
        addRegexToken(token, matchUnsigned);
    }

    function parseMs(input, array) {
        array[MILLISECOND] = toInt(('0.' + input) * 1000);
    }

    for (token = 'S'; token.length <= 9; token += 'S') {
        addParseToken(token, parseMs);
    }
    // MOMENTS

    var getSetMillisecond = makeGetSet('Milliseconds', false);

    // FORMATTING

    addFormatToken('z', 0, 0, 'zoneAbbr');
    addFormatToken('zz', 0, 0, 'zoneName');

    // MOMENTS

    function getZoneAbbr() {
        return this._isUTC ? 'UTC' : '';
    }

    function getZoneName() {
        return this._isUTC ? 'Coordinated Universal Time' : '';
    }

    var proto = Moment.prototype;

    proto.add = add;
    proto.calendar = calendar$1;
    proto.clone = clone;
    proto.diff = diff;
    proto.endOf = endOf;
    proto.format = format;
    proto.from = from;
    proto.fromNow = fromNow;
    proto.to = to;
    proto.toNow = toNow;
    proto.get = stringGet;
    proto.invalidAt = invalidAt;
    proto.isAfter = isAfter;
    proto.isBefore = isBefore;
    proto.isBetween = isBetween;
    proto.isSame = isSame;
    proto.isSameOrAfter = isSameOrAfter;
    proto.isSameOrBefore = isSameOrBefore;
    proto.isValid = isValid$2;
    proto.lang = lang;
    proto.locale = locale;
    proto.localeData = localeData;
    proto.max = prototypeMax;
    proto.min = prototypeMin;
    proto.parsingFlags = parsingFlags;
    proto.set = stringSet;
    proto.startOf = startOf;
    proto.subtract = subtract;
    proto.toArray = toArray;
    proto.toObject = toObject;
    proto.toDate = toDate;
    proto.toISOString = toISOString;
    proto.inspect = inspect;
    proto.toJSON = toJSON;
    proto.toString = toString;
    proto.unix = unix;
    proto.valueOf = valueOf;
    proto.creationData = creationData;

    // Year
    proto.year = getSetYear;
    proto.isLeapYear = getIsLeapYear;

    // Week Year
    proto.weekYear = getSetWeekYear;
    proto.isoWeekYear = getSetISOWeekYear;

    // Quarter
    proto.quarter = proto.quarters = getSetQuarter;

    // Month
    proto.month = getSetMonth;
    proto.daysInMonth = getDaysInMonth;

    // Week
    proto.week = proto.weeks = getSetWeek;
    proto.isoWeek = proto.isoWeeks = getSetISOWeek;
    proto.weeksInYear = getWeeksInYear;
    proto.isoWeeksInYear = getISOWeeksInYear;

    // Day
    proto.date = getSetDayOfMonth;
    proto.day = proto.days = getSetDayOfWeek;
    proto.weekday = getSetLocaleDayOfWeek;
    proto.isoWeekday = getSetISODayOfWeek;
    proto.dayOfYear = getSetDayOfYear;

    // Hour
    proto.hour = proto.hours = getSetHour;

    // Minute
    proto.minute = proto.minutes = getSetMinute;

    // Second
    proto.second = proto.seconds = getSetSecond;

    // Millisecond
    proto.millisecond = proto.milliseconds = getSetMillisecond;

    // Offset
    proto.utcOffset = getSetOffset;
    proto.utc = setOffsetToUTC;
    proto.local = setOffsetToLocal;
    proto.parseZone = setOffsetToParsedOffset;
    proto.hasAlignedHourOffset = hasAlignedHourOffset;
    proto.isDST = isDaylightSavingTime;
    proto.isLocal = isLocal;
    proto.isUtcOffset = isUtcOffset;
    proto.isUtc = isUtc;
    proto.isUTC = isUtc;

    // Timezone
    proto.zoneAbbr = getZoneAbbr;
    proto.zoneName = getZoneName;

    // Deprecations
    proto.dates = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
    proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
    proto.years = deprecate('years accessor is deprecated. Use year instead', getSetYear);
    proto.zone = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);
    proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);

    function createUnix(input) {
        return createLocal(input * 1000);
    }

    function createInZone() {
        return createLocal.apply(null, arguments).parseZone();
    }

    function preParsePostFormat(string) {
        return string;
    }

    var proto$1 = Locale.prototype;

    proto$1.calendar = calendar;
    proto$1.longDateFormat = longDateFormat;
    proto$1.invalidDate = invalidDate;
    proto$1.ordinal = ordinal;
    proto$1.preparse = preParsePostFormat;
    proto$1.postformat = preParsePostFormat;
    proto$1.relativeTime = relativeTime;
    proto$1.pastFuture = pastFuture;
    proto$1.set = set;

    // Month
    proto$1.months = localeMonths;
    proto$1.monthsShort = localeMonthsShort;
    proto$1.monthsParse = localeMonthsParse;
    proto$1.monthsRegex = monthsRegex;
    proto$1.monthsShortRegex = monthsShortRegex;

    // Week
    proto$1.week = localeWeek;
    proto$1.firstDayOfYear = localeFirstDayOfYear;
    proto$1.firstDayOfWeek = localeFirstDayOfWeek;

    // Day of Week
    proto$1.weekdays = localeWeekdays;
    proto$1.weekdaysMin = localeWeekdaysMin;
    proto$1.weekdaysShort = localeWeekdaysShort;
    proto$1.weekdaysParse = localeWeekdaysParse;

    proto$1.weekdaysRegex = weekdaysRegex;
    proto$1.weekdaysShortRegex = weekdaysShortRegex;
    proto$1.weekdaysMinRegex = weekdaysMinRegex;

    // Hours
    proto$1.isPM = localeIsPM;
    proto$1.meridiem = localeMeridiem;

    function get$1(format, index, field, setter) {
        var locale = getLocale();
        var utc = createUTC().set(setter, index);
        return locale[field](utc, format);
    }

    function listMonthsImpl(format, index, field) {
        if (isNumber(format)) {
            index = format;
            format = undefined;
        }

        format = format || '';

        if (index != null) {
            return get$1(format, index, field, 'month');
        }

        var i;
        var out = [];
        for (i = 0; i < 12; i++) {
            out[i] = get$1(format, i, field, 'month');
        }
        return out;
    }

    // ()
    // (5)
    // (fmt, 5)
    // (fmt)
    // (true)
    // (true, 5)
    // (true, fmt, 5)
    // (true, fmt)
    function listWeekdaysImpl(localeSorted, format, index, field) {
        if (typeof localeSorted === 'boolean') {
            if (isNumber(format)) {
                index = format;
                format = undefined;
            }

            format = format || '';
        } else {
            format = localeSorted;
            index = format;
            localeSorted = false;

            if (isNumber(format)) {
                index = format;
                format = undefined;
            }

            format = format || '';
        }

        var locale = getLocale(),
            shift = localeSorted ? locale._week.dow : 0;

        if (index != null) {
            return get$1(format, (index + shift) % 7, field, 'day');
        }

        var i;
        var out = [];
        for (i = 0; i < 7; i++) {
            out[i] = get$1(format, (i + shift) % 7, field, 'day');
        }
        return out;
    }

    function listMonths(format, index) {
        return listMonthsImpl(format, index, 'months');
    }

    function listMonthsShort(format, index) {
        return listMonthsImpl(format, index, 'monthsShort');
    }

    function listWeekdays(localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
    }

    function listWeekdaysShort(localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
    }

    function listWeekdaysMin(localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
    }

    getSetGlobalLocale('en', {
        dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
        ordinal: function (number) {
            var b = number % 10,
                output = toInt(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';
            return number + output;
        }
    });

    // Side effect imports
    hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', getSetGlobalLocale);
    hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', getLocale);

    var mathAbs = Math.abs;

    function abs() {
        var data = this._data;

        this._milliseconds = mathAbs(this._milliseconds);
        this._days = mathAbs(this._days);
        this._months = mathAbs(this._months);

        data.milliseconds = mathAbs(data.milliseconds);
        data.seconds = mathAbs(data.seconds);
        data.minutes = mathAbs(data.minutes);
        data.hours = mathAbs(data.hours);
        data.months = mathAbs(data.months);
        data.years = mathAbs(data.years);

        return this;
    }

    function addSubtract$1(duration, input, value, direction) {
        var other = createDuration(input, value);

        duration._milliseconds += direction * other._milliseconds;
        duration._days += direction * other._days;
        duration._months += direction * other._months;

        return duration._bubble();
    }

    // supports only 2.0-style add(1, 's') or add(duration)
    function add$1(input, value) {
        return addSubtract$1(this, input, value, 1);
    }

    // supports only 2.0-style subtract(1, 's') or subtract(duration)
    function subtract$1(input, value) {
        return addSubtract$1(this, input, value, -1);
    }

    function absCeil(number) {
        if (number < 0) {
            return Math.floor(number);
        } else {
            return Math.ceil(number);
        }
    }

    function bubble() {
        var milliseconds = this._milliseconds;
        var days = this._days;
        var months = this._months;
        var data = this._data;
        var seconds, minutes, hours, years, monthsFromDays;

        // if we have a mix of positive and negative values, bubble down first
        // check: https://github.com/moment/moment/issues/2166
        if (!(milliseconds >= 0 && days >= 0 && months >= 0 || milliseconds <= 0 && days <= 0 && months <= 0)) {
            milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
            days = 0;
            months = 0;
        }

        // The following code bubbles up values, see the tests for
        // examples of what that means.
        data.milliseconds = milliseconds % 1000;

        seconds = absFloor(milliseconds / 1000);
        data.seconds = seconds % 60;

        minutes = absFloor(seconds / 60);
        data.minutes = minutes % 60;

        hours = absFloor(minutes / 60);
        data.hours = hours % 24;

        days += absFloor(hours / 24);

        // convert days to months
        monthsFromDays = absFloor(daysToMonths(days));
        months += monthsFromDays;
        days -= absCeil(monthsToDays(monthsFromDays));

        // 12 months -> 1 year
        years = absFloor(months / 12);
        months %= 12;

        data.days = days;
        data.months = months;
        data.years = years;

        return this;
    }

    function daysToMonths(days) {
        // 400 years have 146097 days (taking into account leap year rules)
        // 400 years have 12 months === 4800
        return days * 4800 / 146097;
    }

    function monthsToDays(months) {
        // the reverse of daysToMonths
        return months * 146097 / 4800;
    }

    function as(units) {
        if (!this.isValid()) {
            return NaN;
        }
        var days;
        var months;
        var milliseconds = this._milliseconds;

        units = normalizeUnits(units);

        if (units === 'month' || units === 'year') {
            days = this._days + milliseconds / 864e5;
            months = this._months + daysToMonths(days);
            return units === 'month' ? months : months / 12;
        } else {
            // handle milliseconds separately because of floating point math errors (issue #1867)
            days = this._days + Math.round(monthsToDays(this._months));
            switch (units) {
                case 'week':
                    return days / 7 + milliseconds / 6048e5;
                case 'day':
                    return days + milliseconds / 864e5;
                case 'hour':
                    return days * 24 + milliseconds / 36e5;
                case 'minute':
                    return days * 1440 + milliseconds / 6e4;
                case 'second':
                    return days * 86400 + milliseconds / 1000;
                // Math.floor prevents floating point math errors here
                case 'millisecond':
                    return Math.floor(days * 864e5) + milliseconds;
                default:
                    throw new Error('Unknown unit ' + units);
            }
        }
    }

    // TODO: Use this.as('ms')?
    function valueOf$1() {
        if (!this.isValid()) {
            return NaN;
        }
        return this._milliseconds + this._days * 864e5 + this._months % 12 * 2592e6 + toInt(this._months / 12) * 31536e6;
    }

    function makeAs(alias) {
        return function () {
            return this.as(alias);
        };
    }

    var asMilliseconds = makeAs('ms');
    var asSeconds = makeAs('s');
    var asMinutes = makeAs('m');
    var asHours = makeAs('h');
    var asDays = makeAs('d');
    var asWeeks = makeAs('w');
    var asMonths = makeAs('M');
    var asYears = makeAs('y');

    function clone$1() {
        return createDuration(this);
    }

    function get$2(units) {
        units = normalizeUnits(units);
        return this.isValid() ? this[units + 's']() : NaN;
    }

    function makeGetter(name) {
        return function () {
            return this.isValid() ? this._data[name] : NaN;
        };
    }

    var milliseconds = makeGetter('milliseconds');
    var seconds = makeGetter('seconds');
    var minutes = makeGetter('minutes');
    var hours = makeGetter('hours');
    var days = makeGetter('days');
    var months = makeGetter('months');
    var years = makeGetter('years');

    function weeks() {
        return absFloor(this.days() / 7);
    }

    var round = Math.round;
    var thresholds = {
        ss: 44, // a few seconds to seconds
        s: 45, // seconds to minute
        m: 45, // minutes to hour
        h: 22, // hours to day
        d: 26, // days to month
        M: 11 // months to year
    };

    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
    }

    function relativeTime$1(posNegDuration, withoutSuffix, locale) {
        var duration = createDuration(posNegDuration).abs();
        var seconds = round(duration.as('s'));
        var minutes = round(duration.as('m'));
        var hours = round(duration.as('h'));
        var days = round(duration.as('d'));
        var months = round(duration.as('M'));
        var years = round(duration.as('y'));

        var a = seconds <= thresholds.ss && ['s', seconds] || seconds < thresholds.s && ['ss', seconds] || minutes <= 1 && ['m'] || minutes < thresholds.m && ['mm', minutes] || hours <= 1 && ['h'] || hours < thresholds.h && ['hh', hours] || days <= 1 && ['d'] || days < thresholds.d && ['dd', days] || months <= 1 && ['M'] || months < thresholds.M && ['MM', months] || years <= 1 && ['y'] || ['yy', years];

        a[2] = withoutSuffix;
        a[3] = +posNegDuration > 0;
        a[4] = locale;
        return substituteTimeAgo.apply(null, a);
    }

    // This function allows you to set the rounding function for relative time strings
    function getSetRelativeTimeRounding(roundingFunction) {
        if (roundingFunction === undefined) {
            return round;
        }
        if (typeof roundingFunction === 'function') {
            round = roundingFunction;
            return true;
        }
        return false;
    }

    // This function allows you to set a threshold for relative time strings
    function getSetRelativeTimeThreshold(threshold, limit) {
        if (thresholds[threshold] === undefined) {
            return false;
        }
        if (limit === undefined) {
            return thresholds[threshold];
        }
        thresholds[threshold] = limit;
        if (threshold === 's') {
            thresholds.ss = limit - 1;
        }
        return true;
    }

    function humanize(withSuffix) {
        if (!this.isValid()) {
            return this.localeData().invalidDate();
        }

        var locale = this.localeData();
        var output = relativeTime$1(this, !withSuffix, locale);

        if (withSuffix) {
            output = locale.pastFuture(+this, output);
        }

        return locale.postformat(output);
    }

    var abs$1 = Math.abs;

    function sign(x) {
        return (x > 0) - (x < 0) || +x;
    }

    function toISOString$1() {
        // for ISO strings we do not use the normal bubbling rules:
        //  * milliseconds bubble up until they become hours
        //  * days do not bubble at all
        //  * months bubble up until they become years
        // This is because there is no context-free conversion between hours and days
        // (think of clock changes)
        // and also not between days and months (28-31 days per month)
        if (!this.isValid()) {
            return this.localeData().invalidDate();
        }

        var seconds = abs$1(this._milliseconds) / 1000;
        var days = abs$1(this._days);
        var months = abs$1(this._months);
        var minutes, hours, years;

        // 3600 seconds -> 60 minutes -> 1 hour
        minutes = absFloor(seconds / 60);
        hours = absFloor(minutes / 60);
        seconds %= 60;
        minutes %= 60;

        // 12 months -> 1 year
        years = absFloor(months / 12);
        months %= 12;

        // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
        var Y = years;
        var M = months;
        var D = days;
        var h = hours;
        var m = minutes;
        var s = seconds ? seconds.toFixed(3).replace(/\.?0+$/, '') : '';
        var total = this.asSeconds();

        if (!total) {
            // this is the same as C#'s (Noda) and python (isodate)...
            // but not other JS (goog.date)
            return 'P0D';
        }

        var totalSign = total < 0 ? '-' : '';
        var ymSign = sign(this._months) !== sign(total) ? '-' : '';
        var daysSign = sign(this._days) !== sign(total) ? '-' : '';
        var hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';

        return totalSign + 'P' + (Y ? ymSign + Y + 'Y' : '') + (M ? ymSign + M + 'M' : '') + (D ? daysSign + D + 'D' : '') + (h || m || s ? 'T' : '') + (h ? hmsSign + h + 'H' : '') + (m ? hmsSign + m + 'M' : '') + (s ? hmsSign + s + 'S' : '');
    }

    var proto$2 = Duration.prototype;

    proto$2.isValid = isValid$1;
    proto$2.abs = abs;
    proto$2.add = add$1;
    proto$2.subtract = subtract$1;
    proto$2.as = as;
    proto$2.asMilliseconds = asMilliseconds;
    proto$2.asSeconds = asSeconds;
    proto$2.asMinutes = asMinutes;
    proto$2.asHours = asHours;
    proto$2.asDays = asDays;
    proto$2.asWeeks = asWeeks;
    proto$2.asMonths = asMonths;
    proto$2.asYears = asYears;
    proto$2.valueOf = valueOf$1;
    proto$2._bubble = bubble;
    proto$2.clone = clone$1;
    proto$2.get = get$2;
    proto$2.milliseconds = milliseconds;
    proto$2.seconds = seconds;
    proto$2.minutes = minutes;
    proto$2.hours = hours;
    proto$2.days = days;
    proto$2.weeks = weeks;
    proto$2.months = months;
    proto$2.years = years;
    proto$2.humanize = humanize;
    proto$2.toISOString = toISOString$1;
    proto$2.toString = toISOString$1;
    proto$2.toJSON = toISOString$1;
    proto$2.locale = locale;
    proto$2.localeData = localeData;

    // Deprecations
    proto$2.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', toISOString$1);
    proto$2.lang = lang;

    // Side effect imports

    // FORMATTING

    addFormatToken('X', 0, 0, 'unix');
    addFormatToken('x', 0, 0, 'valueOf');

    // PARSING

    addRegexToken('x', matchSigned);
    addRegexToken('X', matchTimestamp);
    addParseToken('X', function (input, array, config) {
        config._d = new Date(parseFloat(input, 10) * 1000);
    });
    addParseToken('x', function (input, array, config) {
        config._d = new Date(toInt(input));
    });

    // Side effect imports


    hooks.version = '2.19.3';

    setHookCallback(createLocal);

    hooks.fn = proto;
    hooks.min = min;
    hooks.max = max;
    hooks.now = now;
    hooks.utc = createUTC;
    hooks.unix = createUnix;
    hooks.months = listMonths;
    hooks.isDate = isDate;
    hooks.locale = getSetGlobalLocale;
    hooks.invalid = createInvalid;
    hooks.duration = createDuration;
    hooks.isMoment = isMoment;
    hooks.weekdays = listWeekdays;
    hooks.parseZone = createInZone;
    hooks.localeData = getLocale;
    hooks.isDuration = isDuration;
    hooks.monthsShort = listMonthsShort;
    hooks.weekdaysMin = listWeekdaysMin;
    hooks.defineLocale = defineLocale;
    hooks.updateLocale = updateLocale;
    hooks.locales = listLocales;
    hooks.weekdaysShort = listWeekdaysShort;
    hooks.normalizeUnits = normalizeUnits;
    hooks.relativeTimeRounding = getSetRelativeTimeRounding;
    hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
    hooks.calendarFormat = getCalendarFormat;
    hooks.prototype = proto;

    return hooks;
});
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(124)(module)))

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*! jQuery v3.2.1 | (c) JS Foundation and other contributors | jquery.org/license */
!function (a, b) {
  "use strict";
  "object" == typeof module && "object" == typeof module.exports ? module.exports = a.document ? b(a, !0) : function (a) {
    if (!a.document) throw new Error("jQuery requires a window with a document");return b(a);
  } : b(a);
}("undefined" != typeof window ? window : this, function (a, b) {
  "use strict";
  var c = [],
      d = a.document,
      e = Object.getPrototypeOf,
      f = c.slice,
      g = c.concat,
      h = c.push,
      i = c.indexOf,
      j = {},
      k = j.toString,
      l = j.hasOwnProperty,
      m = l.toString,
      n = m.call(Object),
      o = {};function p(a, b) {
    b = b || d;var c = b.createElement("script");c.text = a, b.head.appendChild(c).parentNode.removeChild(c);
  }var q = "3.2.1",
      r = function (a, b) {
    return new r.fn.init(a, b);
  },
      s = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,
      t = /^-ms-/,
      u = /-([a-z])/g,
      v = function (a, b) {
    return b.toUpperCase();
  };r.fn = r.prototype = { jquery: q, constructor: r, length: 0, toArray: function () {
      return f.call(this);
    }, get: function (a) {
      return null == a ? f.call(this) : a < 0 ? this[a + this.length] : this[a];
    }, pushStack: function (a) {
      var b = r.merge(this.constructor(), a);return b.prevObject = this, b;
    }, each: function (a) {
      return r.each(this, a);
    }, map: function (a) {
      return this.pushStack(r.map(this, function (b, c) {
        return a.call(b, c, b);
      }));
    }, slice: function () {
      return this.pushStack(f.apply(this, arguments));
    }, first: function () {
      return this.eq(0);
    }, last: function () {
      return this.eq(-1);
    }, eq: function (a) {
      var b = this.length,
          c = +a + (a < 0 ? b : 0);return this.pushStack(c >= 0 && c < b ? [this[c]] : []);
    }, end: function () {
      return this.prevObject || this.constructor();
    }, push: h, sort: c.sort, splice: c.splice }, r.extend = r.fn.extend = function () {
    var a,
        b,
        c,
        d,
        e,
        f,
        g = arguments[0] || {},
        h = 1,
        i = arguments.length,
        j = !1;for ("boolean" == typeof g && (j = g, g = arguments[h] || {}, h++), "object" == typeof g || r.isFunction(g) || (g = {}), h === i && (g = this, h--); h < i; h++) if (null != (a = arguments[h])) for (b in a) c = g[b], d = a[b], g !== d && (j && d && (r.isPlainObject(d) || (e = Array.isArray(d))) ? (e ? (e = !1, f = c && Array.isArray(c) ? c : []) : f = c && r.isPlainObject(c) ? c : {}, g[b] = r.extend(j, f, d)) : void 0 !== d && (g[b] = d));return g;
  }, r.extend({ expando: "jQuery" + (q + Math.random()).replace(/\D/g, ""), isReady: !0, error: function (a) {
      throw new Error(a);
    }, noop: function () {}, isFunction: function (a) {
      return "function" === r.type(a);
    }, isWindow: function (a) {
      return null != a && a === a.window;
    }, isNumeric: function (a) {
      var b = r.type(a);return ("number" === b || "string" === b) && !isNaN(a - parseFloat(a));
    }, isPlainObject: function (a) {
      var b, c;return !(!a || "[object Object]" !== k.call(a)) && (!(b = e(a)) || (c = l.call(b, "constructor") && b.constructor, "function" == typeof c && m.call(c) === n));
    }, isEmptyObject: function (a) {
      var b;for (b in a) return !1;return !0;
    }, type: function (a) {
      return null == a ? a + "" : "object" == typeof a || "function" == typeof a ? j[k.call(a)] || "object" : typeof a;
    }, globalEval: function (a) {
      p(a);
    }, camelCase: function (a) {
      return a.replace(t, "ms-").replace(u, v);
    }, each: function (a, b) {
      var c,
          d = 0;if (w(a)) {
        for (c = a.length; d < c; d++) if (b.call(a[d], d, a[d]) === !1) break;
      } else for (d in a) if (b.call(a[d], d, a[d]) === !1) break;return a;
    }, trim: function (a) {
      return null == a ? "" : (a + "").replace(s, "");
    }, makeArray: function (a, b) {
      var c = b || [];return null != a && (w(Object(a)) ? r.merge(c, "string" == typeof a ? [a] : a) : h.call(c, a)), c;
    }, inArray: function (a, b, c) {
      return null == b ? -1 : i.call(b, a, c);
    }, merge: function (a, b) {
      for (var c = +b.length, d = 0, e = a.length; d < c; d++) a[e++] = b[d];return a.length = e, a;
    }, grep: function (a, b, c) {
      for (var d, e = [], f = 0, g = a.length, h = !c; f < g; f++) d = !b(a[f], f), d !== h && e.push(a[f]);return e;
    }, map: function (a, b, c) {
      var d,
          e,
          f = 0,
          h = [];if (w(a)) for (d = a.length; f < d; f++) e = b(a[f], f, c), null != e && h.push(e);else for (f in a) e = b(a[f], f, c), null != e && h.push(e);return g.apply([], h);
    }, guid: 1, proxy: function (a, b) {
      var c, d, e;if ("string" == typeof b && (c = a[b], b = a, a = c), r.isFunction(a)) return d = f.call(arguments, 2), e = function () {
        return a.apply(b || this, d.concat(f.call(arguments)));
      }, e.guid = a.guid = a.guid || r.guid++, e;
    }, now: Date.now, support: o }), "function" == typeof Symbol && (r.fn[Symbol.iterator] = c[Symbol.iterator]), r.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "), function (a, b) {
    j["[object " + b + "]"] = b.toLowerCase();
  });function w(a) {
    var b = !!a && "length" in a && a.length,
        c = r.type(a);return "function" !== c && !r.isWindow(a) && ("array" === c || 0 === b || "number" == typeof b && b > 0 && b - 1 in a);
  }var x = function (a) {
    var b,
        c,
        d,
        e,
        f,
        g,
        h,
        i,
        j,
        k,
        l,
        m,
        n,
        o,
        p,
        q,
        r,
        s,
        t,
        u = "sizzle" + 1 * new Date(),
        v = a.document,
        w = 0,
        x = 0,
        y = ha(),
        z = ha(),
        A = ha(),
        B = function (a, b) {
      return a === b && (l = !0), 0;
    },
        C = {}.hasOwnProperty,
        D = [],
        E = D.pop,
        F = D.push,
        G = D.push,
        H = D.slice,
        I = function (a, b) {
      for (var c = 0, d = a.length; c < d; c++) if (a[c] === b) return c;return -1;
    },
        J = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",
        K = "[\\x20\\t\\r\\n\\f]",
        L = "(?:\\\\.|[\\w-]|[^\0-\\xa0])+",
        M = "\\[" + K + "*(" + L + ")(?:" + K + "*([*^$|!~]?=)" + K + "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + L + "))|)" + K + "*\\]",
        N = ":(" + L + ")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|" + M + ")*)|.*)\\)|)",
        O = new RegExp(K + "+", "g"),
        P = new RegExp("^" + K + "+|((?:^|[^\\\\])(?:\\\\.)*)" + K + "+$", "g"),
        Q = new RegExp("^" + K + "*," + K + "*"),
        R = new RegExp("^" + K + "*([>+~]|" + K + ")" + K + "*"),
        S = new RegExp("=" + K + "*([^\\]'\"]*?)" + K + "*\\]", "g"),
        T = new RegExp(N),
        U = new RegExp("^" + L + "$"),
        V = { ID: new RegExp("^#(" + L + ")"), CLASS: new RegExp("^\\.(" + L + ")"), TAG: new RegExp("^(" + L + "|[*])"), ATTR: new RegExp("^" + M), PSEUDO: new RegExp("^" + N), CHILD: new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + K + "*(even|odd|(([+-]|)(\\d*)n|)" + K + "*(?:([+-]|)" + K + "*(\\d+)|))" + K + "*\\)|)", "i"), bool: new RegExp("^(?:" + J + ")$", "i"), needsContext: new RegExp("^" + K + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + K + "*((?:-\\d)?\\d*)" + K + "*\\)|)(?=[^-]|$)", "i") },
        W = /^(?:input|select|textarea|button)$/i,
        X = /^h\d$/i,
        Y = /^[^{]+\{\s*\[native \w/,
        Z = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
        $ = /[+~]/,
        _ = new RegExp("\\\\([\\da-f]{1,6}" + K + "?|(" + K + ")|.)", "ig"),
        aa = function (a, b, c) {
      var d = "0x" + b - 65536;return d !== d || c ? b : d < 0 ? String.fromCharCode(d + 65536) : String.fromCharCode(d >> 10 | 55296, 1023 & d | 56320);
    },
        ba = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
        ca = function (a, b) {
      return b ? "\0" === a ? "\ufffd" : a.slice(0, -1) + "\\" + a.charCodeAt(a.length - 1).toString(16) + " " : "\\" + a;
    },
        da = function () {
      m();
    },
        ea = ta(function (a) {
      return a.disabled === !0 && ("form" in a || "label" in a);
    }, { dir: "parentNode", next: "legend" });try {
      G.apply(D = H.call(v.childNodes), v.childNodes), D[v.childNodes.length].nodeType;
    } catch (fa) {
      G = { apply: D.length ? function (a, b) {
          F.apply(a, H.call(b));
        } : function (a, b) {
          var c = a.length,
              d = 0;while (a[c++] = b[d++]);a.length = c - 1;
        } };
    }function ga(a, b, d, e) {
      var f,
          h,
          j,
          k,
          l,
          o,
          r,
          s = b && b.ownerDocument,
          w = b ? b.nodeType : 9;if (d = d || [], "string" != typeof a || !a || 1 !== w && 9 !== w && 11 !== w) return d;if (!e && ((b ? b.ownerDocument || b : v) !== n && m(b), b = b || n, p)) {
        if (11 !== w && (l = Z.exec(a))) if (f = l[1]) {
          if (9 === w) {
            if (!(j = b.getElementById(f))) return d;if (j.id === f) return d.push(j), d;
          } else if (s && (j = s.getElementById(f)) && t(b, j) && j.id === f) return d.push(j), d;
        } else {
          if (l[2]) return G.apply(d, b.getElementsByTagName(a)), d;if ((f = l[3]) && c.getElementsByClassName && b.getElementsByClassName) return G.apply(d, b.getElementsByClassName(f)), d;
        }if (c.qsa && !A[a + " "] && (!q || !q.test(a))) {
          if (1 !== w) s = b, r = a;else if ("object" !== b.nodeName.toLowerCase()) {
            (k = b.getAttribute("id")) ? k = k.replace(ba, ca) : b.setAttribute("id", k = u), o = g(a), h = o.length;while (h--) o[h] = "#" + k + " " + sa(o[h]);r = o.join(","), s = $.test(a) && qa(b.parentNode) || b;
          }if (r) try {
            return G.apply(d, s.querySelectorAll(r)), d;
          } catch (x) {} finally {
            k === u && b.removeAttribute("id");
          }
        }
      }return i(a.replace(P, "$1"), b, d, e);
    }function ha() {
      var a = [];function b(c, e) {
        return a.push(c + " ") > d.cacheLength && delete b[a.shift()], b[c + " "] = e;
      }return b;
    }function ia(a) {
      return a[u] = !0, a;
    }function ja(a) {
      var b = n.createElement("fieldset");try {
        return !!a(b);
      } catch (c) {
        return !1;
      } finally {
        b.parentNode && b.parentNode.removeChild(b), b = null;
      }
    }function ka(a, b) {
      var c = a.split("|"),
          e = c.length;while (e--) d.attrHandle[c[e]] = b;
    }function la(a, b) {
      var c = b && a,
          d = c && 1 === a.nodeType && 1 === b.nodeType && a.sourceIndex - b.sourceIndex;if (d) return d;if (c) while (c = c.nextSibling) if (c === b) return -1;return a ? 1 : -1;
    }function ma(a) {
      return function (b) {
        var c = b.nodeName.toLowerCase();return "input" === c && b.type === a;
      };
    }function na(a) {
      return function (b) {
        var c = b.nodeName.toLowerCase();return ("input" === c || "button" === c) && b.type === a;
      };
    }function oa(a) {
      return function (b) {
        return "form" in b ? b.parentNode && b.disabled === !1 ? "label" in b ? "label" in b.parentNode ? b.parentNode.disabled === a : b.disabled === a : b.isDisabled === a || b.isDisabled !== !a && ea(b) === a : b.disabled === a : "label" in b && b.disabled === a;
      };
    }function pa(a) {
      return ia(function (b) {
        return b = +b, ia(function (c, d) {
          var e,
              f = a([], c.length, b),
              g = f.length;while (g--) c[e = f[g]] && (c[e] = !(d[e] = c[e]));
        });
      });
    }function qa(a) {
      return a && "undefined" != typeof a.getElementsByTagName && a;
    }c = ga.support = {}, f = ga.isXML = function (a) {
      var b = a && (a.ownerDocument || a).documentElement;return !!b && "HTML" !== b.nodeName;
    }, m = ga.setDocument = function (a) {
      var b,
          e,
          g = a ? a.ownerDocument || a : v;return g !== n && 9 === g.nodeType && g.documentElement ? (n = g, o = n.documentElement, p = !f(n), v !== n && (e = n.defaultView) && e.top !== e && (e.addEventListener ? e.addEventListener("unload", da, !1) : e.attachEvent && e.attachEvent("onunload", da)), c.attributes = ja(function (a) {
        return a.className = "i", !a.getAttribute("className");
      }), c.getElementsByTagName = ja(function (a) {
        return a.appendChild(n.createComment("")), !a.getElementsByTagName("*").length;
      }), c.getElementsByClassName = Y.test(n.getElementsByClassName), c.getById = ja(function (a) {
        return o.appendChild(a).id = u, !n.getElementsByName || !n.getElementsByName(u).length;
      }), c.getById ? (d.filter.ID = function (a) {
        var b = a.replace(_, aa);return function (a) {
          return a.getAttribute("id") === b;
        };
      }, d.find.ID = function (a, b) {
        if ("undefined" != typeof b.getElementById && p) {
          var c = b.getElementById(a);return c ? [c] : [];
        }
      }) : (d.filter.ID = function (a) {
        var b = a.replace(_, aa);return function (a) {
          var c = "undefined" != typeof a.getAttributeNode && a.getAttributeNode("id");return c && c.value === b;
        };
      }, d.find.ID = function (a, b) {
        if ("undefined" != typeof b.getElementById && p) {
          var c,
              d,
              e,
              f = b.getElementById(a);if (f) {
            if (c = f.getAttributeNode("id"), c && c.value === a) return [f];e = b.getElementsByName(a), d = 0;while (f = e[d++]) if (c = f.getAttributeNode("id"), c && c.value === a) return [f];
          }return [];
        }
      }), d.find.TAG = c.getElementsByTagName ? function (a, b) {
        return "undefined" != typeof b.getElementsByTagName ? b.getElementsByTagName(a) : c.qsa ? b.querySelectorAll(a) : void 0;
      } : function (a, b) {
        var c,
            d = [],
            e = 0,
            f = b.getElementsByTagName(a);if ("*" === a) {
          while (c = f[e++]) 1 === c.nodeType && d.push(c);return d;
        }return f;
      }, d.find.CLASS = c.getElementsByClassName && function (a, b) {
        if ("undefined" != typeof b.getElementsByClassName && p) return b.getElementsByClassName(a);
      }, r = [], q = [], (c.qsa = Y.test(n.querySelectorAll)) && (ja(function (a) {
        o.appendChild(a).innerHTML = "<a id='" + u + "'></a><select id='" + u + "-\r\\' msallowcapture=''><option selected=''></option></select>", a.querySelectorAll("[msallowcapture^='']").length && q.push("[*^$]=" + K + "*(?:''|\"\")"), a.querySelectorAll("[selected]").length || q.push("\\[" + K + "*(?:value|" + J + ")"), a.querySelectorAll("[id~=" + u + "-]").length || q.push("~="), a.querySelectorAll(":checked").length || q.push(":checked"), a.querySelectorAll("a#" + u + "+*").length || q.push(".#.+[+~]");
      }), ja(function (a) {
        a.innerHTML = "<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var b = n.createElement("input");b.setAttribute("type", "hidden"), a.appendChild(b).setAttribute("name", "D"), a.querySelectorAll("[name=d]").length && q.push("name" + K + "*[*^$|!~]?="), 2 !== a.querySelectorAll(":enabled").length && q.push(":enabled", ":disabled"), o.appendChild(a).disabled = !0, 2 !== a.querySelectorAll(":disabled").length && q.push(":enabled", ":disabled"), a.querySelectorAll("*,:x"), q.push(",.*:");
      })), (c.matchesSelector = Y.test(s = o.matches || o.webkitMatchesSelector || o.mozMatchesSelector || o.oMatchesSelector || o.msMatchesSelector)) && ja(function (a) {
        c.disconnectedMatch = s.call(a, "*"), s.call(a, "[s!='']:x"), r.push("!=", N);
      }), q = q.length && new RegExp(q.join("|")), r = r.length && new RegExp(r.join("|")), b = Y.test(o.compareDocumentPosition), t = b || Y.test(o.contains) ? function (a, b) {
        var c = 9 === a.nodeType ? a.documentElement : a,
            d = b && b.parentNode;return a === d || !(!d || 1 !== d.nodeType || !(c.contains ? c.contains(d) : a.compareDocumentPosition && 16 & a.compareDocumentPosition(d)));
      } : function (a, b) {
        if (b) while (b = b.parentNode) if (b === a) return !0;return !1;
      }, B = b ? function (a, b) {
        if (a === b) return l = !0, 0;var d = !a.compareDocumentPosition - !b.compareDocumentPosition;return d ? d : (d = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) : 1, 1 & d || !c.sortDetached && b.compareDocumentPosition(a) === d ? a === n || a.ownerDocument === v && t(v, a) ? -1 : b === n || b.ownerDocument === v && t(v, b) ? 1 : k ? I(k, a) - I(k, b) : 0 : 4 & d ? -1 : 1);
      } : function (a, b) {
        if (a === b) return l = !0, 0;var c,
            d = 0,
            e = a.parentNode,
            f = b.parentNode,
            g = [a],
            h = [b];if (!e || !f) return a === n ? -1 : b === n ? 1 : e ? -1 : f ? 1 : k ? I(k, a) - I(k, b) : 0;if (e === f) return la(a, b);c = a;while (c = c.parentNode) g.unshift(c);c = b;while (c = c.parentNode) h.unshift(c);while (g[d] === h[d]) d++;return d ? la(g[d], h[d]) : g[d] === v ? -1 : h[d] === v ? 1 : 0;
      }, n) : n;
    }, ga.matches = function (a, b) {
      return ga(a, null, null, b);
    }, ga.matchesSelector = function (a, b) {
      if ((a.ownerDocument || a) !== n && m(a), b = b.replace(S, "='$1']"), c.matchesSelector && p && !A[b + " "] && (!r || !r.test(b)) && (!q || !q.test(b))) try {
        var d = s.call(a, b);if (d || c.disconnectedMatch || a.document && 11 !== a.document.nodeType) return d;
      } catch (e) {}return ga(b, n, null, [a]).length > 0;
    }, ga.contains = function (a, b) {
      return (a.ownerDocument || a) !== n && m(a), t(a, b);
    }, ga.attr = function (a, b) {
      (a.ownerDocument || a) !== n && m(a);var e = d.attrHandle[b.toLowerCase()],
          f = e && C.call(d.attrHandle, b.toLowerCase()) ? e(a, b, !p) : void 0;return void 0 !== f ? f : c.attributes || !p ? a.getAttribute(b) : (f = a.getAttributeNode(b)) && f.specified ? f.value : null;
    }, ga.escape = function (a) {
      return (a + "").replace(ba, ca);
    }, ga.error = function (a) {
      throw new Error("Syntax error, unrecognized expression: " + a);
    }, ga.uniqueSort = function (a) {
      var b,
          d = [],
          e = 0,
          f = 0;if (l = !c.detectDuplicates, k = !c.sortStable && a.slice(0), a.sort(B), l) {
        while (b = a[f++]) b === a[f] && (e = d.push(f));while (e--) a.splice(d[e], 1);
      }return k = null, a;
    }, e = ga.getText = function (a) {
      var b,
          c = "",
          d = 0,
          f = a.nodeType;if (f) {
        if (1 === f || 9 === f || 11 === f) {
          if ("string" == typeof a.textContent) return a.textContent;for (a = a.firstChild; a; a = a.nextSibling) c += e(a);
        } else if (3 === f || 4 === f) return a.nodeValue;
      } else while (b = a[d++]) c += e(b);return c;
    }, d = ga.selectors = { cacheLength: 50, createPseudo: ia, match: V, attrHandle: {}, find: {}, relative: { ">": { dir: "parentNode", first: !0 }, " ": { dir: "parentNode" }, "+": { dir: "previousSibling", first: !0 }, "~": { dir: "previousSibling" } }, preFilter: { ATTR: function (a) {
          return a[1] = a[1].replace(_, aa), a[3] = (a[3] || a[4] || a[5] || "").replace(_, aa), "~=" === a[2] && (a[3] = " " + a[3] + " "), a.slice(0, 4);
        }, CHILD: function (a) {
          return a[1] = a[1].toLowerCase(), "nth" === a[1].slice(0, 3) ? (a[3] || ga.error(a[0]), a[4] = +(a[4] ? a[5] + (a[6] || 1) : 2 * ("even" === a[3] || "odd" === a[3])), a[5] = +(a[7] + a[8] || "odd" === a[3])) : a[3] && ga.error(a[0]), a;
        }, PSEUDO: function (a) {
          var b,
              c = !a[6] && a[2];return V.CHILD.test(a[0]) ? null : (a[3] ? a[2] = a[4] || a[5] || "" : c && T.test(c) && (b = g(c, !0)) && (b = c.indexOf(")", c.length - b) - c.length) && (a[0] = a[0].slice(0, b), a[2] = c.slice(0, b)), a.slice(0, 3));
        } }, filter: { TAG: function (a) {
          var b = a.replace(_, aa).toLowerCase();return "*" === a ? function () {
            return !0;
          } : function (a) {
            return a.nodeName && a.nodeName.toLowerCase() === b;
          };
        }, CLASS: function (a) {
          var b = y[a + " "];return b || (b = new RegExp("(^|" + K + ")" + a + "(" + K + "|$)")) && y(a, function (a) {
            return b.test("string" == typeof a.className && a.className || "undefined" != typeof a.getAttribute && a.getAttribute("class") || "");
          });
        }, ATTR: function (a, b, c) {
          return function (d) {
            var e = ga.attr(d, a);return null == e ? "!=" === b : !b || (e += "", "=" === b ? e === c : "!=" === b ? e !== c : "^=" === b ? c && 0 === e.indexOf(c) : "*=" === b ? c && e.indexOf(c) > -1 : "$=" === b ? c && e.slice(-c.length) === c : "~=" === b ? (" " + e.replace(O, " ") + " ").indexOf(c) > -1 : "|=" === b && (e === c || e.slice(0, c.length + 1) === c + "-"));
          };
        }, CHILD: function (a, b, c, d, e) {
          var f = "nth" !== a.slice(0, 3),
              g = "last" !== a.slice(-4),
              h = "of-type" === b;return 1 === d && 0 === e ? function (a) {
            return !!a.parentNode;
          } : function (b, c, i) {
            var j,
                k,
                l,
                m,
                n,
                o,
                p = f !== g ? "nextSibling" : "previousSibling",
                q = b.parentNode,
                r = h && b.nodeName.toLowerCase(),
                s = !i && !h,
                t = !1;if (q) {
              if (f) {
                while (p) {
                  m = b;while (m = m[p]) if (h ? m.nodeName.toLowerCase() === r : 1 === m.nodeType) return !1;o = p = "only" === a && !o && "nextSibling";
                }return !0;
              }if (o = [g ? q.firstChild : q.lastChild], g && s) {
                m = q, l = m[u] || (m[u] = {}), k = l[m.uniqueID] || (l[m.uniqueID] = {}), j = k[a] || [], n = j[0] === w && j[1], t = n && j[2], m = n && q.childNodes[n];while (m = ++n && m && m[p] || (t = n = 0) || o.pop()) if (1 === m.nodeType && ++t && m === b) {
                  k[a] = [w, n, t];break;
                }
              } else if (s && (m = b, l = m[u] || (m[u] = {}), k = l[m.uniqueID] || (l[m.uniqueID] = {}), j = k[a] || [], n = j[0] === w && j[1], t = n), t === !1) while (m = ++n && m && m[p] || (t = n = 0) || o.pop()) if ((h ? m.nodeName.toLowerCase() === r : 1 === m.nodeType) && ++t && (s && (l = m[u] || (m[u] = {}), k = l[m.uniqueID] || (l[m.uniqueID] = {}), k[a] = [w, t]), m === b)) break;return t -= e, t === d || t % d === 0 && t / d >= 0;
            }
          };
        }, PSEUDO: function (a, b) {
          var c,
              e = d.pseudos[a] || d.setFilters[a.toLowerCase()] || ga.error("unsupported pseudo: " + a);return e[u] ? e(b) : e.length > 1 ? (c = [a, a, "", b], d.setFilters.hasOwnProperty(a.toLowerCase()) ? ia(function (a, c) {
            var d,
                f = e(a, b),
                g = f.length;while (g--) d = I(a, f[g]), a[d] = !(c[d] = f[g]);
          }) : function (a) {
            return e(a, 0, c);
          }) : e;
        } }, pseudos: { not: ia(function (a) {
          var b = [],
              c = [],
              d = h(a.replace(P, "$1"));return d[u] ? ia(function (a, b, c, e) {
            var f,
                g = d(a, null, e, []),
                h = a.length;while (h--) (f = g[h]) && (a[h] = !(b[h] = f));
          }) : function (a, e, f) {
            return b[0] = a, d(b, null, f, c), b[0] = null, !c.pop();
          };
        }), has: ia(function (a) {
          return function (b) {
            return ga(a, b).length > 0;
          };
        }), contains: ia(function (a) {
          return a = a.replace(_, aa), function (b) {
            return (b.textContent || b.innerText || e(b)).indexOf(a) > -1;
          };
        }), lang: ia(function (a) {
          return U.test(a || "") || ga.error("unsupported lang: " + a), a = a.replace(_, aa).toLowerCase(), function (b) {
            var c;do if (c = p ? b.lang : b.getAttribute("xml:lang") || b.getAttribute("lang")) return c = c.toLowerCase(), c === a || 0 === c.indexOf(a + "-"); while ((b = b.parentNode) && 1 === b.nodeType);return !1;
          };
        }), target: function (b) {
          var c = a.location && a.location.hash;return c && c.slice(1) === b.id;
        }, root: function (a) {
          return a === o;
        }, focus: function (a) {
          return a === n.activeElement && (!n.hasFocus || n.hasFocus()) && !!(a.type || a.href || ~a.tabIndex);
        }, enabled: oa(!1), disabled: oa(!0), checked: function (a) {
          var b = a.nodeName.toLowerCase();return "input" === b && !!a.checked || "option" === b && !!a.selected;
        }, selected: function (a) {
          return a.parentNode && a.parentNode.selectedIndex, a.selected === !0;
        }, empty: function (a) {
          for (a = a.firstChild; a; a = a.nextSibling) if (a.nodeType < 6) return !1;return !0;
        }, parent: function (a) {
          return !d.pseudos.empty(a);
        }, header: function (a) {
          return X.test(a.nodeName);
        }, input: function (a) {
          return W.test(a.nodeName);
        }, button: function (a) {
          var b = a.nodeName.toLowerCase();return "input" === b && "button" === a.type || "button" === b;
        }, text: function (a) {
          var b;return "input" === a.nodeName.toLowerCase() && "text" === a.type && (null == (b = a.getAttribute("type")) || "text" === b.toLowerCase());
        }, first: pa(function () {
          return [0];
        }), last: pa(function (a, b) {
          return [b - 1];
        }), eq: pa(function (a, b, c) {
          return [c < 0 ? c + b : c];
        }), even: pa(function (a, b) {
          for (var c = 0; c < b; c += 2) a.push(c);return a;
        }), odd: pa(function (a, b) {
          for (var c = 1; c < b; c += 2) a.push(c);return a;
        }), lt: pa(function (a, b, c) {
          for (var d = c < 0 ? c + b : c; --d >= 0;) a.push(d);return a;
        }), gt: pa(function (a, b, c) {
          for (var d = c < 0 ? c + b : c; ++d < b;) a.push(d);return a;
        }) } }, d.pseudos.nth = d.pseudos.eq;for (b in { radio: !0, checkbox: !0, file: !0, password: !0, image: !0 }) d.pseudos[b] = ma(b);for (b in { submit: !0, reset: !0 }) d.pseudos[b] = na(b);function ra() {}ra.prototype = d.filters = d.pseudos, d.setFilters = new ra(), g = ga.tokenize = function (a, b) {
      var c,
          e,
          f,
          g,
          h,
          i,
          j,
          k = z[a + " "];if (k) return b ? 0 : k.slice(0);h = a, i = [], j = d.preFilter;while (h) {
        c && !(e = Q.exec(h)) || (e && (h = h.slice(e[0].length) || h), i.push(f = [])), c = !1, (e = R.exec(h)) && (c = e.shift(), f.push({ value: c, type: e[0].replace(P, " ") }), h = h.slice(c.length));for (g in d.filter) !(e = V[g].exec(h)) || j[g] && !(e = j[g](e)) || (c = e.shift(), f.push({ value: c, type: g, matches: e }), h = h.slice(c.length));if (!c) break;
      }return b ? h.length : h ? ga.error(a) : z(a, i).slice(0);
    };function sa(a) {
      for (var b = 0, c = a.length, d = ""; b < c; b++) d += a[b].value;return d;
    }function ta(a, b, c) {
      var d = b.dir,
          e = b.next,
          f = e || d,
          g = c && "parentNode" === f,
          h = x++;return b.first ? function (b, c, e) {
        while (b = b[d]) if (1 === b.nodeType || g) return a(b, c, e);return !1;
      } : function (b, c, i) {
        var j,
            k,
            l,
            m = [w, h];if (i) {
          while (b = b[d]) if ((1 === b.nodeType || g) && a(b, c, i)) return !0;
        } else while (b = b[d]) if (1 === b.nodeType || g) if (l = b[u] || (b[u] = {}), k = l[b.uniqueID] || (l[b.uniqueID] = {}), e && e === b.nodeName.toLowerCase()) b = b[d] || b;else {
          if ((j = k[f]) && j[0] === w && j[1] === h) return m[2] = j[2];if (k[f] = m, m[2] = a(b, c, i)) return !0;
        }return !1;
      };
    }function ua(a) {
      return a.length > 1 ? function (b, c, d) {
        var e = a.length;while (e--) if (!a[e](b, c, d)) return !1;return !0;
      } : a[0];
    }function va(a, b, c) {
      for (var d = 0, e = b.length; d < e; d++) ga(a, b[d], c);return c;
    }function wa(a, b, c, d, e) {
      for (var f, g = [], h = 0, i = a.length, j = null != b; h < i; h++) (f = a[h]) && (c && !c(f, d, e) || (g.push(f), j && b.push(h)));return g;
    }function xa(a, b, c, d, e, f) {
      return d && !d[u] && (d = xa(d)), e && !e[u] && (e = xa(e, f)), ia(function (f, g, h, i) {
        var j,
            k,
            l,
            m = [],
            n = [],
            o = g.length,
            p = f || va(b || "*", h.nodeType ? [h] : h, []),
            q = !a || !f && b ? p : wa(p, m, a, h, i),
            r = c ? e || (f ? a : o || d) ? [] : g : q;if (c && c(q, r, h, i), d) {
          j = wa(r, n), d(j, [], h, i), k = j.length;while (k--) (l = j[k]) && (r[n[k]] = !(q[n[k]] = l));
        }if (f) {
          if (e || a) {
            if (e) {
              j = [], k = r.length;while (k--) (l = r[k]) && j.push(q[k] = l);e(null, r = [], j, i);
            }k = r.length;while (k--) (l = r[k]) && (j = e ? I(f, l) : m[k]) > -1 && (f[j] = !(g[j] = l));
          }
        } else r = wa(r === g ? r.splice(o, r.length) : r), e ? e(null, g, r, i) : G.apply(g, r);
      });
    }function ya(a) {
      for (var b, c, e, f = a.length, g = d.relative[a[0].type], h = g || d.relative[" "], i = g ? 1 : 0, k = ta(function (a) {
        return a === b;
      }, h, !0), l = ta(function (a) {
        return I(b, a) > -1;
      }, h, !0), m = [function (a, c, d) {
        var e = !g && (d || c !== j) || ((b = c).nodeType ? k(a, c, d) : l(a, c, d));return b = null, e;
      }]; i < f; i++) if (c = d.relative[a[i].type]) m = [ta(ua(m), c)];else {
        if (c = d.filter[a[i].type].apply(null, a[i].matches), c[u]) {
          for (e = ++i; e < f; e++) if (d.relative[a[e].type]) break;return xa(i > 1 && ua(m), i > 1 && sa(a.slice(0, i - 1).concat({ value: " " === a[i - 2].type ? "*" : "" })).replace(P, "$1"), c, i < e && ya(a.slice(i, e)), e < f && ya(a = a.slice(e)), e < f && sa(a));
        }m.push(c);
      }return ua(m);
    }function za(a, b) {
      var c = b.length > 0,
          e = a.length > 0,
          f = function (f, g, h, i, k) {
        var l,
            o,
            q,
            r = 0,
            s = "0",
            t = f && [],
            u = [],
            v = j,
            x = f || e && d.find.TAG("*", k),
            y = w += null == v ? 1 : Math.random() || .1,
            z = x.length;for (k && (j = g === n || g || k); s !== z && null != (l = x[s]); s++) {
          if (e && l) {
            o = 0, g || l.ownerDocument === n || (m(l), h = !p);while (q = a[o++]) if (q(l, g || n, h)) {
              i.push(l);break;
            }k && (w = y);
          }c && ((l = !q && l) && r--, f && t.push(l));
        }if (r += s, c && s !== r) {
          o = 0;while (q = b[o++]) q(t, u, g, h);if (f) {
            if (r > 0) while (s--) t[s] || u[s] || (u[s] = E.call(i));u = wa(u);
          }G.apply(i, u), k && !f && u.length > 0 && r + b.length > 1 && ga.uniqueSort(i);
        }return k && (w = y, j = v), t;
      };return c ? ia(f) : f;
    }return h = ga.compile = function (a, b) {
      var c,
          d = [],
          e = [],
          f = A[a + " "];if (!f) {
        b || (b = g(a)), c = b.length;while (c--) f = ya(b[c]), f[u] ? d.push(f) : e.push(f);f = A(a, za(e, d)), f.selector = a;
      }return f;
    }, i = ga.select = function (a, b, c, e) {
      var f,
          i,
          j,
          k,
          l,
          m = "function" == typeof a && a,
          n = !e && g(a = m.selector || a);if (c = c || [], 1 === n.length) {
        if (i = n[0] = n[0].slice(0), i.length > 2 && "ID" === (j = i[0]).type && 9 === b.nodeType && p && d.relative[i[1].type]) {
          if (b = (d.find.ID(j.matches[0].replace(_, aa), b) || [])[0], !b) return c;m && (b = b.parentNode), a = a.slice(i.shift().value.length);
        }f = V.needsContext.test(a) ? 0 : i.length;while (f--) {
          if (j = i[f], d.relative[k = j.type]) break;if ((l = d.find[k]) && (e = l(j.matches[0].replace(_, aa), $.test(i[0].type) && qa(b.parentNode) || b))) {
            if (i.splice(f, 1), a = e.length && sa(i), !a) return G.apply(c, e), c;break;
          }
        }
      }return (m || h(a, n))(e, b, !p, c, !b || $.test(a) && qa(b.parentNode) || b), c;
    }, c.sortStable = u.split("").sort(B).join("") === u, c.detectDuplicates = !!l, m(), c.sortDetached = ja(function (a) {
      return 1 & a.compareDocumentPosition(n.createElement("fieldset"));
    }), ja(function (a) {
      return a.innerHTML = "<a href='#'></a>", "#" === a.firstChild.getAttribute("href");
    }) || ka("type|href|height|width", function (a, b, c) {
      if (!c) return a.getAttribute(b, "type" === b.toLowerCase() ? 1 : 2);
    }), c.attributes && ja(function (a) {
      return a.innerHTML = "<input/>", a.firstChild.setAttribute("value", ""), "" === a.firstChild.getAttribute("value");
    }) || ka("value", function (a, b, c) {
      if (!c && "input" === a.nodeName.toLowerCase()) return a.defaultValue;
    }), ja(function (a) {
      return null == a.getAttribute("disabled");
    }) || ka(J, function (a, b, c) {
      var d;if (!c) return a[b] === !0 ? b.toLowerCase() : (d = a.getAttributeNode(b)) && d.specified ? d.value : null;
    }), ga;
  }(a);r.find = x, r.expr = x.selectors, r.expr[":"] = r.expr.pseudos, r.uniqueSort = r.unique = x.uniqueSort, r.text = x.getText, r.isXMLDoc = x.isXML, r.contains = x.contains, r.escapeSelector = x.escape;var y = function (a, b, c) {
    var d = [],
        e = void 0 !== c;while ((a = a[b]) && 9 !== a.nodeType) if (1 === a.nodeType) {
      if (e && r(a).is(c)) break;d.push(a);
    }return d;
  },
      z = function (a, b) {
    for (var c = []; a; a = a.nextSibling) 1 === a.nodeType && a !== b && c.push(a);return c;
  },
      A = r.expr.match.needsContext;function B(a, b) {
    return a.nodeName && a.nodeName.toLowerCase() === b.toLowerCase();
  }var C = /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i,
      D = /^.[^:#\[\.,]*$/;function E(a, b, c) {
    return r.isFunction(b) ? r.grep(a, function (a, d) {
      return !!b.call(a, d, a) !== c;
    }) : b.nodeType ? r.grep(a, function (a) {
      return a === b !== c;
    }) : "string" != typeof b ? r.grep(a, function (a) {
      return i.call(b, a) > -1 !== c;
    }) : D.test(b) ? r.filter(b, a, c) : (b = r.filter(b, a), r.grep(a, function (a) {
      return i.call(b, a) > -1 !== c && 1 === a.nodeType;
    }));
  }r.filter = function (a, b, c) {
    var d = b[0];return c && (a = ":not(" + a + ")"), 1 === b.length && 1 === d.nodeType ? r.find.matchesSelector(d, a) ? [d] : [] : r.find.matches(a, r.grep(b, function (a) {
      return 1 === a.nodeType;
    }));
  }, r.fn.extend({ find: function (a) {
      var b,
          c,
          d = this.length,
          e = this;if ("string" != typeof a) return this.pushStack(r(a).filter(function () {
        for (b = 0; b < d; b++) if (r.contains(e[b], this)) return !0;
      }));for (c = this.pushStack([]), b = 0; b < d; b++) r.find(a, e[b], c);return d > 1 ? r.uniqueSort(c) : c;
    }, filter: function (a) {
      return this.pushStack(E(this, a || [], !1));
    }, not: function (a) {
      return this.pushStack(E(this, a || [], !0));
    }, is: function (a) {
      return !!E(this, "string" == typeof a && A.test(a) ? r(a) : a || [], !1).length;
    } });var F,
      G = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,
      H = r.fn.init = function (a, b, c) {
    var e, f;if (!a) return this;if (c = c || F, "string" == typeof a) {
      if (e = "<" === a[0] && ">" === a[a.length - 1] && a.length >= 3 ? [null, a, null] : G.exec(a), !e || !e[1] && b) return !b || b.jquery ? (b || c).find(a) : this.constructor(b).find(a);if (e[1]) {
        if (b = b instanceof r ? b[0] : b, r.merge(this, r.parseHTML(e[1], b && b.nodeType ? b.ownerDocument || b : d, !0)), C.test(e[1]) && r.isPlainObject(b)) for (e in b) r.isFunction(this[e]) ? this[e](b[e]) : this.attr(e, b[e]);return this;
      }return f = d.getElementById(e[2]), f && (this[0] = f, this.length = 1), this;
    }return a.nodeType ? (this[0] = a, this.length = 1, this) : r.isFunction(a) ? void 0 !== c.ready ? c.ready(a) : a(r) : r.makeArray(a, this);
  };H.prototype = r.fn, F = r(d);var I = /^(?:parents|prev(?:Until|All))/,
      J = { children: !0, contents: !0, next: !0, prev: !0 };r.fn.extend({ has: function (a) {
      var b = r(a, this),
          c = b.length;return this.filter(function () {
        for (var a = 0; a < c; a++) if (r.contains(this, b[a])) return !0;
      });
    }, closest: function (a, b) {
      var c,
          d = 0,
          e = this.length,
          f = [],
          g = "string" != typeof a && r(a);if (!A.test(a)) for (; d < e; d++) for (c = this[d]; c && c !== b; c = c.parentNode) if (c.nodeType < 11 && (g ? g.index(c) > -1 : 1 === c.nodeType && r.find.matchesSelector(c, a))) {
        f.push(c);break;
      }return this.pushStack(f.length > 1 ? r.uniqueSort(f) : f);
    }, index: function (a) {
      return a ? "string" == typeof a ? i.call(r(a), this[0]) : i.call(this, a.jquery ? a[0] : a) : this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
    }, add: function (a, b) {
      return this.pushStack(r.uniqueSort(r.merge(this.get(), r(a, b))));
    }, addBack: function (a) {
      return this.add(null == a ? this.prevObject : this.prevObject.filter(a));
    } });function K(a, b) {
    while ((a = a[b]) && 1 !== a.nodeType);return a;
  }r.each({ parent: function (a) {
      var b = a.parentNode;return b && 11 !== b.nodeType ? b : null;
    }, parents: function (a) {
      return y(a, "parentNode");
    }, parentsUntil: function (a, b, c) {
      return y(a, "parentNode", c);
    }, next: function (a) {
      return K(a, "nextSibling");
    }, prev: function (a) {
      return K(a, "previousSibling");
    }, nextAll: function (a) {
      return y(a, "nextSibling");
    }, prevAll: function (a) {
      return y(a, "previousSibling");
    }, nextUntil: function (a, b, c) {
      return y(a, "nextSibling", c);
    }, prevUntil: function (a, b, c) {
      return y(a, "previousSibling", c);
    }, siblings: function (a) {
      return z((a.parentNode || {}).firstChild, a);
    }, children: function (a) {
      return z(a.firstChild);
    }, contents: function (a) {
      return B(a, "iframe") ? a.contentDocument : (B(a, "template") && (a = a.content || a), r.merge([], a.childNodes));
    } }, function (a, b) {
    r.fn[a] = function (c, d) {
      var e = r.map(this, b, c);return "Until" !== a.slice(-5) && (d = c), d && "string" == typeof d && (e = r.filter(d, e)), this.length > 1 && (J[a] || r.uniqueSort(e), I.test(a) && e.reverse()), this.pushStack(e);
    };
  });var L = /[^\x20\t\r\n\f]+/g;function M(a) {
    var b = {};return r.each(a.match(L) || [], function (a, c) {
      b[c] = !0;
    }), b;
  }r.Callbacks = function (a) {
    a = "string" == typeof a ? M(a) : r.extend({}, a);var b,
        c,
        d,
        e,
        f = [],
        g = [],
        h = -1,
        i = function () {
      for (e = e || a.once, d = b = !0; g.length; h = -1) {
        c = g.shift();while (++h < f.length) f[h].apply(c[0], c[1]) === !1 && a.stopOnFalse && (h = f.length, c = !1);
      }a.memory || (c = !1), b = !1, e && (f = c ? [] : "");
    },
        j = { add: function () {
        return f && (c && !b && (h = f.length - 1, g.push(c)), function d(b) {
          r.each(b, function (b, c) {
            r.isFunction(c) ? a.unique && j.has(c) || f.push(c) : c && c.length && "string" !== r.type(c) && d(c);
          });
        }(arguments), c && !b && i()), this;
      }, remove: function () {
        return r.each(arguments, function (a, b) {
          var c;while ((c = r.inArray(b, f, c)) > -1) f.splice(c, 1), c <= h && h--;
        }), this;
      }, has: function (a) {
        return a ? r.inArray(a, f) > -1 : f.length > 0;
      }, empty: function () {
        return f && (f = []), this;
      }, disable: function () {
        return e = g = [], f = c = "", this;
      }, disabled: function () {
        return !f;
      }, lock: function () {
        return e = g = [], c || b || (f = c = ""), this;
      }, locked: function () {
        return !!e;
      }, fireWith: function (a, c) {
        return e || (c = c || [], c = [a, c.slice ? c.slice() : c], g.push(c), b || i()), this;
      }, fire: function () {
        return j.fireWith(this, arguments), this;
      }, fired: function () {
        return !!d;
      } };return j;
  };function N(a) {
    return a;
  }function O(a) {
    throw a;
  }function P(a, b, c, d) {
    var e;try {
      a && r.isFunction(e = a.promise) ? e.call(a).done(b).fail(c) : a && r.isFunction(e = a.then) ? e.call(a, b, c) : b.apply(void 0, [a].slice(d));
    } catch (a) {
      c.apply(void 0, [a]);
    }
  }r.extend({ Deferred: function (b) {
      var c = [["notify", "progress", r.Callbacks("memory"), r.Callbacks("memory"), 2], ["resolve", "done", r.Callbacks("once memory"), r.Callbacks("once memory"), 0, "resolved"], ["reject", "fail", r.Callbacks("once memory"), r.Callbacks("once memory"), 1, "rejected"]],
          d = "pending",
          e = { state: function () {
          return d;
        }, always: function () {
          return f.done(arguments).fail(arguments), this;
        }, "catch": function (a) {
          return e.then(null, a);
        }, pipe: function () {
          var a = arguments;return r.Deferred(function (b) {
            r.each(c, function (c, d) {
              var e = r.isFunction(a[d[4]]) && a[d[4]];f[d[1]](function () {
                var a = e && e.apply(this, arguments);a && r.isFunction(a.promise) ? a.promise().progress(b.notify).done(b.resolve).fail(b.reject) : b[d[0] + "With"](this, e ? [a] : arguments);
              });
            }), a = null;
          }).promise();
        }, then: function (b, d, e) {
          var f = 0;function g(b, c, d, e) {
            return function () {
              var h = this,
                  i = arguments,
                  j = function () {
                var a, j;if (!(b < f)) {
                  if (a = d.apply(h, i), a === c.promise()) throw new TypeError("Thenable self-resolution");j = a && ("object" == typeof a || "function" == typeof a) && a.then, r.isFunction(j) ? e ? j.call(a, g(f, c, N, e), g(f, c, O, e)) : (f++, j.call(a, g(f, c, N, e), g(f, c, O, e), g(f, c, N, c.notifyWith))) : (d !== N && (h = void 0, i = [a]), (e || c.resolveWith)(h, i));
                }
              },
                  k = e ? j : function () {
                try {
                  j();
                } catch (a) {
                  r.Deferred.exceptionHook && r.Deferred.exceptionHook(a, k.stackTrace), b + 1 >= f && (d !== O && (h = void 0, i = [a]), c.rejectWith(h, i));
                }
              };b ? k() : (r.Deferred.getStackHook && (k.stackTrace = r.Deferred.getStackHook()), a.setTimeout(k));
            };
          }return r.Deferred(function (a) {
            c[0][3].add(g(0, a, r.isFunction(e) ? e : N, a.notifyWith)), c[1][3].add(g(0, a, r.isFunction(b) ? b : N)), c[2][3].add(g(0, a, r.isFunction(d) ? d : O));
          }).promise();
        }, promise: function (a) {
          return null != a ? r.extend(a, e) : e;
        } },
          f = {};return r.each(c, function (a, b) {
        var g = b[2],
            h = b[5];e[b[1]] = g.add, h && g.add(function () {
          d = h;
        }, c[3 - a][2].disable, c[0][2].lock), g.add(b[3].fire), f[b[0]] = function () {
          return f[b[0] + "With"](this === f ? void 0 : this, arguments), this;
        }, f[b[0] + "With"] = g.fireWith;
      }), e.promise(f), b && b.call(f, f), f;
    }, when: function (a) {
      var b = arguments.length,
          c = b,
          d = Array(c),
          e = f.call(arguments),
          g = r.Deferred(),
          h = function (a) {
        return function (c) {
          d[a] = this, e[a] = arguments.length > 1 ? f.call(arguments) : c, --b || g.resolveWith(d, e);
        };
      };if (b <= 1 && (P(a, g.done(h(c)).resolve, g.reject, !b), "pending" === g.state() || r.isFunction(e[c] && e[c].then))) return g.then();while (c--) P(e[c], h(c), g.reject);return g.promise();
    } });var Q = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;r.Deferred.exceptionHook = function (b, c) {
    a.console && a.console.warn && b && Q.test(b.name) && a.console.warn("jQuery.Deferred exception: " + b.message, b.stack, c);
  }, r.readyException = function (b) {
    a.setTimeout(function () {
      throw b;
    });
  };var R = r.Deferred();r.fn.ready = function (a) {
    return R.then(a)["catch"](function (a) {
      r.readyException(a);
    }), this;
  }, r.extend({ isReady: !1, readyWait: 1, ready: function (a) {
      (a === !0 ? --r.readyWait : r.isReady) || (r.isReady = !0, a !== !0 && --r.readyWait > 0 || R.resolveWith(d, [r]));
    } }), r.ready.then = R.then;function S() {
    d.removeEventListener("DOMContentLoaded", S), a.removeEventListener("load", S), r.ready();
  }"complete" === d.readyState || "loading" !== d.readyState && !d.documentElement.doScroll ? a.setTimeout(r.ready) : (d.addEventListener("DOMContentLoaded", S), a.addEventListener("load", S));var T = function (a, b, c, d, e, f, g) {
    var h = 0,
        i = a.length,
        j = null == c;if ("object" === r.type(c)) {
      e = !0;for (h in c) T(a, b, h, c[h], !0, f, g);
    } else if (void 0 !== d && (e = !0, r.isFunction(d) || (g = !0), j && (g ? (b.call(a, d), b = null) : (j = b, b = function (a, b, c) {
      return j.call(r(a), c);
    })), b)) for (; h < i; h++) b(a[h], c, g ? d : d.call(a[h], h, b(a[h], c)));return e ? a : j ? b.call(a) : i ? b(a[0], c) : f;
  },
      U = function (a) {
    return 1 === a.nodeType || 9 === a.nodeType || !+a.nodeType;
  };function V() {
    this.expando = r.expando + V.uid++;
  }V.uid = 1, V.prototype = { cache: function (a) {
      var b = a[this.expando];return b || (b = {}, U(a) && (a.nodeType ? a[this.expando] = b : Object.defineProperty(a, this.expando, { value: b, configurable: !0 }))), b;
    }, set: function (a, b, c) {
      var d,
          e = this.cache(a);if ("string" == typeof b) e[r.camelCase(b)] = c;else for (d in b) e[r.camelCase(d)] = b[d];return e;
    }, get: function (a, b) {
      return void 0 === b ? this.cache(a) : a[this.expando] && a[this.expando][r.camelCase(b)];
    }, access: function (a, b, c) {
      return void 0 === b || b && "string" == typeof b && void 0 === c ? this.get(a, b) : (this.set(a, b, c), void 0 !== c ? c : b);
    }, remove: function (a, b) {
      var c,
          d = a[this.expando];if (void 0 !== d) {
        if (void 0 !== b) {
          Array.isArray(b) ? b = b.map(r.camelCase) : (b = r.camelCase(b), b = b in d ? [b] : b.match(L) || []), c = b.length;while (c--) delete d[b[c]];
        }(void 0 === b || r.isEmptyObject(d)) && (a.nodeType ? a[this.expando] = void 0 : delete a[this.expando]);
      }
    }, hasData: function (a) {
      var b = a[this.expando];return void 0 !== b && !r.isEmptyObject(b);
    } };var W = new V(),
      X = new V(),
      Y = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
      Z = /[A-Z]/g;function $(a) {
    return "true" === a || "false" !== a && ("null" === a ? null : a === +a + "" ? +a : Y.test(a) ? JSON.parse(a) : a);
  }function _(a, b, c) {
    var d;if (void 0 === c && 1 === a.nodeType) if (d = "data-" + b.replace(Z, "-$&").toLowerCase(), c = a.getAttribute(d), "string" == typeof c) {
      try {
        c = $(c);
      } catch (e) {}X.set(a, b, c);
    } else c = void 0;return c;
  }r.extend({ hasData: function (a) {
      return X.hasData(a) || W.hasData(a);
    }, data: function (a, b, c) {
      return X.access(a, b, c);
    }, removeData: function (a, b) {
      X.remove(a, b);
    }, _data: function (a, b, c) {
      return W.access(a, b, c);
    }, _removeData: function (a, b) {
      W.remove(a, b);
    } }), r.fn.extend({ data: function (a, b) {
      var c,
          d,
          e,
          f = this[0],
          g = f && f.attributes;if (void 0 === a) {
        if (this.length && (e = X.get(f), 1 === f.nodeType && !W.get(f, "hasDataAttrs"))) {
          c = g.length;while (c--) g[c] && (d = g[c].name, 0 === d.indexOf("data-") && (d = r.camelCase(d.slice(5)), _(f, d, e[d])));W.set(f, "hasDataAttrs", !0);
        }return e;
      }return "object" == typeof a ? this.each(function () {
        X.set(this, a);
      }) : T(this, function (b) {
        var c;if (f && void 0 === b) {
          if (c = X.get(f, a), void 0 !== c) return c;if (c = _(f, a), void 0 !== c) return c;
        } else this.each(function () {
          X.set(this, a, b);
        });
      }, null, b, arguments.length > 1, null, !0);
    }, removeData: function (a) {
      return this.each(function () {
        X.remove(this, a);
      });
    } }), r.extend({ queue: function (a, b, c) {
      var d;if (a) return b = (b || "fx") + "queue", d = W.get(a, b), c && (!d || Array.isArray(c) ? d = W.access(a, b, r.makeArray(c)) : d.push(c)), d || [];
    }, dequeue: function (a, b) {
      b = b || "fx";var c = r.queue(a, b),
          d = c.length,
          e = c.shift(),
          f = r._queueHooks(a, b),
          g = function () {
        r.dequeue(a, b);
      };"inprogress" === e && (e = c.shift(), d--), e && ("fx" === b && c.unshift("inprogress"), delete f.stop, e.call(a, g, f)), !d && f && f.empty.fire();
    }, _queueHooks: function (a, b) {
      var c = b + "queueHooks";return W.get(a, c) || W.access(a, c, { empty: r.Callbacks("once memory").add(function () {
          W.remove(a, [b + "queue", c]);
        }) });
    } }), r.fn.extend({ queue: function (a, b) {
      var c = 2;return "string" != typeof a && (b = a, a = "fx", c--), arguments.length < c ? r.queue(this[0], a) : void 0 === b ? this : this.each(function () {
        var c = r.queue(this, a, b);r._queueHooks(this, a), "fx" === a && "inprogress" !== c[0] && r.dequeue(this, a);
      });
    }, dequeue: function (a) {
      return this.each(function () {
        r.dequeue(this, a);
      });
    }, clearQueue: function (a) {
      return this.queue(a || "fx", []);
    }, promise: function (a, b) {
      var c,
          d = 1,
          e = r.Deferred(),
          f = this,
          g = this.length,
          h = function () {
        --d || e.resolveWith(f, [f]);
      };"string" != typeof a && (b = a, a = void 0), a = a || "fx";while (g--) c = W.get(f[g], a + "queueHooks"), c && c.empty && (d++, c.empty.add(h));return h(), e.promise(b);
    } });var aa = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,
      ba = new RegExp("^(?:([+-])=|)(" + aa + ")([a-z%]*)$", "i"),
      ca = ["Top", "Right", "Bottom", "Left"],
      da = function (a, b) {
    return a = b || a, "none" === a.style.display || "" === a.style.display && r.contains(a.ownerDocument, a) && "none" === r.css(a, "display");
  },
      ea = function (a, b, c, d) {
    var e,
        f,
        g = {};for (f in b) g[f] = a.style[f], a.style[f] = b[f];e = c.apply(a, d || []);for (f in b) a.style[f] = g[f];return e;
  };function fa(a, b, c, d) {
    var e,
        f = 1,
        g = 20,
        h = d ? function () {
      return d.cur();
    } : function () {
      return r.css(a, b, "");
    },
        i = h(),
        j = c && c[3] || (r.cssNumber[b] ? "" : "px"),
        k = (r.cssNumber[b] || "px" !== j && +i) && ba.exec(r.css(a, b));if (k && k[3] !== j) {
      j = j || k[3], c = c || [], k = +i || 1;do f = f || ".5", k /= f, r.style(a, b, k + j); while (f !== (f = h() / i) && 1 !== f && --g);
    }return c && (k = +k || +i || 0, e = c[1] ? k + (c[1] + 1) * c[2] : +c[2], d && (d.unit = j, d.start = k, d.end = e)), e;
  }var ga = {};function ha(a) {
    var b,
        c = a.ownerDocument,
        d = a.nodeName,
        e = ga[d];return e ? e : (b = c.body.appendChild(c.createElement(d)), e = r.css(b, "display"), b.parentNode.removeChild(b), "none" === e && (e = "block"), ga[d] = e, e);
  }function ia(a, b) {
    for (var c, d, e = [], f = 0, g = a.length; f < g; f++) d = a[f], d.style && (c = d.style.display, b ? ("none" === c && (e[f] = W.get(d, "display") || null, e[f] || (d.style.display = "")), "" === d.style.display && da(d) && (e[f] = ha(d))) : "none" !== c && (e[f] = "none", W.set(d, "display", c)));for (f = 0; f < g; f++) null != e[f] && (a[f].style.display = e[f]);return a;
  }r.fn.extend({ show: function () {
      return ia(this, !0);
    }, hide: function () {
      return ia(this);
    }, toggle: function (a) {
      return "boolean" == typeof a ? a ? this.show() : this.hide() : this.each(function () {
        da(this) ? r(this).show() : r(this).hide();
      });
    } });var ja = /^(?:checkbox|radio)$/i,
      ka = /<([a-z][^\/\0>\x20\t\r\n\f]+)/i,
      la = /^$|\/(?:java|ecma)script/i,
      ma = { option: [1, "<select multiple='multiple'>", "</select>"], thead: [1, "<table>", "</table>"], col: [2, "<table><colgroup>", "</colgroup></table>"], tr: [2, "<table><tbody>", "</tbody></table>"], td: [3, "<table><tbody><tr>", "</tr></tbody></table>"], _default: [0, "", ""] };ma.optgroup = ma.option, ma.tbody = ma.tfoot = ma.colgroup = ma.caption = ma.thead, ma.th = ma.td;function na(a, b) {
    var c;return c = "undefined" != typeof a.getElementsByTagName ? a.getElementsByTagName(b || "*") : "undefined" != typeof a.querySelectorAll ? a.querySelectorAll(b || "*") : [], void 0 === b || b && B(a, b) ? r.merge([a], c) : c;
  }function oa(a, b) {
    for (var c = 0, d = a.length; c < d; c++) W.set(a[c], "globalEval", !b || W.get(b[c], "globalEval"));
  }var pa = /<|&#?\w+;/;function qa(a, b, c, d, e) {
    for (var f, g, h, i, j, k, l = b.createDocumentFragment(), m = [], n = 0, o = a.length; n < o; n++) if (f = a[n], f || 0 === f) if ("object" === r.type(f)) r.merge(m, f.nodeType ? [f] : f);else if (pa.test(f)) {
      g = g || l.appendChild(b.createElement("div")), h = (ka.exec(f) || ["", ""])[1].toLowerCase(), i = ma[h] || ma._default, g.innerHTML = i[1] + r.htmlPrefilter(f) + i[2], k = i[0];while (k--) g = g.lastChild;r.merge(m, g.childNodes), g = l.firstChild, g.textContent = "";
    } else m.push(b.createTextNode(f));l.textContent = "", n = 0;while (f = m[n++]) if (d && r.inArray(f, d) > -1) e && e.push(f);else if (j = r.contains(f.ownerDocument, f), g = na(l.appendChild(f), "script"), j && oa(g), c) {
      k = 0;while (f = g[k++]) la.test(f.type || "") && c.push(f);
    }return l;
  }!function () {
    var a = d.createDocumentFragment(),
        b = a.appendChild(d.createElement("div")),
        c = d.createElement("input");c.setAttribute("type", "radio"), c.setAttribute("checked", "checked"), c.setAttribute("name", "t"), b.appendChild(c), o.checkClone = b.cloneNode(!0).cloneNode(!0).lastChild.checked, b.innerHTML = "<textarea>x</textarea>", o.noCloneChecked = !!b.cloneNode(!0).lastChild.defaultValue;
  }();var ra = d.documentElement,
      sa = /^key/,
      ta = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
      ua = /^([^.]*)(?:\.(.+)|)/;function va() {
    return !0;
  }function wa() {
    return !1;
  }function xa() {
    try {
      return d.activeElement;
    } catch (a) {}
  }function ya(a, b, c, d, e, f) {
    var g, h;if ("object" == typeof b) {
      "string" != typeof c && (d = d || c, c = void 0);for (h in b) ya(a, h, c, d, b[h], f);return a;
    }if (null == d && null == e ? (e = c, d = c = void 0) : null == e && ("string" == typeof c ? (e = d, d = void 0) : (e = d, d = c, c = void 0)), e === !1) e = wa;else if (!e) return a;return 1 === f && (g = e, e = function (a) {
      return r().off(a), g.apply(this, arguments);
    }, e.guid = g.guid || (g.guid = r.guid++)), a.each(function () {
      r.event.add(this, b, e, d, c);
    });
  }r.event = { global: {}, add: function (a, b, c, d, e) {
      var f,
          g,
          h,
          i,
          j,
          k,
          l,
          m,
          n,
          o,
          p,
          q = W.get(a);if (q) {
        c.handler && (f = c, c = f.handler, e = f.selector), e && r.find.matchesSelector(ra, e), c.guid || (c.guid = r.guid++), (i = q.events) || (i = q.events = {}), (g = q.handle) || (g = q.handle = function (b) {
          return "undefined" != typeof r && r.event.triggered !== b.type ? r.event.dispatch.apply(a, arguments) : void 0;
        }), b = (b || "").match(L) || [""], j = b.length;while (j--) h = ua.exec(b[j]) || [], n = p = h[1], o = (h[2] || "").split(".").sort(), n && (l = r.event.special[n] || {}, n = (e ? l.delegateType : l.bindType) || n, l = r.event.special[n] || {}, k = r.extend({ type: n, origType: p, data: d, handler: c, guid: c.guid, selector: e, needsContext: e && r.expr.match.needsContext.test(e), namespace: o.join(".") }, f), (m = i[n]) || (m = i[n] = [], m.delegateCount = 0, l.setup && l.setup.call(a, d, o, g) !== !1 || a.addEventListener && a.addEventListener(n, g)), l.add && (l.add.call(a, k), k.handler.guid || (k.handler.guid = c.guid)), e ? m.splice(m.delegateCount++, 0, k) : m.push(k), r.event.global[n] = !0);
      }
    }, remove: function (a, b, c, d, e) {
      var f,
          g,
          h,
          i,
          j,
          k,
          l,
          m,
          n,
          o,
          p,
          q = W.hasData(a) && W.get(a);if (q && (i = q.events)) {
        b = (b || "").match(L) || [""], j = b.length;while (j--) if (h = ua.exec(b[j]) || [], n = p = h[1], o = (h[2] || "").split(".").sort(), n) {
          l = r.event.special[n] || {}, n = (d ? l.delegateType : l.bindType) || n, m = i[n] || [], h = h[2] && new RegExp("(^|\\.)" + o.join("\\.(?:.*\\.|)") + "(\\.|$)"), g = f = m.length;while (f--) k = m[f], !e && p !== k.origType || c && c.guid !== k.guid || h && !h.test(k.namespace) || d && d !== k.selector && ("**" !== d || !k.selector) || (m.splice(f, 1), k.selector && m.delegateCount--, l.remove && l.remove.call(a, k));g && !m.length && (l.teardown && l.teardown.call(a, o, q.handle) !== !1 || r.removeEvent(a, n, q.handle), delete i[n]);
        } else for (n in i) r.event.remove(a, n + b[j], c, d, !0);r.isEmptyObject(i) && W.remove(a, "handle events");
      }
    }, dispatch: function (a) {
      var b = r.event.fix(a),
          c,
          d,
          e,
          f,
          g,
          h,
          i = new Array(arguments.length),
          j = (W.get(this, "events") || {})[b.type] || [],
          k = r.event.special[b.type] || {};for (i[0] = b, c = 1; c < arguments.length; c++) i[c] = arguments[c];if (b.delegateTarget = this, !k.preDispatch || k.preDispatch.call(this, b) !== !1) {
        h = r.event.handlers.call(this, b, j), c = 0;while ((f = h[c++]) && !b.isPropagationStopped()) {
          b.currentTarget = f.elem, d = 0;while ((g = f.handlers[d++]) && !b.isImmediatePropagationStopped()) b.rnamespace && !b.rnamespace.test(g.namespace) || (b.handleObj = g, b.data = g.data, e = ((r.event.special[g.origType] || {}).handle || g.handler).apply(f.elem, i), void 0 !== e && (b.result = e) === !1 && (b.preventDefault(), b.stopPropagation()));
        }return k.postDispatch && k.postDispatch.call(this, b), b.result;
      }
    }, handlers: function (a, b) {
      var c,
          d,
          e,
          f,
          g,
          h = [],
          i = b.delegateCount,
          j = a.target;if (i && j.nodeType && !("click" === a.type && a.button >= 1)) for (; j !== this; j = j.parentNode || this) if (1 === j.nodeType && ("click" !== a.type || j.disabled !== !0)) {
        for (f = [], g = {}, c = 0; c < i; c++) d = b[c], e = d.selector + " ", void 0 === g[e] && (g[e] = d.needsContext ? r(e, this).index(j) > -1 : r.find(e, this, null, [j]).length), g[e] && f.push(d);f.length && h.push({ elem: j, handlers: f });
      }return j = this, i < b.length && h.push({ elem: j, handlers: b.slice(i) }), h;
    }, addProp: function (a, b) {
      Object.defineProperty(r.Event.prototype, a, { enumerable: !0, configurable: !0, get: r.isFunction(b) ? function () {
          if (this.originalEvent) return b(this.originalEvent);
        } : function () {
          if (this.originalEvent) return this.originalEvent[a];
        }, set: function (b) {
          Object.defineProperty(this, a, { enumerable: !0, configurable: !0, writable: !0, value: b });
        } });
    }, fix: function (a) {
      return a[r.expando] ? a : new r.Event(a);
    }, special: { load: { noBubble: !0 }, focus: { trigger: function () {
          if (this !== xa() && this.focus) return this.focus(), !1;
        }, delegateType: "focusin" }, blur: { trigger: function () {
          if (this === xa() && this.blur) return this.blur(), !1;
        }, delegateType: "focusout" }, click: { trigger: function () {
          if ("checkbox" === this.type && this.click && B(this, "input")) return this.click(), !1;
        }, _default: function (a) {
          return B(a.target, "a");
        } }, beforeunload: { postDispatch: function (a) {
          void 0 !== a.result && a.originalEvent && (a.originalEvent.returnValue = a.result);
        } } } }, r.removeEvent = function (a, b, c) {
    a.removeEventListener && a.removeEventListener(b, c);
  }, r.Event = function (a, b) {
    return this instanceof r.Event ? (a && a.type ? (this.originalEvent = a, this.type = a.type, this.isDefaultPrevented = a.defaultPrevented || void 0 === a.defaultPrevented && a.returnValue === !1 ? va : wa, this.target = a.target && 3 === a.target.nodeType ? a.target.parentNode : a.target, this.currentTarget = a.currentTarget, this.relatedTarget = a.relatedTarget) : this.type = a, b && r.extend(this, b), this.timeStamp = a && a.timeStamp || r.now(), void (this[r.expando] = !0)) : new r.Event(a, b);
  }, r.Event.prototype = { constructor: r.Event, isDefaultPrevented: wa, isPropagationStopped: wa, isImmediatePropagationStopped: wa, isSimulated: !1, preventDefault: function () {
      var a = this.originalEvent;this.isDefaultPrevented = va, a && !this.isSimulated && a.preventDefault();
    }, stopPropagation: function () {
      var a = this.originalEvent;this.isPropagationStopped = va, a && !this.isSimulated && a.stopPropagation();
    }, stopImmediatePropagation: function () {
      var a = this.originalEvent;this.isImmediatePropagationStopped = va, a && !this.isSimulated && a.stopImmediatePropagation(), this.stopPropagation();
    } }, r.each({ altKey: !0, bubbles: !0, cancelable: !0, changedTouches: !0, ctrlKey: !0, detail: !0, eventPhase: !0, metaKey: !0, pageX: !0, pageY: !0, shiftKey: !0, view: !0, "char": !0, charCode: !0, key: !0, keyCode: !0, button: !0, buttons: !0, clientX: !0, clientY: !0, offsetX: !0, offsetY: !0, pointerId: !0, pointerType: !0, screenX: !0, screenY: !0, targetTouches: !0, toElement: !0, touches: !0, which: function (a) {
      var b = a.button;return null == a.which && sa.test(a.type) ? null != a.charCode ? a.charCode : a.keyCode : !a.which && void 0 !== b && ta.test(a.type) ? 1 & b ? 1 : 2 & b ? 3 : 4 & b ? 2 : 0 : a.which;
    } }, r.event.addProp), r.each({ mouseenter: "mouseover", mouseleave: "mouseout", pointerenter: "pointerover", pointerleave: "pointerout" }, function (a, b) {
    r.event.special[a] = { delegateType: b, bindType: b, handle: function (a) {
        var c,
            d = this,
            e = a.relatedTarget,
            f = a.handleObj;return e && (e === d || r.contains(d, e)) || (a.type = f.origType, c = f.handler.apply(this, arguments), a.type = b), c;
      } };
  }), r.fn.extend({ on: function (a, b, c, d) {
      return ya(this, a, b, c, d);
    }, one: function (a, b, c, d) {
      return ya(this, a, b, c, d, 1);
    }, off: function (a, b, c) {
      var d, e;if (a && a.preventDefault && a.handleObj) return d = a.handleObj, r(a.delegateTarget).off(d.namespace ? d.origType + "." + d.namespace : d.origType, d.selector, d.handler), this;if ("object" == typeof a) {
        for (e in a) this.off(e, b, a[e]);return this;
      }return b !== !1 && "function" != typeof b || (c = b, b = void 0), c === !1 && (c = wa), this.each(function () {
        r.event.remove(this, a, c, b);
      });
    } });var za = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,
      Aa = /<script|<style|<link/i,
      Ba = /checked\s*(?:[^=]|=\s*.checked.)/i,
      Ca = /^true\/(.*)/,
      Da = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Ea(a, b) {
    return B(a, "table") && B(11 !== b.nodeType ? b : b.firstChild, "tr") ? r(">tbody", a)[0] || a : a;
  }function Fa(a) {
    return a.type = (null !== a.getAttribute("type")) + "/" + a.type, a;
  }function Ga(a) {
    var b = Ca.exec(a.type);return b ? a.type = b[1] : a.removeAttribute("type"), a;
  }function Ha(a, b) {
    var c, d, e, f, g, h, i, j;if (1 === b.nodeType) {
      if (W.hasData(a) && (f = W.access(a), g = W.set(b, f), j = f.events)) {
        delete g.handle, g.events = {};for (e in j) for (c = 0, d = j[e].length; c < d; c++) r.event.add(b, e, j[e][c]);
      }X.hasData(a) && (h = X.access(a), i = r.extend({}, h), X.set(b, i));
    }
  }function Ia(a, b) {
    var c = b.nodeName.toLowerCase();"input" === c && ja.test(a.type) ? b.checked = a.checked : "input" !== c && "textarea" !== c || (b.defaultValue = a.defaultValue);
  }function Ja(a, b, c, d) {
    b = g.apply([], b);var e,
        f,
        h,
        i,
        j,
        k,
        l = 0,
        m = a.length,
        n = m - 1,
        q = b[0],
        s = r.isFunction(q);if (s || m > 1 && "string" == typeof q && !o.checkClone && Ba.test(q)) return a.each(function (e) {
      var f = a.eq(e);s && (b[0] = q.call(this, e, f.html())), Ja(f, b, c, d);
    });if (m && (e = qa(b, a[0].ownerDocument, !1, a, d), f = e.firstChild, 1 === e.childNodes.length && (e = f), f || d)) {
      for (h = r.map(na(e, "script"), Fa), i = h.length; l < m; l++) j = e, l !== n && (j = r.clone(j, !0, !0), i && r.merge(h, na(j, "script"))), c.call(a[l], j, l);if (i) for (k = h[h.length - 1].ownerDocument, r.map(h, Ga), l = 0; l < i; l++) j = h[l], la.test(j.type || "") && !W.access(j, "globalEval") && r.contains(k, j) && (j.src ? r._evalUrl && r._evalUrl(j.src) : p(j.textContent.replace(Da, ""), k));
    }return a;
  }function Ka(a, b, c) {
    for (var d, e = b ? r.filter(b, a) : a, f = 0; null != (d = e[f]); f++) c || 1 !== d.nodeType || r.cleanData(na(d)), d.parentNode && (c && r.contains(d.ownerDocument, d) && oa(na(d, "script")), d.parentNode.removeChild(d));return a;
  }r.extend({ htmlPrefilter: function (a) {
      return a.replace(za, "<$1></$2>");
    }, clone: function (a, b, c) {
      var d,
          e,
          f,
          g,
          h = a.cloneNode(!0),
          i = r.contains(a.ownerDocument, a);if (!(o.noCloneChecked || 1 !== a.nodeType && 11 !== a.nodeType || r.isXMLDoc(a))) for (g = na(h), f = na(a), d = 0, e = f.length; d < e; d++) Ia(f[d], g[d]);if (b) if (c) for (f = f || na(a), g = g || na(h), d = 0, e = f.length; d < e; d++) Ha(f[d], g[d]);else Ha(a, h);return g = na(h, "script"), g.length > 0 && oa(g, !i && na(a, "script")), h;
    }, cleanData: function (a) {
      for (var b, c, d, e = r.event.special, f = 0; void 0 !== (c = a[f]); f++) if (U(c)) {
        if (b = c[W.expando]) {
          if (b.events) for (d in b.events) e[d] ? r.event.remove(c, d) : r.removeEvent(c, d, b.handle);c[W.expando] = void 0;
        }c[X.expando] && (c[X.expando] = void 0);
      }
    } }), r.fn.extend({ detach: function (a) {
      return Ka(this, a, !0);
    }, remove: function (a) {
      return Ka(this, a);
    }, text: function (a) {
      return T(this, function (a) {
        return void 0 === a ? r.text(this) : this.empty().each(function () {
          1 !== this.nodeType && 11 !== this.nodeType && 9 !== this.nodeType || (this.textContent = a);
        });
      }, null, a, arguments.length);
    }, append: function () {
      return Ja(this, arguments, function (a) {
        if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {
          var b = Ea(this, a);b.appendChild(a);
        }
      });
    }, prepend: function () {
      return Ja(this, arguments, function (a) {
        if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {
          var b = Ea(this, a);b.insertBefore(a, b.firstChild);
        }
      });
    }, before: function () {
      return Ja(this, arguments, function (a) {
        this.parentNode && this.parentNode.insertBefore(a, this);
      });
    }, after: function () {
      return Ja(this, arguments, function (a) {
        this.parentNode && this.parentNode.insertBefore(a, this.nextSibling);
      });
    }, empty: function () {
      for (var a, b = 0; null != (a = this[b]); b++) 1 === a.nodeType && (r.cleanData(na(a, !1)), a.textContent = "");return this;
    }, clone: function (a, b) {
      return a = null != a && a, b = null == b ? a : b, this.map(function () {
        return r.clone(this, a, b);
      });
    }, html: function (a) {
      return T(this, function (a) {
        var b = this[0] || {},
            c = 0,
            d = this.length;if (void 0 === a && 1 === b.nodeType) return b.innerHTML;if ("string" == typeof a && !Aa.test(a) && !ma[(ka.exec(a) || ["", ""])[1].toLowerCase()]) {
          a = r.htmlPrefilter(a);try {
            for (; c < d; c++) b = this[c] || {}, 1 === b.nodeType && (r.cleanData(na(b, !1)), b.innerHTML = a);b = 0;
          } catch (e) {}
        }b && this.empty().append(a);
      }, null, a, arguments.length);
    }, replaceWith: function () {
      var a = [];return Ja(this, arguments, function (b) {
        var c = this.parentNode;r.inArray(this, a) < 0 && (r.cleanData(na(this)), c && c.replaceChild(b, this));
      }, a);
    } }), r.each({ appendTo: "append", prependTo: "prepend", insertBefore: "before", insertAfter: "after", replaceAll: "replaceWith" }, function (a, b) {
    r.fn[a] = function (a) {
      for (var c, d = [], e = r(a), f = e.length - 1, g = 0; g <= f; g++) c = g === f ? this : this.clone(!0), r(e[g])[b](c), h.apply(d, c.get());return this.pushStack(d);
    };
  });var La = /^margin/,
      Ma = new RegExp("^(" + aa + ")(?!px)[a-z%]+$", "i"),
      Na = function (b) {
    var c = b.ownerDocument.defaultView;return c && c.opener || (c = a), c.getComputedStyle(b);
  };!function () {
    function b() {
      if (i) {
        i.style.cssText = "box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%", i.innerHTML = "", ra.appendChild(h);var b = a.getComputedStyle(i);c = "1%" !== b.top, g = "2px" === b.marginLeft, e = "4px" === b.width, i.style.marginRight = "50%", f = "4px" === b.marginRight, ra.removeChild(h), i = null;
      }
    }var c,
        e,
        f,
        g,
        h = d.createElement("div"),
        i = d.createElement("div");i.style && (i.style.backgroundClip = "content-box", i.cloneNode(!0).style.backgroundClip = "", o.clearCloneStyle = "content-box" === i.style.backgroundClip, h.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute", h.appendChild(i), r.extend(o, { pixelPosition: function () {
        return b(), c;
      }, boxSizingReliable: function () {
        return b(), e;
      }, pixelMarginRight: function () {
        return b(), f;
      }, reliableMarginLeft: function () {
        return b(), g;
      } }));
  }();function Oa(a, b, c) {
    var d,
        e,
        f,
        g,
        h = a.style;return c = c || Na(a), c && (g = c.getPropertyValue(b) || c[b], "" !== g || r.contains(a.ownerDocument, a) || (g = r.style(a, b)), !o.pixelMarginRight() && Ma.test(g) && La.test(b) && (d = h.width, e = h.minWidth, f = h.maxWidth, h.minWidth = h.maxWidth = h.width = g, g = c.width, h.width = d, h.minWidth = e, h.maxWidth = f)), void 0 !== g ? g + "" : g;
  }function Pa(a, b) {
    return { get: function () {
        return a() ? void delete this.get : (this.get = b).apply(this, arguments);
      } };
  }var Qa = /^(none|table(?!-c[ea]).+)/,
      Ra = /^--/,
      Sa = { position: "absolute", visibility: "hidden", display: "block" },
      Ta = { letterSpacing: "0", fontWeight: "400" },
      Ua = ["Webkit", "Moz", "ms"],
      Va = d.createElement("div").style;function Wa(a) {
    if (a in Va) return a;var b = a[0].toUpperCase() + a.slice(1),
        c = Ua.length;while (c--) if (a = Ua[c] + b, a in Va) return a;
  }function Xa(a) {
    var b = r.cssProps[a];return b || (b = r.cssProps[a] = Wa(a) || a), b;
  }function Ya(a, b, c) {
    var d = ba.exec(b);return d ? Math.max(0, d[2] - (c || 0)) + (d[3] || "px") : b;
  }function Za(a, b, c, d, e) {
    var f,
        g = 0;for (f = c === (d ? "border" : "content") ? 4 : "width" === b ? 1 : 0; f < 4; f += 2) "margin" === c && (g += r.css(a, c + ca[f], !0, e)), d ? ("content" === c && (g -= r.css(a, "padding" + ca[f], !0, e)), "margin" !== c && (g -= r.css(a, "border" + ca[f] + "Width", !0, e))) : (g += r.css(a, "padding" + ca[f], !0, e), "padding" !== c && (g += r.css(a, "border" + ca[f] + "Width", !0, e)));return g;
  }function $a(a, b, c) {
    var d,
        e = Na(a),
        f = Oa(a, b, e),
        g = "border-box" === r.css(a, "boxSizing", !1, e);return Ma.test(f) ? f : (d = g && (o.boxSizingReliable() || f === a.style[b]), "auto" === f && (f = a["offset" + b[0].toUpperCase() + b.slice(1)]), f = parseFloat(f) || 0, f + Za(a, b, c || (g ? "border" : "content"), d, e) + "px");
  }r.extend({ cssHooks: { opacity: { get: function (a, b) {
          if (b) {
            var c = Oa(a, "opacity");return "" === c ? "1" : c;
          }
        } } }, cssNumber: { animationIterationCount: !0, columnCount: !0, fillOpacity: !0, flexGrow: !0, flexShrink: !0, fontWeight: !0, lineHeight: !0, opacity: !0, order: !0, orphans: !0, widows: !0, zIndex: !0, zoom: !0 }, cssProps: { "float": "cssFloat" }, style: function (a, b, c, d) {
      if (a && 3 !== a.nodeType && 8 !== a.nodeType && a.style) {
        var e,
            f,
            g,
            h = r.camelCase(b),
            i = Ra.test(b),
            j = a.style;return i || (b = Xa(h)), g = r.cssHooks[b] || r.cssHooks[h], void 0 === c ? g && "get" in g && void 0 !== (e = g.get(a, !1, d)) ? e : j[b] : (f = typeof c, "string" === f && (e = ba.exec(c)) && e[1] && (c = fa(a, b, e), f = "number"), null != c && c === c && ("number" === f && (c += e && e[3] || (r.cssNumber[h] ? "" : "px")), o.clearCloneStyle || "" !== c || 0 !== b.indexOf("background") || (j[b] = "inherit"), g && "set" in g && void 0 === (c = g.set(a, c, d)) || (i ? j.setProperty(b, c) : j[b] = c)), void 0);
      }
    }, css: function (a, b, c, d) {
      var e,
          f,
          g,
          h = r.camelCase(b),
          i = Ra.test(b);return i || (b = Xa(h)), g = r.cssHooks[b] || r.cssHooks[h], g && "get" in g && (e = g.get(a, !0, c)), void 0 === e && (e = Oa(a, b, d)), "normal" === e && b in Ta && (e = Ta[b]), "" === c || c ? (f = parseFloat(e), c === !0 || isFinite(f) ? f || 0 : e) : e;
    } }), r.each(["height", "width"], function (a, b) {
    r.cssHooks[b] = { get: function (a, c, d) {
        if (c) return !Qa.test(r.css(a, "display")) || a.getClientRects().length && a.getBoundingClientRect().width ? $a(a, b, d) : ea(a, Sa, function () {
          return $a(a, b, d);
        });
      }, set: function (a, c, d) {
        var e,
            f = d && Na(a),
            g = d && Za(a, b, d, "border-box" === r.css(a, "boxSizing", !1, f), f);return g && (e = ba.exec(c)) && "px" !== (e[3] || "px") && (a.style[b] = c, c = r.css(a, b)), Ya(a, c, g);
      } };
  }), r.cssHooks.marginLeft = Pa(o.reliableMarginLeft, function (a, b) {
    if (b) return (parseFloat(Oa(a, "marginLeft")) || a.getBoundingClientRect().left - ea(a, { marginLeft: 0 }, function () {
      return a.getBoundingClientRect().left;
    })) + "px";
  }), r.each({ margin: "", padding: "", border: "Width" }, function (a, b) {
    r.cssHooks[a + b] = { expand: function (c) {
        for (var d = 0, e = {}, f = "string" == typeof c ? c.split(" ") : [c]; d < 4; d++) e[a + ca[d] + b] = f[d] || f[d - 2] || f[0];return e;
      } }, La.test(a) || (r.cssHooks[a + b].set = Ya);
  }), r.fn.extend({ css: function (a, b) {
      return T(this, function (a, b, c) {
        var d,
            e,
            f = {},
            g = 0;if (Array.isArray(b)) {
          for (d = Na(a), e = b.length; g < e; g++) f[b[g]] = r.css(a, b[g], !1, d);return f;
        }return void 0 !== c ? r.style(a, b, c) : r.css(a, b);
      }, a, b, arguments.length > 1);
    } });function _a(a, b, c, d, e) {
    return new _a.prototype.init(a, b, c, d, e);
  }r.Tween = _a, _a.prototype = { constructor: _a, init: function (a, b, c, d, e, f) {
      this.elem = a, this.prop = c, this.easing = e || r.easing._default, this.options = b, this.start = this.now = this.cur(), this.end = d, this.unit = f || (r.cssNumber[c] ? "" : "px");
    }, cur: function () {
      var a = _a.propHooks[this.prop];return a && a.get ? a.get(this) : _a.propHooks._default.get(this);
    }, run: function (a) {
      var b,
          c = _a.propHooks[this.prop];return this.options.duration ? this.pos = b = r.easing[this.easing](a, this.options.duration * a, 0, 1, this.options.duration) : this.pos = b = a, this.now = (this.end - this.start) * b + this.start, this.options.step && this.options.step.call(this.elem, this.now, this), c && c.set ? c.set(this) : _a.propHooks._default.set(this), this;
    } }, _a.prototype.init.prototype = _a.prototype, _a.propHooks = { _default: { get: function (a) {
        var b;return 1 !== a.elem.nodeType || null != a.elem[a.prop] && null == a.elem.style[a.prop] ? a.elem[a.prop] : (b = r.css(a.elem, a.prop, ""), b && "auto" !== b ? b : 0);
      }, set: function (a) {
        r.fx.step[a.prop] ? r.fx.step[a.prop](a) : 1 !== a.elem.nodeType || null == a.elem.style[r.cssProps[a.prop]] && !r.cssHooks[a.prop] ? a.elem[a.prop] = a.now : r.style(a.elem, a.prop, a.now + a.unit);
      } } }, _a.propHooks.scrollTop = _a.propHooks.scrollLeft = { set: function (a) {
      a.elem.nodeType && a.elem.parentNode && (a.elem[a.prop] = a.now);
    } }, r.easing = { linear: function (a) {
      return a;
    }, swing: function (a) {
      return .5 - Math.cos(a * Math.PI) / 2;
    }, _default: "swing" }, r.fx = _a.prototype.init, r.fx.step = {};var ab,
      bb,
      cb = /^(?:toggle|show|hide)$/,
      db = /queueHooks$/;function eb() {
    bb && (d.hidden === !1 && a.requestAnimationFrame ? a.requestAnimationFrame(eb) : a.setTimeout(eb, r.fx.interval), r.fx.tick());
  }function fb() {
    return a.setTimeout(function () {
      ab = void 0;
    }), ab = r.now();
  }function gb(a, b) {
    var c,
        d = 0,
        e = { height: a };for (b = b ? 1 : 0; d < 4; d += 2 - b) c = ca[d], e["margin" + c] = e["padding" + c] = a;return b && (e.opacity = e.width = a), e;
  }function hb(a, b, c) {
    for (var d, e = (kb.tweeners[b] || []).concat(kb.tweeners["*"]), f = 0, g = e.length; f < g; f++) if (d = e[f].call(c, b, a)) return d;
  }function ib(a, b, c) {
    var d,
        e,
        f,
        g,
        h,
        i,
        j,
        k,
        l = "width" in b || "height" in b,
        m = this,
        n = {},
        o = a.style,
        p = a.nodeType && da(a),
        q = W.get(a, "fxshow");c.queue || (g = r._queueHooks(a, "fx"), null == g.unqueued && (g.unqueued = 0, h = g.empty.fire, g.empty.fire = function () {
      g.unqueued || h();
    }), g.unqueued++, m.always(function () {
      m.always(function () {
        g.unqueued--, r.queue(a, "fx").length || g.empty.fire();
      });
    }));for (d in b) if (e = b[d], cb.test(e)) {
      if (delete b[d], f = f || "toggle" === e, e === (p ? "hide" : "show")) {
        if ("show" !== e || !q || void 0 === q[d]) continue;p = !0;
      }n[d] = q && q[d] || r.style(a, d);
    }if (i = !r.isEmptyObject(b), i || !r.isEmptyObject(n)) {
      l && 1 === a.nodeType && (c.overflow = [o.overflow, o.overflowX, o.overflowY], j = q && q.display, null == j && (j = W.get(a, "display")), k = r.css(a, "display"), "none" === k && (j ? k = j : (ia([a], !0), j = a.style.display || j, k = r.css(a, "display"), ia([a]))), ("inline" === k || "inline-block" === k && null != j) && "none" === r.css(a, "float") && (i || (m.done(function () {
        o.display = j;
      }), null == j && (k = o.display, j = "none" === k ? "" : k)), o.display = "inline-block")), c.overflow && (o.overflow = "hidden", m.always(function () {
        o.overflow = c.overflow[0], o.overflowX = c.overflow[1], o.overflowY = c.overflow[2];
      })), i = !1;for (d in n) i || (q ? "hidden" in q && (p = q.hidden) : q = W.access(a, "fxshow", { display: j }), f && (q.hidden = !p), p && ia([a], !0), m.done(function () {
        p || ia([a]), W.remove(a, "fxshow");for (d in n) r.style(a, d, n[d]);
      })), i = hb(p ? q[d] : 0, d, m), d in q || (q[d] = i.start, p && (i.end = i.start, i.start = 0));
    }
  }function jb(a, b) {
    var c, d, e, f, g;for (c in a) if (d = r.camelCase(c), e = b[d], f = a[c], Array.isArray(f) && (e = f[1], f = a[c] = f[0]), c !== d && (a[d] = f, delete a[c]), g = r.cssHooks[d], g && "expand" in g) {
      f = g.expand(f), delete a[d];for (c in f) c in a || (a[c] = f[c], b[c] = e);
    } else b[d] = e;
  }function kb(a, b, c) {
    var d,
        e,
        f = 0,
        g = kb.prefilters.length,
        h = r.Deferred().always(function () {
      delete i.elem;
    }),
        i = function () {
      if (e) return !1;for (var b = ab || fb(), c = Math.max(0, j.startTime + j.duration - b), d = c / j.duration || 0, f = 1 - d, g = 0, i = j.tweens.length; g < i; g++) j.tweens[g].run(f);return h.notifyWith(a, [j, f, c]), f < 1 && i ? c : (i || h.notifyWith(a, [j, 1, 0]), h.resolveWith(a, [j]), !1);
    },
        j = h.promise({ elem: a, props: r.extend({}, b), opts: r.extend(!0, { specialEasing: {}, easing: r.easing._default }, c), originalProperties: b, originalOptions: c, startTime: ab || fb(), duration: c.duration, tweens: [], createTween: function (b, c) {
        var d = r.Tween(a, j.opts, b, c, j.opts.specialEasing[b] || j.opts.easing);return j.tweens.push(d), d;
      }, stop: function (b) {
        var c = 0,
            d = b ? j.tweens.length : 0;if (e) return this;for (e = !0; c < d; c++) j.tweens[c].run(1);return b ? (h.notifyWith(a, [j, 1, 0]), h.resolveWith(a, [j, b])) : h.rejectWith(a, [j, b]), this;
      } }),
        k = j.props;for (jb(k, j.opts.specialEasing); f < g; f++) if (d = kb.prefilters[f].call(j, a, k, j.opts)) return r.isFunction(d.stop) && (r._queueHooks(j.elem, j.opts.queue).stop = r.proxy(d.stop, d)), d;return r.map(k, hb, j), r.isFunction(j.opts.start) && j.opts.start.call(a, j), j.progress(j.opts.progress).done(j.opts.done, j.opts.complete).fail(j.opts.fail).always(j.opts.always), r.fx.timer(r.extend(i, { elem: a, anim: j, queue: j.opts.queue })), j;
  }r.Animation = r.extend(kb, { tweeners: { "*": [function (a, b) {
        var c = this.createTween(a, b);return fa(c.elem, a, ba.exec(b), c), c;
      }] }, tweener: function (a, b) {
      r.isFunction(a) ? (b = a, a = ["*"]) : a = a.match(L);for (var c, d = 0, e = a.length; d < e; d++) c = a[d], kb.tweeners[c] = kb.tweeners[c] || [], kb.tweeners[c].unshift(b);
    }, prefilters: [ib], prefilter: function (a, b) {
      b ? kb.prefilters.unshift(a) : kb.prefilters.push(a);
    } }), r.speed = function (a, b, c) {
    var d = a && "object" == typeof a ? r.extend({}, a) : { complete: c || !c && b || r.isFunction(a) && a, duration: a, easing: c && b || b && !r.isFunction(b) && b };return r.fx.off ? d.duration = 0 : "number" != typeof d.duration && (d.duration in r.fx.speeds ? d.duration = r.fx.speeds[d.duration] : d.duration = r.fx.speeds._default), null != d.queue && d.queue !== !0 || (d.queue = "fx"), d.old = d.complete, d.complete = function () {
      r.isFunction(d.old) && d.old.call(this), d.queue && r.dequeue(this, d.queue);
    }, d;
  }, r.fn.extend({ fadeTo: function (a, b, c, d) {
      return this.filter(da).css("opacity", 0).show().end().animate({ opacity: b }, a, c, d);
    }, animate: function (a, b, c, d) {
      var e = r.isEmptyObject(a),
          f = r.speed(b, c, d),
          g = function () {
        var b = kb(this, r.extend({}, a), f);(e || W.get(this, "finish")) && b.stop(!0);
      };return g.finish = g, e || f.queue === !1 ? this.each(g) : this.queue(f.queue, g);
    }, stop: function (a, b, c) {
      var d = function (a) {
        var b = a.stop;delete a.stop, b(c);
      };return "string" != typeof a && (c = b, b = a, a = void 0), b && a !== !1 && this.queue(a || "fx", []), this.each(function () {
        var b = !0,
            e = null != a && a + "queueHooks",
            f = r.timers,
            g = W.get(this);if (e) g[e] && g[e].stop && d(g[e]);else for (e in g) g[e] && g[e].stop && db.test(e) && d(g[e]);for (e = f.length; e--;) f[e].elem !== this || null != a && f[e].queue !== a || (f[e].anim.stop(c), b = !1, f.splice(e, 1));!b && c || r.dequeue(this, a);
      });
    }, finish: function (a) {
      return a !== !1 && (a = a || "fx"), this.each(function () {
        var b,
            c = W.get(this),
            d = c[a + "queue"],
            e = c[a + "queueHooks"],
            f = r.timers,
            g = d ? d.length : 0;for (c.finish = !0, r.queue(this, a, []), e && e.stop && e.stop.call(this, !0), b = f.length; b--;) f[b].elem === this && f[b].queue === a && (f[b].anim.stop(!0), f.splice(b, 1));for (b = 0; b < g; b++) d[b] && d[b].finish && d[b].finish.call(this);delete c.finish;
      });
    } }), r.each(["toggle", "show", "hide"], function (a, b) {
    var c = r.fn[b];r.fn[b] = function (a, d, e) {
      return null == a || "boolean" == typeof a ? c.apply(this, arguments) : this.animate(gb(b, !0), a, d, e);
    };
  }), r.each({ slideDown: gb("show"), slideUp: gb("hide"), slideToggle: gb("toggle"), fadeIn: { opacity: "show" }, fadeOut: { opacity: "hide" }, fadeToggle: { opacity: "toggle" } }, function (a, b) {
    r.fn[a] = function (a, c, d) {
      return this.animate(b, a, c, d);
    };
  }), r.timers = [], r.fx.tick = function () {
    var a,
        b = 0,
        c = r.timers;for (ab = r.now(); b < c.length; b++) a = c[b], a() || c[b] !== a || c.splice(b--, 1);c.length || r.fx.stop(), ab = void 0;
  }, r.fx.timer = function (a) {
    r.timers.push(a), r.fx.start();
  }, r.fx.interval = 13, r.fx.start = function () {
    bb || (bb = !0, eb());
  }, r.fx.stop = function () {
    bb = null;
  }, r.fx.speeds = { slow: 600, fast: 200, _default: 400 }, r.fn.delay = function (b, c) {
    return b = r.fx ? r.fx.speeds[b] || b : b, c = c || "fx", this.queue(c, function (c, d) {
      var e = a.setTimeout(c, b);d.stop = function () {
        a.clearTimeout(e);
      };
    });
  }, function () {
    var a = d.createElement("input"),
        b = d.createElement("select"),
        c = b.appendChild(d.createElement("option"));a.type = "checkbox", o.checkOn = "" !== a.value, o.optSelected = c.selected, a = d.createElement("input"), a.value = "t", a.type = "radio", o.radioValue = "t" === a.value;
  }();var lb,
      mb = r.expr.attrHandle;r.fn.extend({ attr: function (a, b) {
      return T(this, r.attr, a, b, arguments.length > 1);
    }, removeAttr: function (a) {
      return this.each(function () {
        r.removeAttr(this, a);
      });
    } }), r.extend({ attr: function (a, b, c) {
      var d,
          e,
          f = a.nodeType;if (3 !== f && 8 !== f && 2 !== f) return "undefined" == typeof a.getAttribute ? r.prop(a, b, c) : (1 === f && r.isXMLDoc(a) || (e = r.attrHooks[b.toLowerCase()] || (r.expr.match.bool.test(b) ? lb : void 0)), void 0 !== c ? null === c ? void r.removeAttr(a, b) : e && "set" in e && void 0 !== (d = e.set(a, c, b)) ? d : (a.setAttribute(b, c + ""), c) : e && "get" in e && null !== (d = e.get(a, b)) ? d : (d = r.find.attr(a, b), null == d ? void 0 : d));
    }, attrHooks: { type: { set: function (a, b) {
          if (!o.radioValue && "radio" === b && B(a, "input")) {
            var c = a.value;return a.setAttribute("type", b), c && (a.value = c), b;
          }
        } } }, removeAttr: function (a, b) {
      var c,
          d = 0,
          e = b && b.match(L);if (e && 1 === a.nodeType) while (c = e[d++]) a.removeAttribute(c);
    } }), lb = { set: function (a, b, c) {
      return b === !1 ? r.removeAttr(a, c) : a.setAttribute(c, c), c;
    } }, r.each(r.expr.match.bool.source.match(/\w+/g), function (a, b) {
    var c = mb[b] || r.find.attr;mb[b] = function (a, b, d) {
      var e,
          f,
          g = b.toLowerCase();return d || (f = mb[g], mb[g] = e, e = null != c(a, b, d) ? g : null, mb[g] = f), e;
    };
  });var nb = /^(?:input|select|textarea|button)$/i,
      ob = /^(?:a|area)$/i;r.fn.extend({ prop: function (a, b) {
      return T(this, r.prop, a, b, arguments.length > 1);
    }, removeProp: function (a) {
      return this.each(function () {
        delete this[r.propFix[a] || a];
      });
    } }), r.extend({ prop: function (a, b, c) {
      var d,
          e,
          f = a.nodeType;if (3 !== f && 8 !== f && 2 !== f) return 1 === f && r.isXMLDoc(a) || (b = r.propFix[b] || b, e = r.propHooks[b]), void 0 !== c ? e && "set" in e && void 0 !== (d = e.set(a, c, b)) ? d : a[b] = c : e && "get" in e && null !== (d = e.get(a, b)) ? d : a[b];
    }, propHooks: { tabIndex: { get: function (a) {
          var b = r.find.attr(a, "tabindex");return b ? parseInt(b, 10) : nb.test(a.nodeName) || ob.test(a.nodeName) && a.href ? 0 : -1;
        } } }, propFix: { "for": "htmlFor", "class": "className" } }), o.optSelected || (r.propHooks.selected = { get: function (a) {
      var b = a.parentNode;return b && b.parentNode && b.parentNode.selectedIndex, null;
    }, set: function (a) {
      var b = a.parentNode;b && (b.selectedIndex, b.parentNode && b.parentNode.selectedIndex);
    } }), r.each(["tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable"], function () {
    r.propFix[this.toLowerCase()] = this;
  });function pb(a) {
    var b = a.match(L) || [];return b.join(" ");
  }function qb(a) {
    return a.getAttribute && a.getAttribute("class") || "";
  }r.fn.extend({ addClass: function (a) {
      var b,
          c,
          d,
          e,
          f,
          g,
          h,
          i = 0;if (r.isFunction(a)) return this.each(function (b) {
        r(this).addClass(a.call(this, b, qb(this)));
      });if ("string" == typeof a && a) {
        b = a.match(L) || [];while (c = this[i++]) if (e = qb(c), d = 1 === c.nodeType && " " + pb(e) + " ") {
          g = 0;while (f = b[g++]) d.indexOf(" " + f + " ") < 0 && (d += f + " ");h = pb(d), e !== h && c.setAttribute("class", h);
        }
      }return this;
    }, removeClass: function (a) {
      var b,
          c,
          d,
          e,
          f,
          g,
          h,
          i = 0;if (r.isFunction(a)) return this.each(function (b) {
        r(this).removeClass(a.call(this, b, qb(this)));
      });if (!arguments.length) return this.attr("class", "");if ("string" == typeof a && a) {
        b = a.match(L) || [];while (c = this[i++]) if (e = qb(c), d = 1 === c.nodeType && " " + pb(e) + " ") {
          g = 0;while (f = b[g++]) while (d.indexOf(" " + f + " ") > -1) d = d.replace(" " + f + " ", " ");h = pb(d), e !== h && c.setAttribute("class", h);
        }
      }return this;
    }, toggleClass: function (a, b) {
      var c = typeof a;return "boolean" == typeof b && "string" === c ? b ? this.addClass(a) : this.removeClass(a) : r.isFunction(a) ? this.each(function (c) {
        r(this).toggleClass(a.call(this, c, qb(this), b), b);
      }) : this.each(function () {
        var b, d, e, f;if ("string" === c) {
          d = 0, e = r(this), f = a.match(L) || [];while (b = f[d++]) e.hasClass(b) ? e.removeClass(b) : e.addClass(b);
        } else void 0 !== a && "boolean" !== c || (b = qb(this), b && W.set(this, "__className__", b), this.setAttribute && this.setAttribute("class", b || a === !1 ? "" : W.get(this, "__className__") || ""));
      });
    }, hasClass: function (a) {
      var b,
          c,
          d = 0;b = " " + a + " ";while (c = this[d++]) if (1 === c.nodeType && (" " + pb(qb(c)) + " ").indexOf(b) > -1) return !0;return !1;
    } });var rb = /\r/g;r.fn.extend({ val: function (a) {
      var b,
          c,
          d,
          e = this[0];{
        if (arguments.length) return d = r.isFunction(a), this.each(function (c) {
          var e;1 === this.nodeType && (e = d ? a.call(this, c, r(this).val()) : a, null == e ? e = "" : "number" == typeof e ? e += "" : Array.isArray(e) && (e = r.map(e, function (a) {
            return null == a ? "" : a + "";
          })), b = r.valHooks[this.type] || r.valHooks[this.nodeName.toLowerCase()], b && "set" in b && void 0 !== b.set(this, e, "value") || (this.value = e));
        });if (e) return b = r.valHooks[e.type] || r.valHooks[e.nodeName.toLowerCase()], b && "get" in b && void 0 !== (c = b.get(e, "value")) ? c : (c = e.value, "string" == typeof c ? c.replace(rb, "") : null == c ? "" : c);
      }
    } }), r.extend({ valHooks: { option: { get: function (a) {
          var b = r.find.attr(a, "value");return null != b ? b : pb(r.text(a));
        } }, select: { get: function (a) {
          var b,
              c,
              d,
              e = a.options,
              f = a.selectedIndex,
              g = "select-one" === a.type,
              h = g ? null : [],
              i = g ? f + 1 : e.length;for (d = f < 0 ? i : g ? f : 0; d < i; d++) if (c = e[d], (c.selected || d === f) && !c.disabled && (!c.parentNode.disabled || !B(c.parentNode, "optgroup"))) {
            if (b = r(c).val(), g) return b;h.push(b);
          }return h;
        }, set: function (a, b) {
          var c,
              d,
              e = a.options,
              f = r.makeArray(b),
              g = e.length;while (g--) d = e[g], (d.selected = r.inArray(r.valHooks.option.get(d), f) > -1) && (c = !0);return c || (a.selectedIndex = -1), f;
        } } } }), r.each(["radio", "checkbox"], function () {
    r.valHooks[this] = { set: function (a, b) {
        if (Array.isArray(b)) return a.checked = r.inArray(r(a).val(), b) > -1;
      } }, o.checkOn || (r.valHooks[this].get = function (a) {
      return null === a.getAttribute("value") ? "on" : a.value;
    });
  });var sb = /^(?:focusinfocus|focusoutblur)$/;r.extend(r.event, { trigger: function (b, c, e, f) {
      var g,
          h,
          i,
          j,
          k,
          m,
          n,
          o = [e || d],
          p = l.call(b, "type") ? b.type : b,
          q = l.call(b, "namespace") ? b.namespace.split(".") : [];if (h = i = e = e || d, 3 !== e.nodeType && 8 !== e.nodeType && !sb.test(p + r.event.triggered) && (p.indexOf(".") > -1 && (q = p.split("."), p = q.shift(), q.sort()), k = p.indexOf(":") < 0 && "on" + p, b = b[r.expando] ? b : new r.Event(p, "object" == typeof b && b), b.isTrigger = f ? 2 : 3, b.namespace = q.join("."), b.rnamespace = b.namespace ? new RegExp("(^|\\.)" + q.join("\\.(?:.*\\.|)") + "(\\.|$)") : null, b.result = void 0, b.target || (b.target = e), c = null == c ? [b] : r.makeArray(c, [b]), n = r.event.special[p] || {}, f || !n.trigger || n.trigger.apply(e, c) !== !1)) {
        if (!f && !n.noBubble && !r.isWindow(e)) {
          for (j = n.delegateType || p, sb.test(j + p) || (h = h.parentNode); h; h = h.parentNode) o.push(h), i = h;i === (e.ownerDocument || d) && o.push(i.defaultView || i.parentWindow || a);
        }g = 0;while ((h = o[g++]) && !b.isPropagationStopped()) b.type = g > 1 ? j : n.bindType || p, m = (W.get(h, "events") || {})[b.type] && W.get(h, "handle"), m && m.apply(h, c), m = k && h[k], m && m.apply && U(h) && (b.result = m.apply(h, c), b.result === !1 && b.preventDefault());return b.type = p, f || b.isDefaultPrevented() || n._default && n._default.apply(o.pop(), c) !== !1 || !U(e) || k && r.isFunction(e[p]) && !r.isWindow(e) && (i = e[k], i && (e[k] = null), r.event.triggered = p, e[p](), r.event.triggered = void 0, i && (e[k] = i)), b.result;
      }
    }, simulate: function (a, b, c) {
      var d = r.extend(new r.Event(), c, { type: a, isSimulated: !0 });r.event.trigger(d, null, b);
    } }), r.fn.extend({ trigger: function (a, b) {
      return this.each(function () {
        r.event.trigger(a, b, this);
      });
    }, triggerHandler: function (a, b) {
      var c = this[0];if (c) return r.event.trigger(a, b, c, !0);
    } }), r.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "), function (a, b) {
    r.fn[b] = function (a, c) {
      return arguments.length > 0 ? this.on(b, null, a, c) : this.trigger(b);
    };
  }), r.fn.extend({ hover: function (a, b) {
      return this.mouseenter(a).mouseleave(b || a);
    } }), o.focusin = "onfocusin" in a, o.focusin || r.each({ focus: "focusin", blur: "focusout" }, function (a, b) {
    var c = function (a) {
      r.event.simulate(b, a.target, r.event.fix(a));
    };r.event.special[b] = { setup: function () {
        var d = this.ownerDocument || this,
            e = W.access(d, b);e || d.addEventListener(a, c, !0), W.access(d, b, (e || 0) + 1);
      }, teardown: function () {
        var d = this.ownerDocument || this,
            e = W.access(d, b) - 1;e ? W.access(d, b, e) : (d.removeEventListener(a, c, !0), W.remove(d, b));
      } };
  });var tb = a.location,
      ub = r.now(),
      vb = /\?/;r.parseXML = function (b) {
    var c;if (!b || "string" != typeof b) return null;try {
      c = new a.DOMParser().parseFromString(b, "text/xml");
    } catch (d) {
      c = void 0;
    }return c && !c.getElementsByTagName("parsererror").length || r.error("Invalid XML: " + b), c;
  };var wb = /\[\]$/,
      xb = /\r?\n/g,
      yb = /^(?:submit|button|image|reset|file)$/i,
      zb = /^(?:input|select|textarea|keygen)/i;function Ab(a, b, c, d) {
    var e;if (Array.isArray(b)) r.each(b, function (b, e) {
      c || wb.test(a) ? d(a, e) : Ab(a + "[" + ("object" == typeof e && null != e ? b : "") + "]", e, c, d);
    });else if (c || "object" !== r.type(b)) d(a, b);else for (e in b) Ab(a + "[" + e + "]", b[e], c, d);
  }r.param = function (a, b) {
    var c,
        d = [],
        e = function (a, b) {
      var c = r.isFunction(b) ? b() : b;d[d.length] = encodeURIComponent(a) + "=" + encodeURIComponent(null == c ? "" : c);
    };if (Array.isArray(a) || a.jquery && !r.isPlainObject(a)) r.each(a, function () {
      e(this.name, this.value);
    });else for (c in a) Ab(c, a[c], b, e);return d.join("&");
  }, r.fn.extend({ serialize: function () {
      return r.param(this.serializeArray());
    }, serializeArray: function () {
      return this.map(function () {
        var a = r.prop(this, "elements");return a ? r.makeArray(a) : this;
      }).filter(function () {
        var a = this.type;return this.name && !r(this).is(":disabled") && zb.test(this.nodeName) && !yb.test(a) && (this.checked || !ja.test(a));
      }).map(function (a, b) {
        var c = r(this).val();return null == c ? null : Array.isArray(c) ? r.map(c, function (a) {
          return { name: b.name, value: a.replace(xb, "\r\n") };
        }) : { name: b.name, value: c.replace(xb, "\r\n") };
      }).get();
    } });var Bb = /%20/g,
      Cb = /#.*$/,
      Db = /([?&])_=[^&]*/,
      Eb = /^(.*?):[ \t]*([^\r\n]*)$/gm,
      Fb = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
      Gb = /^(?:GET|HEAD)$/,
      Hb = /^\/\//,
      Ib = {},
      Jb = {},
      Kb = "*/".concat("*"),
      Lb = d.createElement("a");Lb.href = tb.href;function Mb(a) {
    return function (b, c) {
      "string" != typeof b && (c = b, b = "*");var d,
          e = 0,
          f = b.toLowerCase().match(L) || [];if (r.isFunction(c)) while (d = f[e++]) "+" === d[0] ? (d = d.slice(1) || "*", (a[d] = a[d] || []).unshift(c)) : (a[d] = a[d] || []).push(c);
    };
  }function Nb(a, b, c, d) {
    var e = {},
        f = a === Jb;function g(h) {
      var i;return e[h] = !0, r.each(a[h] || [], function (a, h) {
        var j = h(b, c, d);return "string" != typeof j || f || e[j] ? f ? !(i = j) : void 0 : (b.dataTypes.unshift(j), g(j), !1);
      }), i;
    }return g(b.dataTypes[0]) || !e["*"] && g("*");
  }function Ob(a, b) {
    var c,
        d,
        e = r.ajaxSettings.flatOptions || {};for (c in b) void 0 !== b[c] && ((e[c] ? a : d || (d = {}))[c] = b[c]);return d && r.extend(!0, a, d), a;
  }function Pb(a, b, c) {
    var d,
        e,
        f,
        g,
        h = a.contents,
        i = a.dataTypes;while ("*" === i[0]) i.shift(), void 0 === d && (d = a.mimeType || b.getResponseHeader("Content-Type"));if (d) for (e in h) if (h[e] && h[e].test(d)) {
      i.unshift(e);break;
    }if (i[0] in c) f = i[0];else {
      for (e in c) {
        if (!i[0] || a.converters[e + " " + i[0]]) {
          f = e;break;
        }g || (g = e);
      }f = f || g;
    }if (f) return f !== i[0] && i.unshift(f), c[f];
  }function Qb(a, b, c, d) {
    var e,
        f,
        g,
        h,
        i,
        j = {},
        k = a.dataTypes.slice();if (k[1]) for (g in a.converters) j[g.toLowerCase()] = a.converters[g];f = k.shift();while (f) if (a.responseFields[f] && (c[a.responseFields[f]] = b), !i && d && a.dataFilter && (b = a.dataFilter(b, a.dataType)), i = f, f = k.shift()) if ("*" === f) f = i;else if ("*" !== i && i !== f) {
      if (g = j[i + " " + f] || j["* " + f], !g) for (e in j) if (h = e.split(" "), h[1] === f && (g = j[i + " " + h[0]] || j["* " + h[0]])) {
        g === !0 ? g = j[e] : j[e] !== !0 && (f = h[0], k.unshift(h[1]));break;
      }if (g !== !0) if (g && a["throws"]) b = g(b);else try {
        b = g(b);
      } catch (l) {
        return { state: "parsererror", error: g ? l : "No conversion from " + i + " to " + f };
      }
    }return { state: "success", data: b };
  }r.extend({ active: 0, lastModified: {}, etag: {}, ajaxSettings: { url: tb.href, type: "GET", isLocal: Fb.test(tb.protocol), global: !0, processData: !0, async: !0, contentType: "application/x-www-form-urlencoded; charset=UTF-8", accepts: { "*": Kb, text: "text/plain", html: "text/html", xml: "application/xml, text/xml", json: "application/json, text/javascript" }, contents: { xml: /\bxml\b/, html: /\bhtml/, json: /\bjson\b/ }, responseFields: { xml: "responseXML", text: "responseText", json: "responseJSON" }, converters: { "* text": String, "text html": !0, "text json": JSON.parse, "text xml": r.parseXML }, flatOptions: { url: !0, context: !0 } }, ajaxSetup: function (a, b) {
      return b ? Ob(Ob(a, r.ajaxSettings), b) : Ob(r.ajaxSettings, a);
    }, ajaxPrefilter: Mb(Ib), ajaxTransport: Mb(Jb), ajax: function (b, c) {
      "object" == typeof b && (c = b, b = void 0), c = c || {};var e,
          f,
          g,
          h,
          i,
          j,
          k,
          l,
          m,
          n,
          o = r.ajaxSetup({}, c),
          p = o.context || o,
          q = o.context && (p.nodeType || p.jquery) ? r(p) : r.event,
          s = r.Deferred(),
          t = r.Callbacks("once memory"),
          u = o.statusCode || {},
          v = {},
          w = {},
          x = "canceled",
          y = { readyState: 0, getResponseHeader: function (a) {
          var b;if (k) {
            if (!h) {
              h = {};while (b = Eb.exec(g)) h[b[1].toLowerCase()] = b[2];
            }b = h[a.toLowerCase()];
          }return null == b ? null : b;
        }, getAllResponseHeaders: function () {
          return k ? g : null;
        }, setRequestHeader: function (a, b) {
          return null == k && (a = w[a.toLowerCase()] = w[a.toLowerCase()] || a, v[a] = b), this;
        }, overrideMimeType: function (a) {
          return null == k && (o.mimeType = a), this;
        }, statusCode: function (a) {
          var b;if (a) if (k) y.always(a[y.status]);else for (b in a) u[b] = [u[b], a[b]];return this;
        }, abort: function (a) {
          var b = a || x;return e && e.abort(b), A(0, b), this;
        } };if (s.promise(y), o.url = ((b || o.url || tb.href) + "").replace(Hb, tb.protocol + "//"), o.type = c.method || c.type || o.method || o.type, o.dataTypes = (o.dataType || "*").toLowerCase().match(L) || [""], null == o.crossDomain) {
        j = d.createElement("a");try {
          j.href = o.url, j.href = j.href, o.crossDomain = Lb.protocol + "//" + Lb.host != j.protocol + "//" + j.host;
        } catch (z) {
          o.crossDomain = !0;
        }
      }if (o.data && o.processData && "string" != typeof o.data && (o.data = r.param(o.data, o.traditional)), Nb(Ib, o, c, y), k) return y;l = r.event && o.global, l && 0 === r.active++ && r.event.trigger("ajaxStart"), o.type = o.type.toUpperCase(), o.hasContent = !Gb.test(o.type), f = o.url.replace(Cb, ""), o.hasContent ? o.data && o.processData && 0 === (o.contentType || "").indexOf("application/x-www-form-urlencoded") && (o.data = o.data.replace(Bb, "+")) : (n = o.url.slice(f.length), o.data && (f += (vb.test(f) ? "&" : "?") + o.data, delete o.data), o.cache === !1 && (f = f.replace(Db, "$1"), n = (vb.test(f) ? "&" : "?") + "_=" + ub++ + n), o.url = f + n), o.ifModified && (r.lastModified[f] && y.setRequestHeader("If-Modified-Since", r.lastModified[f]), r.etag[f] && y.setRequestHeader("If-None-Match", r.etag[f])), (o.data && o.hasContent && o.contentType !== !1 || c.contentType) && y.setRequestHeader("Content-Type", o.contentType), y.setRequestHeader("Accept", o.dataTypes[0] && o.accepts[o.dataTypes[0]] ? o.accepts[o.dataTypes[0]] + ("*" !== o.dataTypes[0] ? ", " + Kb + "; q=0.01" : "") : o.accepts["*"]);for (m in o.headers) y.setRequestHeader(m, o.headers[m]);if (o.beforeSend && (o.beforeSend.call(p, y, o) === !1 || k)) return y.abort();if (x = "abort", t.add(o.complete), y.done(o.success), y.fail(o.error), e = Nb(Jb, o, c, y)) {
        if (y.readyState = 1, l && q.trigger("ajaxSend", [y, o]), k) return y;o.async && o.timeout > 0 && (i = a.setTimeout(function () {
          y.abort("timeout");
        }, o.timeout));try {
          k = !1, e.send(v, A);
        } catch (z) {
          if (k) throw z;A(-1, z);
        }
      } else A(-1, "No Transport");function A(b, c, d, h) {
        var j,
            m,
            n,
            v,
            w,
            x = c;k || (k = !0, i && a.clearTimeout(i), e = void 0, g = h || "", y.readyState = b > 0 ? 4 : 0, j = b >= 200 && b < 300 || 304 === b, d && (v = Pb(o, y, d)), v = Qb(o, v, y, j), j ? (o.ifModified && (w = y.getResponseHeader("Last-Modified"), w && (r.lastModified[f] = w), w = y.getResponseHeader("etag"), w && (r.etag[f] = w)), 204 === b || "HEAD" === o.type ? x = "nocontent" : 304 === b ? x = "notmodified" : (x = v.state, m = v.data, n = v.error, j = !n)) : (n = x, !b && x || (x = "error", b < 0 && (b = 0))), y.status = b, y.statusText = (c || x) + "", j ? s.resolveWith(p, [m, x, y]) : s.rejectWith(p, [y, x, n]), y.statusCode(u), u = void 0, l && q.trigger(j ? "ajaxSuccess" : "ajaxError", [y, o, j ? m : n]), t.fireWith(p, [y, x]), l && (q.trigger("ajaxComplete", [y, o]), --r.active || r.event.trigger("ajaxStop")));
      }return y;
    }, getJSON: function (a, b, c) {
      return r.get(a, b, c, "json");
    }, getScript: function (a, b) {
      return r.get(a, void 0, b, "script");
    } }), r.each(["get", "post"], function (a, b) {
    r[b] = function (a, c, d, e) {
      return r.isFunction(c) && (e = e || d, d = c, c = void 0), r.ajax(r.extend({ url: a, type: b, dataType: e, data: c, success: d }, r.isPlainObject(a) && a));
    };
  }), r._evalUrl = function (a) {
    return r.ajax({ url: a, type: "GET", dataType: "script", cache: !0, async: !1, global: !1, "throws": !0 });
  }, r.fn.extend({ wrapAll: function (a) {
      var b;return this[0] && (r.isFunction(a) && (a = a.call(this[0])), b = r(a, this[0].ownerDocument).eq(0).clone(!0), this[0].parentNode && b.insertBefore(this[0]), b.map(function () {
        var a = this;while (a.firstElementChild) a = a.firstElementChild;return a;
      }).append(this)), this;
    }, wrapInner: function (a) {
      return r.isFunction(a) ? this.each(function (b) {
        r(this).wrapInner(a.call(this, b));
      }) : this.each(function () {
        var b = r(this),
            c = b.contents();c.length ? c.wrapAll(a) : b.append(a);
      });
    }, wrap: function (a) {
      var b = r.isFunction(a);return this.each(function (c) {
        r(this).wrapAll(b ? a.call(this, c) : a);
      });
    }, unwrap: function (a) {
      return this.parent(a).not("body").each(function () {
        r(this).replaceWith(this.childNodes);
      }), this;
    } }), r.expr.pseudos.hidden = function (a) {
    return !r.expr.pseudos.visible(a);
  }, r.expr.pseudos.visible = function (a) {
    return !!(a.offsetWidth || a.offsetHeight || a.getClientRects().length);
  }, r.ajaxSettings.xhr = function () {
    try {
      return new a.XMLHttpRequest();
    } catch (b) {}
  };var Rb = { 0: 200, 1223: 204 },
      Sb = r.ajaxSettings.xhr();o.cors = !!Sb && "withCredentials" in Sb, o.ajax = Sb = !!Sb, r.ajaxTransport(function (b) {
    var c, d;if (o.cors || Sb && !b.crossDomain) return { send: function (e, f) {
        var g,
            h = b.xhr();if (h.open(b.type, b.url, b.async, b.username, b.password), b.xhrFields) for (g in b.xhrFields) h[g] = b.xhrFields[g];b.mimeType && h.overrideMimeType && h.overrideMimeType(b.mimeType), b.crossDomain || e["X-Requested-With"] || (e["X-Requested-With"] = "XMLHttpRequest");for (g in e) h.setRequestHeader(g, e[g]);c = function (a) {
          return function () {
            c && (c = d = h.onload = h.onerror = h.onabort = h.onreadystatechange = null, "abort" === a ? h.abort() : "error" === a ? "number" != typeof h.status ? f(0, "error") : f(h.status, h.statusText) : f(Rb[h.status] || h.status, h.statusText, "text" !== (h.responseType || "text") || "string" != typeof h.responseText ? { binary: h.response } : { text: h.responseText }, h.getAllResponseHeaders()));
          };
        }, h.onload = c(), d = h.onerror = c("error"), void 0 !== h.onabort ? h.onabort = d : h.onreadystatechange = function () {
          4 === h.readyState && a.setTimeout(function () {
            c && d();
          });
        }, c = c("abort");try {
          h.send(b.hasContent && b.data || null);
        } catch (i) {
          if (c) throw i;
        }
      }, abort: function () {
        c && c();
      } };
  }), r.ajaxPrefilter(function (a) {
    a.crossDomain && (a.contents.script = !1);
  }), r.ajaxSetup({ accepts: { script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript" }, contents: { script: /\b(?:java|ecma)script\b/ }, converters: { "text script": function (a) {
        return r.globalEval(a), a;
      } } }), r.ajaxPrefilter("script", function (a) {
    void 0 === a.cache && (a.cache = !1), a.crossDomain && (a.type = "GET");
  }), r.ajaxTransport("script", function (a) {
    if (a.crossDomain) {
      var b, c;return { send: function (e, f) {
          b = r("<script>").prop({ charset: a.scriptCharset, src: a.url }).on("load error", c = function (a) {
            b.remove(), c = null, a && f("error" === a.type ? 404 : 200, a.type);
          }), d.head.appendChild(b[0]);
        }, abort: function () {
          c && c();
        } };
    }
  });var Tb = [],
      Ub = /(=)\?(?=&|$)|\?\?/;r.ajaxSetup({ jsonp: "callback", jsonpCallback: function () {
      var a = Tb.pop() || r.expando + "_" + ub++;return this[a] = !0, a;
    } }), r.ajaxPrefilter("json jsonp", function (b, c, d) {
    var e,
        f,
        g,
        h = b.jsonp !== !1 && (Ub.test(b.url) ? "url" : "string" == typeof b.data && 0 === (b.contentType || "").indexOf("application/x-www-form-urlencoded") && Ub.test(b.data) && "data");if (h || "jsonp" === b.dataTypes[0]) return e = b.jsonpCallback = r.isFunction(b.jsonpCallback) ? b.jsonpCallback() : b.jsonpCallback, h ? b[h] = b[h].replace(Ub, "$1" + e) : b.jsonp !== !1 && (b.url += (vb.test(b.url) ? "&" : "?") + b.jsonp + "=" + e), b.converters["script json"] = function () {
      return g || r.error(e + " was not called"), g[0];
    }, b.dataTypes[0] = "json", f = a[e], a[e] = function () {
      g = arguments;
    }, d.always(function () {
      void 0 === f ? r(a).removeProp(e) : a[e] = f, b[e] && (b.jsonpCallback = c.jsonpCallback, Tb.push(e)), g && r.isFunction(f) && f(g[0]), g = f = void 0;
    }), "script";
  }), o.createHTMLDocument = function () {
    var a = d.implementation.createHTMLDocument("").body;return a.innerHTML = "<form></form><form></form>", 2 === a.childNodes.length;
  }(), r.parseHTML = function (a, b, c) {
    if ("string" != typeof a) return [];"boolean" == typeof b && (c = b, b = !1);var e, f, g;return b || (o.createHTMLDocument ? (b = d.implementation.createHTMLDocument(""), e = b.createElement("base"), e.href = d.location.href, b.head.appendChild(e)) : b = d), f = C.exec(a), g = !c && [], f ? [b.createElement(f[1])] : (f = qa([a], b, g), g && g.length && r(g).remove(), r.merge([], f.childNodes));
  }, r.fn.load = function (a, b, c) {
    var d,
        e,
        f,
        g = this,
        h = a.indexOf(" ");return h > -1 && (d = pb(a.slice(h)), a = a.slice(0, h)), r.isFunction(b) ? (c = b, b = void 0) : b && "object" == typeof b && (e = "POST"), g.length > 0 && r.ajax({ url: a, type: e || "GET", dataType: "html", data: b }).done(function (a) {
      f = arguments, g.html(d ? r("<div>").append(r.parseHTML(a)).find(d) : a);
    }).always(c && function (a, b) {
      g.each(function () {
        c.apply(this, f || [a.responseText, b, a]);
      });
    }), this;
  }, r.each(["ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend"], function (a, b) {
    r.fn[b] = function (a) {
      return this.on(b, a);
    };
  }), r.expr.pseudos.animated = function (a) {
    return r.grep(r.timers, function (b) {
      return a === b.elem;
    }).length;
  }, r.offset = { setOffset: function (a, b, c) {
      var d,
          e,
          f,
          g,
          h,
          i,
          j,
          k = r.css(a, "position"),
          l = r(a),
          m = {};"static" === k && (a.style.position = "relative"), h = l.offset(), f = r.css(a, "top"), i = r.css(a, "left"), j = ("absolute" === k || "fixed" === k) && (f + i).indexOf("auto") > -1, j ? (d = l.position(), g = d.top, e = d.left) : (g = parseFloat(f) || 0, e = parseFloat(i) || 0), r.isFunction(b) && (b = b.call(a, c, r.extend({}, h))), null != b.top && (m.top = b.top - h.top + g), null != b.left && (m.left = b.left - h.left + e), "using" in b ? b.using.call(a, m) : l.css(m);
    } }, r.fn.extend({ offset: function (a) {
      if (arguments.length) return void 0 === a ? this : this.each(function (b) {
        r.offset.setOffset(this, a, b);
      });var b,
          c,
          d,
          e,
          f = this[0];if (f) return f.getClientRects().length ? (d = f.getBoundingClientRect(), b = f.ownerDocument, c = b.documentElement, e = b.defaultView, { top: d.top + e.pageYOffset - c.clientTop, left: d.left + e.pageXOffset - c.clientLeft }) : { top: 0, left: 0 };
    }, position: function () {
      if (this[0]) {
        var a,
            b,
            c = this[0],
            d = { top: 0, left: 0 };return "fixed" === r.css(c, "position") ? b = c.getBoundingClientRect() : (a = this.offsetParent(), b = this.offset(), B(a[0], "html") || (d = a.offset()), d = { top: d.top + r.css(a[0], "borderTopWidth", !0), left: d.left + r.css(a[0], "borderLeftWidth", !0) }), { top: b.top - d.top - r.css(c, "marginTop", !0), left: b.left - d.left - r.css(c, "marginLeft", !0) };
      }
    }, offsetParent: function () {
      return this.map(function () {
        var a = this.offsetParent;while (a && "static" === r.css(a, "position")) a = a.offsetParent;return a || ra;
      });
    } }), r.each({ scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function (a, b) {
    var c = "pageYOffset" === b;r.fn[a] = function (d) {
      return T(this, function (a, d, e) {
        var f;return r.isWindow(a) ? f = a : 9 === a.nodeType && (f = a.defaultView), void 0 === e ? f ? f[b] : a[d] : void (f ? f.scrollTo(c ? f.pageXOffset : e, c ? e : f.pageYOffset) : a[d] = e);
      }, a, d, arguments.length);
    };
  }), r.each(["top", "left"], function (a, b) {
    r.cssHooks[b] = Pa(o.pixelPosition, function (a, c) {
      if (c) return c = Oa(a, b), Ma.test(c) ? r(a).position()[b] + "px" : c;
    });
  }), r.each({ Height: "height", Width: "width" }, function (a, b) {
    r.each({ padding: "inner" + a, content: b, "": "outer" + a }, function (c, d) {
      r.fn[d] = function (e, f) {
        var g = arguments.length && (c || "boolean" != typeof e),
            h = c || (e === !0 || f === !0 ? "margin" : "border");return T(this, function (b, c, e) {
          var f;return r.isWindow(b) ? 0 === d.indexOf("outer") ? b["inner" + a] : b.document.documentElement["client" + a] : 9 === b.nodeType ? (f = b.documentElement, Math.max(b.body["scroll" + a], f["scroll" + a], b.body["offset" + a], f["offset" + a], f["client" + a])) : void 0 === e ? r.css(b, c, h) : r.style(b, c, e, h);
        }, b, g ? e : void 0, g);
      };
    });
  }), r.fn.extend({ bind: function (a, b, c) {
      return this.on(a, null, b, c);
    }, unbind: function (a, b) {
      return this.off(a, null, b);
    }, delegate: function (a, b, c, d) {
      return this.on(b, a, c, d);
    }, undelegate: function (a, b, c) {
      return 1 === arguments.length ? this.off(a, "**") : this.off(b, a || "**", c);
    } }), r.holdReady = function (a) {
    a ? r.readyWait++ : r.ready(!0);
  }, r.isArray = Array.isArray, r.parseJSON = JSON.parse, r.nodeName = B, "function" == "function" && __webpack_require__(122) && !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {
    return r;
  }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));var Vb = a.jQuery,
      Wb = a.$;return r.noConflict = function (b) {
    return a.$ === r && (a.$ = Wb), b && a.jQuery === r && (a.jQuery = Vb), r;
  }, b || (a.jQuery = a.$ = r), r;
});

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Afrikaans [af]
//! author : Werner Mollentze : https://github.com/wernerm

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    var af = moment.defineLocale('af', {
        months: 'Januarie_Februarie_Maart_April_Mei_Junie_Julie_Augustus_September_Oktober_November_Desember'.split('_'),
        monthsShort: 'Jan_Feb_Mrt_Apr_Mei_Jun_Jul_Aug_Sep_Okt_Nov_Des'.split('_'),
        weekdays: 'Sondag_Maandag_Dinsdag_Woensdag_Donderdag_Vrydag_Saterdag'.split('_'),
        weekdaysShort: 'Son_Maa_Din_Woe_Don_Vry_Sat'.split('_'),
        weekdaysMin: 'So_Ma_Di_Wo_Do_Vr_Sa'.split('_'),
        meridiemParse: /vm|nm/i,
        isPM: function (input) {
            return (/^nm$/i.test(input)
            );
        },
        meridiem: function (hours, minutes, isLower) {
            if (hours < 12) {
                return isLower ? 'vm' : 'VM';
            } else {
                return isLower ? 'nm' : 'NM';
            }
        },
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[Vandag om] LT',
            nextDay: '[Môre om] LT',
            nextWeek: 'dddd [om] LT',
            lastDay: '[Gister om] LT',
            lastWeek: '[Laas] dddd [om] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'oor %s',
            past: '%s gelede',
            s: '\'n paar sekondes',
            m: '\'n minuut',
            mm: '%d minute',
            h: '\'n uur',
            hh: '%d ure',
            d: '\'n dag',
            dd: '%d dae',
            M: '\'n maand',
            MM: '%d maande',
            y: '\'n jaar',
            yy: '%d jaar'
        },
        dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
        ordinal: function (number) {
            return number + (number === 1 || number === 8 || number >= 20 ? 'ste' : 'de'); // Thanks to Joris Röling : https://github.com/jjupiter
        },
        week: {
            dow: 1, // Maandag is die eerste dag van die week.
            doy: 4 // Die week wat die 4de Januarie bevat is die eerste week van die jaar.
        }
    });

    return af;
});

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Arabic [ar]
//! author : Abdel Said: https://github.com/abdelsaid
//! author : Ahmed Elkhatib
//! author : forabi https://github.com/forabi

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    var symbolMap = {
        '1': '١',
        '2': '٢',
        '3': '٣',
        '4': '٤',
        '5': '٥',
        '6': '٦',
        '7': '٧',
        '8': '٨',
        '9': '٩',
        '0': '٠'
    };
    var numberMap = {
        '١': '1',
        '٢': '2',
        '٣': '3',
        '٤': '4',
        '٥': '5',
        '٦': '6',
        '٧': '7',
        '٨': '8',
        '٩': '9',
        '٠': '0'
    };
    var pluralForm = function (n) {
        return n === 0 ? 0 : n === 1 ? 1 : n === 2 ? 2 : n % 100 >= 3 && n % 100 <= 10 ? 3 : n % 100 >= 11 ? 4 : 5;
    };
    var plurals = {
        s: ['أقل من ثانية', 'ثانية واحدة', ['ثانيتان', 'ثانيتين'], '%d ثوان', '%d ثانية', '%d ثانية'],
        m: ['أقل من دقيقة', 'دقيقة واحدة', ['دقيقتان', 'دقيقتين'], '%d دقائق', '%d دقيقة', '%d دقيقة'],
        h: ['أقل من ساعة', 'ساعة واحدة', ['ساعتان', 'ساعتين'], '%d ساعات', '%d ساعة', '%d ساعة'],
        d: ['أقل من يوم', 'يوم واحد', ['يومان', 'يومين'], '%d أيام', '%d يومًا', '%d يوم'],
        M: ['أقل من شهر', 'شهر واحد', ['شهران', 'شهرين'], '%d أشهر', '%d شهرا', '%d شهر'],
        y: ['أقل من عام', 'عام واحد', ['عامان', 'عامين'], '%d أعوام', '%d عامًا', '%d عام']
    };
    var pluralize = function (u) {
        return function (number, withoutSuffix, string, isFuture) {
            var f = pluralForm(number),
                str = plurals[u][pluralForm(number)];
            if (f === 2) {
                str = str[withoutSuffix ? 0 : 1];
            }
            return str.replace(/%d/i, number);
        };
    };
    var months = ['كانون الثاني يناير', 'شباط فبراير', 'آذار مارس', 'نيسان أبريل', 'أيار مايو', 'حزيران يونيو', 'تموز يوليو', 'آب أغسطس', 'أيلول سبتمبر', 'تشرين الأول أكتوبر', 'تشرين الثاني نوفمبر', 'كانون الأول ديسمبر'];

    var ar = moment.defineLocale('ar', {
        months: months,
        monthsShort: months,
        weekdays: 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
        weekdaysShort: 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
        weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'D/\u200FM/\u200FYYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm'
        },
        meridiemParse: /ص|م/,
        isPM: function (input) {
            return 'م' === input;
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 12) {
                return 'ص';
            } else {
                return 'م';
            }
        },
        calendar: {
            sameDay: '[اليوم عند الساعة] LT',
            nextDay: '[غدًا عند الساعة] LT',
            nextWeek: 'dddd [عند الساعة] LT',
            lastDay: '[أمس عند الساعة] LT',
            lastWeek: 'dddd [عند الساعة] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'بعد %s',
            past: 'منذ %s',
            s: pluralize('s'),
            m: pluralize('m'),
            mm: pluralize('m'),
            h: pluralize('h'),
            hh: pluralize('h'),
            d: pluralize('d'),
            dd: pluralize('d'),
            M: pluralize('M'),
            MM: pluralize('M'),
            y: pluralize('y'),
            yy: pluralize('y')
        },
        preparse: function (string) {
            return string.replace(/[١٢٣٤٥٦٧٨٩٠]/g, function (match) {
                return numberMap[match];
            }).replace(/،/g, ',');
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            }).replace(/,/g, '،');
        },
        week: {
            dow: 6, // Saturday is the first day of the week.
            doy: 12 // The week that contains Jan 1st is the first week of the year.
        }
    });

    return ar;
});

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Arabic (Algeria) [ar-dz]
//! author : Noureddine LOUAHEDJ : https://github.com/noureddineme

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    var arDz = moment.defineLocale('ar-dz', {
        months: 'جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
        monthsShort: 'جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
        weekdays: 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
        weekdaysShort: 'احد_اثنين_ثلاثاء_اربعاء_خميس_جمعة_سبت'.split('_'),
        weekdaysMin: 'أح_إث_ثلا_أر_خم_جم_سب'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[اليوم على الساعة] LT',
            nextDay: '[غدا على الساعة] LT',
            nextWeek: 'dddd [على الساعة] LT',
            lastDay: '[أمس على الساعة] LT',
            lastWeek: 'dddd [على الساعة] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'في %s',
            past: 'منذ %s',
            s: 'ثوان',
            m: 'دقيقة',
            mm: '%d دقائق',
            h: 'ساعة',
            hh: '%d ساعات',
            d: 'يوم',
            dd: '%d أيام',
            M: 'شهر',
            MM: '%d أشهر',
            y: 'سنة',
            yy: '%d سنوات'
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 4 // The week that contains Jan 1st is the first week of the year.
        }
    });

    return arDz;
});

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Arabic (Kuwait) [ar-kw]
//! author : Nusret Parlak: https://github.com/nusretparlak

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    var arKw = moment.defineLocale('ar-kw', {
        months: 'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split('_'),
        monthsShort: 'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split('_'),
        weekdays: 'الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
        weekdaysShort: 'احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت'.split('_'),
        weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[اليوم على الساعة] LT',
            nextDay: '[غدا على الساعة] LT',
            nextWeek: 'dddd [على الساعة] LT',
            lastDay: '[أمس على الساعة] LT',
            lastWeek: 'dddd [على الساعة] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'في %s',
            past: 'منذ %s',
            s: 'ثوان',
            m: 'دقيقة',
            mm: '%d دقائق',
            h: 'ساعة',
            hh: '%d ساعات',
            d: 'يوم',
            dd: '%d أيام',
            M: 'شهر',
            MM: '%d أشهر',
            y: 'سنة',
            yy: '%d سنوات'
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 12 // The week that contains Jan 1st is the first week of the year.
        }
    });

    return arKw;
});

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Arabic (Lybia) [ar-ly]
//! author : Ali Hmer: https://github.com/kikoanis

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    var symbolMap = {
        '1': '1',
        '2': '2',
        '3': '3',
        '4': '4',
        '5': '5',
        '6': '6',
        '7': '7',
        '8': '8',
        '9': '9',
        '0': '0'
    };
    var pluralForm = function (n) {
        return n === 0 ? 0 : n === 1 ? 1 : n === 2 ? 2 : n % 100 >= 3 && n % 100 <= 10 ? 3 : n % 100 >= 11 ? 4 : 5;
    };
    var plurals = {
        s: ['أقل من ثانية', 'ثانية واحدة', ['ثانيتان', 'ثانيتين'], '%d ثوان', '%d ثانية', '%d ثانية'],
        m: ['أقل من دقيقة', 'دقيقة واحدة', ['دقيقتان', 'دقيقتين'], '%d دقائق', '%d دقيقة', '%d دقيقة'],
        h: ['أقل من ساعة', 'ساعة واحدة', ['ساعتان', 'ساعتين'], '%d ساعات', '%d ساعة', '%d ساعة'],
        d: ['أقل من يوم', 'يوم واحد', ['يومان', 'يومين'], '%d أيام', '%d يومًا', '%d يوم'],
        M: ['أقل من شهر', 'شهر واحد', ['شهران', 'شهرين'], '%d أشهر', '%d شهرا', '%d شهر'],
        y: ['أقل من عام', 'عام واحد', ['عامان', 'عامين'], '%d أعوام', '%d عامًا', '%d عام']
    };
    var pluralize = function (u) {
        return function (number, withoutSuffix, string, isFuture) {
            var f = pluralForm(number),
                str = plurals[u][pluralForm(number)];
            if (f === 2) {
                str = str[withoutSuffix ? 0 : 1];
            }
            return str.replace(/%d/i, number);
        };
    };
    var months = ['يناير', 'فبراير', 'مارس', 'أبريل', 'مايو', 'يونيو', 'يوليو', 'أغسطس', 'سبتمبر', 'أكتوبر', 'نوفمبر', 'ديسمبر'];

    var arLy = moment.defineLocale('ar-ly', {
        months: months,
        monthsShort: months,
        weekdays: 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
        weekdaysShort: 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
        weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'D/\u200FM/\u200FYYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm'
        },
        meridiemParse: /ص|م/,
        isPM: function (input) {
            return 'م' === input;
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 12) {
                return 'ص';
            } else {
                return 'م';
            }
        },
        calendar: {
            sameDay: '[اليوم عند الساعة] LT',
            nextDay: '[غدًا عند الساعة] LT',
            nextWeek: 'dddd [عند الساعة] LT',
            lastDay: '[أمس عند الساعة] LT',
            lastWeek: 'dddd [عند الساعة] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'بعد %s',
            past: 'منذ %s',
            s: pluralize('s'),
            m: pluralize('m'),
            mm: pluralize('m'),
            h: pluralize('h'),
            hh: pluralize('h'),
            d: pluralize('d'),
            dd: pluralize('d'),
            M: pluralize('M'),
            MM: pluralize('M'),
            y: pluralize('y'),
            yy: pluralize('y')
        },
        preparse: function (string) {
            return string.replace(/،/g, ',');
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            }).replace(/,/g, '،');
        },
        week: {
            dow: 6, // Saturday is the first day of the week.
            doy: 12 // The week that contains Jan 1st is the first week of the year.
        }
    });

    return arLy;
});

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Arabic (Morocco) [ar-ma]
//! author : ElFadili Yassine : https://github.com/ElFadiliY
//! author : Abdel Said : https://github.com/abdelsaid

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    var arMa = moment.defineLocale('ar-ma', {
        months: 'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split('_'),
        monthsShort: 'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split('_'),
        weekdays: 'الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
        weekdaysShort: 'احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت'.split('_'),
        weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[اليوم على الساعة] LT',
            nextDay: '[غدا على الساعة] LT',
            nextWeek: 'dddd [على الساعة] LT',
            lastDay: '[أمس على الساعة] LT',
            lastWeek: 'dddd [على الساعة] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'في %s',
            past: 'منذ %s',
            s: 'ثوان',
            m: 'دقيقة',
            mm: '%d دقائق',
            h: 'ساعة',
            hh: '%d ساعات',
            d: 'يوم',
            dd: '%d أيام',
            M: 'شهر',
            MM: '%d أشهر',
            y: 'سنة',
            yy: '%d سنوات'
        },
        week: {
            dow: 6, // Saturday is the first day of the week.
            doy: 12 // The week that contains Jan 1st is the first week of the year.
        }
    });

    return arMa;
});

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Arabic (Saudi Arabia) [ar-sa]
//! author : Suhail Alkowaileet : https://github.com/xsoh

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    var symbolMap = {
        '1': '١',
        '2': '٢',
        '3': '٣',
        '4': '٤',
        '5': '٥',
        '6': '٦',
        '7': '٧',
        '8': '٨',
        '9': '٩',
        '0': '٠'
    };
    var numberMap = {
        '١': '1',
        '٢': '2',
        '٣': '3',
        '٤': '4',
        '٥': '5',
        '٦': '6',
        '٧': '7',
        '٨': '8',
        '٩': '9',
        '٠': '0'
    };

    var arSa = moment.defineLocale('ar-sa', {
        months: 'يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
        monthsShort: 'يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
        weekdays: 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
        weekdaysShort: 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
        weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm'
        },
        meridiemParse: /ص|م/,
        isPM: function (input) {
            return 'م' === input;
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 12) {
                return 'ص';
            } else {
                return 'م';
            }
        },
        calendar: {
            sameDay: '[اليوم على الساعة] LT',
            nextDay: '[غدا على الساعة] LT',
            nextWeek: 'dddd [على الساعة] LT',
            lastDay: '[أمس على الساعة] LT',
            lastWeek: 'dddd [على الساعة] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'في %s',
            past: 'منذ %s',
            s: 'ثوان',
            m: 'دقيقة',
            mm: '%d دقائق',
            h: 'ساعة',
            hh: '%d ساعات',
            d: 'يوم',
            dd: '%d أيام',
            M: 'شهر',
            MM: '%d أشهر',
            y: 'سنة',
            yy: '%d سنوات'
        },
        preparse: function (string) {
            return string.replace(/[١٢٣٤٥٦٧٨٩٠]/g, function (match) {
                return numberMap[match];
            }).replace(/،/g, ',');
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            }).replace(/,/g, '،');
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 6 // The week that contains Jan 1st is the first week of the year.
        }
    });

    return arSa;
});

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale  :  Arabic (Tunisia) [ar-tn]
//! author : Nader Toukabri : https://github.com/naderio

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    var arTn = moment.defineLocale('ar-tn', {
        months: 'جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
        monthsShort: 'جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
        weekdays: 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
        weekdaysShort: 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
        weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[اليوم على الساعة] LT',
            nextDay: '[غدا على الساعة] LT',
            nextWeek: 'dddd [على الساعة] LT',
            lastDay: '[أمس على الساعة] LT',
            lastWeek: 'dddd [على الساعة] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'في %s',
            past: 'منذ %s',
            s: 'ثوان',
            m: 'دقيقة',
            mm: '%d دقائق',
            h: 'ساعة',
            hh: '%d ساعات',
            d: 'يوم',
            dd: '%d أيام',
            M: 'شهر',
            MM: '%d أشهر',
            y: 'سنة',
            yy: '%d سنوات'
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    return arTn;
});

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Azerbaijani [az]
//! author : topchiyev : https://github.com/topchiyev

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    var suffixes = {
        1: '-inci',
        5: '-inci',
        8: '-inci',
        70: '-inci',
        80: '-inci',
        2: '-nci',
        7: '-nci',
        20: '-nci',
        50: '-nci',
        3: '-üncü',
        4: '-üncü',
        100: '-üncü',
        6: '-ncı',
        9: '-uncu',
        10: '-uncu',
        30: '-uncu',
        60: '-ıncı',
        90: '-ıncı'
    };

    var az = moment.defineLocale('az', {
        months: 'yanvar_fevral_mart_aprel_may_iyun_iyul_avqust_sentyabr_oktyabr_noyabr_dekabr'.split('_'),
        monthsShort: 'yan_fev_mar_apr_may_iyn_iyl_avq_sen_okt_noy_dek'.split('_'),
        weekdays: 'Bazar_Bazar ertəsi_Çərşənbə axşamı_Çərşənbə_Cümə axşamı_Cümə_Şənbə'.split('_'),
        weekdaysShort: 'Baz_BzE_ÇAx_Çər_CAx_Cüm_Şən'.split('_'),
        weekdaysMin: 'Bz_BE_ÇA_Çə_CA_Cü_Şə'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[bugün saat] LT',
            nextDay: '[sabah saat] LT',
            nextWeek: '[gələn həftə] dddd [saat] LT',
            lastDay: '[dünən] LT',
            lastWeek: '[keçən həftə] dddd [saat] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: '%s sonra',
            past: '%s əvvəl',
            s: 'birneçə saniyyə',
            m: 'bir dəqiqə',
            mm: '%d dəqiqə',
            h: 'bir saat',
            hh: '%d saat',
            d: 'bir gün',
            dd: '%d gün',
            M: 'bir ay',
            MM: '%d ay',
            y: 'bir il',
            yy: '%d il'
        },
        meridiemParse: /gecə|səhər|gündüz|axşam/,
        isPM: function (input) {
            return (/^(gündüz|axşam)$/.test(input)
            );
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'gecə';
            } else if (hour < 12) {
                return 'səhər';
            } else if (hour < 17) {
                return 'gündüz';
            } else {
                return 'axşam';
            }
        },
        dayOfMonthOrdinalParse: /\d{1,2}-(ıncı|inci|nci|üncü|ncı|uncu)/,
        ordinal: function (number) {
            if (number === 0) {
                // special case for zero
                return number + '-ıncı';
            }
            var a = number % 10,
                b = number % 100 - a,
                c = number >= 100 ? 100 : null;
            return number + (suffixes[a] || suffixes[b] || suffixes[c]);
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 1st is the first week of the year.
        }
    });

    return az;
});

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Belarusian [be]
//! author : Dmitry Demidov : https://github.com/demidov91
//! author: Praleska: http://praleska.pro/
//! Author : Menelion Elensúle : https://github.com/Oire

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    function plural(word, num) {
        var forms = word.split('_');
        return num % 10 === 1 && num % 100 !== 11 ? forms[0] : num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2];
    }
    function relativeTimeWithPlural(number, withoutSuffix, key) {
        var format = {
            'mm': withoutSuffix ? 'хвіліна_хвіліны_хвілін' : 'хвіліну_хвіліны_хвілін',
            'hh': withoutSuffix ? 'гадзіна_гадзіны_гадзін' : 'гадзіну_гадзіны_гадзін',
            'dd': 'дзень_дні_дзён',
            'MM': 'месяц_месяцы_месяцаў',
            'yy': 'год_гады_гадоў'
        };
        if (key === 'm') {
            return withoutSuffix ? 'хвіліна' : 'хвіліну';
        } else if (key === 'h') {
            return withoutSuffix ? 'гадзіна' : 'гадзіну';
        } else {
            return number + ' ' + plural(format[key], +number);
        }
    }

    var be = moment.defineLocale('be', {
        months: {
            format: 'студзеня_лютага_сакавіка_красавіка_траўня_чэрвеня_ліпеня_жніўня_верасня_кастрычніка_лістапада_снежня'.split('_'),
            standalone: 'студзень_люты_сакавік_красавік_травень_чэрвень_ліпень_жнівень_верасень_кастрычнік_лістапад_снежань'.split('_')
        },
        monthsShort: 'студ_лют_сак_крас_трав_чэрв_ліп_жнів_вер_каст_ліст_снеж'.split('_'),
        weekdays: {
            format: 'нядзелю_панядзелак_аўторак_сераду_чацвер_пятніцу_суботу'.split('_'),
            standalone: 'нядзеля_панядзелак_аўторак_серада_чацвер_пятніца_субота'.split('_'),
            isFormat: /\[ ?[Вв] ?(?:мінулую|наступную)? ?\] ?dddd/
        },
        weekdaysShort: 'нд_пн_ат_ср_чц_пт_сб'.split('_'),
        weekdaysMin: 'нд_пн_ат_ср_чц_пт_сб'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY г.',
            LLL: 'D MMMM YYYY г., HH:mm',
            LLLL: 'dddd, D MMMM YYYY г., HH:mm'
        },
        calendar: {
            sameDay: '[Сёння ў] LT',
            nextDay: '[Заўтра ў] LT',
            lastDay: '[Учора ў] LT',
            nextWeek: function () {
                return '[У] dddd [ў] LT';
            },
            lastWeek: function () {
                switch (this.day()) {
                    case 0:
                    case 3:
                    case 5:
                    case 6:
                        return '[У мінулую] dddd [ў] LT';
                    case 1:
                    case 2:
                    case 4:
                        return '[У мінулы] dddd [ў] LT';
                }
            },
            sameElse: 'L'
        },
        relativeTime: {
            future: 'праз %s',
            past: '%s таму',
            s: 'некалькі секунд',
            m: relativeTimeWithPlural,
            mm: relativeTimeWithPlural,
            h: relativeTimeWithPlural,
            hh: relativeTimeWithPlural,
            d: 'дзень',
            dd: relativeTimeWithPlural,
            M: 'месяц',
            MM: relativeTimeWithPlural,
            y: 'год',
            yy: relativeTimeWithPlural
        },
        meridiemParse: /ночы|раніцы|дня|вечара/,
        isPM: function (input) {
            return (/^(дня|вечара)$/.test(input)
            );
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'ночы';
            } else if (hour < 12) {
                return 'раніцы';
            } else if (hour < 17) {
                return 'дня';
            } else {
                return 'вечара';
            }
        },
        dayOfMonthOrdinalParse: /\d{1,2}-(і|ы|га)/,
        ordinal: function (number, period) {
            switch (period) {
                case 'M':
                case 'd':
                case 'DDD':
                case 'w':
                case 'W':
                    return (number % 10 === 2 || number % 10 === 3) && number % 100 !== 12 && number % 100 !== 13 ? number + '-і' : number + '-ы';
                case 'D':
                    return number + '-га';
                default:
                    return number;
            }
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 1st is the first week of the year.
        }
    });

    return be;
});

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Bulgarian [bg]
//! author : Krasen Borisov : https://github.com/kraz

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    var bg = moment.defineLocale('bg', {
        months: 'януари_февруари_март_април_май_юни_юли_август_септември_октомври_ноември_декември'.split('_'),
        monthsShort: 'янр_фев_мар_апр_май_юни_юли_авг_сеп_окт_ное_дек'.split('_'),
        weekdays: 'неделя_понеделник_вторник_сряда_четвъртък_петък_събота'.split('_'),
        weekdaysShort: 'нед_пон_вто_сря_чет_пет_съб'.split('_'),
        weekdaysMin: 'нд_пн_вт_ср_чт_пт_сб'.split('_'),
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'D.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY H:mm',
            LLLL: 'dddd, D MMMM YYYY H:mm'
        },
        calendar: {
            sameDay: '[Днес в] LT',
            nextDay: '[Утре в] LT',
            nextWeek: 'dddd [в] LT',
            lastDay: '[Вчера в] LT',
            lastWeek: function () {
                switch (this.day()) {
                    case 0:
                    case 3:
                    case 6:
                        return '[В изминалата] dddd [в] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[В изминалия] dddd [в] LT';
                }
            },
            sameElse: 'L'
        },
        relativeTime: {
            future: 'след %s',
            past: 'преди %s',
            s: 'няколко секунди',
            m: 'минута',
            mm: '%d минути',
            h: 'час',
            hh: '%d часа',
            d: 'ден',
            dd: '%d дни',
            M: 'месец',
            MM: '%d месеца',
            y: 'година',
            yy: '%d години'
        },
        dayOfMonthOrdinalParse: /\d{1,2}-(ев|ен|ти|ви|ри|ми)/,
        ordinal: function (number) {
            var lastDigit = number % 10,
                last2Digits = number % 100;
            if (number === 0) {
                return number + '-ев';
            } else if (last2Digits === 0) {
                return number + '-ен';
            } else if (last2Digits > 10 && last2Digits < 20) {
                return number + '-ти';
            } else if (lastDigit === 1) {
                return number + '-ви';
            } else if (lastDigit === 2) {
                return number + '-ри';
            } else if (lastDigit === 7 || lastDigit === 8) {
                return number + '-ми';
            } else {
                return number + '-ти';
            }
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 1st is the first week of the year.
        }
    });

    return bg;
});

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Bambara [bm]
//! author : Estelle Comment : https://github.com/estellecomment

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    // Language contact person : Abdoufata Kane : https://github.com/abdoufata

    var bm = moment.defineLocale('bm', {
        months: 'Zanwuyekalo_Fewuruyekalo_Marisikalo_Awirilikalo_Mɛkalo_Zuwɛnkalo_Zuluyekalo_Utikalo_Sɛtanburukalo_ɔkutɔburukalo_Nowanburukalo_Desanburukalo'.split('_'),
        monthsShort: 'Zan_Few_Mar_Awi_Mɛ_Zuw_Zul_Uti_Sɛt_ɔku_Now_Des'.split('_'),
        weekdays: 'Kari_Ntɛnɛn_Tarata_Araba_Alamisa_Juma_Sibiri'.split('_'),
        weekdaysShort: 'Kar_Ntɛ_Tar_Ara_Ala_Jum_Sib'.split('_'),
        weekdaysMin: 'Ka_Nt_Ta_Ar_Al_Ju_Si'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'MMMM [tile] D [san] YYYY',
            LLL: 'MMMM [tile] D [san] YYYY [lɛrɛ] HH:mm',
            LLLL: 'dddd MMMM [tile] D [san] YYYY [lɛrɛ] HH:mm'
        },
        calendar: {
            sameDay: '[Bi lɛrɛ] LT',
            nextDay: '[Sini lɛrɛ] LT',
            nextWeek: 'dddd [don lɛrɛ] LT',
            lastDay: '[Kunu lɛrɛ] LT',
            lastWeek: 'dddd [tɛmɛnen lɛrɛ] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: '%s kɔnɔ',
            past: 'a bɛ %s bɔ',
            s: 'sanga dama dama',
            m: 'miniti kelen',
            mm: 'miniti %d',
            h: 'lɛrɛ kelen',
            hh: 'lɛrɛ %d',
            d: 'tile kelen',
            dd: 'tile %d',
            M: 'kalo kelen',
            MM: 'kalo %d',
            y: 'san kelen',
            yy: 'san %d'
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    return bm;
});

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Bengali [bn]
//! author : Kaushik Gandhi : https://github.com/kaushikgandhi

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    var symbolMap = {
        '1': '১',
        '2': '২',
        '3': '৩',
        '4': '৪',
        '5': '৫',
        '6': '৬',
        '7': '৭',
        '8': '৮',
        '9': '৯',
        '0': '০'
    };
    var numberMap = {
        '১': '1',
        '২': '2',
        '৩': '3',
        '৪': '4',
        '৫': '5',
        '৬': '6',
        '৭': '7',
        '৮': '8',
        '৯': '9',
        '০': '0'
    };

    var bn = moment.defineLocale('bn', {
        months: 'জানুয়ারী_ফেব্রুয়ারি_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর'.split('_'),
        monthsShort: 'জানু_ফেব_মার্চ_এপ্র_মে_জুন_জুল_আগ_সেপ্ট_অক্টো_নভে_ডিসে'.split('_'),
        weekdays: 'রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পতিবার_শুক্রবার_শনিবার'.split('_'),
        weekdaysShort: 'রবি_সোম_মঙ্গল_বুধ_বৃহস্পতি_শুক্র_শনি'.split('_'),
        weekdaysMin: 'রবি_সোম_মঙ্গ_বুধ_বৃহঃ_শুক্র_শনি'.split('_'),
        longDateFormat: {
            LT: 'A h:mm সময়',
            LTS: 'A h:mm:ss সময়',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, A h:mm সময়',
            LLLL: 'dddd, D MMMM YYYY, A h:mm সময়'
        },
        calendar: {
            sameDay: '[আজ] LT',
            nextDay: '[আগামীকাল] LT',
            nextWeek: 'dddd, LT',
            lastDay: '[গতকাল] LT',
            lastWeek: '[গত] dddd, LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: '%s পরে',
            past: '%s আগে',
            s: 'কয়েক সেকেন্ড',
            m: 'এক মিনিট',
            mm: '%d মিনিট',
            h: 'এক ঘন্টা',
            hh: '%d ঘন্টা',
            d: 'এক দিন',
            dd: '%d দিন',
            M: 'এক মাস',
            MM: '%d মাস',
            y: 'এক বছর',
            yy: '%d বছর'
        },
        preparse: function (string) {
            return string.replace(/[১২৩৪৫৬৭৮৯০]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        meridiemParse: /রাত|সকাল|দুপুর|বিকাল|রাত/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'রাত' && hour >= 4 || meridiem === 'দুপুর' && hour < 5 || meridiem === 'বিকাল') {
                return hour + 12;
            } else {
                return hour;
            }
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'রাত';
            } else if (hour < 10) {
                return 'সকাল';
            } else if (hour < 17) {
                return 'দুপুর';
            } else if (hour < 20) {
                return 'বিকাল';
            } else {
                return 'রাত';
            }
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 6 // The week that contains Jan 1st is the first week of the year.
        }
    });

    return bn;
});

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Tibetan [bo]
//! author : Thupten N. Chakrishar : https://github.com/vajradog

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    var symbolMap = {
        '1': '༡',
        '2': '༢',
        '3': '༣',
        '4': '༤',
        '5': '༥',
        '6': '༦',
        '7': '༧',
        '8': '༨',
        '9': '༩',
        '0': '༠'
    };
    var numberMap = {
        '༡': '1',
        '༢': '2',
        '༣': '3',
        '༤': '4',
        '༥': '5',
        '༦': '6',
        '༧': '7',
        '༨': '8',
        '༩': '9',
        '༠': '0'
    };

    var bo = moment.defineLocale('bo', {
        months: 'ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ'.split('_'),
        monthsShort: 'ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ'.split('_'),
        weekdays: 'གཟའ་ཉི་མ་_གཟའ་ཟླ་བ་_གཟའ་མིག་དམར་_གཟའ་ལྷག་པ་_གཟའ་ཕུར་བུ_གཟའ་པ་སངས་_གཟའ་སྤེན་པ་'.split('_'),
        weekdaysShort: 'ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་'.split('_'),
        weekdaysMin: 'ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་'.split('_'),
        longDateFormat: {
            LT: 'A h:mm',
            LTS: 'A h:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, A h:mm',
            LLLL: 'dddd, D MMMM YYYY, A h:mm'
        },
        calendar: {
            sameDay: '[དི་རིང] LT',
            nextDay: '[སང་ཉིན] LT',
            nextWeek: '[བདུན་ཕྲག་རྗེས་མ], LT',
            lastDay: '[ཁ་སང] LT',
            lastWeek: '[བདུན་ཕྲག་མཐའ་མ] dddd, LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: '%s ལ་',
            past: '%s སྔན་ལ',
            s: 'ལམ་སང',
            m: 'སྐར་མ་གཅིག',
            mm: '%d སྐར་མ',
            h: 'ཆུ་ཚོད་གཅིག',
            hh: '%d ཆུ་ཚོད',
            d: 'ཉིན་གཅིག',
            dd: '%d ཉིན་',
            M: 'ཟླ་བ་གཅིག',
            MM: '%d ཟླ་བ',
            y: 'ལོ་གཅིག',
            yy: '%d ལོ'
        },
        preparse: function (string) {
            return string.replace(/[༡༢༣༤༥༦༧༨༩༠]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        meridiemParse: /མཚན་མོ|ཞོགས་ཀས|ཉིན་གུང|དགོང་དག|མཚན་མོ/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'མཚན་མོ' && hour >= 4 || meridiem === 'ཉིན་གུང' && hour < 5 || meridiem === 'དགོང་དག') {
                return hour + 12;
            } else {
                return hour;
            }
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'མཚན་མོ';
            } else if (hour < 10) {
                return 'ཞོགས་ཀས';
            } else if (hour < 17) {
                return 'ཉིན་གུང';
            } else if (hour < 20) {
                return 'དགོང་དག';
            } else {
                return 'མཚན་མོ';
            }
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 6 // The week that contains Jan 1st is the first week of the year.
        }
    });

    return bo;
});

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Breton [br]
//! author : Jean-Baptiste Le Duigou : https://github.com/jbleduigou

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    function relativeTimeWithMutation(number, withoutSuffix, key) {
        var format = {
            'mm': 'munutenn',
            'MM': 'miz',
            'dd': 'devezh'
        };
        return number + ' ' + mutation(format[key], number);
    }
    function specialMutationForYears(number) {
        switch (lastNumber(number)) {
            case 1:
            case 3:
            case 4:
            case 5:
            case 9:
                return number + ' bloaz';
            default:
                return number + ' vloaz';
        }
    }
    function lastNumber(number) {
        if (number > 9) {
            return lastNumber(number % 10);
        }
        return number;
    }
    function mutation(text, number) {
        if (number === 2) {
            return softMutation(text);
        }
        return text;
    }
    function softMutation(text) {
        var mutationTable = {
            'm': 'v',
            'b': 'v',
            'd': 'z'
        };
        if (mutationTable[text.charAt(0)] === undefined) {
            return text;
        }
        return mutationTable[text.charAt(0)] + text.substring(1);
    }

    var br = moment.defineLocale('br', {
        months: 'Genver_C\'hwevrer_Meurzh_Ebrel_Mae_Mezheven_Gouere_Eost_Gwengolo_Here_Du_Kerzu'.split('_'),
        monthsShort: 'Gen_C\'hwe_Meu_Ebr_Mae_Eve_Gou_Eos_Gwe_Her_Du_Ker'.split('_'),
        weekdays: 'Sul_Lun_Meurzh_Merc\'her_Yaou_Gwener_Sadorn'.split('_'),
        weekdaysShort: 'Sul_Lun_Meu_Mer_Yao_Gwe_Sad'.split('_'),
        weekdaysMin: 'Su_Lu_Me_Mer_Ya_Gw_Sa'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'h[e]mm A',
            LTS: 'h[e]mm:ss A',
            L: 'DD/MM/YYYY',
            LL: 'D [a viz] MMMM YYYY',
            LLL: 'D [a viz] MMMM YYYY h[e]mm A',
            LLLL: 'dddd, D [a viz] MMMM YYYY h[e]mm A'
        },
        calendar: {
            sameDay: '[Hiziv da] LT',
            nextDay: '[Warc\'hoazh da] LT',
            nextWeek: 'dddd [da] LT',
            lastDay: '[Dec\'h da] LT',
            lastWeek: 'dddd [paset da] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'a-benn %s',
            past: '%s \'zo',
            s: 'un nebeud segondennoù',
            m: 'ur vunutenn',
            mm: relativeTimeWithMutation,
            h: 'un eur',
            hh: '%d eur',
            d: 'un devezh',
            dd: relativeTimeWithMutation,
            M: 'ur miz',
            MM: relativeTimeWithMutation,
            y: 'ur bloaz',
            yy: specialMutationForYears
        },
        dayOfMonthOrdinalParse: /\d{1,2}(añ|vet)/,
        ordinal: function (number) {
            var output = number === 1 ? 'añ' : 'vet';
            return number + output;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    return br;
});

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Bosnian [bs]
//! author : Nedim Cholich : https://github.com/frontyard
//! based on (hr) translation by Bojan Marković

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    function translate(number, withoutSuffix, key) {
        var result = number + ' ';
        switch (key) {
            case 'm':
                return withoutSuffix ? 'jedna minuta' : 'jedne minute';
            case 'mm':
                if (number === 1) {
                    result += 'minuta';
                } else if (number === 2 || number === 3 || number === 4) {
                    result += 'minute';
                } else {
                    result += 'minuta';
                }
                return result;
            case 'h':
                return withoutSuffix ? 'jedan sat' : 'jednog sata';
            case 'hh':
                if (number === 1) {
                    result += 'sat';
                } else if (number === 2 || number === 3 || number === 4) {
                    result += 'sata';
                } else {
                    result += 'sati';
                }
                return result;
            case 'dd':
                if (number === 1) {
                    result += 'dan';
                } else {
                    result += 'dana';
                }
                return result;
            case 'MM':
                if (number === 1) {
                    result += 'mjesec';
                } else if (number === 2 || number === 3 || number === 4) {
                    result += 'mjeseca';
                } else {
                    result += 'mjeseci';
                }
                return result;
            case 'yy':
                if (number === 1) {
                    result += 'godina';
                } else if (number === 2 || number === 3 || number === 4) {
                    result += 'godine';
                } else {
                    result += 'godina';
                }
                return result;
        }
    }

    var bs = moment.defineLocale('bs', {
        months: 'januar_februar_mart_april_maj_juni_juli_august_septembar_oktobar_novembar_decembar'.split('_'),
        monthsShort: 'jan._feb._mar._apr._maj._jun._jul._aug._sep._okt._nov._dec.'.split('_'),
        monthsParseExact: true,
        weekdays: 'nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota'.split('_'),
        weekdaysShort: 'ned._pon._uto._sri._čet._pet._sub.'.split('_'),
        weekdaysMin: 'ne_po_ut_sr_če_pe_su'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY H:mm',
            LLLL: 'dddd, D. MMMM YYYY H:mm'
        },
        calendar: {
            sameDay: '[danas u] LT',
            nextDay: '[sutra u] LT',
            nextWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[u] [nedjelju] [u] LT';
                    case 3:
                        return '[u] [srijedu] [u] LT';
                    case 6:
                        return '[u] [subotu] [u] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[u] dddd [u] LT';
                }
            },
            lastDay: '[jučer u] LT',
            lastWeek: function () {
                switch (this.day()) {
                    case 0:
                    case 3:
                        return '[prošlu] dddd [u] LT';
                    case 6:
                        return '[prošle] [subote] [u] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[prošli] dddd [u] LT';
                }
            },
            sameElse: 'L'
        },
        relativeTime: {
            future: 'za %s',
            past: 'prije %s',
            s: 'par sekundi',
            m: translate,
            mm: translate,
            h: translate,
            hh: translate,
            d: 'dan',
            dd: translate,
            M: 'mjesec',
            MM: translate,
            y: 'godinu',
            yy: translate
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 1st is the first week of the year.
        }
    });

    return bs;
});

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Catalan [ca]
//! author : Juan G. Hurtado : https://github.com/juanghurtado

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    var ca = moment.defineLocale('ca', {
        months: {
            standalone: 'gener_febrer_març_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre'.split('_'),
            format: 'de gener_de febrer_de març_d\'abril_de maig_de juny_de juliol_d\'agost_de setembre_d\'octubre_de novembre_de desembre'.split('_'),
            isFormat: /D[oD]?(\s)+MMMM/
        },
        monthsShort: 'gen._febr._març_abr._maig_juny_jul._ag._set._oct._nov._des.'.split('_'),
        monthsParseExact: true,
        weekdays: 'diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte'.split('_'),
        weekdaysShort: 'dg._dl._dt._dc._dj._dv._ds.'.split('_'),
        weekdaysMin: 'dg_dl_dt_dc_dj_dv_ds'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM [de] YYYY',
            ll: 'D MMM YYYY',
            LLL: 'D MMMM [de] YYYY [a les] H:mm',
            lll: 'D MMM YYYY, H:mm',
            LLLL: 'dddd D MMMM [de] YYYY [a les] H:mm',
            llll: 'ddd D MMM YYYY, H:mm'
        },
        calendar: {
            sameDay: function () {
                return '[avui a ' + (this.hours() !== 1 ? 'les' : 'la') + '] LT';
            },
            nextDay: function () {
                return '[demà a ' + (this.hours() !== 1 ? 'les' : 'la') + '] LT';
            },
            nextWeek: function () {
                return 'dddd [a ' + (this.hours() !== 1 ? 'les' : 'la') + '] LT';
            },
            lastDay: function () {
                return '[ahir a ' + (this.hours() !== 1 ? 'les' : 'la') + '] LT';
            },
            lastWeek: function () {
                return '[el] dddd [passat a ' + (this.hours() !== 1 ? 'les' : 'la') + '] LT';
            },
            sameElse: 'L'
        },
        relativeTime: {
            future: 'd\'aquí %s',
            past: 'fa %s',
            s: 'uns segons',
            m: 'un minut',
            mm: '%d minuts',
            h: 'una hora',
            hh: '%d hores',
            d: 'un dia',
            dd: '%d dies',
            M: 'un mes',
            MM: '%d mesos',
            y: 'un any',
            yy: '%d anys'
        },
        dayOfMonthOrdinalParse: /\d{1,2}(r|n|t|è|a)/,
        ordinal: function (number, period) {
            var output = number === 1 ? 'r' : number === 2 ? 'n' : number === 3 ? 'r' : number === 4 ? 't' : 'è';
            if (period === 'w' || period === 'W') {
                output = 'a';
            }
            return number + output;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    return ca;
});

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Czech [cs]
//! author : petrbela : https://github.com/petrbela

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    var months = 'leden_únor_březen_duben_květen_červen_červenec_srpen_září_říjen_listopad_prosinec'.split('_');
    var monthsShort = 'led_úno_bře_dub_kvě_čvn_čvc_srp_zář_říj_lis_pro'.split('_');
    function plural(n) {
        return n > 1 && n < 5 && ~~(n / 10) !== 1;
    }
    function translate(number, withoutSuffix, key, isFuture) {
        var result = number + ' ';
        switch (key) {
            case 's':
                // a few seconds / in a few seconds / a few seconds ago
                return withoutSuffix || isFuture ? 'pár sekund' : 'pár sekundami';
            case 'm':
                // a minute / in a minute / a minute ago
                return withoutSuffix ? 'minuta' : isFuture ? 'minutu' : 'minutou';
            case 'mm':
                // 9 minutes / in 9 minutes / 9 minutes ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'minuty' : 'minut');
                } else {
                    return result + 'minutami';
                }
                break;
            case 'h':
                // an hour / in an hour / an hour ago
                return withoutSuffix ? 'hodina' : isFuture ? 'hodinu' : 'hodinou';
            case 'hh':
                // 9 hours / in 9 hours / 9 hours ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'hodiny' : 'hodin');
                } else {
                    return result + 'hodinami';
                }
                break;
            case 'd':
                // a day / in a day / a day ago
                return withoutSuffix || isFuture ? 'den' : 'dnem';
            case 'dd':
                // 9 days / in 9 days / 9 days ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'dny' : 'dní');
                } else {
                    return result + 'dny';
                }
                break;
            case 'M':
                // a month / in a month / a month ago
                return withoutSuffix || isFuture ? 'měsíc' : 'měsícem';
            case 'MM':
                // 9 months / in 9 months / 9 months ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'měsíce' : 'měsíců');
                } else {
                    return result + 'měsíci';
                }
                break;
            case 'y':
                // a year / in a year / a year ago
                return withoutSuffix || isFuture ? 'rok' : 'rokem';
            case 'yy':
                // 9 years / in 9 years / 9 years ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'roky' : 'let');
                } else {
                    return result + 'lety';
                }
                break;
        }
    }

    var cs = moment.defineLocale('cs', {
        months: months,
        monthsShort: monthsShort,
        monthsParse: function (months, monthsShort) {
            var i,
                _monthsParse = [];
            for (i = 0; i < 12; i++) {
                // use custom parser to solve problem with July (červenec)
                _monthsParse[i] = new RegExp('^' + months[i] + '$|^' + monthsShort[i] + '$', 'i');
            }
            return _monthsParse;
        }(months, monthsShort),
        shortMonthsParse: function (monthsShort) {
            var i,
                _shortMonthsParse = [];
            for (i = 0; i < 12; i++) {
                _shortMonthsParse[i] = new RegExp('^' + monthsShort[i] + '$', 'i');
            }
            return _shortMonthsParse;
        }(monthsShort),
        longMonthsParse: function (months) {
            var i,
                _longMonthsParse = [];
            for (i = 0; i < 12; i++) {
                _longMonthsParse[i] = new RegExp('^' + months[i] + '$', 'i');
            }
            return _longMonthsParse;
        }(months),
        weekdays: 'neděle_pondělí_úterý_středa_čtvrtek_pátek_sobota'.split('_'),
        weekdaysShort: 'ne_po_út_st_čt_pá_so'.split('_'),
        weekdaysMin: 'ne_po_út_st_čt_pá_so'.split('_'),
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY H:mm',
            LLLL: 'dddd D. MMMM YYYY H:mm',
            l: 'D. M. YYYY'
        },
        calendar: {
            sameDay: '[dnes v] LT',
            nextDay: '[zítra v] LT',
            nextWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[v neděli v] LT';
                    case 1:
                    case 2:
                        return '[v] dddd [v] LT';
                    case 3:
                        return '[ve středu v] LT';
                    case 4:
                        return '[ve čtvrtek v] LT';
                    case 5:
                        return '[v pátek v] LT';
                    case 6:
                        return '[v sobotu v] LT';
                }
            },
            lastDay: '[včera v] LT',
            lastWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[minulou neděli v] LT';
                    case 1:
                    case 2:
                        return '[minulé] dddd [v] LT';
                    case 3:
                        return '[minulou středu v] LT';
                    case 4:
                    case 5:
                        return '[minulý] dddd [v] LT';
                    case 6:
                        return '[minulou sobotu v] LT';
                }
            },
            sameElse: 'L'
        },
        relativeTime: {
            future: 'za %s',
            past: 'před %s',
            s: translate,
            m: translate,
            mm: translate,
            h: translate,
            hh: translate,
            d: translate,
            dd: translate,
            M: translate,
            MM: translate,
            y: translate,
            yy: translate
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    return cs;
});

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Chuvash [cv]
//! author : Anatoly Mironov : https://github.com/mirontoli

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    var cv = moment.defineLocale('cv', {
        months: 'кӑрлач_нарӑс_пуш_ака_май_ҫӗртме_утӑ_ҫурла_авӑн_юпа_чӳк_раштав'.split('_'),
        monthsShort: 'кӑр_нар_пуш_ака_май_ҫӗр_утӑ_ҫур_авн_юпа_чӳк_раш'.split('_'),
        weekdays: 'вырсарникун_тунтикун_ытларикун_юнкун_кӗҫнерникун_эрнекун_шӑматкун'.split('_'),
        weekdaysShort: 'выр_тун_ытл_юн_кӗҫ_эрн_шӑм'.split('_'),
        weekdaysMin: 'вр_тн_ыт_юн_кҫ_эр_шм'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD-MM-YYYY',
            LL: 'YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ]',
            LLL: 'YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm',
            LLLL: 'dddd, YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm'
        },
        calendar: {
            sameDay: '[Паян] LT [сехетре]',
            nextDay: '[Ыран] LT [сехетре]',
            lastDay: '[Ӗнер] LT [сехетре]',
            nextWeek: '[Ҫитес] dddd LT [сехетре]',
            lastWeek: '[Иртнӗ] dddd LT [сехетре]',
            sameElse: 'L'
        },
        relativeTime: {
            future: function (output) {
                var affix = /сехет$/i.exec(output) ? 'рен' : /ҫул$/i.exec(output) ? 'тан' : 'ран';
                return output + affix;
            },
            past: '%s каялла',
            s: 'пӗр-ик ҫеккунт',
            m: 'пӗр минут',
            mm: '%d минут',
            h: 'пӗр сехет',
            hh: '%d сехет',
            d: 'пӗр кун',
            dd: '%d кун',
            M: 'пӗр уйӑх',
            MM: '%d уйӑх',
            y: 'пӗр ҫул',
            yy: '%d ҫул'
        },
        dayOfMonthOrdinalParse: /\d{1,2}-мӗш/,
        ordinal: '%d-мӗш',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 1st is the first week of the year.
        }
    });

    return cv;
});

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Welsh [cy]
//! author : Robert Allen : https://github.com/robgallen
//! author : https://github.com/ryangreaves

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    var cy = moment.defineLocale('cy', {
        months: 'Ionawr_Chwefror_Mawrth_Ebrill_Mai_Mehefin_Gorffennaf_Awst_Medi_Hydref_Tachwedd_Rhagfyr'.split('_'),
        monthsShort: 'Ion_Chwe_Maw_Ebr_Mai_Meh_Gor_Aws_Med_Hyd_Tach_Rhag'.split('_'),
        weekdays: 'Dydd Sul_Dydd Llun_Dydd Mawrth_Dydd Mercher_Dydd Iau_Dydd Gwener_Dydd Sadwrn'.split('_'),
        weekdaysShort: 'Sul_Llun_Maw_Mer_Iau_Gwe_Sad'.split('_'),
        weekdaysMin: 'Su_Ll_Ma_Me_Ia_Gw_Sa'.split('_'),
        weekdaysParseExact: true,
        // time formats are the same as en-gb
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[Heddiw am] LT',
            nextDay: '[Yfory am] LT',
            nextWeek: 'dddd [am] LT',
            lastDay: '[Ddoe am] LT',
            lastWeek: 'dddd [diwethaf am] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'mewn %s',
            past: '%s yn ôl',
            s: 'ychydig eiliadau',
            m: 'munud',
            mm: '%d munud',
            h: 'awr',
            hh: '%d awr',
            d: 'diwrnod',
            dd: '%d diwrnod',
            M: 'mis',
            MM: '%d mis',
            y: 'blwyddyn',
            yy: '%d flynedd'
        },
        dayOfMonthOrdinalParse: /\d{1,2}(fed|ain|af|il|ydd|ed|eg)/,
        // traditional ordinal numbers above 31 are not commonly used in colloquial Welsh
        ordinal: function (number) {
            var b = number,
                output = '',
                lookup = ['', 'af', 'il', 'ydd', 'ydd', 'ed', 'ed', 'ed', 'fed', 'fed', 'fed', // 1af to 10fed
            'eg', 'fed', 'eg', 'eg', 'fed', 'eg', 'eg', 'fed', 'eg', 'fed' // 11eg to 20fed
            ];
            if (b > 20) {
                if (b === 40 || b === 50 || b === 60 || b === 80 || b === 100) {
                    output = 'fed'; // not 30ain, 70ain or 90ain
                } else {
                    output = 'ain';
                }
            } else if (b > 0) {
                output = lookup[b];
            }
            return number + output;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    return cy;
});

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Danish [da]
//! author : Ulrik Nielsen : https://github.com/mrbase

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    var da = moment.defineLocale('da', {
        months: 'januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december'.split('_'),
        monthsShort: 'jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec'.split('_'),
        weekdays: 'søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag'.split('_'),
        weekdaysShort: 'søn_man_tir_ons_tor_fre_lør'.split('_'),
        weekdaysMin: 'sø_ma_ti_on_to_fr_lø'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY HH:mm',
            LLLL: 'dddd [d.] D. MMMM YYYY [kl.] HH:mm'
        },
        calendar: {
            sameDay: '[i dag kl.] LT',
            nextDay: '[i morgen kl.] LT',
            nextWeek: 'på dddd [kl.] LT',
            lastDay: '[i går kl.] LT',
            lastWeek: '[i] dddd[s kl.] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'om %s',
            past: '%s siden',
            s: 'få sekunder',
            m: 'et minut',
            mm: '%d minutter',
            h: 'en time',
            hh: '%d timer',
            d: 'en dag',
            dd: '%d dage',
            M: 'en måned',
            MM: '%d måneder',
            y: 'et år',
            yy: '%d år'
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    return da;
});

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : German [de]
//! author : lluchs : https://github.com/lluchs
//! author: Menelion Elensúle: https://github.com/Oire
//! author : Mikolaj Dadela : https://github.com/mik01aj

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    function processRelativeTime(number, withoutSuffix, key, isFuture) {
        var format = {
            'm': ['eine Minute', 'einer Minute'],
            'h': ['eine Stunde', 'einer Stunde'],
            'd': ['ein Tag', 'einem Tag'],
            'dd': [number + ' Tage', number + ' Tagen'],
            'M': ['ein Monat', 'einem Monat'],
            'MM': [number + ' Monate', number + ' Monaten'],
            'y': ['ein Jahr', 'einem Jahr'],
            'yy': [number + ' Jahre', number + ' Jahren']
        };
        return withoutSuffix ? format[key][0] : format[key][1];
    }

    var de = moment.defineLocale('de', {
        months: 'Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
        monthsShort: 'Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.'.split('_'),
        monthsParseExact: true,
        weekdays: 'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split('_'),
        weekdaysShort: 'So._Mo._Di._Mi._Do._Fr._Sa.'.split('_'),
        weekdaysMin: 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY HH:mm',
            LLLL: 'dddd, D. MMMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[heute um] LT [Uhr]',
            sameElse: 'L',
            nextDay: '[morgen um] LT [Uhr]',
            nextWeek: 'dddd [um] LT [Uhr]',
            lastDay: '[gestern um] LT [Uhr]',
            lastWeek: '[letzten] dddd [um] LT [Uhr]'
        },
        relativeTime: {
            future: 'in %s',
            past: 'vor %s',
            s: 'ein paar Sekunden',
            m: processRelativeTime,
            mm: '%d Minuten',
            h: processRelativeTime,
            hh: '%d Stunden',
            d: processRelativeTime,
            dd: processRelativeTime,
            M: processRelativeTime,
            MM: processRelativeTime,
            y: processRelativeTime,
            yy: processRelativeTime
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    return de;
});

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : German (Austria) [de-at]
//! author : lluchs : https://github.com/lluchs
//! author: Menelion Elensúle: https://github.com/Oire
//! author : Martin Groller : https://github.com/MadMG
//! author : Mikolaj Dadela : https://github.com/mik01aj

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    function processRelativeTime(number, withoutSuffix, key, isFuture) {
        var format = {
            'm': ['eine Minute', 'einer Minute'],
            'h': ['eine Stunde', 'einer Stunde'],
            'd': ['ein Tag', 'einem Tag'],
            'dd': [number + ' Tage', number + ' Tagen'],
            'M': ['ein Monat', 'einem Monat'],
            'MM': [number + ' Monate', number + ' Monaten'],
            'y': ['ein Jahr', 'einem Jahr'],
            'yy': [number + ' Jahre', number + ' Jahren']
        };
        return withoutSuffix ? format[key][0] : format[key][1];
    }

    var deAt = moment.defineLocale('de-at', {
        months: 'Jänner_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
        monthsShort: 'Jän._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.'.split('_'),
        monthsParseExact: true,
        weekdays: 'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split('_'),
        weekdaysShort: 'So._Mo._Di._Mi._Do._Fr._Sa.'.split('_'),
        weekdaysMin: 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY HH:mm',
            LLLL: 'dddd, D. MMMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[heute um] LT [Uhr]',
            sameElse: 'L',
            nextDay: '[morgen um] LT [Uhr]',
            nextWeek: 'dddd [um] LT [Uhr]',
            lastDay: '[gestern um] LT [Uhr]',
            lastWeek: '[letzten] dddd [um] LT [Uhr]'
        },
        relativeTime: {
            future: 'in %s',
            past: 'vor %s',
            s: 'ein paar Sekunden',
            m: processRelativeTime,
            mm: '%d Minuten',
            h: processRelativeTime,
            hh: '%d Stunden',
            d: processRelativeTime,
            dd: processRelativeTime,
            M: processRelativeTime,
            MM: processRelativeTime,
            y: processRelativeTime,
            yy: processRelativeTime
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    return deAt;
});

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : German (Switzerland) [de-ch]
//! author : sschueller : https://github.com/sschueller

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    // based on: https://www.bk.admin.ch/dokumentation/sprachen/04915/05016/index.html?lang=de#

    function processRelativeTime(number, withoutSuffix, key, isFuture) {
        var format = {
            'm': ['eine Minute', 'einer Minute'],
            'h': ['eine Stunde', 'einer Stunde'],
            'd': ['ein Tag', 'einem Tag'],
            'dd': [number + ' Tage', number + ' Tagen'],
            'M': ['ein Monat', 'einem Monat'],
            'MM': [number + ' Monate', number + ' Monaten'],
            'y': ['ein Jahr', 'einem Jahr'],
            'yy': [number + ' Jahre', number + ' Jahren']
        };
        return withoutSuffix ? format[key][0] : format[key][1];
    }

    var deCh = moment.defineLocale('de-ch', {
        months: 'Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
        monthsShort: 'Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.'.split('_'),
        monthsParseExact: true,
        weekdays: 'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split('_'),
        weekdaysShort: 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
        weekdaysMin: 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH.mm',
            LTS: 'HH.mm.ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY HH.mm',
            LLLL: 'dddd, D. MMMM YYYY HH.mm'
        },
        calendar: {
            sameDay: '[heute um] LT [Uhr]',
            sameElse: 'L',
            nextDay: '[morgen um] LT [Uhr]',
            nextWeek: 'dddd [um] LT [Uhr]',
            lastDay: '[gestern um] LT [Uhr]',
            lastWeek: '[letzten] dddd [um] LT [Uhr]'
        },
        relativeTime: {
            future: 'in %s',
            past: 'vor %s',
            s: 'ein paar Sekunden',
            m: processRelativeTime,
            mm: '%d Minuten',
            h: processRelativeTime,
            hh: '%d Stunden',
            d: processRelativeTime,
            dd: processRelativeTime,
            M: processRelativeTime,
            MM: processRelativeTime,
            y: processRelativeTime,
            yy: processRelativeTime
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    return deCh;
});

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Maldivian [dv]
//! author : Jawish Hameed : https://github.com/jawish

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    var months = ['ޖެނުއަރީ', 'ފެބްރުއަރީ', 'މާރިޗު', 'އޭޕްރީލު', 'މޭ', 'ޖޫން', 'ޖުލައި', 'އޯގަސްޓު', 'ސެޕްޓެމްބަރު', 'އޮކްޓޯބަރު', 'ނޮވެމްބަރު', 'ޑިސެމްބަރު'];
    var weekdays = ['އާދިއްތަ', 'ހޯމަ', 'އަންގާރަ', 'ބުދަ', 'ބުރާސްފަތި', 'ހުކުރު', 'ހޮނިހިރު'];

    var dv = moment.defineLocale('dv', {
        months: months,
        monthsShort: months,
        weekdays: weekdays,
        weekdaysShort: weekdays,
        weekdaysMin: 'އާދި_ހޯމަ_އަން_ބުދަ_ބުރާ_ހުކު_ހޮނި'.split('_'),
        longDateFormat: {

            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'D/M/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm'
        },
        meridiemParse: /މކ|މފ/,
        isPM: function (input) {
            return 'މފ' === input;
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 12) {
                return 'މކ';
            } else {
                return 'މފ';
            }
        },
        calendar: {
            sameDay: '[މިއަދު] LT',
            nextDay: '[މާދަމާ] LT',
            nextWeek: 'dddd LT',
            lastDay: '[އިއްޔެ] LT',
            lastWeek: '[ފާއިތުވި] dddd LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'ތެރޭގައި %s',
            past: 'ކުރިން %s',
            s: 'ސިކުންތުކޮޅެއް',
            m: 'މިނިޓެއް',
            mm: 'މިނިޓު %d',
            h: 'ގަޑިއިރެއް',
            hh: 'ގަޑިއިރު %d',
            d: 'ދުވަހެއް',
            dd: 'ދުވަސް %d',
            M: 'މަހެއް',
            MM: 'މަސް %d',
            y: 'އަހަރެއް',
            yy: 'އަހަރު %d'
        },
        preparse: function (string) {
            return string.replace(/،/g, ',');
        },
        postformat: function (string) {
            return string.replace(/,/g, '،');
        },
        week: {
            dow: 7, // Sunday is the first day of the week.
            doy: 12 // The week that contains Jan 1st is the first week of the year.
        }
    });

    return dv;
});

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Greek [el]
//! author : Aggelos Karalias : https://github.com/mehiel

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    function isFunction(input) {
        return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
    }

    var el = moment.defineLocale('el', {
        monthsNominativeEl: 'Ιανουάριος_Φεβρουάριος_Μάρτιος_Απρίλιος_Μάιος_Ιούνιος_Ιούλιος_Αύγουστος_Σεπτέμβριος_Οκτώβριος_Νοέμβριος_Δεκέμβριος'.split('_'),
        monthsGenitiveEl: 'Ιανουαρίου_Φεβρουαρίου_Μαρτίου_Απριλίου_Μαΐου_Ιουνίου_Ιουλίου_Αυγούστου_Σεπτεμβρίου_Οκτωβρίου_Νοεμβρίου_Δεκεμβρίου'.split('_'),
        months: function (momentToFormat, format) {
            if (!momentToFormat) {
                return this._monthsNominativeEl;
            } else if (typeof format === 'string' && /D/.test(format.substring(0, format.indexOf('MMMM')))) {
                // if there is a day number before 'MMMM'
                return this._monthsGenitiveEl[momentToFormat.month()];
            } else {
                return this._monthsNominativeEl[momentToFormat.month()];
            }
        },
        monthsShort: 'Ιαν_Φεβ_Μαρ_Απρ_Μαϊ_Ιουν_Ιουλ_Αυγ_Σεπ_Οκτ_Νοε_Δεκ'.split('_'),
        weekdays: 'Κυριακή_Δευτέρα_Τρίτη_Τετάρτη_Πέμπτη_Παρασκευή_Σάββατο'.split('_'),
        weekdaysShort: 'Κυρ_Δευ_Τρι_Τετ_Πεμ_Παρ_Σαβ'.split('_'),
        weekdaysMin: 'Κυ_Δε_Τρ_Τε_Πε_Πα_Σα'.split('_'),
        meridiem: function (hours, minutes, isLower) {
            if (hours > 11) {
                return isLower ? 'μμ' : 'ΜΜ';
            } else {
                return isLower ? 'πμ' : 'ΠΜ';
            }
        },
        isPM: function (input) {
            return (input + '').toLowerCase()[0] === 'μ';
        },
        meridiemParse: /[ΠΜ]\.?Μ?\.?/i,
        longDateFormat: {
            LT: 'h:mm A',
            LTS: 'h:mm:ss A',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY h:mm A',
            LLLL: 'dddd, D MMMM YYYY h:mm A'
        },
        calendarEl: {
            sameDay: '[Σήμερα {}] LT',
            nextDay: '[Αύριο {}] LT',
            nextWeek: 'dddd [{}] LT',
            lastDay: '[Χθες {}] LT',
            lastWeek: function () {
                switch (this.day()) {
                    case 6:
                        return '[το προηγούμενο] dddd [{}] LT';
                    default:
                        return '[την προηγούμενη] dddd [{}] LT';
                }
            },
            sameElse: 'L'
        },
        calendar: function (key, mom) {
            var output = this._calendarEl[key],
                hours = mom && mom.hours();
            if (isFunction(output)) {
                output = output.apply(mom);
            }
            return output.replace('{}', hours % 12 === 1 ? 'στη' : 'στις');
        },
        relativeTime: {
            future: 'σε %s',
            past: '%s πριν',
            s: 'λίγα δευτερόλεπτα',
            m: 'ένα λεπτό',
            mm: '%d λεπτά',
            h: 'μία ώρα',
            hh: '%d ώρες',
            d: 'μία μέρα',
            dd: '%d μέρες',
            M: 'ένας μήνας',
            MM: '%d μήνες',
            y: 'ένας χρόνος',
            yy: '%d χρόνια'
        },
        dayOfMonthOrdinalParse: /\d{1,2}η/,
        ordinal: '%dη',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4st is the first week of the year.
        }
    });

    return el;
});

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : English (Australia) [en-au]
//! author : Jared Morse : https://github.com/jarcoal

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    var enAu = moment.defineLocale('en-au', {
        months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
        monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
        weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
        weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        longDateFormat: {
            LT: 'h:mm A',
            LTS: 'h:mm:ss A',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY h:mm A',
            LLLL: 'dddd, D MMMM YYYY h:mm A'
        },
        calendar: {
            sameDay: '[Today at] LT',
            nextDay: '[Tomorrow at] LT',
            nextWeek: 'dddd [at] LT',
            lastDay: '[Yesterday at] LT',
            lastWeek: '[Last] dddd [at] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'in %s',
            past: '%s ago',
            s: 'a few seconds',
            m: 'a minute',
            mm: '%d minutes',
            h: 'an hour',
            hh: '%d hours',
            d: 'a day',
            dd: '%d days',
            M: 'a month',
            MM: '%d months',
            y: 'a year',
            yy: '%d years'
        },
        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
        ordinal: function (number) {
            var b = number % 10,
                output = ~~(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';
            return number + output;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    return enAu;
});

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : English (Canada) [en-ca]
//! author : Jonathan Abourbih : https://github.com/jonbca

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    var enCa = moment.defineLocale('en-ca', {
        months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
        monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
        weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
        weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        longDateFormat: {
            LT: 'h:mm A',
            LTS: 'h:mm:ss A',
            L: 'YYYY-MM-DD',
            LL: 'MMMM D, YYYY',
            LLL: 'MMMM D, YYYY h:mm A',
            LLLL: 'dddd, MMMM D, YYYY h:mm A'
        },
        calendar: {
            sameDay: '[Today at] LT',
            nextDay: '[Tomorrow at] LT',
            nextWeek: 'dddd [at] LT',
            lastDay: '[Yesterday at] LT',
            lastWeek: '[Last] dddd [at] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'in %s',
            past: '%s ago',
            s: 'a few seconds',
            m: 'a minute',
            mm: '%d minutes',
            h: 'an hour',
            hh: '%d hours',
            d: 'a day',
            dd: '%d days',
            M: 'a month',
            MM: '%d months',
            y: 'a year',
            yy: '%d years'
        },
        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
        ordinal: function (number) {
            var b = number % 10,
                output = ~~(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';
            return number + output;
        }
    });

    return enCa;
});

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : English (United Kingdom) [en-gb]
//! author : Chris Gedrim : https://github.com/chrisgedrim

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    var enGb = moment.defineLocale('en-gb', {
        months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
        monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
        weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
        weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[Today at] LT',
            nextDay: '[Tomorrow at] LT',
            nextWeek: 'dddd [at] LT',
            lastDay: '[Yesterday at] LT',
            lastWeek: '[Last] dddd [at] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'in %s',
            past: '%s ago',
            s: 'a few seconds',
            m: 'a minute',
            mm: '%d minutes',
            h: 'an hour',
            hh: '%d hours',
            d: 'a day',
            dd: '%d days',
            M: 'a month',
            MM: '%d months',
            y: 'a year',
            yy: '%d years'
        },
        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
        ordinal: function (number) {
            var b = number % 10,
                output = ~~(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';
            return number + output;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    return enGb;
});

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : English (Ireland) [en-ie]
//! author : Chris Cartlidge : https://github.com/chriscartlidge

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    var enIe = moment.defineLocale('en-ie', {
        months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
        monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
        weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
        weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD-MM-YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[Today at] LT',
            nextDay: '[Tomorrow at] LT',
            nextWeek: 'dddd [at] LT',
            lastDay: '[Yesterday at] LT',
            lastWeek: '[Last] dddd [at] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'in %s',
            past: '%s ago',
            s: 'a few seconds',
            m: 'a minute',
            mm: '%d minutes',
            h: 'an hour',
            hh: '%d hours',
            d: 'a day',
            dd: '%d days',
            M: 'a month',
            MM: '%d months',
            y: 'a year',
            yy: '%d years'
        },
        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
        ordinal: function (number) {
            var b = number % 10,
                output = ~~(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';
            return number + output;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    return enIe;
});

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : English (New Zealand) [en-nz]
//! author : Luke McGregor : https://github.com/lukemcgregor

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    var enNz = moment.defineLocale('en-nz', {
        months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
        monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
        weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
        weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        longDateFormat: {
            LT: 'h:mm A',
            LTS: 'h:mm:ss A',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY h:mm A',
            LLLL: 'dddd, D MMMM YYYY h:mm A'
        },
        calendar: {
            sameDay: '[Today at] LT',
            nextDay: '[Tomorrow at] LT',
            nextWeek: 'dddd [at] LT',
            lastDay: '[Yesterday at] LT',
            lastWeek: '[Last] dddd [at] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'in %s',
            past: '%s ago',
            s: 'a few seconds',
            m: 'a minute',
            mm: '%d minutes',
            h: 'an hour',
            hh: '%d hours',
            d: 'a day',
            dd: '%d days',
            M: 'a month',
            MM: '%d months',
            y: 'a year',
            yy: '%d years'
        },
        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
        ordinal: function (number) {
            var b = number % 10,
                output = ~~(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';
            return number + output;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    return enNz;
});

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Esperanto [eo]
//! author : Colin Dean : https://github.com/colindean
//! author : Mia Nordentoft Imperatori : https://github.com/miestasmia
//! comment : miestasmia corrected the translation by colindean

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    var eo = moment.defineLocale('eo', {
        months: 'januaro_februaro_marto_aprilo_majo_junio_julio_aŭgusto_septembro_oktobro_novembro_decembro'.split('_'),
        monthsShort: 'jan_feb_mar_apr_maj_jun_jul_aŭg_sep_okt_nov_dec'.split('_'),
        weekdays: 'dimanĉo_lundo_mardo_merkredo_ĵaŭdo_vendredo_sabato'.split('_'),
        weekdaysShort: 'dim_lun_mard_merk_ĵaŭ_ven_sab'.split('_'),
        weekdaysMin: 'di_lu_ma_me_ĵa_ve_sa'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'YYYY-MM-DD',
            LL: 'D[-a de] MMMM, YYYY',
            LLL: 'D[-a de] MMMM, YYYY HH:mm',
            LLLL: 'dddd, [la] D[-a de] MMMM, YYYY HH:mm'
        },
        meridiemParse: /[ap]\.t\.m/i,
        isPM: function (input) {
            return input.charAt(0).toLowerCase() === 'p';
        },
        meridiem: function (hours, minutes, isLower) {
            if (hours > 11) {
                return isLower ? 'p.t.m.' : 'P.T.M.';
            } else {
                return isLower ? 'a.t.m.' : 'A.T.M.';
            }
        },
        calendar: {
            sameDay: '[Hodiaŭ je] LT',
            nextDay: '[Morgaŭ je] LT',
            nextWeek: 'dddd [je] LT',
            lastDay: '[Hieraŭ je] LT',
            lastWeek: '[pasinta] dddd [je] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'post %s',
            past: 'antaŭ %s',
            s: 'sekundoj',
            m: 'minuto',
            mm: '%d minutoj',
            h: 'horo',
            hh: '%d horoj',
            d: 'tago', //ne 'diurno', ĉar estas uzita por proksimumo
            dd: '%d tagoj',
            M: 'monato',
            MM: '%d monatoj',
            y: 'jaro',
            yy: '%d jaroj'
        },
        dayOfMonthOrdinalParse: /\d{1,2}a/,
        ordinal: '%da',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 1st is the first week of the year.
        }
    });

    return eo;
});

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Spanish [es]
//! author : Julio Napurí : https://github.com/julionc

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    var monthsShortDot = 'ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.'.split('_');
    var monthsShort = 'ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic'.split('_');

    var monthsParse = [/^ene/i, /^feb/i, /^mar/i, /^abr/i, /^may/i, /^jun/i, /^jul/i, /^ago/i, /^sep/i, /^oct/i, /^nov/i, /^dic/i];
    var monthsRegex = /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;

    var es = moment.defineLocale('es', {
        months: 'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split('_'),
        monthsShort: function (m, format) {
            if (!m) {
                return monthsShortDot;
            } else if (/-MMM-/.test(format)) {
                return monthsShort[m.month()];
            } else {
                return monthsShortDot[m.month()];
            }
        },
        monthsRegex: monthsRegex,
        monthsShortRegex: monthsRegex,
        monthsStrictRegex: /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,
        monthsShortStrictRegex: /^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,
        monthsParse: monthsParse,
        longMonthsParse: monthsParse,
        shortMonthsParse: monthsParse,
        weekdays: 'domingo_lunes_martes_miércoles_jueves_viernes_sábado'.split('_'),
        weekdaysShort: 'dom._lun._mar._mié._jue._vie._sáb.'.split('_'),
        weekdaysMin: 'do_lu_ma_mi_ju_vi_sá'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D [de] MMMM [de] YYYY',
            LLL: 'D [de] MMMM [de] YYYY H:mm',
            LLLL: 'dddd, D [de] MMMM [de] YYYY H:mm'
        },
        calendar: {
            sameDay: function () {
                return '[hoy a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            nextDay: function () {
                return '[mañana a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            nextWeek: function () {
                return 'dddd [a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            lastDay: function () {
                return '[ayer a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            lastWeek: function () {
                return '[el] dddd [pasado a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            sameElse: 'L'
        },
        relativeTime: {
            future: 'en %s',
            past: 'hace %s',
            s: 'unos segundos',
            m: 'un minuto',
            mm: '%d minutos',
            h: 'una hora',
            hh: '%d horas',
            d: 'un día',
            dd: '%d días',
            M: 'un mes',
            MM: '%d meses',
            y: 'un año',
            yy: '%d años'
        },
        dayOfMonthOrdinalParse: /\d{1,2}º/,
        ordinal: '%dº',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    return es;
});

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Spanish (Dominican Republic) [es-do]

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    var monthsShortDot = 'ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.'.split('_');
    var monthsShort = 'ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic'.split('_');

    var monthsParse = [/^ene/i, /^feb/i, /^mar/i, /^abr/i, /^may/i, /^jun/i, /^jul/i, /^ago/i, /^sep/i, /^oct/i, /^nov/i, /^dic/i];
    var monthsRegex = /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;

    var esDo = moment.defineLocale('es-do', {
        months: 'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split('_'),
        monthsShort: function (m, format) {
            if (!m) {
                return monthsShortDot;
            } else if (/-MMM-/.test(format)) {
                return monthsShort[m.month()];
            } else {
                return monthsShortDot[m.month()];
            }
        },
        monthsRegex: monthsRegex,
        monthsShortRegex: monthsRegex,
        monthsStrictRegex: /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,
        monthsShortStrictRegex: /^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,
        monthsParse: monthsParse,
        longMonthsParse: monthsParse,
        shortMonthsParse: monthsParse,
        weekdays: 'domingo_lunes_martes_miércoles_jueves_viernes_sábado'.split('_'),
        weekdaysShort: 'dom._lun._mar._mié._jue._vie._sáb.'.split('_'),
        weekdaysMin: 'do_lu_ma_mi_ju_vi_sá'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'h:mm A',
            LTS: 'h:mm:ss A',
            L: 'DD/MM/YYYY',
            LL: 'D [de] MMMM [de] YYYY',
            LLL: 'D [de] MMMM [de] YYYY h:mm A',
            LLLL: 'dddd, D [de] MMMM [de] YYYY h:mm A'
        },
        calendar: {
            sameDay: function () {
                return '[hoy a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            nextDay: function () {
                return '[mañana a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            nextWeek: function () {
                return 'dddd [a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            lastDay: function () {
                return '[ayer a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            lastWeek: function () {
                return '[el] dddd [pasado a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            sameElse: 'L'
        },
        relativeTime: {
            future: 'en %s',
            past: 'hace %s',
            s: 'unos segundos',
            m: 'un minuto',
            mm: '%d minutos',
            h: 'una hora',
            hh: '%d horas',
            d: 'un día',
            dd: '%d días',
            M: 'un mes',
            MM: '%d meses',
            y: 'un año',
            yy: '%d años'
        },
        dayOfMonthOrdinalParse: /\d{1,2}º/,
        ordinal: '%dº',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    return esDo;
});

/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Spanish (United States) [es-us]
//! author : bustta : https://github.com/bustta

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    var monthsShortDot = 'ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.'.split('_');
    var monthsShort = 'ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic'.split('_');

    var esUs = moment.defineLocale('es-us', {
        months: 'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split('_'),
        monthsShort: function (m, format) {
            if (!m) {
                return monthsShortDot;
            } else if (/-MMM-/.test(format)) {
                return monthsShort[m.month()];
            } else {
                return monthsShortDot[m.month()];
            }
        },
        monthsParseExact: true,
        weekdays: 'domingo_lunes_martes_miércoles_jueves_viernes_sábado'.split('_'),
        weekdaysShort: 'dom._lun._mar._mié._jue._vie._sáb.'.split('_'),
        weekdaysMin: 'do_lu_ma_mi_ju_vi_sá'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'MM/DD/YYYY',
            LL: 'MMMM [de] D [de] YYYY',
            LLL: 'MMMM [de] D [de] YYYY H:mm',
            LLLL: 'dddd, MMMM [de] D [de] YYYY H:mm'
        },
        calendar: {
            sameDay: function () {
                return '[hoy a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            nextDay: function () {
                return '[mañana a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            nextWeek: function () {
                return 'dddd [a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            lastDay: function () {
                return '[ayer a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            lastWeek: function () {
                return '[el] dddd [pasado a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            sameElse: 'L'
        },
        relativeTime: {
            future: 'en %s',
            past: 'hace %s',
            s: 'unos segundos',
            m: 'un minuto',
            mm: '%d minutos',
            h: 'una hora',
            hh: '%d horas',
            d: 'un día',
            dd: '%d días',
            M: 'un mes',
            MM: '%d meses',
            y: 'un año',
            yy: '%d años'
        },
        dayOfMonthOrdinalParse: /\d{1,2}º/,
        ordinal: '%dº',
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 6 // The week that contains Jan 1st is the first week of the year.
        }
    });

    return esUs;
});

/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Estonian [et]
//! author : Henry Kehlmann : https://github.com/madhenry
//! improvements : Illimar Tambek : https://github.com/ragulka

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    function processRelativeTime(number, withoutSuffix, key, isFuture) {
        var format = {
            's': ['mõne sekundi', 'mõni sekund', 'paar sekundit'],
            'm': ['ühe minuti', 'üks minut'],
            'mm': [number + ' minuti', number + ' minutit'],
            'h': ['ühe tunni', 'tund aega', 'üks tund'],
            'hh': [number + ' tunni', number + ' tundi'],
            'd': ['ühe päeva', 'üks päev'],
            'M': ['kuu aja', 'kuu aega', 'üks kuu'],
            'MM': [number + ' kuu', number + ' kuud'],
            'y': ['ühe aasta', 'aasta', 'üks aasta'],
            'yy': [number + ' aasta', number + ' aastat']
        };
        if (withoutSuffix) {
            return format[key][2] ? format[key][2] : format[key][1];
        }
        return isFuture ? format[key][0] : format[key][1];
    }

    var et = moment.defineLocale('et', {
        months: 'jaanuar_veebruar_märts_aprill_mai_juuni_juuli_august_september_oktoober_november_detsember'.split('_'),
        monthsShort: 'jaan_veebr_märts_apr_mai_juuni_juuli_aug_sept_okt_nov_dets'.split('_'),
        weekdays: 'pühapäev_esmaspäev_teisipäev_kolmapäev_neljapäev_reede_laupäev'.split('_'),
        weekdaysShort: 'P_E_T_K_N_R_L'.split('_'),
        weekdaysMin: 'P_E_T_K_N_R_L'.split('_'),
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY H:mm',
            LLLL: 'dddd, D. MMMM YYYY H:mm'
        },
        calendar: {
            sameDay: '[Täna,] LT',
            nextDay: '[Homme,] LT',
            nextWeek: '[Järgmine] dddd LT',
            lastDay: '[Eile,] LT',
            lastWeek: '[Eelmine] dddd LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: '%s pärast',
            past: '%s tagasi',
            s: processRelativeTime,
            m: processRelativeTime,
            mm: processRelativeTime,
            h: processRelativeTime,
            hh: processRelativeTime,
            d: processRelativeTime,
            dd: '%d päeva',
            M: processRelativeTime,
            MM: processRelativeTime,
            y: processRelativeTime,
            yy: processRelativeTime
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    return et;
});

/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Basque [eu]
//! author : Eneko Illarramendi : https://github.com/eillarra

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    var eu = moment.defineLocale('eu', {
        months: 'urtarrila_otsaila_martxoa_apirila_maiatza_ekaina_uztaila_abuztua_iraila_urria_azaroa_abendua'.split('_'),
        monthsShort: 'urt._ots._mar._api._mai._eka._uzt._abu._ira._urr._aza._abe.'.split('_'),
        monthsParseExact: true,
        weekdays: 'igandea_astelehena_asteartea_asteazkena_osteguna_ostirala_larunbata'.split('_'),
        weekdaysShort: 'ig._al._ar._az._og._ol._lr.'.split('_'),
        weekdaysMin: 'ig_al_ar_az_og_ol_lr'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'YYYY-MM-DD',
            LL: 'YYYY[ko] MMMM[ren] D[a]',
            LLL: 'YYYY[ko] MMMM[ren] D[a] HH:mm',
            LLLL: 'dddd, YYYY[ko] MMMM[ren] D[a] HH:mm',
            l: 'YYYY-M-D',
            ll: 'YYYY[ko] MMM D[a]',
            lll: 'YYYY[ko] MMM D[a] HH:mm',
            llll: 'ddd, YYYY[ko] MMM D[a] HH:mm'
        },
        calendar: {
            sameDay: '[gaur] LT[etan]',
            nextDay: '[bihar] LT[etan]',
            nextWeek: 'dddd LT[etan]',
            lastDay: '[atzo] LT[etan]',
            lastWeek: '[aurreko] dddd LT[etan]',
            sameElse: 'L'
        },
        relativeTime: {
            future: '%s barru',
            past: 'duela %s',
            s: 'segundo batzuk',
            m: 'minutu bat',
            mm: '%d minutu',
            h: 'ordu bat',
            hh: '%d ordu',
            d: 'egun bat',
            dd: '%d egun',
            M: 'hilabete bat',
            MM: '%d hilabete',
            y: 'urte bat',
            yy: '%d urte'
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 1st is the first week of the year.
        }
    });

    return eu;
});

/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Persian [fa]
//! author : Ebrahim Byagowi : https://github.com/ebraminio

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    var symbolMap = {
        '1': '۱',
        '2': '۲',
        '3': '۳',
        '4': '۴',
        '5': '۵',
        '6': '۶',
        '7': '۷',
        '8': '۸',
        '9': '۹',
        '0': '۰'
    };
    var numberMap = {
        '۱': '1',
        '۲': '2',
        '۳': '3',
        '۴': '4',
        '۵': '5',
        '۶': '6',
        '۷': '7',
        '۸': '8',
        '۹': '9',
        '۰': '0'
    };

    var fa = moment.defineLocale('fa', {
        months: 'ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر'.split('_'),
        monthsShort: 'ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر'.split('_'),
        weekdays: 'یک\u200cشنبه_دوشنبه_سه\u200cشنبه_چهارشنبه_پنج\u200cشنبه_جمعه_شنبه'.split('_'),
        weekdaysShort: 'یک\u200cشنبه_دوشنبه_سه\u200cشنبه_چهارشنبه_پنج\u200cشنبه_جمعه_شنبه'.split('_'),
        weekdaysMin: 'ی_د_س_چ_پ_ج_ش'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm'
        },
        meridiemParse: /قبل از ظهر|بعد از ظهر/,
        isPM: function (input) {
            return (/بعد از ظهر/.test(input)
            );
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 12) {
                return 'قبل از ظهر';
            } else {
                return 'بعد از ظهر';
            }
        },
        calendar: {
            sameDay: '[امروز ساعت] LT',
            nextDay: '[فردا ساعت] LT',
            nextWeek: 'dddd [ساعت] LT',
            lastDay: '[دیروز ساعت] LT',
            lastWeek: 'dddd [پیش] [ساعت] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'در %s',
            past: '%s پیش',
            s: 'چند ثانیه',
            m: 'یک دقیقه',
            mm: '%d دقیقه',
            h: 'یک ساعت',
            hh: '%d ساعت',
            d: 'یک روز',
            dd: '%d روز',
            M: 'یک ماه',
            MM: '%d ماه',
            y: 'یک سال',
            yy: '%d سال'
        },
        preparse: function (string) {
            return string.replace(/[۰-۹]/g, function (match) {
                return numberMap[match];
            }).replace(/،/g, ',');
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            }).replace(/,/g, '،');
        },
        dayOfMonthOrdinalParse: /\d{1,2}م/,
        ordinal: '%dم',
        week: {
            dow: 6, // Saturday is the first day of the week.
            doy: 12 // The week that contains Jan 1st is the first week of the year.
        }
    });

    return fa;
});

/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Finnish [fi]
//! author : Tarmo Aidantausta : https://github.com/bleadof

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    var numbersPast = 'nolla yksi kaksi kolme neljä viisi kuusi seitsemän kahdeksan yhdeksän'.split(' ');
    var numbersFuture = ['nolla', 'yhden', 'kahden', 'kolmen', 'neljän', 'viiden', 'kuuden', numbersPast[7], numbersPast[8], numbersPast[9]];
    function translate(number, withoutSuffix, key, isFuture) {
        var result = '';
        switch (key) {
            case 's':
                return isFuture ? 'muutaman sekunnin' : 'muutama sekunti';
            case 'm':
                return isFuture ? 'minuutin' : 'minuutti';
            case 'mm':
                result = isFuture ? 'minuutin' : 'minuuttia';
                break;
            case 'h':
                return isFuture ? 'tunnin' : 'tunti';
            case 'hh':
                result = isFuture ? 'tunnin' : 'tuntia';
                break;
            case 'd':
                return isFuture ? 'päivän' : 'päivä';
            case 'dd':
                result = isFuture ? 'päivän' : 'päivää';
                break;
            case 'M':
                return isFuture ? 'kuukauden' : 'kuukausi';
            case 'MM':
                result = isFuture ? 'kuukauden' : 'kuukautta';
                break;
            case 'y':
                return isFuture ? 'vuoden' : 'vuosi';
            case 'yy':
                result = isFuture ? 'vuoden' : 'vuotta';
                break;
        }
        result = verbalNumber(number, isFuture) + ' ' + result;
        return result;
    }
    function verbalNumber(number, isFuture) {
        return number < 10 ? isFuture ? numbersFuture[number] : numbersPast[number] : number;
    }

    var fi = moment.defineLocale('fi', {
        months: 'tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kesäkuu_heinäkuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu'.split('_'),
        monthsShort: 'tammi_helmi_maalis_huhti_touko_kesä_heinä_elo_syys_loka_marras_joulu'.split('_'),
        weekdays: 'sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai'.split('_'),
        weekdaysShort: 'su_ma_ti_ke_to_pe_la'.split('_'),
        weekdaysMin: 'su_ma_ti_ke_to_pe_la'.split('_'),
        longDateFormat: {
            LT: 'HH.mm',
            LTS: 'HH.mm.ss',
            L: 'DD.MM.YYYY',
            LL: 'Do MMMM[ta] YYYY',
            LLL: 'Do MMMM[ta] YYYY, [klo] HH.mm',
            LLLL: 'dddd, Do MMMM[ta] YYYY, [klo] HH.mm',
            l: 'D.M.YYYY',
            ll: 'Do MMM YYYY',
            lll: 'Do MMM YYYY, [klo] HH.mm',
            llll: 'ddd, Do MMM YYYY, [klo] HH.mm'
        },
        calendar: {
            sameDay: '[tänään] [klo] LT',
            nextDay: '[huomenna] [klo] LT',
            nextWeek: 'dddd [klo] LT',
            lastDay: '[eilen] [klo] LT',
            lastWeek: '[viime] dddd[na] [klo] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: '%s päästä',
            past: '%s sitten',
            s: translate,
            m: translate,
            mm: translate,
            h: translate,
            hh: translate,
            d: translate,
            dd: translate,
            M: translate,
            MM: translate,
            y: translate,
            yy: translate
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    return fi;
});

/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Faroese [fo]
//! author : Ragnar Johannesen : https://github.com/ragnar123

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    var fo = moment.defineLocale('fo', {
        months: 'januar_februar_mars_apríl_mai_juni_juli_august_september_oktober_november_desember'.split('_'),
        monthsShort: 'jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_'),
        weekdays: 'sunnudagur_mánadagur_týsdagur_mikudagur_hósdagur_fríggjadagur_leygardagur'.split('_'),
        weekdaysShort: 'sun_mán_týs_mik_hós_frí_ley'.split('_'),
        weekdaysMin: 'su_má_tý_mi_hó_fr_le'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D. MMMM, YYYY HH:mm'
        },
        calendar: {
            sameDay: '[Í dag kl.] LT',
            nextDay: '[Í morgin kl.] LT',
            nextWeek: 'dddd [kl.] LT',
            lastDay: '[Í gjár kl.] LT',
            lastWeek: '[síðstu] dddd [kl] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'um %s',
            past: '%s síðani',
            s: 'fá sekund',
            m: 'ein minutt',
            mm: '%d minuttir',
            h: 'ein tími',
            hh: '%d tímar',
            d: 'ein dagur',
            dd: '%d dagar',
            M: 'ein mánaði',
            MM: '%d mánaðir',
            y: 'eitt ár',
            yy: '%d ár'
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    return fo;
});

/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : French [fr]
//! author : John Fischer : https://github.com/jfroffice

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    var fr = moment.defineLocale('fr', {
        months: 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split('_'),
        monthsShort: 'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split('_'),
        monthsParseExact: true,
        weekdays: 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
        weekdaysShort: 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
        weekdaysMin: 'Di_Lu_Ma_Me_Je_Ve_Sa'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[Aujourd’hui à] LT',
            nextDay: '[Demain à] LT',
            nextWeek: 'dddd [à] LT',
            lastDay: '[Hier à] LT',
            lastWeek: 'dddd [dernier à] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'dans %s',
            past: 'il y a %s',
            s: 'quelques secondes',
            m: 'une minute',
            mm: '%d minutes',
            h: 'une heure',
            hh: '%d heures',
            d: 'un jour',
            dd: '%d jours',
            M: 'un mois',
            MM: '%d mois',
            y: 'un an',
            yy: '%d ans'
        },
        dayOfMonthOrdinalParse: /\d{1,2}(er|)/,
        ordinal: function (number, period) {
            switch (period) {
                // TODO: Return 'e' when day of month > 1. Move this case inside
                // block for masculine words below.
                // See https://github.com/moment/moment/issues/3375
                case 'D':
                    return number + (number === 1 ? 'er' : '');

                // Words with masculine grammatical gender: mois, trimestre, jour
                default:
                case 'M':
                case 'Q':
                case 'DDD':
                case 'd':
                    return number + (number === 1 ? 'er' : 'e');

                // Words with feminine grammatical gender: semaine
                case 'w':
                case 'W':
                    return number + (number === 1 ? 're' : 'e');
            }
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    return fr;
});

/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : French (Canada) [fr-ca]
//! author : Jonathan Abourbih : https://github.com/jonbca

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    var frCa = moment.defineLocale('fr-ca', {
        months: 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split('_'),
        monthsShort: 'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split('_'),
        monthsParseExact: true,
        weekdays: 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
        weekdaysShort: 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
        weekdaysMin: 'Di_Lu_Ma_Me_Je_Ve_Sa'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'YYYY-MM-DD',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[Aujourd’hui à] LT',
            nextDay: '[Demain à] LT',
            nextWeek: 'dddd [à] LT',
            lastDay: '[Hier à] LT',
            lastWeek: 'dddd [dernier à] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'dans %s',
            past: 'il y a %s',
            s: 'quelques secondes',
            m: 'une minute',
            mm: '%d minutes',
            h: 'une heure',
            hh: '%d heures',
            d: 'un jour',
            dd: '%d jours',
            M: 'un mois',
            MM: '%d mois',
            y: 'un an',
            yy: '%d ans'
        },
        dayOfMonthOrdinalParse: /\d{1,2}(er|e)/,
        ordinal: function (number, period) {
            switch (period) {
                // Words with masculine grammatical gender: mois, trimestre, jour
                default:
                case 'M':
                case 'Q':
                case 'D':
                case 'DDD':
                case 'd':
                    return number + (number === 1 ? 'er' : 'e');

                // Words with feminine grammatical gender: semaine
                case 'w':
                case 'W':
                    return number + (number === 1 ? 're' : 'e');
            }
        }
    });

    return frCa;
});

/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : French (Switzerland) [fr-ch]
//! author : Gaspard Bucher : https://github.com/gaspard

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    var frCh = moment.defineLocale('fr-ch', {
        months: 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split('_'),
        monthsShort: 'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split('_'),
        monthsParseExact: true,
        weekdays: 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
        weekdaysShort: 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
        weekdaysMin: 'Di_Lu_Ma_Me_Je_Ve_Sa'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[Aujourd’hui à] LT',
            nextDay: '[Demain à] LT',
            nextWeek: 'dddd [à] LT',
            lastDay: '[Hier à] LT',
            lastWeek: 'dddd [dernier à] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'dans %s',
            past: 'il y a %s',
            s: 'quelques secondes',
            m: 'une minute',
            mm: '%d minutes',
            h: 'une heure',
            hh: '%d heures',
            d: 'un jour',
            dd: '%d jours',
            M: 'un mois',
            MM: '%d mois',
            y: 'un an',
            yy: '%d ans'
        },
        dayOfMonthOrdinalParse: /\d{1,2}(er|e)/,
        ordinal: function (number, period) {
            switch (period) {
                // Words with masculine grammatical gender: mois, trimestre, jour
                default:
                case 'M':
                case 'Q':
                case 'D':
                case 'DDD':
                case 'd':
                    return number + (number === 1 ? 'er' : 'e');

                // Words with feminine grammatical gender: semaine
                case 'w':
                case 'W':
                    return number + (number === 1 ? 're' : 'e');
            }
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    return frCh;
});

/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Frisian [fy]
//! author : Robin van der Vliet : https://github.com/robin0van0der0v

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    var monthsShortWithDots = 'jan._feb._mrt._apr._mai_jun._jul._aug._sep._okt._nov._des.'.split('_');
    var monthsShortWithoutDots = 'jan_feb_mrt_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_');

    var fy = moment.defineLocale('fy', {
        months: 'jannewaris_febrewaris_maart_april_maaie_juny_july_augustus_septimber_oktober_novimber_desimber'.split('_'),
        monthsShort: function (m, format) {
            if (!m) {
                return monthsShortWithDots;
            } else if (/-MMM-/.test(format)) {
                return monthsShortWithoutDots[m.month()];
            } else {
                return monthsShortWithDots[m.month()];
            }
        },
        monthsParseExact: true,
        weekdays: 'snein_moandei_tiisdei_woansdei_tongersdei_freed_sneon'.split('_'),
        weekdaysShort: 'si._mo._ti._wo._to._fr._so.'.split('_'),
        weekdaysMin: 'Si_Mo_Ti_Wo_To_Fr_So'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD-MM-YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[hjoed om] LT',
            nextDay: '[moarn om] LT',
            nextWeek: 'dddd [om] LT',
            lastDay: '[juster om] LT',
            lastWeek: '[ôfrûne] dddd [om] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'oer %s',
            past: '%s lyn',
            s: 'in pear sekonden',
            m: 'ien minút',
            mm: '%d minuten',
            h: 'ien oere',
            hh: '%d oeren',
            d: 'ien dei',
            dd: '%d dagen',
            M: 'ien moanne',
            MM: '%d moannen',
            y: 'ien jier',
            yy: '%d jierren'
        },
        dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
        ordinal: function (number) {
            return number + (number === 1 || number === 8 || number >= 20 ? 'ste' : 'de');
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    return fy;
});

/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Scottish Gaelic [gd]
//! author : Jon Ashdown : https://github.com/jonashdown

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    var months = ['Am Faoilleach', 'An Gearran', 'Am Màrt', 'An Giblean', 'An Cèitean', 'An t-Ògmhios', 'An t-Iuchar', 'An Lùnastal', 'An t-Sultain', 'An Dàmhair', 'An t-Samhain', 'An Dùbhlachd'];

    var monthsShort = ['Faoi', 'Gear', 'Màrt', 'Gibl', 'Cèit', 'Ògmh', 'Iuch', 'Lùn', 'Sult', 'Dàmh', 'Samh', 'Dùbh'];

    var weekdays = ['Didòmhnaich', 'Diluain', 'Dimàirt', 'Diciadain', 'Diardaoin', 'Dihaoine', 'Disathairne'];

    var weekdaysShort = ['Did', 'Dil', 'Dim', 'Dic', 'Dia', 'Dih', 'Dis'];

    var weekdaysMin = ['Dò', 'Lu', 'Mà', 'Ci', 'Ar', 'Ha', 'Sa'];

    var gd = moment.defineLocale('gd', {
        months: months,
        monthsShort: monthsShort,
        monthsParseExact: true,
        weekdays: weekdays,
        weekdaysShort: weekdaysShort,
        weekdaysMin: weekdaysMin,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[An-diugh aig] LT',
            nextDay: '[A-màireach aig] LT',
            nextWeek: 'dddd [aig] LT',
            lastDay: '[An-dè aig] LT',
            lastWeek: 'dddd [seo chaidh] [aig] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'ann an %s',
            past: 'bho chionn %s',
            s: 'beagan diogan',
            m: 'mionaid',
            mm: '%d mionaidean',
            h: 'uair',
            hh: '%d uairean',
            d: 'latha',
            dd: '%d latha',
            M: 'mìos',
            MM: '%d mìosan',
            y: 'bliadhna',
            yy: '%d bliadhna'
        },
        dayOfMonthOrdinalParse: /\d{1,2}(d|na|mh)/,
        ordinal: function (number) {
            var output = number === 1 ? 'd' : number % 10 === 2 ? 'na' : 'mh';
            return number + output;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    return gd;
});

/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Galician [gl]
//! author : Juan G. Hurtado : https://github.com/juanghurtado

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    var gl = moment.defineLocale('gl', {
        months: 'xaneiro_febreiro_marzo_abril_maio_xuño_xullo_agosto_setembro_outubro_novembro_decembro'.split('_'),
        monthsShort: 'xan._feb._mar._abr._mai._xuñ._xul._ago._set._out._nov._dec.'.split('_'),
        monthsParseExact: true,
        weekdays: 'domingo_luns_martes_mércores_xoves_venres_sábado'.split('_'),
        weekdaysShort: 'dom._lun._mar._mér._xov._ven._sáb.'.split('_'),
        weekdaysMin: 'do_lu_ma_mé_xo_ve_sá'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D [de] MMMM [de] YYYY',
            LLL: 'D [de] MMMM [de] YYYY H:mm',
            LLLL: 'dddd, D [de] MMMM [de] YYYY H:mm'
        },
        calendar: {
            sameDay: function () {
                return '[hoxe ' + (this.hours() !== 1 ? 'ás' : 'á') + '] LT';
            },
            nextDay: function () {
                return '[mañá ' + (this.hours() !== 1 ? 'ás' : 'á') + '] LT';
            },
            nextWeek: function () {
                return 'dddd [' + (this.hours() !== 1 ? 'ás' : 'a') + '] LT';
            },
            lastDay: function () {
                return '[onte ' + (this.hours() !== 1 ? 'á' : 'a') + '] LT';
            },
            lastWeek: function () {
                return '[o] dddd [pasado ' + (this.hours() !== 1 ? 'ás' : 'a') + '] LT';
            },
            sameElse: 'L'
        },
        relativeTime: {
            future: function (str) {
                if (str.indexOf('un') === 0) {
                    return 'n' + str;
                }
                return 'en ' + str;
            },
            past: 'hai %s',
            s: 'uns segundos',
            m: 'un minuto',
            mm: '%d minutos',
            h: 'unha hora',
            hh: '%d horas',
            d: 'un día',
            dd: '%d días',
            M: 'un mes',
            MM: '%d meses',
            y: 'un ano',
            yy: '%d anos'
        },
        dayOfMonthOrdinalParse: /\d{1,2}º/,
        ordinal: '%dº',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    return gl;
});

/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Konkani Latin script [gom-latn]
//! author : The Discoverer : https://github.com/WikiDiscoverer

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    function processRelativeTime(number, withoutSuffix, key, isFuture) {
        var format = {
            's': ['thodde secondanim', 'thodde second'],
            'm': ['eka mintan', 'ek minute'],
            'mm': [number + ' mintanim', number + ' mintam'],
            'h': ['eka horan', 'ek hor'],
            'hh': [number + ' horanim', number + ' hor'],
            'd': ['eka disan', 'ek dis'],
            'dd': [number + ' disanim', number + ' dis'],
            'M': ['eka mhoinean', 'ek mhoino'],
            'MM': [number + ' mhoineanim', number + ' mhoine'],
            'y': ['eka vorsan', 'ek voros'],
            'yy': [number + ' vorsanim', number + ' vorsam']
        };
        return withoutSuffix ? format[key][0] : format[key][1];
    }

    var gomLatn = moment.defineLocale('gom-latn', {
        months: 'Janer_Febrer_Mars_Abril_Mai_Jun_Julai_Agost_Setembr_Otubr_Novembr_Dezembr'.split('_'),
        monthsShort: 'Jan._Feb._Mars_Abr._Mai_Jun_Jul._Ago._Set._Otu._Nov._Dez.'.split('_'),
        monthsParseExact: true,
        weekdays: 'Aitar_Somar_Mongllar_Budvar_Brestar_Sukrar_Son\'var'.split('_'),
        weekdaysShort: 'Ait._Som._Mon._Bud._Bre._Suk._Son.'.split('_'),
        weekdaysMin: 'Ai_Sm_Mo_Bu_Br_Su_Sn'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'A h:mm [vazta]',
            LTS: 'A h:mm:ss [vazta]',
            L: 'DD-MM-YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY A h:mm [vazta]',
            LLLL: 'dddd, MMMM[achea] Do, YYYY, A h:mm [vazta]',
            llll: 'ddd, D MMM YYYY, A h:mm [vazta]'
        },
        calendar: {
            sameDay: '[Aiz] LT',
            nextDay: '[Faleam] LT',
            nextWeek: '[Ieta to] dddd[,] LT',
            lastDay: '[Kal] LT',
            lastWeek: '[Fatlo] dddd[,] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: '%s',
            past: '%s adim',
            s: processRelativeTime,
            m: processRelativeTime,
            mm: processRelativeTime,
            h: processRelativeTime,
            hh: processRelativeTime,
            d: processRelativeTime,
            dd: processRelativeTime,
            M: processRelativeTime,
            MM: processRelativeTime,
            y: processRelativeTime,
            yy: processRelativeTime
        },
        dayOfMonthOrdinalParse: /\d{1,2}(er)/,
        ordinal: function (number, period) {
            switch (period) {
                // the ordinal 'er' only applies to day of the month
                case 'D':
                    return number + 'er';
                default:
                case 'M':
                case 'Q':
                case 'DDD':
                case 'd':
                case 'w':
                case 'W':
                    return number;
            }
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        },
        meridiemParse: /rati|sokalli|donparam|sanje/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'rati') {
                return hour < 4 ? hour : hour + 12;
            } else if (meridiem === 'sokalli') {
                return hour;
            } else if (meridiem === 'donparam') {
                return hour > 12 ? hour : hour + 12;
            } else if (meridiem === 'sanje') {
                return hour + 12;
            }
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'rati';
            } else if (hour < 12) {
                return 'sokalli';
            } else if (hour < 16) {
                return 'donparam';
            } else if (hour < 20) {
                return 'sanje';
            } else {
                return 'rati';
            }
        }
    });

    return gomLatn;
});

/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Gujarati [gu]
//! author : Kaushik Thanki : https://github.com/Kaushik1987

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    var symbolMap = {
        '1': '૧',
        '2': '૨',
        '3': '૩',
        '4': '૪',
        '5': '૫',
        '6': '૬',
        '7': '૭',
        '8': '૮',
        '9': '૯',
        '0': '૦'
    };
    var numberMap = {
        '૧': '1',
        '૨': '2',
        '૩': '3',
        '૪': '4',
        '૫': '5',
        '૬': '6',
        '૭': '7',
        '૮': '8',
        '૯': '9',
        '૦': '0'
    };

    var gu = moment.defineLocale('gu', {
        months: 'જાન્યુઆરી_ફેબ્રુઆરી_માર્ચ_એપ્રિલ_મે_જૂન_જુલાઈ_ઑગસ્ટ_સપ્ટેમ્બર_ઑક્ટ્બર_નવેમ્બર_ડિસેમ્બર'.split('_'),
        monthsShort: 'જાન્યુ._ફેબ્રુ._માર્ચ_એપ્રિ._મે_જૂન_જુલા._ઑગ._સપ્ટે._ઑક્ટ્._નવે._ડિસે.'.split('_'),
        monthsParseExact: true,
        weekdays: 'રવિવાર_સોમવાર_મંગળવાર_બુધ્વાર_ગુરુવાર_શુક્રવાર_શનિવાર'.split('_'),
        weekdaysShort: 'રવિ_સોમ_મંગળ_બુધ્_ગુરુ_શુક્ર_શનિ'.split('_'),
        weekdaysMin: 'ર_સો_મં_બુ_ગુ_શુ_શ'.split('_'),
        longDateFormat: {
            LT: 'A h:mm વાગ્યે',
            LTS: 'A h:mm:ss વાગ્યે',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, A h:mm વાગ્યે',
            LLLL: 'dddd, D MMMM YYYY, A h:mm વાગ્યે'
        },
        calendar: {
            sameDay: '[આજ] LT',
            nextDay: '[કાલે] LT',
            nextWeek: 'dddd, LT',
            lastDay: '[ગઇકાલે] LT',
            lastWeek: '[પાછલા] dddd, LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: '%s મા',
            past: '%s પેહલા',
            s: 'અમુક પળો',
            m: 'એક મિનિટ',
            mm: '%d મિનિટ',
            h: 'એક કલાક',
            hh: '%d કલાક',
            d: 'એક દિવસ',
            dd: '%d દિવસ',
            M: 'એક મહિનો',
            MM: '%d મહિનો',
            y: 'એક વર્ષ',
            yy: '%d વર્ષ'
        },
        preparse: function (string) {
            return string.replace(/[૧૨૩૪૫૬૭૮૯૦]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        // Gujarati notation for meridiems are quite fuzzy in practice. While there exists
        // a rigid notion of a 'Pahar' it is not used as rigidly in modern Gujarati.
        meridiemParse: /રાત|બપોર|સવાર|સાંજ/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'રાત') {
                return hour < 4 ? hour : hour + 12;
            } else if (meridiem === 'સવાર') {
                return hour;
            } else if (meridiem === 'બપોર') {
                return hour >= 10 ? hour : hour + 12;
            } else if (meridiem === 'સાંજ') {
                return hour + 12;
            }
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'રાત';
            } else if (hour < 10) {
                return 'સવાર';
            } else if (hour < 17) {
                return 'બપોર';
            } else if (hour < 20) {
                return 'સાંજ';
            } else {
                return 'રાત';
            }
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 6 // The week that contains Jan 1st is the first week of the year.
        }
    });

    return gu;
});

/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Hebrew [he]
//! author : Tomer Cohen : https://github.com/tomer
//! author : Moshe Simantov : https://github.com/DevelopmentIL
//! author : Tal Ater : https://github.com/TalAter

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    var he = moment.defineLocale('he', {
        months: 'ינואר_פברואר_מרץ_אפריל_מאי_יוני_יולי_אוגוסט_ספטמבר_אוקטובר_נובמבר_דצמבר'.split('_'),
        monthsShort: 'ינו׳_פבר׳_מרץ_אפר׳_מאי_יוני_יולי_אוג׳_ספט׳_אוק׳_נוב׳_דצמ׳'.split('_'),
        weekdays: 'ראשון_שני_שלישי_רביעי_חמישי_שישי_שבת'.split('_'),
        weekdaysShort: 'א׳_ב׳_ג׳_ד׳_ה׳_ו׳_ש׳'.split('_'),
        weekdaysMin: 'א_ב_ג_ד_ה_ו_ש'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D [ב]MMMM YYYY',
            LLL: 'D [ב]MMMM YYYY HH:mm',
            LLLL: 'dddd, D [ב]MMMM YYYY HH:mm',
            l: 'D/M/YYYY',
            ll: 'D MMM YYYY',
            lll: 'D MMM YYYY HH:mm',
            llll: 'ddd, D MMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[היום ב־]LT',
            nextDay: '[מחר ב־]LT',
            nextWeek: 'dddd [בשעה] LT',
            lastDay: '[אתמול ב־]LT',
            lastWeek: '[ביום] dddd [האחרון בשעה] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'בעוד %s',
            past: 'לפני %s',
            s: 'מספר שניות',
            m: 'דקה',
            mm: '%d דקות',
            h: 'שעה',
            hh: function (number) {
                if (number === 2) {
                    return 'שעתיים';
                }
                return number + ' שעות';
            },
            d: 'יום',
            dd: function (number) {
                if (number === 2) {
                    return 'יומיים';
                }
                return number + ' ימים';
            },
            M: 'חודש',
            MM: function (number) {
                if (number === 2) {
                    return 'חודשיים';
                }
                return number + ' חודשים';
            },
            y: 'שנה',
            yy: function (number) {
                if (number === 2) {
                    return 'שנתיים';
                } else if (number % 10 === 0 && number !== 10) {
                    return number + ' שנה';
                }
                return number + ' שנים';
            }
        },
        meridiemParse: /אחה"צ|לפנה"צ|אחרי הצהריים|לפני הצהריים|לפנות בוקר|בבוקר|בערב/i,
        isPM: function (input) {
            return (/^(אחה"צ|אחרי הצהריים|בערב)$/.test(input)
            );
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 5) {
                return 'לפנות בוקר';
            } else if (hour < 10) {
                return 'בבוקר';
            } else if (hour < 12) {
                return isLower ? 'לפנה"צ' : 'לפני הצהריים';
            } else if (hour < 18) {
                return isLower ? 'אחה"צ' : 'אחרי הצהריים';
            } else {
                return 'בערב';
            }
        }
    });

    return he;
});

/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Hindi [hi]
//! author : Mayank Singhal : https://github.com/mayanksinghal

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    var symbolMap = {
        '1': '१',
        '2': '२',
        '3': '३',
        '4': '४',
        '5': '५',
        '6': '६',
        '7': '७',
        '8': '८',
        '9': '९',
        '0': '०'
    };
    var numberMap = {
        '१': '1',
        '२': '2',
        '३': '3',
        '४': '4',
        '५': '5',
        '६': '6',
        '७': '7',
        '८': '8',
        '९': '9',
        '०': '0'
    };

    var hi = moment.defineLocale('hi', {
        months: 'जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर'.split('_'),
        monthsShort: 'जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.'.split('_'),
        monthsParseExact: true,
        weekdays: 'रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार'.split('_'),
        weekdaysShort: 'रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि'.split('_'),
        weekdaysMin: 'र_सो_मं_बु_गु_शु_श'.split('_'),
        longDateFormat: {
            LT: 'A h:mm बजे',
            LTS: 'A h:mm:ss बजे',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, A h:mm बजे',
            LLLL: 'dddd, D MMMM YYYY, A h:mm बजे'
        },
        calendar: {
            sameDay: '[आज] LT',
            nextDay: '[कल] LT',
            nextWeek: 'dddd, LT',
            lastDay: '[कल] LT',
            lastWeek: '[पिछले] dddd, LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: '%s में',
            past: '%s पहले',
            s: 'कुछ ही क्षण',
            m: 'एक मिनट',
            mm: '%d मिनट',
            h: 'एक घंटा',
            hh: '%d घंटे',
            d: 'एक दिन',
            dd: '%d दिन',
            M: 'एक महीने',
            MM: '%d महीने',
            y: 'एक वर्ष',
            yy: '%d वर्ष'
        },
        preparse: function (string) {
            return string.replace(/[१२३४५६७८९०]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        // Hindi notation for meridiems are quite fuzzy in practice. While there exists
        // a rigid notion of a 'Pahar' it is not used as rigidly in modern Hindi.
        meridiemParse: /रात|सुबह|दोपहर|शाम/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'रात') {
                return hour < 4 ? hour : hour + 12;
            } else if (meridiem === 'सुबह') {
                return hour;
            } else if (meridiem === 'दोपहर') {
                return hour >= 10 ? hour : hour + 12;
            } else if (meridiem === 'शाम') {
                return hour + 12;
            }
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'रात';
            } else if (hour < 10) {
                return 'सुबह';
            } else if (hour < 17) {
                return 'दोपहर';
            } else if (hour < 20) {
                return 'शाम';
            } else {
                return 'रात';
            }
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 6 // The week that contains Jan 1st is the first week of the year.
        }
    });

    return hi;
});

/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Croatian [hr]
//! author : Bojan Marković : https://github.com/bmarkovic

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    function translate(number, withoutSuffix, key) {
        var result = number + ' ';
        switch (key) {
            case 'm':
                return withoutSuffix ? 'jedna minuta' : 'jedne minute';
            case 'mm':
                if (number === 1) {
                    result += 'minuta';
                } else if (number === 2 || number === 3 || number === 4) {
                    result += 'minute';
                } else {
                    result += 'minuta';
                }
                return result;
            case 'h':
                return withoutSuffix ? 'jedan sat' : 'jednog sata';
            case 'hh':
                if (number === 1) {
                    result += 'sat';
                } else if (number === 2 || number === 3 || number === 4) {
                    result += 'sata';
                } else {
                    result += 'sati';
                }
                return result;
            case 'dd':
                if (number === 1) {
                    result += 'dan';
                } else {
                    result += 'dana';
                }
                return result;
            case 'MM':
                if (number === 1) {
                    result += 'mjesec';
                } else if (number === 2 || number === 3 || number === 4) {
                    result += 'mjeseca';
                } else {
                    result += 'mjeseci';
                }
                return result;
            case 'yy':
                if (number === 1) {
                    result += 'godina';
                } else if (number === 2 || number === 3 || number === 4) {
                    result += 'godine';
                } else {
                    result += 'godina';
                }
                return result;
        }
    }

    var hr = moment.defineLocale('hr', {
        months: {
            format: 'siječnja_veljače_ožujka_travnja_svibnja_lipnja_srpnja_kolovoza_rujna_listopada_studenoga_prosinca'.split('_'),
            standalone: 'siječanj_veljača_ožujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac'.split('_')
        },
        monthsShort: 'sij._velj._ožu._tra._svi._lip._srp._kol._ruj._lis._stu._pro.'.split('_'),
        monthsParseExact: true,
        weekdays: 'nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota'.split('_'),
        weekdaysShort: 'ned._pon._uto._sri._čet._pet._sub.'.split('_'),
        weekdaysMin: 'ne_po_ut_sr_če_pe_su'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY H:mm',
            LLLL: 'dddd, D. MMMM YYYY H:mm'
        },
        calendar: {
            sameDay: '[danas u] LT',
            nextDay: '[sutra u] LT',
            nextWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[u] [nedjelju] [u] LT';
                    case 3:
                        return '[u] [srijedu] [u] LT';
                    case 6:
                        return '[u] [subotu] [u] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[u] dddd [u] LT';
                }
            },
            lastDay: '[jučer u] LT',
            lastWeek: function () {
                switch (this.day()) {
                    case 0:
                    case 3:
                        return '[prošlu] dddd [u] LT';
                    case 6:
                        return '[prošle] [subote] [u] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[prošli] dddd [u] LT';
                }
            },
            sameElse: 'L'
        },
        relativeTime: {
            future: 'za %s',
            past: 'prije %s',
            s: 'par sekundi',
            m: translate,
            mm: translate,
            h: translate,
            hh: translate,
            d: 'dan',
            dd: translate,
            M: 'mjesec',
            MM: translate,
            y: 'godinu',
            yy: translate
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 1st is the first week of the year.
        }
    });

    return hr;
});

/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Hungarian [hu]
//! author : Adam Brunner : https://github.com/adambrunner

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    var weekEndings = 'vasárnap hétfőn kedden szerdán csütörtökön pénteken szombaton'.split(' ');
    function translate(number, withoutSuffix, key, isFuture) {
        var num = number;
        switch (key) {
            case 's':
                return isFuture || withoutSuffix ? 'néhány másodperc' : 'néhány másodperce';
            case 'm':
                return 'egy' + (isFuture || withoutSuffix ? ' perc' : ' perce');
            case 'mm':
                return num + (isFuture || withoutSuffix ? ' perc' : ' perce');
            case 'h':
                return 'egy' + (isFuture || withoutSuffix ? ' óra' : ' órája');
            case 'hh':
                return num + (isFuture || withoutSuffix ? ' óra' : ' órája');
            case 'd':
                return 'egy' + (isFuture || withoutSuffix ? ' nap' : ' napja');
            case 'dd':
                return num + (isFuture || withoutSuffix ? ' nap' : ' napja');
            case 'M':
                return 'egy' + (isFuture || withoutSuffix ? ' hónap' : ' hónapja');
            case 'MM':
                return num + (isFuture || withoutSuffix ? ' hónap' : ' hónapja');
            case 'y':
                return 'egy' + (isFuture || withoutSuffix ? ' év' : ' éve');
            case 'yy':
                return num + (isFuture || withoutSuffix ? ' év' : ' éve');
        }
        return '';
    }
    function week(isFuture) {
        return (isFuture ? '' : '[múlt] ') + '[' + weekEndings[this.day()] + '] LT[-kor]';
    }

    var hu = moment.defineLocale('hu', {
        months: 'január_február_március_április_május_június_július_augusztus_szeptember_október_november_december'.split('_'),
        monthsShort: 'jan_feb_márc_ápr_máj_jún_júl_aug_szept_okt_nov_dec'.split('_'),
        weekdays: 'vasárnap_hétfő_kedd_szerda_csütörtök_péntek_szombat'.split('_'),
        weekdaysShort: 'vas_hét_kedd_sze_csüt_pén_szo'.split('_'),
        weekdaysMin: 'v_h_k_sze_cs_p_szo'.split('_'),
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'YYYY.MM.DD.',
            LL: 'YYYY. MMMM D.',
            LLL: 'YYYY. MMMM D. H:mm',
            LLLL: 'YYYY. MMMM D., dddd H:mm'
        },
        meridiemParse: /de|du/i,
        isPM: function (input) {
            return input.charAt(1).toLowerCase() === 'u';
        },
        meridiem: function (hours, minutes, isLower) {
            if (hours < 12) {
                return isLower === true ? 'de' : 'DE';
            } else {
                return isLower === true ? 'du' : 'DU';
            }
        },
        calendar: {
            sameDay: '[ma] LT[-kor]',
            nextDay: '[holnap] LT[-kor]',
            nextWeek: function () {
                return week.call(this, true);
            },
            lastDay: '[tegnap] LT[-kor]',
            lastWeek: function () {
                return week.call(this, false);
            },
            sameElse: 'L'
        },
        relativeTime: {
            future: '%s múlva',
            past: '%s',
            s: translate,
            m: translate,
            mm: translate,
            h: translate,
            hh: translate,
            d: translate,
            dd: translate,
            M: translate,
            MM: translate,
            y: translate,
            yy: translate
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    return hu;
});

/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Armenian [hy-am]
//! author : Armendarabyan : https://github.com/armendarabyan

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    var hyAm = moment.defineLocale('hy-am', {
        months: {
            format: 'հունվարի_փետրվարի_մարտի_ապրիլի_մայիսի_հունիսի_հուլիսի_օգոստոսի_սեպտեմբերի_հոկտեմբերի_նոյեմբերի_դեկտեմբերի'.split('_'),
            standalone: 'հունվար_փետրվար_մարտ_ապրիլ_մայիս_հունիս_հուլիս_օգոստոս_սեպտեմբեր_հոկտեմբեր_նոյեմբեր_դեկտեմբեր'.split('_')
        },
        monthsShort: 'հնվ_փտր_մրտ_ապր_մյս_հնս_հլս_օգս_սպտ_հկտ_նմբ_դկտ'.split('_'),
        weekdays: 'կիրակի_երկուշաբթի_երեքշաբթի_չորեքշաբթի_հինգշաբթի_ուրբաթ_շաբաթ'.split('_'),
        weekdaysShort: 'կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ'.split('_'),
        weekdaysMin: 'կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY թ.',
            LLL: 'D MMMM YYYY թ., HH:mm',
            LLLL: 'dddd, D MMMM YYYY թ., HH:mm'
        },
        calendar: {
            sameDay: '[այսօր] LT',
            nextDay: '[վաղը] LT',
            lastDay: '[երեկ] LT',
            nextWeek: function () {
                return 'dddd [օրը ժամը] LT';
            },
            lastWeek: function () {
                return '[անցած] dddd [օրը ժամը] LT';
            },
            sameElse: 'L'
        },
        relativeTime: {
            future: '%s հետո',
            past: '%s առաջ',
            s: 'մի քանի վայրկյան',
            m: 'րոպե',
            mm: '%d րոպե',
            h: 'ժամ',
            hh: '%d ժամ',
            d: 'օր',
            dd: '%d օր',
            M: 'ամիս',
            MM: '%d ամիս',
            y: 'տարի',
            yy: '%d տարի'
        },
        meridiemParse: /գիշերվա|առավոտվա|ցերեկվա|երեկոյան/,
        isPM: function (input) {
            return (/^(ցերեկվա|երեկոյան)$/.test(input)
            );
        },
        meridiem: function (hour) {
            if (hour < 4) {
                return 'գիշերվա';
            } else if (hour < 12) {
                return 'առավոտվա';
            } else if (hour < 17) {
                return 'ցերեկվա';
            } else {
                return 'երեկոյան';
            }
        },
        dayOfMonthOrdinalParse: /\d{1,2}|\d{1,2}-(ին|րդ)/,
        ordinal: function (number, period) {
            switch (period) {
                case 'DDD':
                case 'w':
                case 'W':
                case 'DDDo':
                    if (number === 1) {
                        return number + '-ին';
                    }
                    return number + '-րդ';
                default:
                    return number;
            }
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 1st is the first week of the year.
        }
    });

    return hyAm;
});

/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Indonesian [id]
//! author : Mohammad Satrio Utomo : https://github.com/tyok
//! reference: http://id.wikisource.org/wiki/Pedoman_Umum_Ejaan_Bahasa_Indonesia_yang_Disempurnakan

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    var id = moment.defineLocale('id', {
        months: 'Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember'.split('_'),
        monthsShort: 'Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nov_Des'.split('_'),
        weekdays: 'Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu'.split('_'),
        weekdaysShort: 'Min_Sen_Sel_Rab_Kam_Jum_Sab'.split('_'),
        weekdaysMin: 'Mg_Sn_Sl_Rb_Km_Jm_Sb'.split('_'),
        longDateFormat: {
            LT: 'HH.mm',
            LTS: 'HH.mm.ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY [pukul] HH.mm',
            LLLL: 'dddd, D MMMM YYYY [pukul] HH.mm'
        },
        meridiemParse: /pagi|siang|sore|malam/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'pagi') {
                return hour;
            } else if (meridiem === 'siang') {
                return hour >= 11 ? hour : hour + 12;
            } else if (meridiem === 'sore' || meridiem === 'malam') {
                return hour + 12;
            }
        },
        meridiem: function (hours, minutes, isLower) {
            if (hours < 11) {
                return 'pagi';
            } else if (hours < 15) {
                return 'siang';
            } else if (hours < 19) {
                return 'sore';
            } else {
                return 'malam';
            }
        },
        calendar: {
            sameDay: '[Hari ini pukul] LT',
            nextDay: '[Besok pukul] LT',
            nextWeek: 'dddd [pukul] LT',
            lastDay: '[Kemarin pukul] LT',
            lastWeek: 'dddd [lalu pukul] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'dalam %s',
            past: '%s yang lalu',
            s: 'beberapa detik',
            m: 'semenit',
            mm: '%d menit',
            h: 'sejam',
            hh: '%d jam',
            d: 'sehari',
            dd: '%d hari',
            M: 'sebulan',
            MM: '%d bulan',
            y: 'setahun',
            yy: '%d tahun'
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 1st is the first week of the year.
        }
    });

    return id;
});

/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Icelandic [is]
//! author : Hinrik Örn Sigurðsson : https://github.com/hinrik

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    function plural(n) {
        if (n % 100 === 11) {
            return true;
        } else if (n % 10 === 1) {
            return false;
        }
        return true;
    }
    function translate(number, withoutSuffix, key, isFuture) {
        var result = number + ' ';
        switch (key) {
            case 's':
                return withoutSuffix || isFuture ? 'nokkrar sekúndur' : 'nokkrum sekúndum';
            case 'm':
                return withoutSuffix ? 'mínúta' : 'mínútu';
            case 'mm':
                if (plural(number)) {
                    return result + (withoutSuffix || isFuture ? 'mínútur' : 'mínútum');
                } else if (withoutSuffix) {
                    return result + 'mínúta';
                }
                return result + 'mínútu';
            case 'hh':
                if (plural(number)) {
                    return result + (withoutSuffix || isFuture ? 'klukkustundir' : 'klukkustundum');
                }
                return result + 'klukkustund';
            case 'd':
                if (withoutSuffix) {
                    return 'dagur';
                }
                return isFuture ? 'dag' : 'degi';
            case 'dd':
                if (plural(number)) {
                    if (withoutSuffix) {
                        return result + 'dagar';
                    }
                    return result + (isFuture ? 'daga' : 'dögum');
                } else if (withoutSuffix) {
                    return result + 'dagur';
                }
                return result + (isFuture ? 'dag' : 'degi');
            case 'M':
                if (withoutSuffix) {
                    return 'mánuður';
                }
                return isFuture ? 'mánuð' : 'mánuði';
            case 'MM':
                if (plural(number)) {
                    if (withoutSuffix) {
                        return result + 'mánuðir';
                    }
                    return result + (isFuture ? 'mánuði' : 'mánuðum');
                } else if (withoutSuffix) {
                    return result + 'mánuður';
                }
                return result + (isFuture ? 'mánuð' : 'mánuði');
            case 'y':
                return withoutSuffix || isFuture ? 'ár' : 'ári';
            case 'yy':
                if (plural(number)) {
                    return result + (withoutSuffix || isFuture ? 'ár' : 'árum');
                }
                return result + (withoutSuffix || isFuture ? 'ár' : 'ári');
        }
    }

    var is = moment.defineLocale('is', {
        months: 'janúar_febrúar_mars_apríl_maí_júní_júlí_ágúst_september_október_nóvember_desember'.split('_'),
        monthsShort: 'jan_feb_mar_apr_maí_jún_júl_ágú_sep_okt_nóv_des'.split('_'),
        weekdays: 'sunnudagur_mánudagur_þriðjudagur_miðvikudagur_fimmtudagur_föstudagur_laugardagur'.split('_'),
        weekdaysShort: 'sun_mán_þri_mið_fim_fös_lau'.split('_'),
        weekdaysMin: 'Su_Má_Þr_Mi_Fi_Fö_La'.split('_'),
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY [kl.] H:mm',
            LLLL: 'dddd, D. MMMM YYYY [kl.] H:mm'
        },
        calendar: {
            sameDay: '[í dag kl.] LT',
            nextDay: '[á morgun kl.] LT',
            nextWeek: 'dddd [kl.] LT',
            lastDay: '[í gær kl.] LT',
            lastWeek: '[síðasta] dddd [kl.] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'eftir %s',
            past: 'fyrir %s síðan',
            s: translate,
            m: translate,
            mm: translate,
            h: 'klukkustund',
            hh: translate,
            d: translate,
            dd: translate,
            M: translate,
            MM: translate,
            y: translate,
            yy: translate
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    return is;
});

/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Italian [it]
//! author : Lorenzo : https://github.com/aliem
//! author: Mattia Larentis: https://github.com/nostalgiaz

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    var it = moment.defineLocale('it', {
        months: 'gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre'.split('_'),
        monthsShort: 'gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic'.split('_'),
        weekdays: 'domenica_lunedì_martedì_mercoledì_giovedì_venerdì_sabato'.split('_'),
        weekdaysShort: 'dom_lun_mar_mer_gio_ven_sab'.split('_'),
        weekdaysMin: 'do_lu_ma_me_gi_ve_sa'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[Oggi alle] LT',
            nextDay: '[Domani alle] LT',
            nextWeek: 'dddd [alle] LT',
            lastDay: '[Ieri alle] LT',
            lastWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[la scorsa] dddd [alle] LT';
                    default:
                        return '[lo scorso] dddd [alle] LT';
                }
            },
            sameElse: 'L'
        },
        relativeTime: {
            future: function (s) {
                return (/^[0-9].+$/.test(s) ? 'tra' : 'in') + ' ' + s;
            },
            past: '%s fa',
            s: 'alcuni secondi',
            m: 'un minuto',
            mm: '%d minuti',
            h: 'un\'ora',
            hh: '%d ore',
            d: 'un giorno',
            dd: '%d giorni',
            M: 'un mese',
            MM: '%d mesi',
            y: 'un anno',
            yy: '%d anni'
        },
        dayOfMonthOrdinalParse: /\d{1,2}º/,
        ordinal: '%dº',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    return it;
});

/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Japanese [ja]
//! author : LI Long : https://github.com/baryon

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    var ja = moment.defineLocale('ja', {
        months: '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
        monthsShort: '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
        weekdays: '日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日'.split('_'),
        weekdaysShort: '日_月_火_水_木_金_土'.split('_'),
        weekdaysMin: '日_月_火_水_木_金_土'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'YYYY/MM/DD',
            LL: 'YYYY年M月D日',
            LLL: 'YYYY年M月D日 HH:mm',
            LLLL: 'YYYY年M月D日 HH:mm dddd',
            l: 'YYYY/MM/DD',
            ll: 'YYYY年M月D日',
            lll: 'YYYY年M月D日 HH:mm',
            llll: 'YYYY年M月D日 HH:mm dddd'
        },
        meridiemParse: /午前|午後/i,
        isPM: function (input) {
            return input === '午後';
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 12) {
                return '午前';
            } else {
                return '午後';
            }
        },
        calendar: {
            sameDay: '[今日] LT',
            nextDay: '[明日] LT',
            nextWeek: '[来週]dddd LT',
            lastDay: '[昨日] LT',
            lastWeek: '[前週]dddd LT',
            sameElse: 'L'
        },
        dayOfMonthOrdinalParse: /\d{1,2}日/,
        ordinal: function (number, period) {
            switch (period) {
                case 'd':
                case 'D':
                case 'DDD':
                    return number + '日';
                default:
                    return number;
            }
        },
        relativeTime: {
            future: '%s後',
            past: '%s前',
            s: '数秒',
            m: '1分',
            mm: '%d分',
            h: '1時間',
            hh: '%d時間',
            d: '1日',
            dd: '%d日',
            M: '1ヶ月',
            MM: '%dヶ月',
            y: '1年',
            yy: '%d年'
        }
    });

    return ja;
});

/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Javanese [jv]
//! author : Rony Lantip : https://github.com/lantip
//! reference: http://jv.wikipedia.org/wiki/Basa_Jawa

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    var jv = moment.defineLocale('jv', {
        months: 'Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_Nopember_Desember'.split('_'),
        monthsShort: 'Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nop_Des'.split('_'),
        weekdays: 'Minggu_Senen_Seloso_Rebu_Kemis_Jemuwah_Septu'.split('_'),
        weekdaysShort: 'Min_Sen_Sel_Reb_Kem_Jem_Sep'.split('_'),
        weekdaysMin: 'Mg_Sn_Sl_Rb_Km_Jm_Sp'.split('_'),
        longDateFormat: {
            LT: 'HH.mm',
            LTS: 'HH.mm.ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY [pukul] HH.mm',
            LLLL: 'dddd, D MMMM YYYY [pukul] HH.mm'
        },
        meridiemParse: /enjing|siyang|sonten|ndalu/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'enjing') {
                return hour;
            } else if (meridiem === 'siyang') {
                return hour >= 11 ? hour : hour + 12;
            } else if (meridiem === 'sonten' || meridiem === 'ndalu') {
                return hour + 12;
            }
        },
        meridiem: function (hours, minutes, isLower) {
            if (hours < 11) {
                return 'enjing';
            } else if (hours < 15) {
                return 'siyang';
            } else if (hours < 19) {
                return 'sonten';
            } else {
                return 'ndalu';
            }
        },
        calendar: {
            sameDay: '[Dinten puniko pukul] LT',
            nextDay: '[Mbenjang pukul] LT',
            nextWeek: 'dddd [pukul] LT',
            lastDay: '[Kala wingi pukul] LT',
            lastWeek: 'dddd [kepengker pukul] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'wonten ing %s',
            past: '%s ingkang kepengker',
            s: 'sawetawis detik',
            m: 'setunggal menit',
            mm: '%d menit',
            h: 'setunggal jam',
            hh: '%d jam',
            d: 'sedinten',
            dd: '%d dinten',
            M: 'sewulan',
            MM: '%d wulan',
            y: 'setaun',
            yy: '%d taun'
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 1st is the first week of the year.
        }
    });

    return jv;
});

/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Georgian [ka]
//! author : Irakli Janiashvili : https://github.com/irakli-janiashvili

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    var ka = moment.defineLocale('ka', {
        months: {
            standalone: 'იანვარი_თებერვალი_მარტი_აპრილი_მაისი_ივნისი_ივლისი_აგვისტო_სექტემბერი_ოქტომბერი_ნოემბერი_დეკემბერი'.split('_'),
            format: 'იანვარს_თებერვალს_მარტს_აპრილის_მაისს_ივნისს_ივლისს_აგვისტს_სექტემბერს_ოქტომბერს_ნოემბერს_დეკემბერს'.split('_')
        },
        monthsShort: 'იან_თებ_მარ_აპრ_მაი_ივნ_ივლ_აგვ_სექ_ოქტ_ნოე_დეკ'.split('_'),
        weekdays: {
            standalone: 'კვირა_ორშაბათი_სამშაბათი_ოთხშაბათი_ხუთშაბათი_პარასკევი_შაბათი'.split('_'),
            format: 'კვირას_ორშაბათს_სამშაბათს_ოთხშაბათს_ხუთშაბათს_პარასკევს_შაბათს'.split('_'),
            isFormat: /(წინა|შემდეგ)/
        },
        weekdaysShort: 'კვი_ორშ_სამ_ოთხ_ხუთ_პარ_შაბ'.split('_'),
        weekdaysMin: 'კვ_ორ_სა_ოთ_ხუ_პა_შა'.split('_'),
        longDateFormat: {
            LT: 'h:mm A',
            LTS: 'h:mm:ss A',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY h:mm A',
            LLLL: 'dddd, D MMMM YYYY h:mm A'
        },
        calendar: {
            sameDay: '[დღეს] LT[-ზე]',
            nextDay: '[ხვალ] LT[-ზე]',
            lastDay: '[გუშინ] LT[-ზე]',
            nextWeek: '[შემდეგ] dddd LT[-ზე]',
            lastWeek: '[წინა] dddd LT-ზე',
            sameElse: 'L'
        },
        relativeTime: {
            future: function (s) {
                return (/(წამი|წუთი|საათი|წელი)/.test(s) ? s.replace(/ი$/, 'ში') : s + 'ში'
                );
            },
            past: function (s) {
                if (/(წამი|წუთი|საათი|დღე|თვე)/.test(s)) {
                    return s.replace(/(ი|ე)$/, 'ის უკან');
                }
                if (/წელი/.test(s)) {
                    return s.replace(/წელი$/, 'წლის უკან');
                }
            },
            s: 'რამდენიმე წამი',
            m: 'წუთი',
            mm: '%d წუთი',
            h: 'საათი',
            hh: '%d საათი',
            d: 'დღე',
            dd: '%d დღე',
            M: 'თვე',
            MM: '%d თვე',
            y: 'წელი',
            yy: '%d წელი'
        },
        dayOfMonthOrdinalParse: /0|1-ლი|მე-\d{1,2}|\d{1,2}-ე/,
        ordinal: function (number) {
            if (number === 0) {
                return number;
            }
            if (number === 1) {
                return number + '-ლი';
            }
            if (number < 20 || number <= 100 && number % 20 === 0 || number % 100 === 0) {
                return 'მე-' + number;
            }
            return number + '-ე';
        },
        week: {
            dow: 1,
            doy: 7
        }
    });

    return ka;
});

/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Kazakh [kk]
//! authors : Nurlan Rakhimzhanov : https://github.com/nurlan

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    var suffixes = {
        0: '-ші',
        1: '-ші',
        2: '-ші',
        3: '-ші',
        4: '-ші',
        5: '-ші',
        6: '-шы',
        7: '-ші',
        8: '-ші',
        9: '-шы',
        10: '-шы',
        20: '-шы',
        30: '-шы',
        40: '-шы',
        50: '-ші',
        60: '-шы',
        70: '-ші',
        80: '-ші',
        90: '-шы',
        100: '-ші'
    };

    var kk = moment.defineLocale('kk', {
        months: 'қаңтар_ақпан_наурыз_сәуір_мамыр_маусым_шілде_тамыз_қыркүйек_қазан_қараша_желтоқсан'.split('_'),
        monthsShort: 'қаң_ақп_нау_сәу_мам_мау_шіл_там_қыр_қаз_қар_жел'.split('_'),
        weekdays: 'жексенбі_дүйсенбі_сейсенбі_сәрсенбі_бейсенбі_жұма_сенбі'.split('_'),
        weekdaysShort: 'жек_дүй_сей_сәр_бей_жұм_сен'.split('_'),
        weekdaysMin: 'жк_дй_сй_ср_бй_жм_сн'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[Бүгін сағат] LT',
            nextDay: '[Ертең сағат] LT',
            nextWeek: 'dddd [сағат] LT',
            lastDay: '[Кеше сағат] LT',
            lastWeek: '[Өткен аптаның] dddd [сағат] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: '%s ішінде',
            past: '%s бұрын',
            s: 'бірнеше секунд',
            m: 'бір минут',
            mm: '%d минут',
            h: 'бір сағат',
            hh: '%d сағат',
            d: 'бір күн',
            dd: '%d күн',
            M: 'бір ай',
            MM: '%d ай',
            y: 'бір жыл',
            yy: '%d жыл'
        },
        dayOfMonthOrdinalParse: /\d{1,2}-(ші|шы)/,
        ordinal: function (number) {
            var a = number % 10,
                b = number >= 100 ? 100 : null;
            return number + (suffixes[number] || suffixes[a] || suffixes[b]);
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 1st is the first week of the year.
        }
    });

    return kk;
});

/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Cambodian [km]
//! author : Kruy Vanna : https://github.com/kruyvanna

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    var km = moment.defineLocale('km', {
        months: 'មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ'.split('_'),
        monthsShort: 'មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ'.split('_'),
        weekdays: 'អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍'.split('_'),
        weekdaysShort: 'អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍'.split('_'),
        weekdaysMin: 'អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[ថ្ងៃនេះ ម៉ោង] LT',
            nextDay: '[ស្អែក ម៉ោង] LT',
            nextWeek: 'dddd [ម៉ោង] LT',
            lastDay: '[ម្សិលមិញ ម៉ោង] LT',
            lastWeek: 'dddd [សប្តាហ៍មុន] [ម៉ោង] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: '%sទៀត',
            past: '%sមុន',
            s: 'ប៉ុន្មានវិនាទី',
            m: 'មួយនាទី',
            mm: '%d នាទី',
            h: 'មួយម៉ោង',
            hh: '%d ម៉ោង',
            d: 'មួយថ្ងៃ',
            dd: '%d ថ្ងៃ',
            M: 'មួយខែ',
            MM: '%d ខែ',
            y: 'មួយឆ្នាំ',
            yy: '%d ឆ្នាំ'
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    return km;
});

/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Kannada [kn]
//! author : Rajeev Naik : https://github.com/rajeevnaikte

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    var symbolMap = {
        '1': '೧',
        '2': '೨',
        '3': '೩',
        '4': '೪',
        '5': '೫',
        '6': '೬',
        '7': '೭',
        '8': '೮',
        '9': '೯',
        '0': '೦'
    };
    var numberMap = {
        '೧': '1',
        '೨': '2',
        '೩': '3',
        '೪': '4',
        '೫': '5',
        '೬': '6',
        '೭': '7',
        '೮': '8',
        '೯': '9',
        '೦': '0'
    };

    var kn = moment.defineLocale('kn', {
        months: 'ಜನವರಿ_ಫೆಬ್ರವರಿ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂಬರ್_ಅಕ್ಟೋಬರ್_ನವೆಂಬರ್_ಡಿಸೆಂಬರ್'.split('_'),
        monthsShort: 'ಜನ_ಫೆಬ್ರ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂಬ_ಅಕ್ಟೋಬ_ನವೆಂಬ_ಡಿಸೆಂಬ'.split('_'),
        monthsParseExact: true,
        weekdays: 'ಭಾನುವಾರ_ಸೋಮವಾರ_ಮಂಗಳವಾರ_ಬುಧವಾರ_ಗುರುವಾರ_ಶುಕ್ರವಾರ_ಶನಿವಾರ'.split('_'),
        weekdaysShort: 'ಭಾನು_ಸೋಮ_ಮಂಗಳ_ಬುಧ_ಗುರು_ಶುಕ್ರ_ಶನಿ'.split('_'),
        weekdaysMin: 'ಭಾ_ಸೋ_ಮಂ_ಬು_ಗು_ಶು_ಶ'.split('_'),
        longDateFormat: {
            LT: 'A h:mm',
            LTS: 'A h:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, A h:mm',
            LLLL: 'dddd, D MMMM YYYY, A h:mm'
        },
        calendar: {
            sameDay: '[ಇಂದು] LT',
            nextDay: '[ನಾಳೆ] LT',
            nextWeek: 'dddd, LT',
            lastDay: '[ನಿನ್ನೆ] LT',
            lastWeek: '[ಕೊನೆಯ] dddd, LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: '%s ನಂತರ',
            past: '%s ಹಿಂದೆ',
            s: 'ಕೆಲವು ಕ್ಷಣಗಳು',
            m: 'ಒಂದು ನಿಮಿಷ',
            mm: '%d ನಿಮಿಷ',
            h: 'ಒಂದು ಗಂಟೆ',
            hh: '%d ಗಂಟೆ',
            d: 'ಒಂದು ದಿನ',
            dd: '%d ದಿನ',
            M: 'ಒಂದು ತಿಂಗಳು',
            MM: '%d ತಿಂಗಳು',
            y: 'ಒಂದು ವರ್ಷ',
            yy: '%d ವರ್ಷ'
        },
        preparse: function (string) {
            return string.replace(/[೧೨೩೪೫೬೭೮೯೦]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        meridiemParse: /ರಾತ್ರಿ|ಬೆಳಿಗ್ಗೆ|ಮಧ್ಯಾಹ್ನ|ಸಂಜೆ/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'ರಾತ್ರಿ') {
                return hour < 4 ? hour : hour + 12;
            } else if (meridiem === 'ಬೆಳಿಗ್ಗೆ') {
                return hour;
            } else if (meridiem === 'ಮಧ್ಯಾಹ್ನ') {
                return hour >= 10 ? hour : hour + 12;
            } else if (meridiem === 'ಸಂಜೆ') {
                return hour + 12;
            }
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'ರಾತ್ರಿ';
            } else if (hour < 10) {
                return 'ಬೆಳಿಗ್ಗೆ';
            } else if (hour < 17) {
                return 'ಮಧ್ಯಾಹ್ನ';
            } else if (hour < 20) {
                return 'ಸಂಜೆ';
            } else {
                return 'ರಾತ್ರಿ';
            }
        },
        dayOfMonthOrdinalParse: /\d{1,2}(ನೇ)/,
        ordinal: function (number) {
            return number + 'ನೇ';
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 6 // The week that contains Jan 1st is the first week of the year.
        }
    });

    return kn;
});

/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Korean [ko]
//! author : Kyungwook, Park : https://github.com/kyungw00k
//! author : Jeeeyul Lee <jeeeyul@gmail.com>

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    var ko = moment.defineLocale('ko', {
        months: '1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월'.split('_'),
        monthsShort: '1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월'.split('_'),
        weekdays: '일요일_월요일_화요일_수요일_목요일_금요일_토요일'.split('_'),
        weekdaysShort: '일_월_화_수_목_금_토'.split('_'),
        weekdaysMin: '일_월_화_수_목_금_토'.split('_'),
        longDateFormat: {
            LT: 'A h:mm',
            LTS: 'A h:mm:ss',
            L: 'YYYY.MM.DD',
            LL: 'YYYY년 MMMM D일',
            LLL: 'YYYY년 MMMM D일 A h:mm',
            LLLL: 'YYYY년 MMMM D일 dddd A h:mm',
            l: 'YYYY.MM.DD',
            ll: 'YYYY년 MMMM D일',
            lll: 'YYYY년 MMMM D일 A h:mm',
            llll: 'YYYY년 MMMM D일 dddd A h:mm'
        },
        calendar: {
            sameDay: '오늘 LT',
            nextDay: '내일 LT',
            nextWeek: 'dddd LT',
            lastDay: '어제 LT',
            lastWeek: '지난주 dddd LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: '%s 후',
            past: '%s 전',
            s: '몇 초',
            ss: '%d초',
            m: '1분',
            mm: '%d분',
            h: '한 시간',
            hh: '%d시간',
            d: '하루',
            dd: '%d일',
            M: '한 달',
            MM: '%d달',
            y: '일 년',
            yy: '%d년'
        },
        dayOfMonthOrdinalParse: /\d{1,2}(일|월|주)/,
        ordinal: function (number, period) {
            switch (period) {
                case 'd':
                case 'D':
                case 'DDD':
                    return number + '일';
                case 'M':
                    return number + '월';
                case 'w':
                case 'W':
                    return number + '주';
                default:
                    return number;
            }
        },
        meridiemParse: /오전|오후/,
        isPM: function (token) {
            return token === '오후';
        },
        meridiem: function (hour, minute, isUpper) {
            return hour < 12 ? '오전' : '오후';
        }
    });

    return ko;
});

/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Kyrgyz [ky]
//! author : Chyngyz Arystan uulu : https://github.com/chyngyz

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    var suffixes = {
        0: '-чү',
        1: '-чи',
        2: '-чи',
        3: '-чү',
        4: '-чү',
        5: '-чи',
        6: '-чы',
        7: '-чи',
        8: '-чи',
        9: '-чу',
        10: '-чу',
        20: '-чы',
        30: '-чу',
        40: '-чы',
        50: '-чү',
        60: '-чы',
        70: '-чи',
        80: '-чи',
        90: '-чу',
        100: '-чү'
    };

    var ky = moment.defineLocale('ky', {
        months: 'январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь'.split('_'),
        monthsShort: 'янв_фев_март_апр_май_июнь_июль_авг_сен_окт_ноя_дек'.split('_'),
        weekdays: 'Жекшемби_Дүйшөмбү_Шейшемби_Шаршемби_Бейшемби_Жума_Ишемби'.split('_'),
        weekdaysShort: 'Жек_Дүй_Шей_Шар_Бей_Жум_Ише'.split('_'),
        weekdaysMin: 'Жк_Дй_Шй_Шр_Бй_Жм_Иш'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[Бүгүн саат] LT',
            nextDay: '[Эртең саат] LT',
            nextWeek: 'dddd [саат] LT',
            lastDay: '[Кече саат] LT',
            lastWeek: '[Өткен аптанын] dddd [күнү] [саат] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: '%s ичинде',
            past: '%s мурун',
            s: 'бирнече секунд',
            m: 'бир мүнөт',
            mm: '%d мүнөт',
            h: 'бир саат',
            hh: '%d саат',
            d: 'бир күн',
            dd: '%d күн',
            M: 'бир ай',
            MM: '%d ай',
            y: 'бир жыл',
            yy: '%d жыл'
        },
        dayOfMonthOrdinalParse: /\d{1,2}-(чи|чы|чү|чу)/,
        ordinal: function (number) {
            var a = number % 10,
                b = number >= 100 ? 100 : null;
            return number + (suffixes[number] || suffixes[a] || suffixes[b]);
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 1st is the first week of the year.
        }
    });

    return ky;
});

/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Luxembourgish [lb]
//! author : mweimerskirch : https://github.com/mweimerskirch
//! author : David Raison : https://github.com/kwisatz

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    function processRelativeTime(number, withoutSuffix, key, isFuture) {
        var format = {
            'm': ['eng Minutt', 'enger Minutt'],
            'h': ['eng Stonn', 'enger Stonn'],
            'd': ['een Dag', 'engem Dag'],
            'M': ['ee Mount', 'engem Mount'],
            'y': ['ee Joer', 'engem Joer']
        };
        return withoutSuffix ? format[key][0] : format[key][1];
    }
    function processFutureTime(string) {
        var number = string.substr(0, string.indexOf(' '));
        if (eifelerRegelAppliesToNumber(number)) {
            return 'a ' + string;
        }
        return 'an ' + string;
    }
    function processPastTime(string) {
        var number = string.substr(0, string.indexOf(' '));
        if (eifelerRegelAppliesToNumber(number)) {
            return 'viru ' + string;
        }
        return 'virun ' + string;
    }
    /**
     * Returns true if the word before the given number loses the '-n' ending.
     * e.g. 'an 10 Deeg' but 'a 5 Deeg'
     *
     * @param number {integer}
     * @returns {boolean}
     */
    function eifelerRegelAppliesToNumber(number) {
        number = parseInt(number, 10);
        if (isNaN(number)) {
            return false;
        }
        if (number < 0) {
            // Negative Number --> always true
            return true;
        } else if (number < 10) {
            // Only 1 digit
            if (4 <= number && number <= 7) {
                return true;
            }
            return false;
        } else if (number < 100) {
            // 2 digits
            var lastDigit = number % 10,
                firstDigit = number / 10;
            if (lastDigit === 0) {
                return eifelerRegelAppliesToNumber(firstDigit);
            }
            return eifelerRegelAppliesToNumber(lastDigit);
        } else if (number < 10000) {
            // 3 or 4 digits --> recursively check first digit
            while (number >= 10) {
                number = number / 10;
            }
            return eifelerRegelAppliesToNumber(number);
        } else {
            // Anything larger than 4 digits: recursively check first n-3 digits
            number = number / 1000;
            return eifelerRegelAppliesToNumber(number);
        }
    }

    var lb = moment.defineLocale('lb', {
        months: 'Januar_Februar_Mäerz_Abrëll_Mee_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
        monthsShort: 'Jan._Febr._Mrz._Abr._Mee_Jun._Jul._Aug._Sept._Okt._Nov._Dez.'.split('_'),
        monthsParseExact: true,
        weekdays: 'Sonndeg_Méindeg_Dënschdeg_Mëttwoch_Donneschdeg_Freideg_Samschdeg'.split('_'),
        weekdaysShort: 'So._Mé._Dë._Më._Do._Fr._Sa.'.split('_'),
        weekdaysMin: 'So_Mé_Dë_Më_Do_Fr_Sa'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'H:mm [Auer]',
            LTS: 'H:mm:ss [Auer]',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY H:mm [Auer]',
            LLLL: 'dddd, D. MMMM YYYY H:mm [Auer]'
        },
        calendar: {
            sameDay: '[Haut um] LT',
            sameElse: 'L',
            nextDay: '[Muer um] LT',
            nextWeek: 'dddd [um] LT',
            lastDay: '[Gëschter um] LT',
            lastWeek: function () {
                // Different date string for 'Dënschdeg' (Tuesday) and 'Donneschdeg' (Thursday) due to phonological rule
                switch (this.day()) {
                    case 2:
                    case 4:
                        return '[Leschten] dddd [um] LT';
                    default:
                        return '[Leschte] dddd [um] LT';
                }
            }
        },
        relativeTime: {
            future: processFutureTime,
            past: processPastTime,
            s: 'e puer Sekonnen',
            m: processRelativeTime,
            mm: '%d Minutten',
            h: processRelativeTime,
            hh: '%d Stonnen',
            d: processRelativeTime,
            dd: '%d Deeg',
            M: processRelativeTime,
            MM: '%d Méint',
            y: processRelativeTime,
            yy: '%d Joer'
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    return lb;
});

/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Lao [lo]
//! author : Ryan Hart : https://github.com/ryanhart2

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    var lo = moment.defineLocale('lo', {
        months: 'ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ'.split('_'),
        monthsShort: 'ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ'.split('_'),
        weekdays: 'ອາທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ'.split('_'),
        weekdaysShort: 'ທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ'.split('_'),
        weekdaysMin: 'ທ_ຈ_ອຄ_ພ_ພຫ_ສກ_ສ'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'ວັນdddd D MMMM YYYY HH:mm'
        },
        meridiemParse: /ຕອນເຊົ້າ|ຕອນແລງ/,
        isPM: function (input) {
            return input === 'ຕອນແລງ';
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 12) {
                return 'ຕອນເຊົ້າ';
            } else {
                return 'ຕອນແລງ';
            }
        },
        calendar: {
            sameDay: '[ມື້ນີ້ເວລາ] LT',
            nextDay: '[ມື້ອື່ນເວລາ] LT',
            nextWeek: '[ວັນ]dddd[ໜ້າເວລາ] LT',
            lastDay: '[ມື້ວານນີ້ເວລາ] LT',
            lastWeek: '[ວັນ]dddd[ແລ້ວນີ້ເວລາ] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'ອີກ %s',
            past: '%sຜ່ານມາ',
            s: 'ບໍ່ເທົ່າໃດວິນາທີ',
            m: '1 ນາທີ',
            mm: '%d ນາທີ',
            h: '1 ຊົ່ວໂມງ',
            hh: '%d ຊົ່ວໂມງ',
            d: '1 ມື້',
            dd: '%d ມື້',
            M: '1 ເດືອນ',
            MM: '%d ເດືອນ',
            y: '1 ປີ',
            yy: '%d ປີ'
        },
        dayOfMonthOrdinalParse: /(ທີ່)\d{1,2}/,
        ordinal: function (number) {
            return 'ທີ່' + number;
        }
    });

    return lo;
});

/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Lithuanian [lt]
//! author : Mindaugas Mozūras : https://github.com/mmozuras

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    var units = {
        'm': 'minutė_minutės_minutę',
        'mm': 'minutės_minučių_minutes',
        'h': 'valanda_valandos_valandą',
        'hh': 'valandos_valandų_valandas',
        'd': 'diena_dienos_dieną',
        'dd': 'dienos_dienų_dienas',
        'M': 'mėnuo_mėnesio_mėnesį',
        'MM': 'mėnesiai_mėnesių_mėnesius',
        'y': 'metai_metų_metus',
        'yy': 'metai_metų_metus'
    };
    function translateSeconds(number, withoutSuffix, key, isFuture) {
        if (withoutSuffix) {
            return 'kelios sekundės';
        } else {
            return isFuture ? 'kelių sekundžių' : 'kelias sekundes';
        }
    }
    function translateSingular(number, withoutSuffix, key, isFuture) {
        return withoutSuffix ? forms(key)[0] : isFuture ? forms(key)[1] : forms(key)[2];
    }
    function special(number) {
        return number % 10 === 0 || number > 10 && number < 20;
    }
    function forms(key) {
        return units[key].split('_');
    }
    function translate(number, withoutSuffix, key, isFuture) {
        var result = number + ' ';
        if (number === 1) {
            return result + translateSingular(number, withoutSuffix, key[0], isFuture);
        } else if (withoutSuffix) {
            return result + (special(number) ? forms(key)[1] : forms(key)[0]);
        } else {
            if (isFuture) {
                return result + forms(key)[1];
            } else {
                return result + (special(number) ? forms(key)[1] : forms(key)[2]);
            }
        }
    }
    var lt = moment.defineLocale('lt', {
        months: {
            format: 'sausio_vasario_kovo_balandžio_gegužės_birželio_liepos_rugpjūčio_rugsėjo_spalio_lapkričio_gruodžio'.split('_'),
            standalone: 'sausis_vasaris_kovas_balandis_gegužė_birželis_liepa_rugpjūtis_rugsėjis_spalis_lapkritis_gruodis'.split('_'),
            isFormat: /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?|MMMM?(\[[^\[\]]*\]|\s)+D[oD]?/
        },
        monthsShort: 'sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd'.split('_'),
        weekdays: {
            format: 'sekmadienį_pirmadienį_antradienį_trečiadienį_ketvirtadienį_penktadienį_šeštadienį'.split('_'),
            standalone: 'sekmadienis_pirmadienis_antradienis_trečiadienis_ketvirtadienis_penktadienis_šeštadienis'.split('_'),
            isFormat: /dddd HH:mm/
        },
        weekdaysShort: 'Sek_Pir_Ant_Tre_Ket_Pen_Šeš'.split('_'),
        weekdaysMin: 'S_P_A_T_K_Pn_Š'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'YYYY-MM-DD',
            LL: 'YYYY [m.] MMMM D [d.]',
            LLL: 'YYYY [m.] MMMM D [d.], HH:mm [val.]',
            LLLL: 'YYYY [m.] MMMM D [d.], dddd, HH:mm [val.]',
            l: 'YYYY-MM-DD',
            ll: 'YYYY [m.] MMMM D [d.]',
            lll: 'YYYY [m.] MMMM D [d.], HH:mm [val.]',
            llll: 'YYYY [m.] MMMM D [d.], ddd, HH:mm [val.]'
        },
        calendar: {
            sameDay: '[Šiandien] LT',
            nextDay: '[Rytoj] LT',
            nextWeek: 'dddd LT',
            lastDay: '[Vakar] LT',
            lastWeek: '[Praėjusį] dddd LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'po %s',
            past: 'prieš %s',
            s: translateSeconds,
            m: translateSingular,
            mm: translate,
            h: translateSingular,
            hh: translate,
            d: translateSingular,
            dd: translate,
            M: translateSingular,
            MM: translate,
            y: translateSingular,
            yy: translate
        },
        dayOfMonthOrdinalParse: /\d{1,2}-oji/,
        ordinal: function (number) {
            return number + '-oji';
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    return lt;
});

/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Latvian [lv]
//! author : Kristaps Karlsons : https://github.com/skakri
//! author : Jānis Elmeris : https://github.com/JanisE

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    var units = {
        'm': 'minūtes_minūtēm_minūte_minūtes'.split('_'),
        'mm': 'minūtes_minūtēm_minūte_minūtes'.split('_'),
        'h': 'stundas_stundām_stunda_stundas'.split('_'),
        'hh': 'stundas_stundām_stunda_stundas'.split('_'),
        'd': 'dienas_dienām_diena_dienas'.split('_'),
        'dd': 'dienas_dienām_diena_dienas'.split('_'),
        'M': 'mēneša_mēnešiem_mēnesis_mēneši'.split('_'),
        'MM': 'mēneša_mēnešiem_mēnesis_mēneši'.split('_'),
        'y': 'gada_gadiem_gads_gadi'.split('_'),
        'yy': 'gada_gadiem_gads_gadi'.split('_')
    };
    /**
     * @param withoutSuffix boolean true = a length of time; false = before/after a period of time.
     */
    function format(forms, number, withoutSuffix) {
        if (withoutSuffix) {
            // E.g. "21 minūte", "3 minūtes".
            return number % 10 === 1 && number % 100 !== 11 ? forms[2] : forms[3];
        } else {
            // E.g. "21 minūtes" as in "pēc 21 minūtes".
            // E.g. "3 minūtēm" as in "pēc 3 minūtēm".
            return number % 10 === 1 && number % 100 !== 11 ? forms[0] : forms[1];
        }
    }
    function relativeTimeWithPlural(number, withoutSuffix, key) {
        return number + ' ' + format(units[key], number, withoutSuffix);
    }
    function relativeTimeWithSingular(number, withoutSuffix, key) {
        return format(units[key], number, withoutSuffix);
    }
    function relativeSeconds(number, withoutSuffix) {
        return withoutSuffix ? 'dažas sekundes' : 'dažām sekundēm';
    }

    var lv = moment.defineLocale('lv', {
        months: 'janvāris_februāris_marts_aprīlis_maijs_jūnijs_jūlijs_augusts_septembris_oktobris_novembris_decembris'.split('_'),
        monthsShort: 'jan_feb_mar_apr_mai_jūn_jūl_aug_sep_okt_nov_dec'.split('_'),
        weekdays: 'svētdiena_pirmdiena_otrdiena_trešdiena_ceturtdiena_piektdiena_sestdiena'.split('_'),
        weekdaysShort: 'Sv_P_O_T_C_Pk_S'.split('_'),
        weekdaysMin: 'Sv_P_O_T_C_Pk_S'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY.',
            LL: 'YYYY. [gada] D. MMMM',
            LLL: 'YYYY. [gada] D. MMMM, HH:mm',
            LLLL: 'YYYY. [gada] D. MMMM, dddd, HH:mm'
        },
        calendar: {
            sameDay: '[Šodien pulksten] LT',
            nextDay: '[Rīt pulksten] LT',
            nextWeek: 'dddd [pulksten] LT',
            lastDay: '[Vakar pulksten] LT',
            lastWeek: '[Pagājušā] dddd [pulksten] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'pēc %s',
            past: 'pirms %s',
            s: relativeSeconds,
            m: relativeTimeWithSingular,
            mm: relativeTimeWithPlural,
            h: relativeTimeWithSingular,
            hh: relativeTimeWithPlural,
            d: relativeTimeWithSingular,
            dd: relativeTimeWithPlural,
            M: relativeTimeWithSingular,
            MM: relativeTimeWithPlural,
            y: relativeTimeWithSingular,
            yy: relativeTimeWithPlural
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    return lv;
});

/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Montenegrin [me]
//! author : Miodrag Nikač <miodrag@restartit.me> : https://github.com/miodragnikac

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    var translator = {
        words: { //Different grammatical cases
            m: ['jedan minut', 'jednog minuta'],
            mm: ['minut', 'minuta', 'minuta'],
            h: ['jedan sat', 'jednog sata'],
            hh: ['sat', 'sata', 'sati'],
            dd: ['dan', 'dana', 'dana'],
            MM: ['mjesec', 'mjeseca', 'mjeseci'],
            yy: ['godina', 'godine', 'godina']
        },
        correctGrammaticalCase: function (number, wordKey) {
            return number === 1 ? wordKey[0] : number >= 2 && number <= 4 ? wordKey[1] : wordKey[2];
        },
        translate: function (number, withoutSuffix, key) {
            var wordKey = translator.words[key];
            if (key.length === 1) {
                return withoutSuffix ? wordKey[0] : wordKey[1];
            } else {
                return number + ' ' + translator.correctGrammaticalCase(number, wordKey);
            }
        }
    };

    var me = moment.defineLocale('me', {
        months: 'januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar'.split('_'),
        monthsShort: 'jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.'.split('_'),
        monthsParseExact: true,
        weekdays: 'nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota'.split('_'),
        weekdaysShort: 'ned._pon._uto._sri._čet._pet._sub.'.split('_'),
        weekdaysMin: 'ne_po_ut_sr_če_pe_su'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY H:mm',
            LLLL: 'dddd, D. MMMM YYYY H:mm'
        },
        calendar: {
            sameDay: '[danas u] LT',
            nextDay: '[sjutra u] LT',

            nextWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[u] [nedjelju] [u] LT';
                    case 3:
                        return '[u] [srijedu] [u] LT';
                    case 6:
                        return '[u] [subotu] [u] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[u] dddd [u] LT';
                }
            },
            lastDay: '[juče u] LT',
            lastWeek: function () {
                var lastWeekDays = ['[prošle] [nedjelje] [u] LT', '[prošlog] [ponedjeljka] [u] LT', '[prošlog] [utorka] [u] LT', '[prošle] [srijede] [u] LT', '[prošlog] [četvrtka] [u] LT', '[prošlog] [petka] [u] LT', '[prošle] [subote] [u] LT'];
                return lastWeekDays[this.day()];
            },
            sameElse: 'L'
        },
        relativeTime: {
            future: 'za %s',
            past: 'prije %s',
            s: 'nekoliko sekundi',
            m: translator.translate,
            mm: translator.translate,
            h: translator.translate,
            hh: translator.translate,
            d: 'dan',
            dd: translator.translate,
            M: 'mjesec',
            MM: translator.translate,
            y: 'godinu',
            yy: translator.translate
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 1st is the first week of the year.
        }
    });

    return me;
});

/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Maori [mi]
//! author : John Corrigan <robbiecloset@gmail.com> : https://github.com/johnideal

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    var mi = moment.defineLocale('mi', {
        months: 'Kohi-tāte_Hui-tanguru_Poutū-te-rangi_Paenga-whāwhā_Haratua_Pipiri_Hōngoingoi_Here-turi-kōkā_Mahuru_Whiringa-ā-nuku_Whiringa-ā-rangi_Hakihea'.split('_'),
        monthsShort: 'Kohi_Hui_Pou_Pae_Hara_Pipi_Hōngoi_Here_Mahu_Whi-nu_Whi-ra_Haki'.split('_'),
        monthsRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,
        monthsStrictRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,
        monthsShortRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,
        monthsShortStrictRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,2}/i,
        weekdays: 'Rātapu_Mane_Tūrei_Wenerei_Tāite_Paraire_Hātarei'.split('_'),
        weekdaysShort: 'Ta_Ma_Tū_We_Tāi_Pa_Hā'.split('_'),
        weekdaysMin: 'Ta_Ma_Tū_We_Tāi_Pa_Hā'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY [i] HH:mm',
            LLLL: 'dddd, D MMMM YYYY [i] HH:mm'
        },
        calendar: {
            sameDay: '[i teie mahana, i] LT',
            nextDay: '[apopo i] LT',
            nextWeek: 'dddd [i] LT',
            lastDay: '[inanahi i] LT',
            lastWeek: 'dddd [whakamutunga i] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'i roto i %s',
            past: '%s i mua',
            s: 'te hēkona ruarua',
            m: 'he meneti',
            mm: '%d meneti',
            h: 'te haora',
            hh: '%d haora',
            d: 'he ra',
            dd: '%d ra',
            M: 'he marama',
            MM: '%d marama',
            y: 'he tau',
            yy: '%d tau'
        },
        dayOfMonthOrdinalParse: /\d{1,2}º/,
        ordinal: '%dº',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    return mi;
});

/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Macedonian [mk]
//! author : Borislav Mickov : https://github.com/B0k0

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    var mk = moment.defineLocale('mk', {
        months: 'јануари_февруари_март_април_мај_јуни_јули_август_септември_октомври_ноември_декември'.split('_'),
        monthsShort: 'јан_фев_мар_апр_мај_јун_јул_авг_сеп_окт_ное_дек'.split('_'),
        weekdays: 'недела_понеделник_вторник_среда_четврток_петок_сабота'.split('_'),
        weekdaysShort: 'нед_пон_вто_сре_чет_пет_саб'.split('_'),
        weekdaysMin: 'нe_пo_вт_ср_че_пе_сa'.split('_'),
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'D.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY H:mm',
            LLLL: 'dddd, D MMMM YYYY H:mm'
        },
        calendar: {
            sameDay: '[Денес во] LT',
            nextDay: '[Утре во] LT',
            nextWeek: '[Во] dddd [во] LT',
            lastDay: '[Вчера во] LT',
            lastWeek: function () {
                switch (this.day()) {
                    case 0:
                    case 3:
                    case 6:
                        return '[Изминатата] dddd [во] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[Изминатиот] dddd [во] LT';
                }
            },
            sameElse: 'L'
        },
        relativeTime: {
            future: 'после %s',
            past: 'пред %s',
            s: 'неколку секунди',
            m: 'минута',
            mm: '%d минути',
            h: 'час',
            hh: '%d часа',
            d: 'ден',
            dd: '%d дена',
            M: 'месец',
            MM: '%d месеци',
            y: 'година',
            yy: '%d години'
        },
        dayOfMonthOrdinalParse: /\d{1,2}-(ев|ен|ти|ви|ри|ми)/,
        ordinal: function (number) {
            var lastDigit = number % 10,
                last2Digits = number % 100;
            if (number === 0) {
                return number + '-ев';
            } else if (last2Digits === 0) {
                return number + '-ен';
            } else if (last2Digits > 10 && last2Digits < 20) {
                return number + '-ти';
            } else if (lastDigit === 1) {
                return number + '-ви';
            } else if (lastDigit === 2) {
                return number + '-ри';
            } else if (lastDigit === 7 || lastDigit === 8) {
                return number + '-ми';
            } else {
                return number + '-ти';
            }
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 1st is the first week of the year.
        }
    });

    return mk;
});

/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Malayalam [ml]
//! author : Floyd Pink : https://github.com/floydpink

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    var ml = moment.defineLocale('ml', {
        months: 'ജനുവരി_ഫെബ്രുവരി_മാർച്ച്_ഏപ്രിൽ_മേയ്_ജൂൺ_ജൂലൈ_ഓഗസ്റ്റ്_സെപ്റ്റംബർ_ഒക്ടോബർ_നവംബർ_ഡിസംബർ'.split('_'),
        monthsShort: 'ജനു._ഫെബ്രു._മാർ._ഏപ്രി._മേയ്_ജൂൺ_ജൂലൈ._ഓഗ._സെപ്റ്റ._ഒക്ടോ._നവം._ഡിസം.'.split('_'),
        monthsParseExact: true,
        weekdays: 'ഞായറാഴ്ച_തിങ്കളാഴ്ച_ചൊവ്വാഴ്ച_ബുധനാഴ്ച_വ്യാഴാഴ്ച_വെള്ളിയാഴ്ച_ശനിയാഴ്ച'.split('_'),
        weekdaysShort: 'ഞായർ_തിങ്കൾ_ചൊവ്വ_ബുധൻ_വ്യാഴം_വെള്ളി_ശനി'.split('_'),
        weekdaysMin: 'ഞാ_തി_ചൊ_ബു_വ്യാ_വെ_ശ'.split('_'),
        longDateFormat: {
            LT: 'A h:mm -നു',
            LTS: 'A h:mm:ss -നു',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, A h:mm -നു',
            LLLL: 'dddd, D MMMM YYYY, A h:mm -നു'
        },
        calendar: {
            sameDay: '[ഇന്ന്] LT',
            nextDay: '[നാളെ] LT',
            nextWeek: 'dddd, LT',
            lastDay: '[ഇന്നലെ] LT',
            lastWeek: '[കഴിഞ്ഞ] dddd, LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: '%s കഴിഞ്ഞ്',
            past: '%s മുൻപ്',
            s: 'അൽപ നിമിഷങ്ങൾ',
            m: 'ഒരു മിനിറ്റ്',
            mm: '%d മിനിറ്റ്',
            h: 'ഒരു മണിക്കൂർ',
            hh: '%d മണിക്കൂർ',
            d: 'ഒരു ദിവസം',
            dd: '%d ദിവസം',
            M: 'ഒരു മാസം',
            MM: '%d മാസം',
            y: 'ഒരു വർഷം',
            yy: '%d വർഷം'
        },
        meridiemParse: /രാത്രി|രാവിലെ|ഉച്ച കഴിഞ്ഞ്|വൈകുന്നേരം|രാത്രി/i,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'രാത്രി' && hour >= 4 || meridiem === 'ഉച്ച കഴിഞ്ഞ്' || meridiem === 'വൈകുന്നേരം') {
                return hour + 12;
            } else {
                return hour;
            }
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'രാത്രി';
            } else if (hour < 12) {
                return 'രാവിലെ';
            } else if (hour < 17) {
                return 'ഉച്ച കഴിഞ്ഞ്';
            } else if (hour < 20) {
                return 'വൈകുന്നേരം';
            } else {
                return 'രാത്രി';
            }
        }
    });

    return ml;
});

/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Marathi [mr]
//! author : Harshad Kale : https://github.com/kalehv
//! author : Vivek Athalye : https://github.com/vnathalye

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    var symbolMap = {
        '1': '१',
        '2': '२',
        '3': '३',
        '4': '४',
        '5': '५',
        '6': '६',
        '7': '७',
        '8': '८',
        '9': '९',
        '0': '०'
    };
    var numberMap = {
        '१': '1',
        '२': '2',
        '३': '3',
        '४': '4',
        '५': '5',
        '६': '6',
        '७': '7',
        '८': '8',
        '९': '9',
        '०': '0'
    };

    function relativeTimeMr(number, withoutSuffix, string, isFuture) {
        var output = '';
        if (withoutSuffix) {
            switch (string) {
                case 's':
                    output = 'काही सेकंद';break;
                case 'm':
                    output = 'एक मिनिट';break;
                case 'mm':
                    output = '%d मिनिटे';break;
                case 'h':
                    output = 'एक तास';break;
                case 'hh':
                    output = '%d तास';break;
                case 'd':
                    output = 'एक दिवस';break;
                case 'dd':
                    output = '%d दिवस';break;
                case 'M':
                    output = 'एक महिना';break;
                case 'MM':
                    output = '%d महिने';break;
                case 'y':
                    output = 'एक वर्ष';break;
                case 'yy':
                    output = '%d वर्षे';break;
            }
        } else {
            switch (string) {
                case 's':
                    output = 'काही सेकंदां';break;
                case 'm':
                    output = 'एका मिनिटा';break;
                case 'mm':
                    output = '%d मिनिटां';break;
                case 'h':
                    output = 'एका तासा';break;
                case 'hh':
                    output = '%d तासां';break;
                case 'd':
                    output = 'एका दिवसा';break;
                case 'dd':
                    output = '%d दिवसां';break;
                case 'M':
                    output = 'एका महिन्या';break;
                case 'MM':
                    output = '%d महिन्यां';break;
                case 'y':
                    output = 'एका वर्षा';break;
                case 'yy':
                    output = '%d वर्षां';break;
            }
        }
        return output.replace(/%d/i, number);
    }

    var mr = moment.defineLocale('mr', {
        months: 'जानेवारी_फेब्रुवारी_मार्च_एप्रिल_मे_जून_जुलै_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर'.split('_'),
        monthsShort: 'जाने._फेब्रु._मार्च._एप्रि._मे._जून._जुलै._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.'.split('_'),
        monthsParseExact: true,
        weekdays: 'रविवार_सोमवार_मंगळवार_बुधवार_गुरूवार_शुक्रवार_शनिवार'.split('_'),
        weekdaysShort: 'रवि_सोम_मंगळ_बुध_गुरू_शुक्र_शनि'.split('_'),
        weekdaysMin: 'र_सो_मं_बु_गु_शु_श'.split('_'),
        longDateFormat: {
            LT: 'A h:mm वाजता',
            LTS: 'A h:mm:ss वाजता',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, A h:mm वाजता',
            LLLL: 'dddd, D MMMM YYYY, A h:mm वाजता'
        },
        calendar: {
            sameDay: '[आज] LT',
            nextDay: '[उद्या] LT',
            nextWeek: 'dddd, LT',
            lastDay: '[काल] LT',
            lastWeek: '[मागील] dddd, LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: '%sमध्ये',
            past: '%sपूर्वी',
            s: relativeTimeMr,
            m: relativeTimeMr,
            mm: relativeTimeMr,
            h: relativeTimeMr,
            hh: relativeTimeMr,
            d: relativeTimeMr,
            dd: relativeTimeMr,
            M: relativeTimeMr,
            MM: relativeTimeMr,
            y: relativeTimeMr,
            yy: relativeTimeMr
        },
        preparse: function (string) {
            return string.replace(/[१२३४५६७८९०]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        meridiemParse: /रात्री|सकाळी|दुपारी|सायंकाळी/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'रात्री') {
                return hour < 4 ? hour : hour + 12;
            } else if (meridiem === 'सकाळी') {
                return hour;
            } else if (meridiem === 'दुपारी') {
                return hour >= 10 ? hour : hour + 12;
            } else if (meridiem === 'सायंकाळी') {
                return hour + 12;
            }
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'रात्री';
            } else if (hour < 10) {
                return 'सकाळी';
            } else if (hour < 17) {
                return 'दुपारी';
            } else if (hour < 20) {
                return 'सायंकाळी';
            } else {
                return 'रात्री';
            }
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 6 // The week that contains Jan 1st is the first week of the year.
        }
    });

    return mr;
});

/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Malay [ms]
//! author : Weldan Jamili : https://github.com/weldan

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    var ms = moment.defineLocale('ms', {
        months: 'Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember'.split('_'),
        monthsShort: 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis'.split('_'),
        weekdays: 'Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu'.split('_'),
        weekdaysShort: 'Ahd_Isn_Sel_Rab_Kha_Jum_Sab'.split('_'),
        weekdaysMin: 'Ah_Is_Sl_Rb_Km_Jm_Sb'.split('_'),
        longDateFormat: {
            LT: 'HH.mm',
            LTS: 'HH.mm.ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY [pukul] HH.mm',
            LLLL: 'dddd, D MMMM YYYY [pukul] HH.mm'
        },
        meridiemParse: /pagi|tengahari|petang|malam/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'pagi') {
                return hour;
            } else if (meridiem === 'tengahari') {
                return hour >= 11 ? hour : hour + 12;
            } else if (meridiem === 'petang' || meridiem === 'malam') {
                return hour + 12;
            }
        },
        meridiem: function (hours, minutes, isLower) {
            if (hours < 11) {
                return 'pagi';
            } else if (hours < 15) {
                return 'tengahari';
            } else if (hours < 19) {
                return 'petang';
            } else {
                return 'malam';
            }
        },
        calendar: {
            sameDay: '[Hari ini pukul] LT',
            nextDay: '[Esok pukul] LT',
            nextWeek: 'dddd [pukul] LT',
            lastDay: '[Kelmarin pukul] LT',
            lastWeek: 'dddd [lepas pukul] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'dalam %s',
            past: '%s yang lepas',
            s: 'beberapa saat',
            m: 'seminit',
            mm: '%d minit',
            h: 'sejam',
            hh: '%d jam',
            d: 'sehari',
            dd: '%d hari',
            M: 'sebulan',
            MM: '%d bulan',
            y: 'setahun',
            yy: '%d tahun'
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 1st is the first week of the year.
        }
    });

    return ms;
});

/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Malay [ms-my]
//! note : DEPRECATED, the correct one is [ms]
//! author : Weldan Jamili : https://github.com/weldan

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    var msMy = moment.defineLocale('ms-my', {
        months: 'Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember'.split('_'),
        monthsShort: 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis'.split('_'),
        weekdays: 'Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu'.split('_'),
        weekdaysShort: 'Ahd_Isn_Sel_Rab_Kha_Jum_Sab'.split('_'),
        weekdaysMin: 'Ah_Is_Sl_Rb_Km_Jm_Sb'.split('_'),
        longDateFormat: {
            LT: 'HH.mm',
            LTS: 'HH.mm.ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY [pukul] HH.mm',
            LLLL: 'dddd, D MMMM YYYY [pukul] HH.mm'
        },
        meridiemParse: /pagi|tengahari|petang|malam/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'pagi') {
                return hour;
            } else if (meridiem === 'tengahari') {
                return hour >= 11 ? hour : hour + 12;
            } else if (meridiem === 'petang' || meridiem === 'malam') {
                return hour + 12;
            }
        },
        meridiem: function (hours, minutes, isLower) {
            if (hours < 11) {
                return 'pagi';
            } else if (hours < 15) {
                return 'tengahari';
            } else if (hours < 19) {
                return 'petang';
            } else {
                return 'malam';
            }
        },
        calendar: {
            sameDay: '[Hari ini pukul] LT',
            nextDay: '[Esok pukul] LT',
            nextWeek: 'dddd [pukul] LT',
            lastDay: '[Kelmarin pukul] LT',
            lastWeek: 'dddd [lepas pukul] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'dalam %s',
            past: '%s yang lepas',
            s: 'beberapa saat',
            m: 'seminit',
            mm: '%d minit',
            h: 'sejam',
            hh: '%d jam',
            d: 'sehari',
            dd: '%d hari',
            M: 'sebulan',
            MM: '%d bulan',
            y: 'setahun',
            yy: '%d tahun'
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 1st is the first week of the year.
        }
    });

    return msMy;
});

/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Burmese [my]
//! author : Squar team, mysquar.com
//! author : David Rossellat : https://github.com/gholadr
//! author : Tin Aung Lin : https://github.com/thanyawzinmin

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    var symbolMap = {
        '1': '၁',
        '2': '၂',
        '3': '၃',
        '4': '၄',
        '5': '၅',
        '6': '၆',
        '7': '၇',
        '8': '၈',
        '9': '၉',
        '0': '၀'
    };
    var numberMap = {
        '၁': '1',
        '၂': '2',
        '၃': '3',
        '၄': '4',
        '၅': '5',
        '၆': '6',
        '၇': '7',
        '၈': '8',
        '၉': '9',
        '၀': '0'
    };

    var my = moment.defineLocale('my', {
        months: 'ဇန်နဝါရီ_ဖေဖော်ဝါရီ_မတ်_ဧပြီ_မေ_ဇွန်_ဇူလိုင်_သြဂုတ်_စက်တင်ဘာ_အောက်တိုဘာ_နိုဝင်ဘာ_ဒီဇင်ဘာ'.split('_'),
        monthsShort: 'ဇန်_ဖေ_မတ်_ပြီ_မေ_ဇွန်_လိုင်_သြ_စက်_အောက်_နို_ဒီ'.split('_'),
        weekdays: 'တနင်္ဂနွေ_တနင်္လာ_အင်္ဂါ_ဗုဒ္ဓဟူး_ကြာသပတေး_သောကြာ_စနေ'.split('_'),
        weekdaysShort: 'နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ'.split('_'),
        weekdaysMin: 'နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ'.split('_'),

        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[ယနေ.] LT [မှာ]',
            nextDay: '[မနက်ဖြန်] LT [မှာ]',
            nextWeek: 'dddd LT [မှာ]',
            lastDay: '[မနေ.က] LT [မှာ]',
            lastWeek: '[ပြီးခဲ့သော] dddd LT [မှာ]',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'လာမည့် %s မှာ',
            past: 'လွန်ခဲ့သော %s က',
            s: 'စက္ကန်.အနည်းငယ်',
            m: 'တစ်မိနစ်',
            mm: '%d မိနစ်',
            h: 'တစ်နာရီ',
            hh: '%d နာရီ',
            d: 'တစ်ရက်',
            dd: '%d ရက်',
            M: 'တစ်လ',
            MM: '%d လ',
            y: 'တစ်နှစ်',
            yy: '%d နှစ်'
        },
        preparse: function (string) {
            return string.replace(/[၁၂၃၄၅၆၇၈၉၀]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 1st is the first week of the year.
        }
    });

    return my;
});

/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Norwegian Bokmål [nb]
//! authors : Espen Hovlandsdal : https://github.com/rexxars
//!           Sigurd Gartmann : https://github.com/sigurdga

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    var nb = moment.defineLocale('nb', {
        months: 'januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember'.split('_'),
        monthsShort: 'jan._feb._mars_april_mai_juni_juli_aug._sep._okt._nov._des.'.split('_'),
        monthsParseExact: true,
        weekdays: 'søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag'.split('_'),
        weekdaysShort: 'sø._ma._ti._on._to._fr._lø.'.split('_'),
        weekdaysMin: 'sø_ma_ti_on_to_fr_lø'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY [kl.] HH:mm',
            LLLL: 'dddd D. MMMM YYYY [kl.] HH:mm'
        },
        calendar: {
            sameDay: '[i dag kl.] LT',
            nextDay: '[i morgen kl.] LT',
            nextWeek: 'dddd [kl.] LT',
            lastDay: '[i går kl.] LT',
            lastWeek: '[forrige] dddd [kl.] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'om %s',
            past: '%s siden',
            s: 'noen sekunder',
            m: 'ett minutt',
            mm: '%d minutter',
            h: 'en time',
            hh: '%d timer',
            d: 'en dag',
            dd: '%d dager',
            M: 'en måned',
            MM: '%d måneder',
            y: 'ett år',
            yy: '%d år'
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    return nb;
});

/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Nepalese [ne]
//! author : suvash : https://github.com/suvash

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    var symbolMap = {
        '1': '१',
        '2': '२',
        '3': '३',
        '4': '४',
        '5': '५',
        '6': '६',
        '7': '७',
        '8': '८',
        '9': '९',
        '0': '०'
    };
    var numberMap = {
        '१': '1',
        '२': '2',
        '३': '3',
        '४': '4',
        '५': '5',
        '६': '6',
        '७': '7',
        '८': '8',
        '९': '9',
        '०': '0'
    };

    var ne = moment.defineLocale('ne', {
        months: 'जनवरी_फेब्रुवरी_मार्च_अप्रिल_मई_जुन_जुलाई_अगष्ट_सेप्टेम्बर_अक्टोबर_नोभेम्बर_डिसेम्बर'.split('_'),
        monthsShort: 'जन._फेब्रु._मार्च_अप्रि._मई_जुन_जुलाई._अग._सेप्ट._अक्टो._नोभे._डिसे.'.split('_'),
        monthsParseExact: true,
        weekdays: 'आइतबार_सोमबार_मङ्गलबार_बुधबार_बिहिबार_शुक्रबार_शनिबार'.split('_'),
        weekdaysShort: 'आइत._सोम._मङ्गल._बुध._बिहि._शुक्र._शनि.'.split('_'),
        weekdaysMin: 'आ._सो._मं._बु._बि._शु._श.'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'Aको h:mm बजे',
            LTS: 'Aको h:mm:ss बजे',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, Aको h:mm बजे',
            LLLL: 'dddd, D MMMM YYYY, Aको h:mm बजे'
        },
        preparse: function (string) {
            return string.replace(/[१२३४५६७८९०]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        meridiemParse: /राति|बिहान|दिउँसो|साँझ/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'राति') {
                return hour < 4 ? hour : hour + 12;
            } else if (meridiem === 'बिहान') {
                return hour;
            } else if (meridiem === 'दिउँसो') {
                return hour >= 10 ? hour : hour + 12;
            } else if (meridiem === 'साँझ') {
                return hour + 12;
            }
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 3) {
                return 'राति';
            } else if (hour < 12) {
                return 'बिहान';
            } else if (hour < 16) {
                return 'दिउँसो';
            } else if (hour < 20) {
                return 'साँझ';
            } else {
                return 'राति';
            }
        },
        calendar: {
            sameDay: '[आज] LT',
            nextDay: '[भोलि] LT',
            nextWeek: '[आउँदो] dddd[,] LT',
            lastDay: '[हिजो] LT',
            lastWeek: '[गएको] dddd[,] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: '%sमा',
            past: '%s अगाडि',
            s: 'केही क्षण',
            m: 'एक मिनेट',
            mm: '%d मिनेट',
            h: 'एक घण्टा',
            hh: '%d घण्टा',
            d: 'एक दिन',
            dd: '%d दिन',
            M: 'एक महिना',
            MM: '%d महिना',
            y: 'एक बर्ष',
            yy: '%d बर्ष'
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 6 // The week that contains Jan 1st is the first week of the year.
        }
    });

    return ne;
});

/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Dutch [nl]
//! author : Joris Röling : https://github.com/jorisroling
//! author : Jacob Middag : https://github.com/middagj

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    var monthsShortWithDots = 'jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.'.split('_');
    var monthsShortWithoutDots = 'jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec'.split('_');

    var monthsParse = [/^jan/i, /^feb/i, /^maart|mrt.?$/i, /^apr/i, /^mei$/i, /^jun[i.]?$/i, /^jul[i.]?$/i, /^aug/i, /^sep/i, /^okt/i, /^nov/i, /^dec/i];
    var monthsRegex = /^(januari|februari|maart|april|mei|april|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;

    var nl = moment.defineLocale('nl', {
        months: 'januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december'.split('_'),
        monthsShort: function (m, format) {
            if (!m) {
                return monthsShortWithDots;
            } else if (/-MMM-/.test(format)) {
                return monthsShortWithoutDots[m.month()];
            } else {
                return monthsShortWithDots[m.month()];
            }
        },

        monthsRegex: monthsRegex,
        monthsShortRegex: monthsRegex,
        monthsStrictRegex: /^(januari|februari|maart|mei|ju[nl]i|april|augustus|september|oktober|november|december)/i,
        monthsShortStrictRegex: /^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,

        monthsParse: monthsParse,
        longMonthsParse: monthsParse,
        shortMonthsParse: monthsParse,

        weekdays: 'zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag'.split('_'),
        weekdaysShort: 'zo._ma._di._wo._do._vr._za.'.split('_'),
        weekdaysMin: 'zo_ma_di_wo_do_vr_za'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD-MM-YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[vandaag om] LT',
            nextDay: '[morgen om] LT',
            nextWeek: 'dddd [om] LT',
            lastDay: '[gisteren om] LT',
            lastWeek: '[afgelopen] dddd [om] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'over %s',
            past: '%s geleden',
            s: 'een paar seconden',
            m: 'één minuut',
            mm: '%d minuten',
            h: 'één uur',
            hh: '%d uur',
            d: 'één dag',
            dd: '%d dagen',
            M: 'één maand',
            MM: '%d maanden',
            y: 'één jaar',
            yy: '%d jaar'
        },
        dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
        ordinal: function (number) {
            return number + (number === 1 || number === 8 || number >= 20 ? 'ste' : 'de');
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    return nl;
});

/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Dutch (Belgium) [nl-be]
//! author : Joris Röling : https://github.com/jorisroling
//! author : Jacob Middag : https://github.com/middagj

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    var monthsShortWithDots = 'jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.'.split('_');
    var monthsShortWithoutDots = 'jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec'.split('_');

    var monthsParse = [/^jan/i, /^feb/i, /^maart|mrt.?$/i, /^apr/i, /^mei$/i, /^jun[i.]?$/i, /^jul[i.]?$/i, /^aug/i, /^sep/i, /^okt/i, /^nov/i, /^dec/i];
    var monthsRegex = /^(januari|februari|maart|april|mei|april|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;

    var nlBe = moment.defineLocale('nl-be', {
        months: 'januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december'.split('_'),
        monthsShort: function (m, format) {
            if (!m) {
                return monthsShortWithDots;
            } else if (/-MMM-/.test(format)) {
                return monthsShortWithoutDots[m.month()];
            } else {
                return monthsShortWithDots[m.month()];
            }
        },

        monthsRegex: monthsRegex,
        monthsShortRegex: monthsRegex,
        monthsStrictRegex: /^(januari|februari|maart|mei|ju[nl]i|april|augustus|september|oktober|november|december)/i,
        monthsShortStrictRegex: /^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,

        monthsParse: monthsParse,
        longMonthsParse: monthsParse,
        shortMonthsParse: monthsParse,

        weekdays: 'zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag'.split('_'),
        weekdaysShort: 'zo._ma._di._wo._do._vr._za.'.split('_'),
        weekdaysMin: 'zo_ma_di_wo_do_vr_za'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[vandaag om] LT',
            nextDay: '[morgen om] LT',
            nextWeek: 'dddd [om] LT',
            lastDay: '[gisteren om] LT',
            lastWeek: '[afgelopen] dddd [om] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'over %s',
            past: '%s geleden',
            s: 'een paar seconden',
            m: 'één minuut',
            mm: '%d minuten',
            h: 'één uur',
            hh: '%d uur',
            d: 'één dag',
            dd: '%d dagen',
            M: 'één maand',
            MM: '%d maanden',
            y: 'één jaar',
            yy: '%d jaar'
        },
        dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
        ordinal: function (number) {
            return number + (number === 1 || number === 8 || number >= 20 ? 'ste' : 'de');
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    return nlBe;
});

/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Nynorsk [nn]
//! author : https://github.com/mechuwind

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    var nn = moment.defineLocale('nn', {
        months: 'januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember'.split('_'),
        monthsShort: 'jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_'),
        weekdays: 'sundag_måndag_tysdag_onsdag_torsdag_fredag_laurdag'.split('_'),
        weekdaysShort: 'sun_mån_tys_ons_tor_fre_lau'.split('_'),
        weekdaysMin: 'su_må_ty_on_to_fr_lø'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY [kl.] H:mm',
            LLLL: 'dddd D. MMMM YYYY [kl.] HH:mm'
        },
        calendar: {
            sameDay: '[I dag klokka] LT',
            nextDay: '[I morgon klokka] LT',
            nextWeek: 'dddd [klokka] LT',
            lastDay: '[I går klokka] LT',
            lastWeek: '[Føregåande] dddd [klokka] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'om %s',
            past: '%s sidan',
            s: 'nokre sekund',
            m: 'eit minutt',
            mm: '%d minutt',
            h: 'ein time',
            hh: '%d timar',
            d: 'ein dag',
            dd: '%d dagar',
            M: 'ein månad',
            MM: '%d månader',
            y: 'eit år',
            yy: '%d år'
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    return nn;
});

/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Punjabi (India) [pa-in]
//! author : Harpreet Singh : https://github.com/harpreetkhalsagtbit

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    var symbolMap = {
        '1': '੧',
        '2': '੨',
        '3': '੩',
        '4': '੪',
        '5': '੫',
        '6': '੬',
        '7': '੭',
        '8': '੮',
        '9': '੯',
        '0': '੦'
    };
    var numberMap = {
        '੧': '1',
        '੨': '2',
        '੩': '3',
        '੪': '4',
        '੫': '5',
        '੬': '6',
        '੭': '7',
        '੮': '8',
        '੯': '9',
        '੦': '0'
    };

    var paIn = moment.defineLocale('pa-in', {
        // There are months name as per Nanakshahi Calender but they are not used as rigidly in modern Punjabi.
        months: 'ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ'.split('_'),
        monthsShort: 'ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ'.split('_'),
        weekdays: 'ਐਤਵਾਰ_ਸੋਮਵਾਰ_ਮੰਗਲਵਾਰ_ਬੁਧਵਾਰ_ਵੀਰਵਾਰ_ਸ਼ੁੱਕਰਵਾਰ_ਸ਼ਨੀਚਰਵਾਰ'.split('_'),
        weekdaysShort: 'ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ'.split('_'),
        weekdaysMin: 'ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ'.split('_'),
        longDateFormat: {
            LT: 'A h:mm ਵਜੇ',
            LTS: 'A h:mm:ss ਵਜੇ',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, A h:mm ਵਜੇ',
            LLLL: 'dddd, D MMMM YYYY, A h:mm ਵਜੇ'
        },
        calendar: {
            sameDay: '[ਅਜ] LT',
            nextDay: '[ਕਲ] LT',
            nextWeek: 'dddd, LT',
            lastDay: '[ਕਲ] LT',
            lastWeek: '[ਪਿਛਲੇ] dddd, LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: '%s ਵਿੱਚ',
            past: '%s ਪਿਛਲੇ',
            s: 'ਕੁਝ ਸਕਿੰਟ',
            m: 'ਇਕ ਮਿੰਟ',
            mm: '%d ਮਿੰਟ',
            h: 'ਇੱਕ ਘੰਟਾ',
            hh: '%d ਘੰਟੇ',
            d: 'ਇੱਕ ਦਿਨ',
            dd: '%d ਦਿਨ',
            M: 'ਇੱਕ ਮਹੀਨਾ',
            MM: '%d ਮਹੀਨੇ',
            y: 'ਇੱਕ ਸਾਲ',
            yy: '%d ਸਾਲ'
        },
        preparse: function (string) {
            return string.replace(/[੧੨੩੪੫੬੭੮੯੦]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        // Punjabi notation for meridiems are quite fuzzy in practice. While there exists
        // a rigid notion of a 'Pahar' it is not used as rigidly in modern Punjabi.
        meridiemParse: /ਰਾਤ|ਸਵੇਰ|ਦੁਪਹਿਰ|ਸ਼ਾਮ/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'ਰਾਤ') {
                return hour < 4 ? hour : hour + 12;
            } else if (meridiem === 'ਸਵੇਰ') {
                return hour;
            } else if (meridiem === 'ਦੁਪਹਿਰ') {
                return hour >= 10 ? hour : hour + 12;
            } else if (meridiem === 'ਸ਼ਾਮ') {
                return hour + 12;
            }
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'ਰਾਤ';
            } else if (hour < 10) {
                return 'ਸਵੇਰ';
            } else if (hour < 17) {
                return 'ਦੁਪਹਿਰ';
            } else if (hour < 20) {
                return 'ਸ਼ਾਮ';
            } else {
                return 'ਰਾਤ';
            }
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 6 // The week that contains Jan 1st is the first week of the year.
        }
    });

    return paIn;
});

/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Polish [pl]
//! author : Rafal Hirsz : https://github.com/evoL

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    var monthsNominative = 'styczeń_luty_marzec_kwiecień_maj_czerwiec_lipiec_sierpień_wrzesień_październik_listopad_grudzień'.split('_');
    var monthsSubjective = 'stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_września_października_listopada_grudnia'.split('_');
    function plural(n) {
        return n % 10 < 5 && n % 10 > 1 && ~~(n / 10) % 10 !== 1;
    }
    function translate(number, withoutSuffix, key) {
        var result = number + ' ';
        switch (key) {
            case 'm':
                return withoutSuffix ? 'minuta' : 'minutę';
            case 'mm':
                return result + (plural(number) ? 'minuty' : 'minut');
            case 'h':
                return withoutSuffix ? 'godzina' : 'godzinę';
            case 'hh':
                return result + (plural(number) ? 'godziny' : 'godzin');
            case 'MM':
                return result + (plural(number) ? 'miesiące' : 'miesięcy');
            case 'yy':
                return result + (plural(number) ? 'lata' : 'lat');
        }
    }

    var pl = moment.defineLocale('pl', {
        months: function (momentToFormat, format) {
            if (!momentToFormat) {
                return monthsNominative;
            } else if (format === '') {
                // Hack: if format empty we know this is used to generate
                // RegExp by moment. Give then back both valid forms of months
                // in RegExp ready format.
                return '(' + monthsSubjective[momentToFormat.month()] + '|' + monthsNominative[momentToFormat.month()] + ')';
            } else if (/D MMMM/.test(format)) {
                return monthsSubjective[momentToFormat.month()];
            } else {
                return monthsNominative[momentToFormat.month()];
            }
        },
        monthsShort: 'sty_lut_mar_kwi_maj_cze_lip_sie_wrz_paź_lis_gru'.split('_'),
        weekdays: 'niedziela_poniedziałek_wtorek_środa_czwartek_piątek_sobota'.split('_'),
        weekdaysShort: 'ndz_pon_wt_śr_czw_pt_sob'.split('_'),
        weekdaysMin: 'Nd_Pn_Wt_Śr_Cz_Pt_So'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[Dziś o] LT',
            nextDay: '[Jutro o] LT',
            nextWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[W niedzielę o] LT';

                    case 2:
                        return '[We wtorek o] LT';

                    case 3:
                        return '[W środę o] LT';

                    case 6:
                        return '[W sobotę o] LT';

                    default:
                        return '[W] dddd [o] LT';
                }
            },
            lastDay: '[Wczoraj o] LT',
            lastWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[W zeszłą niedzielę o] LT';
                    case 3:
                        return '[W zeszłą środę o] LT';
                    case 6:
                        return '[W zeszłą sobotę o] LT';
                    default:
                        return '[W zeszły] dddd [o] LT';
                }
            },
            sameElse: 'L'
        },
        relativeTime: {
            future: 'za %s',
            past: '%s temu',
            s: 'kilka sekund',
            m: translate,
            mm: translate,
            h: translate,
            hh: translate,
            d: '1 dzień',
            dd: '%d dni',
            M: 'miesiąc',
            MM: translate,
            y: 'rok',
            yy: translate
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    return pl;
});

/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Portuguese [pt]
//! author : Jefferson : https://github.com/jalex79

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    var pt = moment.defineLocale('pt', {
        months: 'janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro'.split('_'),
        monthsShort: 'jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez'.split('_'),
        weekdays: 'Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado'.split('_'),
        weekdaysShort: 'Dom_Seg_Ter_Qua_Qui_Sex_Sáb'.split('_'),
        weekdaysMin: 'Do_2ª_3ª_4ª_5ª_6ª_Sá'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D [de] MMMM [de] YYYY',
            LLL: 'D [de] MMMM [de] YYYY HH:mm',
            LLLL: 'dddd, D [de] MMMM [de] YYYY HH:mm'
        },
        calendar: {
            sameDay: '[Hoje às] LT',
            nextDay: '[Amanhã às] LT',
            nextWeek: 'dddd [às] LT',
            lastDay: '[Ontem às] LT',
            lastWeek: function () {
                return this.day() === 0 || this.day() === 6 ? '[Último] dddd [às] LT' : // Saturday + Sunday
                '[Última] dddd [às] LT'; // Monday - Friday
            },
            sameElse: 'L'
        },
        relativeTime: {
            future: 'em %s',
            past: 'há %s',
            s: 'segundos',
            m: 'um minuto',
            mm: '%d minutos',
            h: 'uma hora',
            hh: '%d horas',
            d: 'um dia',
            dd: '%d dias',
            M: 'um mês',
            MM: '%d meses',
            y: 'um ano',
            yy: '%d anos'
        },
        dayOfMonthOrdinalParse: /\d{1,2}º/,
        ordinal: '%dº',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    return pt;
});

/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Portuguese (Brazil) [pt-br]
//! author : Caio Ribeiro Pereira : https://github.com/caio-ribeiro-pereira

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    var ptBr = moment.defineLocale('pt-br', {
        months: 'janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro'.split('_'),
        monthsShort: 'jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez'.split('_'),
        weekdays: 'Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado'.split('_'),
        weekdaysShort: 'Dom_Seg_Ter_Qua_Qui_Sex_Sáb'.split('_'),
        weekdaysMin: 'Do_2ª_3ª_4ª_5ª_6ª_Sá'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D [de] MMMM [de] YYYY',
            LLL: 'D [de] MMMM [de] YYYY [às] HH:mm',
            LLLL: 'dddd, D [de] MMMM [de] YYYY [às] HH:mm'
        },
        calendar: {
            sameDay: '[Hoje às] LT',
            nextDay: '[Amanhã às] LT',
            nextWeek: 'dddd [às] LT',
            lastDay: '[Ontem às] LT',
            lastWeek: function () {
                return this.day() === 0 || this.day() === 6 ? '[Último] dddd [às] LT' : // Saturday + Sunday
                '[Última] dddd [às] LT'; // Monday - Friday
            },
            sameElse: 'L'
        },
        relativeTime: {
            future: 'em %s',
            past: '%s atrás',
            s: 'poucos segundos',
            ss: '%d segundos',
            m: 'um minuto',
            mm: '%d minutos',
            h: 'uma hora',
            hh: '%d horas',
            d: 'um dia',
            dd: '%d dias',
            M: 'um mês',
            MM: '%d meses',
            y: 'um ano',
            yy: '%d anos'
        },
        dayOfMonthOrdinalParse: /\d{1,2}º/,
        ordinal: '%dº'
    });

    return ptBr;
});

/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Romanian [ro]
//! author : Vlad Gurdiga : https://github.com/gurdiga
//! author : Valentin Agachi : https://github.com/avaly

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    function relativeTimeWithPlural(number, withoutSuffix, key) {
        var format = {
            'mm': 'minute',
            'hh': 'ore',
            'dd': 'zile',
            'MM': 'luni',
            'yy': 'ani'
        },
            separator = ' ';
        if (number % 100 >= 20 || number >= 100 && number % 100 === 0) {
            separator = ' de ';
        }
        return number + separator + format[key];
    }

    var ro = moment.defineLocale('ro', {
        months: 'ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie'.split('_'),
        monthsShort: 'ian._febr._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.'.split('_'),
        monthsParseExact: true,
        weekdays: 'duminică_luni_marți_miercuri_joi_vineri_sâmbătă'.split('_'),
        weekdaysShort: 'Dum_Lun_Mar_Mie_Joi_Vin_Sâm'.split('_'),
        weekdaysMin: 'Du_Lu_Ma_Mi_Jo_Vi_Sâ'.split('_'),
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY H:mm',
            LLLL: 'dddd, D MMMM YYYY H:mm'
        },
        calendar: {
            sameDay: '[azi la] LT',
            nextDay: '[mâine la] LT',
            nextWeek: 'dddd [la] LT',
            lastDay: '[ieri la] LT',
            lastWeek: '[fosta] dddd [la] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'peste %s',
            past: '%s în urmă',
            s: 'câteva secunde',
            m: 'un minut',
            mm: relativeTimeWithPlural,
            h: 'o oră',
            hh: relativeTimeWithPlural,
            d: 'o zi',
            dd: relativeTimeWithPlural,
            M: 'o lună',
            MM: relativeTimeWithPlural,
            y: 'un an',
            yy: relativeTimeWithPlural
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 1st is the first week of the year.
        }
    });

    return ro;
});

/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Russian [ru]
//! author : Viktorminator : https://github.com/Viktorminator
//! Author : Menelion Elensúle : https://github.com/Oire
//! author : Коренберг Марк : https://github.com/socketpair

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    function plural(word, num) {
        var forms = word.split('_');
        return num % 10 === 1 && num % 100 !== 11 ? forms[0] : num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2];
    }
    function relativeTimeWithPlural(number, withoutSuffix, key) {
        var format = {
            'mm': withoutSuffix ? 'минута_минуты_минут' : 'минуту_минуты_минут',
            'hh': 'час_часа_часов',
            'dd': 'день_дня_дней',
            'MM': 'месяц_месяца_месяцев',
            'yy': 'год_года_лет'
        };
        if (key === 'm') {
            return withoutSuffix ? 'минута' : 'минуту';
        } else {
            return number + ' ' + plural(format[key], +number);
        }
    }
    var monthsParse = [/^янв/i, /^фев/i, /^мар/i, /^апр/i, /^ма[йя]/i, /^июн/i, /^июл/i, /^авг/i, /^сен/i, /^окт/i, /^ноя/i, /^дек/i];

    // http://new.gramota.ru/spravka/rules/139-prop : § 103
    // Сокращения месяцев: http://new.gramota.ru/spravka/buro/search-answer?s=242637
    // CLDR data:          http://www.unicode.org/cldr/charts/28/summary/ru.html#1753
    var ru = moment.defineLocale('ru', {
        months: {
            format: 'января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря'.split('_'),
            standalone: 'январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь'.split('_')
        },
        monthsShort: {
            // по CLDR именно "июл." и "июн.", но какой смысл менять букву на точку ?
            format: 'янв._февр._мар._апр._мая_июня_июля_авг._сент._окт._нояб._дек.'.split('_'),
            standalone: 'янв._февр._март_апр._май_июнь_июль_авг._сент._окт._нояб._дек.'.split('_')
        },
        weekdays: {
            standalone: 'воскресенье_понедельник_вторник_среда_четверг_пятница_суббота'.split('_'),
            format: 'воскресенье_понедельник_вторник_среду_четверг_пятницу_субботу'.split('_'),
            isFormat: /\[ ?[Вв] ?(?:прошлую|следующую|эту)? ?\] ?dddd/
        },
        weekdaysShort: 'вс_пн_вт_ср_чт_пт_сб'.split('_'),
        weekdaysMin: 'вс_пн_вт_ср_чт_пт_сб'.split('_'),
        monthsParse: monthsParse,
        longMonthsParse: monthsParse,
        shortMonthsParse: monthsParse,

        // полные названия с падежами, по три буквы, для некоторых, по 4 буквы, сокращения с точкой и без точки
        monthsRegex: /^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,

        // копия предыдущего
        monthsShortRegex: /^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,

        // полные названия с падежами
        monthsStrictRegex: /^(январ[яь]|феврал[яь]|марта?|апрел[яь]|ма[яй]|июн[яь]|июл[яь]|августа?|сентябр[яь]|октябр[яь]|ноябр[яь]|декабр[яь])/i,

        // Выражение, которое соотвествует только сокращённым формам
        monthsShortStrictRegex: /^(янв\.|февр?\.|мар[т.]|апр\.|ма[яй]|июн[ья.]|июл[ья.]|авг\.|сент?\.|окт\.|нояб?\.|дек\.)/i,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY г.',
            LLL: 'D MMMM YYYY г., HH:mm',
            LLLL: 'dddd, D MMMM YYYY г., HH:mm'
        },
        calendar: {
            sameDay: '[Сегодня в] LT',
            nextDay: '[Завтра в] LT',
            lastDay: '[Вчера в] LT',
            nextWeek: function (now) {
                if (now.week() !== this.week()) {
                    switch (this.day()) {
                        case 0:
                            return '[В следующее] dddd [в] LT';
                        case 1:
                        case 2:
                        case 4:
                            return '[В следующий] dddd [в] LT';
                        case 3:
                        case 5:
                        case 6:
                            return '[В следующую] dddd [в] LT';
                    }
                } else {
                    if (this.day() === 2) {
                        return '[Во] dddd [в] LT';
                    } else {
                        return '[В] dddd [в] LT';
                    }
                }
            },
            lastWeek: function (now) {
                if (now.week() !== this.week()) {
                    switch (this.day()) {
                        case 0:
                            return '[В прошлое] dddd [в] LT';
                        case 1:
                        case 2:
                        case 4:
                            return '[В прошлый] dddd [в] LT';
                        case 3:
                        case 5:
                        case 6:
                            return '[В прошлую] dddd [в] LT';
                    }
                } else {
                    if (this.day() === 2) {
                        return '[Во] dddd [в] LT';
                    } else {
                        return '[В] dddd [в] LT';
                    }
                }
            },
            sameElse: 'L'
        },
        relativeTime: {
            future: 'через %s',
            past: '%s назад',
            s: 'несколько секунд',
            m: relativeTimeWithPlural,
            mm: relativeTimeWithPlural,
            h: 'час',
            hh: relativeTimeWithPlural,
            d: 'день',
            dd: relativeTimeWithPlural,
            M: 'месяц',
            MM: relativeTimeWithPlural,
            y: 'год',
            yy: relativeTimeWithPlural
        },
        meridiemParse: /ночи|утра|дня|вечера/i,
        isPM: function (input) {
            return (/^(дня|вечера)$/.test(input)
            );
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'ночи';
            } else if (hour < 12) {
                return 'утра';
            } else if (hour < 17) {
                return 'дня';
            } else {
                return 'вечера';
            }
        },
        dayOfMonthOrdinalParse: /\d{1,2}-(й|го|я)/,
        ordinal: function (number, period) {
            switch (period) {
                case 'M':
                case 'd':
                case 'DDD':
                    return number + '-й';
                case 'D':
                    return number + '-го';
                case 'w':
                case 'W':
                    return number + '-я';
                default:
                    return number;
            }
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    return ru;
});

/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Sindhi [sd]
//! author : Narain Sagar : https://github.com/narainsagar

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    var months = ['جنوري', 'فيبروري', 'مارچ', 'اپريل', 'مئي', 'جون', 'جولاءِ', 'آگسٽ', 'سيپٽمبر', 'آڪٽوبر', 'نومبر', 'ڊسمبر'];
    var days = ['آچر', 'سومر', 'اڱارو', 'اربع', 'خميس', 'جمع', 'ڇنڇر'];

    var sd = moment.defineLocale('sd', {
        months: months,
        monthsShort: months,
        weekdays: days,
        weekdaysShort: days,
        weekdaysMin: days,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd، D MMMM YYYY HH:mm'
        },
        meridiemParse: /صبح|شام/,
        isPM: function (input) {
            return 'شام' === input;
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 12) {
                return 'صبح';
            }
            return 'شام';
        },
        calendar: {
            sameDay: '[اڄ] LT',
            nextDay: '[سڀاڻي] LT',
            nextWeek: 'dddd [اڳين هفتي تي] LT',
            lastDay: '[ڪالهه] LT',
            lastWeek: '[گزريل هفتي] dddd [تي] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: '%s پوء',
            past: '%s اڳ',
            s: 'چند سيڪنڊ',
            m: 'هڪ منٽ',
            mm: '%d منٽ',
            h: 'هڪ ڪلاڪ',
            hh: '%d ڪلاڪ',
            d: 'هڪ ڏينهن',
            dd: '%d ڏينهن',
            M: 'هڪ مهينو',
            MM: '%d مهينا',
            y: 'هڪ سال',
            yy: '%d سال'
        },
        preparse: function (string) {
            return string.replace(/،/g, ',');
        },
        postformat: function (string) {
            return string.replace(/,/g, '،');
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    return sd;
});

/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Northern Sami [se]
//! authors : Bård Rolstad Henriksen : https://github.com/karamell

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    var se = moment.defineLocale('se', {
        months: 'ođđajagemánnu_guovvamánnu_njukčamánnu_cuoŋománnu_miessemánnu_geassemánnu_suoidnemánnu_borgemánnu_čakčamánnu_golggotmánnu_skábmamánnu_juovlamánnu'.split('_'),
        monthsShort: 'ođđj_guov_njuk_cuo_mies_geas_suoi_borg_čakč_golg_skáb_juov'.split('_'),
        weekdays: 'sotnabeaivi_vuossárga_maŋŋebárga_gaskavahkku_duorastat_bearjadat_lávvardat'.split('_'),
        weekdaysShort: 'sotn_vuos_maŋ_gask_duor_bear_láv'.split('_'),
        weekdaysMin: 's_v_m_g_d_b_L'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'MMMM D. [b.] YYYY',
            LLL: 'MMMM D. [b.] YYYY [ti.] HH:mm',
            LLLL: 'dddd, MMMM D. [b.] YYYY [ti.] HH:mm'
        },
        calendar: {
            sameDay: '[otne ti] LT',
            nextDay: '[ihttin ti] LT',
            nextWeek: 'dddd [ti] LT',
            lastDay: '[ikte ti] LT',
            lastWeek: '[ovddit] dddd [ti] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: '%s geažes',
            past: 'maŋit %s',
            s: 'moadde sekunddat',
            m: 'okta minuhta',
            mm: '%d minuhtat',
            h: 'okta diimmu',
            hh: '%d diimmut',
            d: 'okta beaivi',
            dd: '%d beaivvit',
            M: 'okta mánnu',
            MM: '%d mánut',
            y: 'okta jahki',
            yy: '%d jagit'
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    return se;
});

/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Sinhalese [si]
//! author : Sampath Sitinamaluwa : https://github.com/sampathsris

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    /*jshint -W100*/

    var si = moment.defineLocale('si', {
        months: 'ජනවාරි_පෙබරවාරි_මාර්තු_අප්‍රේල්_මැයි_ජූනි_ජූලි_අගෝස්තු_සැප්තැම්බර්_ඔක්තෝබර්_නොවැම්බර්_දෙසැම්බර්'.split('_'),
        monthsShort: 'ජන_පෙබ_මාර්_අප්_මැයි_ජූනි_ජූලි_අගෝ_සැප්_ඔක්_නොවැ_දෙසැ'.split('_'),
        weekdays: 'ඉරිදා_සඳුදා_අඟහරුවාදා_බදාදා_බ්‍රහස්පතින්දා_සිකුරාදා_සෙනසුරාදා'.split('_'),
        weekdaysShort: 'ඉරි_සඳු_අඟ_බදා_බ්‍රහ_සිකු_සෙන'.split('_'),
        weekdaysMin: 'ඉ_ස_අ_බ_බ්‍ර_සි_සෙ'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'a h:mm',
            LTS: 'a h:mm:ss',
            L: 'YYYY/MM/DD',
            LL: 'YYYY MMMM D',
            LLL: 'YYYY MMMM D, a h:mm',
            LLLL: 'YYYY MMMM D [වැනි] dddd, a h:mm:ss'
        },
        calendar: {
            sameDay: '[අද] LT[ට]',
            nextDay: '[හෙට] LT[ට]',
            nextWeek: 'dddd LT[ට]',
            lastDay: '[ඊයේ] LT[ට]',
            lastWeek: '[පසුගිය] dddd LT[ට]',
            sameElse: 'L'
        },
        relativeTime: {
            future: '%sකින්',
            past: '%sකට පෙර',
            s: 'තත්පර කිහිපය',
            m: 'මිනිත්තුව',
            mm: 'මිනිත්තු %d',
            h: 'පැය',
            hh: 'පැය %d',
            d: 'දිනය',
            dd: 'දින %d',
            M: 'මාසය',
            MM: 'මාස %d',
            y: 'වසර',
            yy: 'වසර %d'
        },
        dayOfMonthOrdinalParse: /\d{1,2} වැනි/,
        ordinal: function (number) {
            return number + ' වැනි';
        },
        meridiemParse: /පෙර වරු|පස් වරු|පෙ.ව|ප.ව./,
        isPM: function (input) {
            return input === 'ප.ව.' || input === 'පස් වරු';
        },
        meridiem: function (hours, minutes, isLower) {
            if (hours > 11) {
                return isLower ? 'ප.ව.' : 'පස් වරු';
            } else {
                return isLower ? 'පෙ.ව.' : 'පෙර වරු';
            }
        }
    });

    return si;
});

/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Slovak [sk]
//! author : Martin Minka : https://github.com/k2s
//! based on work of petrbela : https://github.com/petrbela

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    var months = 'január_február_marec_apríl_máj_jún_júl_august_september_október_november_december'.split('_');
    var monthsShort = 'jan_feb_mar_apr_máj_jún_júl_aug_sep_okt_nov_dec'.split('_');
    function plural(n) {
        return n > 1 && n < 5;
    }
    function translate(number, withoutSuffix, key, isFuture) {
        var result = number + ' ';
        switch (key) {
            case 's':
                // a few seconds / in a few seconds / a few seconds ago
                return withoutSuffix || isFuture ? 'pár sekúnd' : 'pár sekundami';
            case 'm':
                // a minute / in a minute / a minute ago
                return withoutSuffix ? 'minúta' : isFuture ? 'minútu' : 'minútou';
            case 'mm':
                // 9 minutes / in 9 minutes / 9 minutes ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'minúty' : 'minút');
                } else {
                    return result + 'minútami';
                }
                break;
            case 'h':
                // an hour / in an hour / an hour ago
                return withoutSuffix ? 'hodina' : isFuture ? 'hodinu' : 'hodinou';
            case 'hh':
                // 9 hours / in 9 hours / 9 hours ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'hodiny' : 'hodín');
                } else {
                    return result + 'hodinami';
                }
                break;
            case 'd':
                // a day / in a day / a day ago
                return withoutSuffix || isFuture ? 'deň' : 'dňom';
            case 'dd':
                // 9 days / in 9 days / 9 days ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'dni' : 'dní');
                } else {
                    return result + 'dňami';
                }
                break;
            case 'M':
                // a month / in a month / a month ago
                return withoutSuffix || isFuture ? 'mesiac' : 'mesiacom';
            case 'MM':
                // 9 months / in 9 months / 9 months ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'mesiace' : 'mesiacov');
                } else {
                    return result + 'mesiacmi';
                }
                break;
            case 'y':
                // a year / in a year / a year ago
                return withoutSuffix || isFuture ? 'rok' : 'rokom';
            case 'yy':
                // 9 years / in 9 years / 9 years ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'roky' : 'rokov');
                } else {
                    return result + 'rokmi';
                }
                break;
        }
    }

    var sk = moment.defineLocale('sk', {
        months: months,
        monthsShort: monthsShort,
        weekdays: 'nedeľa_pondelok_utorok_streda_štvrtok_piatok_sobota'.split('_'),
        weekdaysShort: 'ne_po_ut_st_št_pi_so'.split('_'),
        weekdaysMin: 'ne_po_ut_st_št_pi_so'.split('_'),
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY H:mm',
            LLLL: 'dddd D. MMMM YYYY H:mm'
        },
        calendar: {
            sameDay: '[dnes o] LT',
            nextDay: '[zajtra o] LT',
            nextWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[v nedeľu o] LT';
                    case 1:
                    case 2:
                        return '[v] dddd [o] LT';
                    case 3:
                        return '[v stredu o] LT';
                    case 4:
                        return '[vo štvrtok o] LT';
                    case 5:
                        return '[v piatok o] LT';
                    case 6:
                        return '[v sobotu o] LT';
                }
            },
            lastDay: '[včera o] LT',
            lastWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[minulú nedeľu o] LT';
                    case 1:
                    case 2:
                        return '[minulý] dddd [o] LT';
                    case 3:
                        return '[minulú stredu o] LT';
                    case 4:
                    case 5:
                        return '[minulý] dddd [o] LT';
                    case 6:
                        return '[minulú sobotu o] LT';
                }
            },
            sameElse: 'L'
        },
        relativeTime: {
            future: 'za %s',
            past: 'pred %s',
            s: translate,
            m: translate,
            mm: translate,
            h: translate,
            hh: translate,
            d: translate,
            dd: translate,
            M: translate,
            MM: translate,
            y: translate,
            yy: translate
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    return sk;
});

/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Slovenian [sl]
//! author : Robert Sedovšek : https://github.com/sedovsek

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    function processRelativeTime(number, withoutSuffix, key, isFuture) {
        var result = number + ' ';
        switch (key) {
            case 's':
                return withoutSuffix || isFuture ? 'nekaj sekund' : 'nekaj sekundami';
            case 'm':
                return withoutSuffix ? 'ena minuta' : 'eno minuto';
            case 'mm':
                if (number === 1) {
                    result += withoutSuffix ? 'minuta' : 'minuto';
                } else if (number === 2) {
                    result += withoutSuffix || isFuture ? 'minuti' : 'minutama';
                } else if (number < 5) {
                    result += withoutSuffix || isFuture ? 'minute' : 'minutami';
                } else {
                    result += withoutSuffix || isFuture ? 'minut' : 'minutami';
                }
                return result;
            case 'h':
                return withoutSuffix ? 'ena ura' : 'eno uro';
            case 'hh':
                if (number === 1) {
                    result += withoutSuffix ? 'ura' : 'uro';
                } else if (number === 2) {
                    result += withoutSuffix || isFuture ? 'uri' : 'urama';
                } else if (number < 5) {
                    result += withoutSuffix || isFuture ? 'ure' : 'urami';
                } else {
                    result += withoutSuffix || isFuture ? 'ur' : 'urami';
                }
                return result;
            case 'd':
                return withoutSuffix || isFuture ? 'en dan' : 'enim dnem';
            case 'dd':
                if (number === 1) {
                    result += withoutSuffix || isFuture ? 'dan' : 'dnem';
                } else if (number === 2) {
                    result += withoutSuffix || isFuture ? 'dni' : 'dnevoma';
                } else {
                    result += withoutSuffix || isFuture ? 'dni' : 'dnevi';
                }
                return result;
            case 'M':
                return withoutSuffix || isFuture ? 'en mesec' : 'enim mesecem';
            case 'MM':
                if (number === 1) {
                    result += withoutSuffix || isFuture ? 'mesec' : 'mesecem';
                } else if (number === 2) {
                    result += withoutSuffix || isFuture ? 'meseca' : 'mesecema';
                } else if (number < 5) {
                    result += withoutSuffix || isFuture ? 'mesece' : 'meseci';
                } else {
                    result += withoutSuffix || isFuture ? 'mesecev' : 'meseci';
                }
                return result;
            case 'y':
                return withoutSuffix || isFuture ? 'eno leto' : 'enim letom';
            case 'yy':
                if (number === 1) {
                    result += withoutSuffix || isFuture ? 'leto' : 'letom';
                } else if (number === 2) {
                    result += withoutSuffix || isFuture ? 'leti' : 'letoma';
                } else if (number < 5) {
                    result += withoutSuffix || isFuture ? 'leta' : 'leti';
                } else {
                    result += withoutSuffix || isFuture ? 'let' : 'leti';
                }
                return result;
        }
    }

    var sl = moment.defineLocale('sl', {
        months: 'januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december'.split('_'),
        monthsShort: 'jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.'.split('_'),
        monthsParseExact: true,
        weekdays: 'nedelja_ponedeljek_torek_sreda_četrtek_petek_sobota'.split('_'),
        weekdaysShort: 'ned._pon._tor._sre._čet._pet._sob.'.split('_'),
        weekdaysMin: 'ne_po_to_sr_če_pe_so'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY H:mm',
            LLLL: 'dddd, D. MMMM YYYY H:mm'
        },
        calendar: {
            sameDay: '[danes ob] LT',
            nextDay: '[jutri ob] LT',

            nextWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[v] [nedeljo] [ob] LT';
                    case 3:
                        return '[v] [sredo] [ob] LT';
                    case 6:
                        return '[v] [soboto] [ob] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[v] dddd [ob] LT';
                }
            },
            lastDay: '[včeraj ob] LT',
            lastWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[prejšnjo] [nedeljo] [ob] LT';
                    case 3:
                        return '[prejšnjo] [sredo] [ob] LT';
                    case 6:
                        return '[prejšnjo] [soboto] [ob] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[prejšnji] dddd [ob] LT';
                }
            },
            sameElse: 'L'
        },
        relativeTime: {
            future: 'čez %s',
            past: 'pred %s',
            s: processRelativeTime,
            m: processRelativeTime,
            mm: processRelativeTime,
            h: processRelativeTime,
            hh: processRelativeTime,
            d: processRelativeTime,
            dd: processRelativeTime,
            M: processRelativeTime,
            MM: processRelativeTime,
            y: processRelativeTime,
            yy: processRelativeTime
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 1st is the first week of the year.
        }
    });

    return sl;
});

/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Albanian [sq]
//! author : Flakërim Ismani : https://github.com/flakerimi
//! author : Menelion Elensúle : https://github.com/Oire
//! author : Oerd Cukalla : https://github.com/oerd

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    var sq = moment.defineLocale('sq', {
        months: 'Janar_Shkurt_Mars_Prill_Maj_Qershor_Korrik_Gusht_Shtator_Tetor_Nëntor_Dhjetor'.split('_'),
        monthsShort: 'Jan_Shk_Mar_Pri_Maj_Qer_Kor_Gus_Sht_Tet_Nën_Dhj'.split('_'),
        weekdays: 'E Diel_E Hënë_E Martë_E Mërkurë_E Enjte_E Premte_E Shtunë'.split('_'),
        weekdaysShort: 'Die_Hën_Mar_Mër_Enj_Pre_Sht'.split('_'),
        weekdaysMin: 'D_H_Ma_Më_E_P_Sh'.split('_'),
        weekdaysParseExact: true,
        meridiemParse: /PD|MD/,
        isPM: function (input) {
            return input.charAt(0) === 'M';
        },
        meridiem: function (hours, minutes, isLower) {
            return hours < 12 ? 'PD' : 'MD';
        },
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[Sot në] LT',
            nextDay: '[Nesër në] LT',
            nextWeek: 'dddd [në] LT',
            lastDay: '[Dje në] LT',
            lastWeek: 'dddd [e kaluar në] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'në %s',
            past: '%s më parë',
            s: 'disa sekonda',
            m: 'një minutë',
            mm: '%d minuta',
            h: 'një orë',
            hh: '%d orë',
            d: 'një ditë',
            dd: '%d ditë',
            M: 'një muaj',
            MM: '%d muaj',
            y: 'një vit',
            yy: '%d vite'
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    return sq;
});

/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Serbian [sr]
//! author : Milan Janačković<milanjanackovic@gmail.com> : https://github.com/milan-j

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    var translator = {
        words: { //Different grammatical cases
            m: ['jedan minut', 'jedne minute'],
            mm: ['minut', 'minute', 'minuta'],
            h: ['jedan sat', 'jednog sata'],
            hh: ['sat', 'sata', 'sati'],
            dd: ['dan', 'dana', 'dana'],
            MM: ['mesec', 'meseca', 'meseci'],
            yy: ['godina', 'godine', 'godina']
        },
        correctGrammaticalCase: function (number, wordKey) {
            return number === 1 ? wordKey[0] : number >= 2 && number <= 4 ? wordKey[1] : wordKey[2];
        },
        translate: function (number, withoutSuffix, key) {
            var wordKey = translator.words[key];
            if (key.length === 1) {
                return withoutSuffix ? wordKey[0] : wordKey[1];
            } else {
                return number + ' ' + translator.correctGrammaticalCase(number, wordKey);
            }
        }
    };

    var sr = moment.defineLocale('sr', {
        months: 'januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar'.split('_'),
        monthsShort: 'jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.'.split('_'),
        monthsParseExact: true,
        weekdays: 'nedelja_ponedeljak_utorak_sreda_četvrtak_petak_subota'.split('_'),
        weekdaysShort: 'ned._pon._uto._sre._čet._pet._sub.'.split('_'),
        weekdaysMin: 'ne_po_ut_sr_če_pe_su'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY H:mm',
            LLLL: 'dddd, D. MMMM YYYY H:mm'
        },
        calendar: {
            sameDay: '[danas u] LT',
            nextDay: '[sutra u] LT',
            nextWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[u] [nedelju] [u] LT';
                    case 3:
                        return '[u] [sredu] [u] LT';
                    case 6:
                        return '[u] [subotu] [u] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[u] dddd [u] LT';
                }
            },
            lastDay: '[juče u] LT',
            lastWeek: function () {
                var lastWeekDays = ['[prošle] [nedelje] [u] LT', '[prošlog] [ponedeljka] [u] LT', '[prošlog] [utorka] [u] LT', '[prošle] [srede] [u] LT', '[prošlog] [četvrtka] [u] LT', '[prošlog] [petka] [u] LT', '[prošle] [subote] [u] LT'];
                return lastWeekDays[this.day()];
            },
            sameElse: 'L'
        },
        relativeTime: {
            future: 'za %s',
            past: 'pre %s',
            s: 'nekoliko sekundi',
            m: translator.translate,
            mm: translator.translate,
            h: translator.translate,
            hh: translator.translate,
            d: 'dan',
            dd: translator.translate,
            M: 'mesec',
            MM: translator.translate,
            y: 'godinu',
            yy: translator.translate
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 1st is the first week of the year.
        }
    });

    return sr;
});

/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Serbian Cyrillic [sr-cyrl]
//! author : Milan Janačković<milanjanackovic@gmail.com> : https://github.com/milan-j

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    var translator = {
        words: { //Different grammatical cases
            m: ['један минут', 'једне минуте'],
            mm: ['минут', 'минуте', 'минута'],
            h: ['један сат', 'једног сата'],
            hh: ['сат', 'сата', 'сати'],
            dd: ['дан', 'дана', 'дана'],
            MM: ['месец', 'месеца', 'месеци'],
            yy: ['година', 'године', 'година']
        },
        correctGrammaticalCase: function (number, wordKey) {
            return number === 1 ? wordKey[0] : number >= 2 && number <= 4 ? wordKey[1] : wordKey[2];
        },
        translate: function (number, withoutSuffix, key) {
            var wordKey = translator.words[key];
            if (key.length === 1) {
                return withoutSuffix ? wordKey[0] : wordKey[1];
            } else {
                return number + ' ' + translator.correctGrammaticalCase(number, wordKey);
            }
        }
    };

    var srCyrl = moment.defineLocale('sr-cyrl', {
        months: 'јануар_фебруар_март_април_мај_јун_јул_август_септембар_октобар_новембар_децембар'.split('_'),
        monthsShort: 'јан._феб._мар._апр._мај_јун_јул_авг._сеп._окт._нов._дец.'.split('_'),
        monthsParseExact: true,
        weekdays: 'недеља_понедељак_уторак_среда_четвртак_петак_субота'.split('_'),
        weekdaysShort: 'нед._пон._уто._сре._чет._пет._суб.'.split('_'),
        weekdaysMin: 'не_по_ут_ср_че_пе_су'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY H:mm',
            LLLL: 'dddd, D. MMMM YYYY H:mm'
        },
        calendar: {
            sameDay: '[данас у] LT',
            nextDay: '[сутра у] LT',
            nextWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[у] [недељу] [у] LT';
                    case 3:
                        return '[у] [среду] [у] LT';
                    case 6:
                        return '[у] [суботу] [у] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[у] dddd [у] LT';
                }
            },
            lastDay: '[јуче у] LT',
            lastWeek: function () {
                var lastWeekDays = ['[прошле] [недеље] [у] LT', '[прошлог] [понедељка] [у] LT', '[прошлог] [уторка] [у] LT', '[прошле] [среде] [у] LT', '[прошлог] [четвртка] [у] LT', '[прошлог] [петка] [у] LT', '[прошле] [суботе] [у] LT'];
                return lastWeekDays[this.day()];
            },
            sameElse: 'L'
        },
        relativeTime: {
            future: 'за %s',
            past: 'пре %s',
            s: 'неколико секунди',
            m: translator.translate,
            mm: translator.translate,
            h: translator.translate,
            hh: translator.translate,
            d: 'дан',
            dd: translator.translate,
            M: 'месец',
            MM: translator.translate,
            y: 'годину',
            yy: translator.translate
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 1st is the first week of the year.
        }
    });

    return srCyrl;
});

/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : siSwati [ss]
//! author : Nicolai Davies<mail@nicolai.io> : https://github.com/nicolaidavies

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    var ss = moment.defineLocale('ss', {
        months: "Bhimbidvwane_Indlovana_Indlov'lenkhulu_Mabasa_Inkhwekhweti_Inhlaba_Kholwane_Ingci_Inyoni_Imphala_Lweti_Ingongoni".split('_'),
        monthsShort: 'Bhi_Ina_Inu_Mab_Ink_Inh_Kho_Igc_Iny_Imp_Lwe_Igo'.split('_'),
        weekdays: 'Lisontfo_Umsombuluko_Lesibili_Lesitsatfu_Lesine_Lesihlanu_Umgcibelo'.split('_'),
        weekdaysShort: 'Lis_Umb_Lsb_Les_Lsi_Lsh_Umg'.split('_'),
        weekdaysMin: 'Li_Us_Lb_Lt_Ls_Lh_Ug'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'h:mm A',
            LTS: 'h:mm:ss A',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY h:mm A',
            LLLL: 'dddd, D MMMM YYYY h:mm A'
        },
        calendar: {
            sameDay: '[Namuhla nga] LT',
            nextDay: '[Kusasa nga] LT',
            nextWeek: 'dddd [nga] LT',
            lastDay: '[Itolo nga] LT',
            lastWeek: 'dddd [leliphelile] [nga] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'nga %s',
            past: 'wenteka nga %s',
            s: 'emizuzwana lomcane',
            m: 'umzuzu',
            mm: '%d emizuzu',
            h: 'lihora',
            hh: '%d emahora',
            d: 'lilanga',
            dd: '%d emalanga',
            M: 'inyanga',
            MM: '%d tinyanga',
            y: 'umnyaka',
            yy: '%d iminyaka'
        },
        meridiemParse: /ekuseni|emini|entsambama|ebusuku/,
        meridiem: function (hours, minutes, isLower) {
            if (hours < 11) {
                return 'ekuseni';
            } else if (hours < 15) {
                return 'emini';
            } else if (hours < 19) {
                return 'entsambama';
            } else {
                return 'ebusuku';
            }
        },
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'ekuseni') {
                return hour;
            } else if (meridiem === 'emini') {
                return hour >= 11 ? hour : hour + 12;
            } else if (meridiem === 'entsambama' || meridiem === 'ebusuku') {
                if (hour === 0) {
                    return 0;
                }
                return hour + 12;
            }
        },
        dayOfMonthOrdinalParse: /\d{1,2}/,
        ordinal: '%d',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    return ss;
});

/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Swedish [sv]
//! author : Jens Alm : https://github.com/ulmus

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    var sv = moment.defineLocale('sv', {
        months: 'januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december'.split('_'),
        monthsShort: 'jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec'.split('_'),
        weekdays: 'söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag'.split('_'),
        weekdaysShort: 'sön_mån_tis_ons_tor_fre_lör'.split('_'),
        weekdaysMin: 'sö_må_ti_on_to_fr_lö'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'YYYY-MM-DD',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY [kl.] HH:mm',
            LLLL: 'dddd D MMMM YYYY [kl.] HH:mm',
            lll: 'D MMM YYYY HH:mm',
            llll: 'ddd D MMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[Idag] LT',
            nextDay: '[Imorgon] LT',
            lastDay: '[Igår] LT',
            nextWeek: '[På] dddd LT',
            lastWeek: '[I] dddd[s] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'om %s',
            past: 'för %s sedan',
            s: 'några sekunder',
            m: 'en minut',
            mm: '%d minuter',
            h: 'en timme',
            hh: '%d timmar',
            d: 'en dag',
            dd: '%d dagar',
            M: 'en månad',
            MM: '%d månader',
            y: 'ett år',
            yy: '%d år'
        },
        dayOfMonthOrdinalParse: /\d{1,2}(e|a)/,
        ordinal: function (number) {
            var b = number % 10,
                output = ~~(number % 100 / 10) === 1 ? 'e' : b === 1 ? 'a' : b === 2 ? 'a' : b === 3 ? 'e' : 'e';
            return number + output;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    return sv;
});

/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Swahili [sw]
//! author : Fahad Kassim : https://github.com/fadsel

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    var sw = moment.defineLocale('sw', {
        months: 'Januari_Februari_Machi_Aprili_Mei_Juni_Julai_Agosti_Septemba_Oktoba_Novemba_Desemba'.split('_'),
        monthsShort: 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ago_Sep_Okt_Nov_Des'.split('_'),
        weekdays: 'Jumapili_Jumatatu_Jumanne_Jumatano_Alhamisi_Ijumaa_Jumamosi'.split('_'),
        weekdaysShort: 'Jpl_Jtat_Jnne_Jtan_Alh_Ijm_Jmos'.split('_'),
        weekdaysMin: 'J2_J3_J4_J5_Al_Ij_J1'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[leo saa] LT',
            nextDay: '[kesho saa] LT',
            nextWeek: '[wiki ijayo] dddd [saat] LT',
            lastDay: '[jana] LT',
            lastWeek: '[wiki iliyopita] dddd [saat] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: '%s baadaye',
            past: 'tokea %s',
            s: 'hivi punde',
            m: 'dakika moja',
            mm: 'dakika %d',
            h: 'saa limoja',
            hh: 'masaa %d',
            d: 'siku moja',
            dd: 'masiku %d',
            M: 'mwezi mmoja',
            MM: 'miezi %d',
            y: 'mwaka mmoja',
            yy: 'miaka %d'
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 1st is the first week of the year.
        }
    });

    return sw;
});

/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Tamil [ta]
//! author : Arjunkumar Krishnamoorthy : https://github.com/tk120404

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    var symbolMap = {
        '1': '௧',
        '2': '௨',
        '3': '௩',
        '4': '௪',
        '5': '௫',
        '6': '௬',
        '7': '௭',
        '8': '௮',
        '9': '௯',
        '0': '௦'
    };
    var numberMap = {
        '௧': '1',
        '௨': '2',
        '௩': '3',
        '௪': '4',
        '௫': '5',
        '௬': '6',
        '௭': '7',
        '௮': '8',
        '௯': '9',
        '௦': '0'
    };

    var ta = moment.defineLocale('ta', {
        months: 'ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்'.split('_'),
        monthsShort: 'ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்'.split('_'),
        weekdays: 'ஞாயிற்றுக்கிழமை_திங்கட்கிழமை_செவ்வாய்கிழமை_புதன்கிழமை_வியாழக்கிழமை_வெள்ளிக்கிழமை_சனிக்கிழமை'.split('_'),
        weekdaysShort: 'ஞாயிறு_திங்கள்_செவ்வாய்_புதன்_வியாழன்_வெள்ளி_சனி'.split('_'),
        weekdaysMin: 'ஞா_தி_செ_பு_வி_வெ_ச'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, HH:mm',
            LLLL: 'dddd, D MMMM YYYY, HH:mm'
        },
        calendar: {
            sameDay: '[இன்று] LT',
            nextDay: '[நாளை] LT',
            nextWeek: 'dddd, LT',
            lastDay: '[நேற்று] LT',
            lastWeek: '[கடந்த வாரம்] dddd, LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: '%s இல்',
            past: '%s முன்',
            s: 'ஒரு சில விநாடிகள்',
            m: 'ஒரு நிமிடம்',
            mm: '%d நிமிடங்கள்',
            h: 'ஒரு மணி நேரம்',
            hh: '%d மணி நேரம்',
            d: 'ஒரு நாள்',
            dd: '%d நாட்கள்',
            M: 'ஒரு மாதம்',
            MM: '%d மாதங்கள்',
            y: 'ஒரு வருடம்',
            yy: '%d ஆண்டுகள்'
        },
        dayOfMonthOrdinalParse: /\d{1,2}வது/,
        ordinal: function (number) {
            return number + 'வது';
        },
        preparse: function (string) {
            return string.replace(/[௧௨௩௪௫௬௭௮௯௦]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        // refer http://ta.wikipedia.org/s/1er1
        meridiemParse: /யாமம்|வைகறை|காலை|நண்பகல்|எற்பாடு|மாலை/,
        meridiem: function (hour, minute, isLower) {
            if (hour < 2) {
                return ' யாமம்';
            } else if (hour < 6) {
                return ' வைகறை'; // வைகறை
            } else if (hour < 10) {
                return ' காலை'; // காலை
            } else if (hour < 14) {
                return ' நண்பகல்'; // நண்பகல்
            } else if (hour < 18) {
                return ' எற்பாடு'; // எற்பாடு
            } else if (hour < 22) {
                return ' மாலை'; // மாலை
            } else {
                return ' யாமம்';
            }
        },
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'யாமம்') {
                return hour < 2 ? hour : hour + 12;
            } else if (meridiem === 'வைகறை' || meridiem === 'காலை') {
                return hour;
            } else if (meridiem === 'நண்பகல்') {
                return hour >= 10 ? hour : hour + 12;
            } else {
                return hour + 12;
            }
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 6 // The week that contains Jan 1st is the first week of the year.
        }
    });

    return ta;
});

/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Telugu [te]
//! author : Krishna Chaitanya Thota : https://github.com/kcthota

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    var te = moment.defineLocale('te', {
        months: 'జనవరి_ఫిబ్రవరి_మార్చి_ఏప్రిల్_మే_జూన్_జూలై_ఆగస్టు_సెప్టెంబర్_అక్టోబర్_నవంబర్_డిసెంబర్'.split('_'),
        monthsShort: 'జన._ఫిబ్ర._మార్చి_ఏప్రి._మే_జూన్_జూలై_ఆగ._సెప్._అక్టో._నవ._డిసె.'.split('_'),
        monthsParseExact: true,
        weekdays: 'ఆదివారం_సోమవారం_మంగళవారం_బుధవారం_గురువారం_శుక్రవారం_శనివారం'.split('_'),
        weekdaysShort: 'ఆది_సోమ_మంగళ_బుధ_గురు_శుక్ర_శని'.split('_'),
        weekdaysMin: 'ఆ_సో_మం_బు_గు_శు_శ'.split('_'),
        longDateFormat: {
            LT: 'A h:mm',
            LTS: 'A h:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, A h:mm',
            LLLL: 'dddd, D MMMM YYYY, A h:mm'
        },
        calendar: {
            sameDay: '[నేడు] LT',
            nextDay: '[రేపు] LT',
            nextWeek: 'dddd, LT',
            lastDay: '[నిన్న] LT',
            lastWeek: '[గత] dddd, LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: '%s లో',
            past: '%s క్రితం',
            s: 'కొన్ని క్షణాలు',
            m: 'ఒక నిమిషం',
            mm: '%d నిమిషాలు',
            h: 'ఒక గంట',
            hh: '%d గంటలు',
            d: 'ఒక రోజు',
            dd: '%d రోజులు',
            M: 'ఒక నెల',
            MM: '%d నెలలు',
            y: 'ఒక సంవత్సరం',
            yy: '%d సంవత్సరాలు'
        },
        dayOfMonthOrdinalParse: /\d{1,2}వ/,
        ordinal: '%dవ',
        meridiemParse: /రాత్రి|ఉదయం|మధ్యాహ్నం|సాయంత్రం/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'రాత్రి') {
                return hour < 4 ? hour : hour + 12;
            } else if (meridiem === 'ఉదయం') {
                return hour;
            } else if (meridiem === 'మధ్యాహ్నం') {
                return hour >= 10 ? hour : hour + 12;
            } else if (meridiem === 'సాయంత్రం') {
                return hour + 12;
            }
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'రాత్రి';
            } else if (hour < 10) {
                return 'ఉదయం';
            } else if (hour < 17) {
                return 'మధ్యాహ్నం';
            } else if (hour < 20) {
                return 'సాయంత్రం';
            } else {
                return 'రాత్రి';
            }
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 6 // The week that contains Jan 1st is the first week of the year.
        }
    });

    return te;
});

/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Tetun Dili (East Timor) [tet]
//! author : Joshua Brooks : https://github.com/joshbrooks
//! author : Onorio De J. Afonso : https://github.com/marobo

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    var tet = moment.defineLocale('tet', {
        months: 'Janeiru_Fevereiru_Marsu_Abril_Maiu_Juniu_Juliu_Augustu_Setembru_Outubru_Novembru_Dezembru'.split('_'),
        monthsShort: 'Jan_Fev_Mar_Abr_Mai_Jun_Jul_Aug_Set_Out_Nov_Dez'.split('_'),
        weekdays: 'Domingu_Segunda_Tersa_Kuarta_Kinta_Sexta_Sabadu'.split('_'),
        weekdaysShort: 'Dom_Seg_Ters_Kua_Kint_Sext_Sab'.split('_'),
        weekdaysMin: 'Do_Seg_Te_Ku_Ki_Sex_Sa'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[Ohin iha] LT',
            nextDay: '[Aban iha] LT',
            nextWeek: 'dddd [iha] LT',
            lastDay: '[Horiseik iha] LT',
            lastWeek: 'dddd [semana kotuk] [iha] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'iha %s',
            past: '%s liuba',
            s: 'minutu balun',
            m: 'minutu ida',
            mm: 'minutus %d',
            h: 'horas ida',
            hh: 'horas %d',
            d: 'loron ida',
            dd: 'loron %d',
            M: 'fulan ida',
            MM: 'fulan %d',
            y: 'tinan ida',
            yy: 'tinan %d'
        },
        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
        ordinal: function (number) {
            var b = number % 10,
                output = ~~(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';
            return number + output;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    return tet;
});

/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Thai [th]
//! author : Kridsada Thanabulpong : https://github.com/sirn

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    var th = moment.defineLocale('th', {
        months: 'มกราคม_กุมภาพันธ์_มีนาคม_เมษายน_พฤษภาคม_มิถุนายน_กรกฎาคม_สิงหาคม_กันยายน_ตุลาคม_พฤศจิกายน_ธันวาคม'.split('_'),
        monthsShort: 'ม.ค._ก.พ._มี.ค._เม.ย._พ.ค._มิ.ย._ก.ค._ส.ค._ก.ย._ต.ค._พ.ย._ธ.ค.'.split('_'),
        monthsParseExact: true,
        weekdays: 'อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัสบดี_ศุกร์_เสาร์'.split('_'),
        weekdaysShort: 'อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัส_ศุกร์_เสาร์'.split('_'), // yes, three characters difference
        weekdaysMin: 'อา._จ._อ._พ._พฤ._ศ._ส.'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY เวลา H:mm',
            LLLL: 'วันddddที่ D MMMM YYYY เวลา H:mm'
        },
        meridiemParse: /ก่อนเที่ยง|หลังเที่ยง/,
        isPM: function (input) {
            return input === 'หลังเที่ยง';
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 12) {
                return 'ก่อนเที่ยง';
            } else {
                return 'หลังเที่ยง';
            }
        },
        calendar: {
            sameDay: '[วันนี้ เวลา] LT',
            nextDay: '[พรุ่งนี้ เวลา] LT',
            nextWeek: 'dddd[หน้า เวลา] LT',
            lastDay: '[เมื่อวานนี้ เวลา] LT',
            lastWeek: '[วัน]dddd[ที่แล้ว เวลา] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'อีก %s',
            past: '%sที่แล้ว',
            s: 'ไม่กี่วินาที',
            m: '1 นาที',
            mm: '%d นาที',
            h: '1 ชั่วโมง',
            hh: '%d ชั่วโมง',
            d: '1 วัน',
            dd: '%d วัน',
            M: '1 เดือน',
            MM: '%d เดือน',
            y: '1 ปี',
            yy: '%d ปี'
        }
    });

    return th;
});

/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Tagalog (Philippines) [tl-ph]
//! author : Dan Hagman : https://github.com/hagmandan

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    var tlPh = moment.defineLocale('tl-ph', {
        months: 'Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre'.split('_'),
        monthsShort: 'Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis'.split('_'),
        weekdays: 'Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado'.split('_'),
        weekdaysShort: 'Lin_Lun_Mar_Miy_Huw_Biy_Sab'.split('_'),
        weekdaysMin: 'Li_Lu_Ma_Mi_Hu_Bi_Sab'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'MM/D/YYYY',
            LL: 'MMMM D, YYYY',
            LLL: 'MMMM D, YYYY HH:mm',
            LLLL: 'dddd, MMMM DD, YYYY HH:mm'
        },
        calendar: {
            sameDay: 'LT [ngayong araw]',
            nextDay: '[Bukas ng] LT',
            nextWeek: 'LT [sa susunod na] dddd',
            lastDay: 'LT [kahapon]',
            lastWeek: 'LT [noong nakaraang] dddd',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'sa loob ng %s',
            past: '%s ang nakalipas',
            s: 'ilang segundo',
            m: 'isang minuto',
            mm: '%d minuto',
            h: 'isang oras',
            hh: '%d oras',
            d: 'isang araw',
            dd: '%d araw',
            M: 'isang buwan',
            MM: '%d buwan',
            y: 'isang taon',
            yy: '%d taon'
        },
        dayOfMonthOrdinalParse: /\d{1,2}/,
        ordinal: function (number) {
            return number;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    return tlPh;
});

/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Klingon [tlh]
//! author : Dominika Kruk : https://github.com/amaranthrose

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    var numbersNouns = 'pagh_wa’_cha’_wej_loS_vagh_jav_Soch_chorgh_Hut'.split('_');

    function translateFuture(output) {
        var time = output;
        time = output.indexOf('jaj') !== -1 ? time.slice(0, -3) + 'leS' : output.indexOf('jar') !== -1 ? time.slice(0, -3) + 'waQ' : output.indexOf('DIS') !== -1 ? time.slice(0, -3) + 'nem' : time + ' pIq';
        return time;
    }

    function translatePast(output) {
        var time = output;
        time = output.indexOf('jaj') !== -1 ? time.slice(0, -3) + 'Hu’' : output.indexOf('jar') !== -1 ? time.slice(0, -3) + 'wen' : output.indexOf('DIS') !== -1 ? time.slice(0, -3) + 'ben' : time + ' ret';
        return time;
    }

    function translate(number, withoutSuffix, string, isFuture) {
        var numberNoun = numberAsNoun(number);
        switch (string) {
            case 'mm':
                return numberNoun + ' tup';
            case 'hh':
                return numberNoun + ' rep';
            case 'dd':
                return numberNoun + ' jaj';
            case 'MM':
                return numberNoun + ' jar';
            case 'yy':
                return numberNoun + ' DIS';
        }
    }

    function numberAsNoun(number) {
        var hundred = Math.floor(number % 1000 / 100),
            ten = Math.floor(number % 100 / 10),
            one = number % 10,
            word = '';
        if (hundred > 0) {
            word += numbersNouns[hundred] + 'vatlh';
        }
        if (ten > 0) {
            word += (word !== '' ? ' ' : '') + numbersNouns[ten] + 'maH';
        }
        if (one > 0) {
            word += (word !== '' ? ' ' : '') + numbersNouns[one];
        }
        return word === '' ? 'pagh' : word;
    }

    var tlh = moment.defineLocale('tlh', {
        months: 'tera’ jar wa’_tera’ jar cha’_tera’ jar wej_tera’ jar loS_tera’ jar vagh_tera’ jar jav_tera’ jar Soch_tera’ jar chorgh_tera’ jar Hut_tera’ jar wa’maH_tera’ jar wa’maH wa’_tera’ jar wa’maH cha’'.split('_'),
        monthsShort: 'jar wa’_jar cha’_jar wej_jar loS_jar vagh_jar jav_jar Soch_jar chorgh_jar Hut_jar wa’maH_jar wa’maH wa’_jar wa’maH cha’'.split('_'),
        monthsParseExact: true,
        weekdays: 'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split('_'),
        weekdaysShort: 'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split('_'),
        weekdaysMin: 'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[DaHjaj] LT',
            nextDay: '[wa’leS] LT',
            nextWeek: 'LLL',
            lastDay: '[wa’Hu’] LT',
            lastWeek: 'LLL',
            sameElse: 'L'
        },
        relativeTime: {
            future: translateFuture,
            past: translatePast,
            s: 'puS lup',
            m: 'wa’ tup',
            mm: translate,
            h: 'wa’ rep',
            hh: translate,
            d: 'wa’ jaj',
            dd: translate,
            M: 'wa’ jar',
            MM: translate,
            y: 'wa’ DIS',
            yy: translate
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    return tlh;
});

/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Turkish [tr]
//! authors : Erhan Gundogan : https://github.com/erhangundogan,
//!           Burak Yiğit Kaya: https://github.com/BYK

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    var suffixes = {
        1: '\'inci',
        5: '\'inci',
        8: '\'inci',
        70: '\'inci',
        80: '\'inci',
        2: '\'nci',
        7: '\'nci',
        20: '\'nci',
        50: '\'nci',
        3: '\'üncü',
        4: '\'üncü',
        100: '\'üncü',
        6: '\'ncı',
        9: '\'uncu',
        10: '\'uncu',
        30: '\'uncu',
        60: '\'ıncı',
        90: '\'ıncı'
    };

    var tr = moment.defineLocale('tr', {
        months: 'Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık'.split('_'),
        monthsShort: 'Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara'.split('_'),
        weekdays: 'Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi'.split('_'),
        weekdaysShort: 'Paz_Pts_Sal_Çar_Per_Cum_Cts'.split('_'),
        weekdaysMin: 'Pz_Pt_Sa_Ça_Pe_Cu_Ct'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[bugün saat] LT',
            nextDay: '[yarın saat] LT',
            nextWeek: '[gelecek] dddd [saat] LT',
            lastDay: '[dün] LT',
            lastWeek: '[geçen] dddd [saat] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: '%s sonra',
            past: '%s önce',
            s: 'birkaç saniye',
            m: 'bir dakika',
            mm: '%d dakika',
            h: 'bir saat',
            hh: '%d saat',
            d: 'bir gün',
            dd: '%d gün',
            M: 'bir ay',
            MM: '%d ay',
            y: 'bir yıl',
            yy: '%d yıl'
        },
        dayOfMonthOrdinalParse: /\d{1,2}'(inci|nci|üncü|ncı|uncu|ıncı)/,
        ordinal: function (number) {
            if (number === 0) {
                // special case for zero
                return number + '\'ıncı';
            }
            var a = number % 10,
                b = number % 100 - a,
                c = number >= 100 ? 100 : null;
            return number + (suffixes[a] || suffixes[b] || suffixes[c]);
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 1st is the first week of the year.
        }
    });

    return tr;
});

/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Talossan [tzl]
//! author : Robin van der Vliet : https://github.com/robin0van0der0v
//! author : Iustì Canun

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    // After the year there should be a slash and the amount of years since December 26, 1979 in Roman numerals.
    // This is currently too difficult (maybe even impossible) to add.

    var tzl = moment.defineLocale('tzl', {
        months: 'Januar_Fevraglh_Març_Avrïu_Mai_Gün_Julia_Guscht_Setemvar_Listopäts_Noemvar_Zecemvar'.split('_'),
        monthsShort: 'Jan_Fev_Mar_Avr_Mai_Gün_Jul_Gus_Set_Lis_Noe_Zec'.split('_'),
        weekdays: 'Súladi_Lúneçi_Maitzi_Márcuri_Xhúadi_Viénerçi_Sáturi'.split('_'),
        weekdaysShort: 'Súl_Lún_Mai_Már_Xhú_Vié_Sát'.split('_'),
        weekdaysMin: 'Sú_Lú_Ma_Má_Xh_Vi_Sá'.split('_'),
        longDateFormat: {
            LT: 'HH.mm',
            LTS: 'HH.mm.ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM [dallas] YYYY',
            LLL: 'D. MMMM [dallas] YYYY HH.mm',
            LLLL: 'dddd, [li] D. MMMM [dallas] YYYY HH.mm'
        },
        meridiemParse: /d\'o|d\'a/i,
        isPM: function (input) {
            return 'd\'o' === input.toLowerCase();
        },
        meridiem: function (hours, minutes, isLower) {
            if (hours > 11) {
                return isLower ? 'd\'o' : 'D\'O';
            } else {
                return isLower ? 'd\'a' : 'D\'A';
            }
        },
        calendar: {
            sameDay: '[oxhi à] LT',
            nextDay: '[demà à] LT',
            nextWeek: 'dddd [à] LT',
            lastDay: '[ieiri à] LT',
            lastWeek: '[sür el] dddd [lasteu à] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'osprei %s',
            past: 'ja%s',
            s: processRelativeTime,
            m: processRelativeTime,
            mm: processRelativeTime,
            h: processRelativeTime,
            hh: processRelativeTime,
            d: processRelativeTime,
            dd: processRelativeTime,
            M: processRelativeTime,
            MM: processRelativeTime,
            y: processRelativeTime,
            yy: processRelativeTime
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    function processRelativeTime(number, withoutSuffix, key, isFuture) {
        var format = {
            's': ['viensas secunds', '\'iensas secunds'],
            'm': ['\'n míut', '\'iens míut'],
            'mm': [number + ' míuts', '' + number + ' míuts'],
            'h': ['\'n þora', '\'iensa þora'],
            'hh': [number + ' þoras', '' + number + ' þoras'],
            'd': ['\'n ziua', '\'iensa ziua'],
            'dd': [number + ' ziuas', '' + number + ' ziuas'],
            'M': ['\'n mes', '\'iens mes'],
            'MM': [number + ' mesen', '' + number + ' mesen'],
            'y': ['\'n ar', '\'iens ar'],
            'yy': [number + ' ars', '' + number + ' ars']
        };
        return isFuture ? format[key][0] : withoutSuffix ? format[key][0] : format[key][1];
    }

    return tzl;
});

/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Central Atlas Tamazight [tzm]
//! author : Abdel Said : https://github.com/abdelsaid

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    var tzm = moment.defineLocale('tzm', {
        months: 'ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ'.split('_'),
        monthsShort: 'ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ'.split('_'),
        weekdays: 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),
        weekdaysShort: 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),
        weekdaysMin: 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[ⴰⵙⴷⵅ ⴴ] LT',
            nextDay: '[ⴰⵙⴽⴰ ⴴ] LT',
            nextWeek: 'dddd [ⴴ] LT',
            lastDay: '[ⴰⵚⴰⵏⵜ ⴴ] LT',
            lastWeek: 'dddd [ⴴ] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'ⴷⴰⴷⵅ ⵙ ⵢⴰⵏ %s',
            past: 'ⵢⴰⵏ %s',
            s: 'ⵉⵎⵉⴽ',
            m: 'ⵎⵉⵏⵓⴺ',
            mm: '%d ⵎⵉⵏⵓⴺ',
            h: 'ⵙⴰⵄⴰ',
            hh: '%d ⵜⴰⵙⵙⴰⵄⵉⵏ',
            d: 'ⴰⵙⵙ',
            dd: '%d oⵙⵙⴰⵏ',
            M: 'ⴰⵢoⵓⵔ',
            MM: '%d ⵉⵢⵢⵉⵔⵏ',
            y: 'ⴰⵙⴳⴰⵙ',
            yy: '%d ⵉⵙⴳⴰⵙⵏ'
        },
        week: {
            dow: 6, // Saturday is the first day of the week.
            doy: 12 // The week that contains Jan 1st is the first week of the year.
        }
    });

    return tzm;
});

/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Central Atlas Tamazight Latin [tzm-latn]
//! author : Abdel Said : https://github.com/abdelsaid

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    var tzmLatn = moment.defineLocale('tzm-latn', {
        months: 'innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir'.split('_'),
        monthsShort: 'innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir'.split('_'),
        weekdays: 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),
        weekdaysShort: 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),
        weekdaysMin: 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[asdkh g] LT',
            nextDay: '[aska g] LT',
            nextWeek: 'dddd [g] LT',
            lastDay: '[assant g] LT',
            lastWeek: 'dddd [g] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'dadkh s yan %s',
            past: 'yan %s',
            s: 'imik',
            m: 'minuḍ',
            mm: '%d minuḍ',
            h: 'saɛa',
            hh: '%d tassaɛin',
            d: 'ass',
            dd: '%d ossan',
            M: 'ayowr',
            MM: '%d iyyirn',
            y: 'asgas',
            yy: '%d isgasn'
        },
        week: {
            dow: 6, // Saturday is the first day of the week.
            doy: 12 // The week that contains Jan 1st is the first week of the year.
        }
    });

    return tzmLatn;
});

/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Ukrainian [uk]
//! author : zemlanin : https://github.com/zemlanin
//! Author : Menelion Elensúle : https://github.com/Oire

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    function plural(word, num) {
        var forms = word.split('_');
        return num % 10 === 1 && num % 100 !== 11 ? forms[0] : num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2];
    }
    function relativeTimeWithPlural(number, withoutSuffix, key) {
        var format = {
            'mm': withoutSuffix ? 'хвилина_хвилини_хвилин' : 'хвилину_хвилини_хвилин',
            'hh': withoutSuffix ? 'година_години_годин' : 'годину_години_годин',
            'dd': 'день_дні_днів',
            'MM': 'місяць_місяці_місяців',
            'yy': 'рік_роки_років'
        };
        if (key === 'm') {
            return withoutSuffix ? 'хвилина' : 'хвилину';
        } else if (key === 'h') {
            return withoutSuffix ? 'година' : 'годину';
        } else {
            return number + ' ' + plural(format[key], +number);
        }
    }
    function weekdaysCaseReplace(m, format) {
        var weekdays = {
            'nominative': 'неділя_понеділок_вівторок_середа_четвер_п’ятниця_субота'.split('_'),
            'accusative': 'неділю_понеділок_вівторок_середу_четвер_п’ятницю_суботу'.split('_'),
            'genitive': 'неділі_понеділка_вівторка_середи_четверга_п’ятниці_суботи'.split('_')
        };

        if (!m) {
            return weekdays['nominative'];
        }

        var nounCase = /(\[[ВвУу]\]) ?dddd/.test(format) ? 'accusative' : /\[?(?:минулої|наступної)? ?\] ?dddd/.test(format) ? 'genitive' : 'nominative';
        return weekdays[nounCase][m.day()];
    }
    function processHoursFunction(str) {
        return function () {
            return str + 'о' + (this.hours() === 11 ? 'б' : '') + '] LT';
        };
    }

    var uk = moment.defineLocale('uk', {
        months: {
            'format': 'січня_лютого_березня_квітня_травня_червня_липня_серпня_вересня_жовтня_листопада_грудня'.split('_'),
            'standalone': 'січень_лютий_березень_квітень_травень_червень_липень_серпень_вересень_жовтень_листопад_грудень'.split('_')
        },
        monthsShort: 'січ_лют_бер_квіт_трав_черв_лип_серп_вер_жовт_лист_груд'.split('_'),
        weekdays: weekdaysCaseReplace,
        weekdaysShort: 'нд_пн_вт_ср_чт_пт_сб'.split('_'),
        weekdaysMin: 'нд_пн_вт_ср_чт_пт_сб'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY р.',
            LLL: 'D MMMM YYYY р., HH:mm',
            LLLL: 'dddd, D MMMM YYYY р., HH:mm'
        },
        calendar: {
            sameDay: processHoursFunction('[Сьогодні '),
            nextDay: processHoursFunction('[Завтра '),
            lastDay: processHoursFunction('[Вчора '),
            nextWeek: processHoursFunction('[У] dddd ['),
            lastWeek: function () {
                switch (this.day()) {
                    case 0:
                    case 3:
                    case 5:
                    case 6:
                        return processHoursFunction('[Минулої] dddd [').call(this);
                    case 1:
                    case 2:
                    case 4:
                        return processHoursFunction('[Минулого] dddd [').call(this);
                }
            },
            sameElse: 'L'
        },
        relativeTime: {
            future: 'за %s',
            past: '%s тому',
            s: 'декілька секунд',
            m: relativeTimeWithPlural,
            mm: relativeTimeWithPlural,
            h: 'годину',
            hh: relativeTimeWithPlural,
            d: 'день',
            dd: relativeTimeWithPlural,
            M: 'місяць',
            MM: relativeTimeWithPlural,
            y: 'рік',
            yy: relativeTimeWithPlural
        },
        // M. E.: those two are virtually unused but a user might want to implement them for his/her website for some reason
        meridiemParse: /ночі|ранку|дня|вечора/,
        isPM: function (input) {
            return (/^(дня|вечора)$/.test(input)
            );
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'ночі';
            } else if (hour < 12) {
                return 'ранку';
            } else if (hour < 17) {
                return 'дня';
            } else {
                return 'вечора';
            }
        },
        dayOfMonthOrdinalParse: /\d{1,2}-(й|го)/,
        ordinal: function (number, period) {
            switch (period) {
                case 'M':
                case 'd':
                case 'DDD':
                case 'w':
                case 'W':
                    return number + '-й';
                case 'D':
                    return number + '-го';
                default:
                    return number;
            }
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 1st is the first week of the year.
        }
    });

    return uk;
});

/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Urdu [ur]
//! author : Sawood Alam : https://github.com/ibnesayeed
//! author : Zack : https://github.com/ZackVision

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    var months = ['جنوری', 'فروری', 'مارچ', 'اپریل', 'مئی', 'جون', 'جولائی', 'اگست', 'ستمبر', 'اکتوبر', 'نومبر', 'دسمبر'];
    var days = ['اتوار', 'پیر', 'منگل', 'بدھ', 'جمعرات', 'جمعہ', 'ہفتہ'];

    var ur = moment.defineLocale('ur', {
        months: months,
        monthsShort: months,
        weekdays: days,
        weekdaysShort: days,
        weekdaysMin: days,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd، D MMMM YYYY HH:mm'
        },
        meridiemParse: /صبح|شام/,
        isPM: function (input) {
            return 'شام' === input;
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 12) {
                return 'صبح';
            }
            return 'شام';
        },
        calendar: {
            sameDay: '[آج بوقت] LT',
            nextDay: '[کل بوقت] LT',
            nextWeek: 'dddd [بوقت] LT',
            lastDay: '[گذشتہ روز بوقت] LT',
            lastWeek: '[گذشتہ] dddd [بوقت] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: '%s بعد',
            past: '%s قبل',
            s: 'چند سیکنڈ',
            m: 'ایک منٹ',
            mm: '%d منٹ',
            h: 'ایک گھنٹہ',
            hh: '%d گھنٹے',
            d: 'ایک دن',
            dd: '%d دن',
            M: 'ایک ماہ',
            MM: '%d ماہ',
            y: 'ایک سال',
            yy: '%d سال'
        },
        preparse: function (string) {
            return string.replace(/،/g, ',');
        },
        postformat: function (string) {
            return string.replace(/,/g, '،');
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    return ur;
});

/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Uzbek [uz]
//! author : Sardor Muminov : https://github.com/muminoff

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    var uz = moment.defineLocale('uz', {
        months: 'январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр'.split('_'),
        monthsShort: 'янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек'.split('_'),
        weekdays: 'Якшанба_Душанба_Сешанба_Чоршанба_Пайшанба_Жума_Шанба'.split('_'),
        weekdaysShort: 'Якш_Душ_Сеш_Чор_Пай_Жум_Шан'.split('_'),
        weekdaysMin: 'Як_Ду_Се_Чо_Па_Жу_Ша'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'D MMMM YYYY, dddd HH:mm'
        },
        calendar: {
            sameDay: '[Бугун соат] LT [да]',
            nextDay: '[Эртага] LT [да]',
            nextWeek: 'dddd [куни соат] LT [да]',
            lastDay: '[Кеча соат] LT [да]',
            lastWeek: '[Утган] dddd [куни соат] LT [да]',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'Якин %s ичида',
            past: 'Бир неча %s олдин',
            s: 'фурсат',
            m: 'бир дакика',
            mm: '%d дакика',
            h: 'бир соат',
            hh: '%d соат',
            d: 'бир кун',
            dd: '%d кун',
            M: 'бир ой',
            MM: '%d ой',
            y: 'бир йил',
            yy: '%d йил'
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 4th is the first week of the year.
        }
    });

    return uz;
});

/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Uzbek Latin [uz-latn]
//! author : Rasulbek Mirzayev : github.com/Rasulbeeek

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    var uzLatn = moment.defineLocale('uz-latn', {
        months: 'Yanvar_Fevral_Mart_Aprel_May_Iyun_Iyul_Avgust_Sentabr_Oktabr_Noyabr_Dekabr'.split('_'),
        monthsShort: 'Yan_Fev_Mar_Apr_May_Iyun_Iyul_Avg_Sen_Okt_Noy_Dek'.split('_'),
        weekdays: 'Yakshanba_Dushanba_Seshanba_Chorshanba_Payshanba_Juma_Shanba'.split('_'),
        weekdaysShort: 'Yak_Dush_Sesh_Chor_Pay_Jum_Shan'.split('_'),
        weekdaysMin: 'Ya_Du_Se_Cho_Pa_Ju_Sha'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'D MMMM YYYY, dddd HH:mm'
        },
        calendar: {
            sameDay: '[Bugun soat] LT [da]',
            nextDay: '[Ertaga] LT [da]',
            nextWeek: 'dddd [kuni soat] LT [da]',
            lastDay: '[Kecha soat] LT [da]',
            lastWeek: '[O\'tgan] dddd [kuni soat] LT [da]',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'Yaqin %s ichida',
            past: 'Bir necha %s oldin',
            s: 'soniya',
            m: 'bir daqiqa',
            mm: '%d daqiqa',
            h: 'bir soat',
            hh: '%d soat',
            d: 'bir kun',
            dd: '%d kun',
            M: 'bir oy',
            MM: '%d oy',
            y: 'bir yil',
            yy: '%d yil'
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 1st is the first week of the year.
        }
    });

    return uzLatn;
});

/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Vietnamese [vi]
//! author : Bang Nguyen : https://github.com/bangnk

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    var vi = moment.defineLocale('vi', {
        months: 'tháng 1_tháng 2_tháng 3_tháng 4_tháng 5_tháng 6_tháng 7_tháng 8_tháng 9_tháng 10_tháng 11_tháng 12'.split('_'),
        monthsShort: 'Th01_Th02_Th03_Th04_Th05_Th06_Th07_Th08_Th09_Th10_Th11_Th12'.split('_'),
        monthsParseExact: true,
        weekdays: 'chủ nhật_thứ hai_thứ ba_thứ tư_thứ năm_thứ sáu_thứ bảy'.split('_'),
        weekdaysShort: 'CN_T2_T3_T4_T5_T6_T7'.split('_'),
        weekdaysMin: 'CN_T2_T3_T4_T5_T6_T7'.split('_'),
        weekdaysParseExact: true,
        meridiemParse: /sa|ch/i,
        isPM: function (input) {
            return (/^ch$/i.test(input)
            );
        },
        meridiem: function (hours, minutes, isLower) {
            if (hours < 12) {
                return isLower ? 'sa' : 'SA';
            } else {
                return isLower ? 'ch' : 'CH';
            }
        },
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM [năm] YYYY',
            LLL: 'D MMMM [năm] YYYY HH:mm',
            LLLL: 'dddd, D MMMM [năm] YYYY HH:mm',
            l: 'DD/M/YYYY',
            ll: 'D MMM YYYY',
            lll: 'D MMM YYYY HH:mm',
            llll: 'ddd, D MMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[Hôm nay lúc] LT',
            nextDay: '[Ngày mai lúc] LT',
            nextWeek: 'dddd [tuần tới lúc] LT',
            lastDay: '[Hôm qua lúc] LT',
            lastWeek: 'dddd [tuần rồi lúc] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: '%s tới',
            past: '%s trước',
            s: 'vài giây',
            m: 'một phút',
            mm: '%d phút',
            h: 'một giờ',
            hh: '%d giờ',
            d: 'một ngày',
            dd: '%d ngày',
            M: 'một tháng',
            MM: '%d tháng',
            y: 'một năm',
            yy: '%d năm'
        },
        dayOfMonthOrdinalParse: /\d{1,2}/,
        ordinal: function (number) {
            return number;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    return vi;
});

/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Pseudo [x-pseudo]
//! author : Andrew Hood : https://github.com/andrewhood125

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    var xPseudo = moment.defineLocale('x-pseudo', {
        months: 'J~áñúá~rý_F~ébrú~árý_~Márc~h_Áp~ríl_~Máý_~Júñé~_Júl~ý_Áú~gúst~_Sép~témb~ér_Ó~ctób~ér_Ñ~óvém~bér_~Décé~mbér'.split('_'),
        monthsShort: 'J~áñ_~Féb_~Már_~Ápr_~Máý_~Júñ_~Júl_~Áúg_~Sép_~Óct_~Ñóv_~Déc'.split('_'),
        monthsParseExact: true,
        weekdays: 'S~úñdá~ý_Mó~ñdáý~_Túé~sdáý~_Wéd~ñésd~áý_T~húrs~dáý_~Fríd~áý_S~átúr~dáý'.split('_'),
        weekdaysShort: 'S~úñ_~Móñ_~Túé_~Wéd_~Thú_~Frí_~Sát'.split('_'),
        weekdaysMin: 'S~ú_Mó~_Tú_~Wé_T~h_Fr~_Sá'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[T~ódá~ý át] LT',
            nextDay: '[T~ómó~rró~w át] LT',
            nextWeek: 'dddd [át] LT',
            lastDay: '[Ý~ést~érdá~ý át] LT',
            lastWeek: '[L~ást] dddd [át] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'í~ñ %s',
            past: '%s á~gó',
            s: 'á ~féw ~sécó~ñds',
            m: 'á ~míñ~úté',
            mm: '%d m~íñú~tés',
            h: 'á~ñ hó~úr',
            hh: '%d h~óúrs',
            d: 'á ~dáý',
            dd: '%d d~áýs',
            M: 'á ~móñ~th',
            MM: '%d m~óñt~hs',
            y: 'á ~ýéár',
            yy: '%d ý~éárs'
        },
        dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
        ordinal: function (number) {
            var b = number % 10,
                output = ~~(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';
            return number + output;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    return xPseudo;
});

/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Yoruba Nigeria [yo]
//! author : Atolagbe Abisoye : https://github.com/andela-batolagbe

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    var yo = moment.defineLocale('yo', {
        months: 'Sẹ́rẹ́_Èrèlè_Ẹrẹ̀nà_Ìgbé_Èbibi_Òkùdu_Agẹmo_Ògún_Owewe_Ọ̀wàrà_Bélú_Ọ̀pẹ̀̀'.split('_'),
        monthsShort: 'Sẹ́r_Èrl_Ẹrn_Ìgb_Èbi_Òkù_Agẹ_Ògú_Owe_Ọ̀wà_Bél_Ọ̀pẹ̀̀'.split('_'),
        weekdays: 'Àìkú_Ajé_Ìsẹ́gun_Ọjọ́rú_Ọjọ́bọ_Ẹtì_Àbámẹ́ta'.split('_'),
        weekdaysShort: 'Àìk_Ajé_Ìsẹ́_Ọjr_Ọjb_Ẹtì_Àbá'.split('_'),
        weekdaysMin: 'Àì_Aj_Ìs_Ọr_Ọb_Ẹt_Àb'.split('_'),
        longDateFormat: {
            LT: 'h:mm A',
            LTS: 'h:mm:ss A',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY h:mm A',
            LLLL: 'dddd, D MMMM YYYY h:mm A'
        },
        calendar: {
            sameDay: '[Ònì ni] LT',
            nextDay: '[Ọ̀la ni] LT',
            nextWeek: 'dddd [Ọsẹ̀ tón\'bọ] [ni] LT',
            lastDay: '[Àna ni] LT',
            lastWeek: 'dddd [Ọsẹ̀ tólọ́] [ni] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'ní %s',
            past: '%s kọjá',
            s: 'ìsẹjú aayá die',
            m: 'ìsẹjú kan',
            mm: 'ìsẹjú %d',
            h: 'wákati kan',
            hh: 'wákati %d',
            d: 'ọjọ́ kan',
            dd: 'ọjọ́ %d',
            M: 'osù kan',
            MM: 'osù %d',
            y: 'ọdún kan',
            yy: 'ọdún %d'
        },
        dayOfMonthOrdinalParse: /ọjọ́\s\d{1,2}/,
        ordinal: 'ọjọ́ %d',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    return yo;
});

/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Chinese (China) [zh-cn]
//! author : suupic : https://github.com/suupic
//! author : Zeno Zeng : https://github.com/zenozeng

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    var zhCn = moment.defineLocale('zh-cn', {
        months: '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split('_'),
        monthsShort: '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
        weekdays: '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
        weekdaysShort: '周日_周一_周二_周三_周四_周五_周六'.split('_'),
        weekdaysMin: '日_一_二_三_四_五_六'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'YYYY年MMMD日',
            LL: 'YYYY年MMMD日',
            LLL: 'YYYY年MMMD日Ah点mm分',
            LLLL: 'YYYY年MMMD日ddddAh点mm分',
            l: 'YYYY年MMMD日',
            ll: 'YYYY年MMMD日',
            lll: 'YYYY年MMMD日 HH:mm',
            llll: 'YYYY年MMMD日dddd HH:mm'
        },
        meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === '凌晨' || meridiem === '早上' || meridiem === '上午') {
                return hour;
            } else if (meridiem === '下午' || meridiem === '晚上') {
                return hour + 12;
            } else {
                // '中午'
                return hour >= 11 ? hour : hour + 12;
            }
        },
        meridiem: function (hour, minute, isLower) {
            var hm = hour * 100 + minute;
            if (hm < 600) {
                return '凌晨';
            } else if (hm < 900) {
                return '早上';
            } else if (hm < 1130) {
                return '上午';
            } else if (hm < 1230) {
                return '中午';
            } else if (hm < 1800) {
                return '下午';
            } else {
                return '晚上';
            }
        },
        calendar: {
            sameDay: '[今天]LT',
            nextDay: '[明天]LT',
            nextWeek: '[下]ddddLT',
            lastDay: '[昨天]LT',
            lastWeek: '[上]ddddLT',
            sameElse: 'L'
        },
        dayOfMonthOrdinalParse: /\d{1,2}(日|月|周)/,
        ordinal: function (number, period) {
            switch (period) {
                case 'd':
                case 'D':
                case 'DDD':
                    return number + '日';
                case 'M':
                    return number + '月';
                case 'w':
                case 'W':
                    return number + '周';
                default:
                    return number;
            }
        },
        relativeTime: {
            future: '%s内',
            past: '%s前',
            s: '几秒',
            m: '1 分钟',
            mm: '%d 分钟',
            h: '1 小时',
            hh: '%d 小时',
            d: '1 天',
            dd: '%d 天',
            M: '1 个月',
            MM: '%d 个月',
            y: '1 年',
            yy: '%d 年'
        },
        week: {
            // GB/T 7408-1994《数据元和交换格式·信息交换·日期和时间表示法》与ISO 8601:1988等效
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    return zhCn;
});

/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Chinese (Hong Kong) [zh-hk]
//! author : Ben : https://github.com/ben-lin
//! author : Chris Lam : https://github.com/hehachris
//! author : Konstantin : https://github.com/skfd

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    var zhHk = moment.defineLocale('zh-hk', {
        months: '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split('_'),
        monthsShort: '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
        weekdays: '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
        weekdaysShort: '週日_週一_週二_週三_週四_週五_週六'.split('_'),
        weekdaysMin: '日_一_二_三_四_五_六'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'YYYY年MMMD日',
            LL: 'YYYY年MMMD日',
            LLL: 'YYYY年MMMD日 HH:mm',
            LLLL: 'YYYY年MMMD日dddd HH:mm',
            l: 'YYYY年MMMD日',
            ll: 'YYYY年MMMD日',
            lll: 'YYYY年MMMD日 HH:mm',
            llll: 'YYYY年MMMD日dddd HH:mm'
        },
        meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === '凌晨' || meridiem === '早上' || meridiem === '上午') {
                return hour;
            } else if (meridiem === '中午') {
                return hour >= 11 ? hour : hour + 12;
            } else if (meridiem === '下午' || meridiem === '晚上') {
                return hour + 12;
            }
        },
        meridiem: function (hour, minute, isLower) {
            var hm = hour * 100 + minute;
            if (hm < 600) {
                return '凌晨';
            } else if (hm < 900) {
                return '早上';
            } else if (hm < 1130) {
                return '上午';
            } else if (hm < 1230) {
                return '中午';
            } else if (hm < 1800) {
                return '下午';
            } else {
                return '晚上';
            }
        },
        calendar: {
            sameDay: '[今天]LT',
            nextDay: '[明天]LT',
            nextWeek: '[下]ddddLT',
            lastDay: '[昨天]LT',
            lastWeek: '[上]ddddLT',
            sameElse: 'L'
        },
        dayOfMonthOrdinalParse: /\d{1,2}(日|月|週)/,
        ordinal: function (number, period) {
            switch (period) {
                case 'd':
                case 'D':
                case 'DDD':
                    return number + '日';
                case 'M':
                    return number + '月';
                case 'w':
                case 'W':
                    return number + '週';
                default:
                    return number;
            }
        },
        relativeTime: {
            future: '%s內',
            past: '%s前',
            s: '幾秒',
            m: '1 分鐘',
            mm: '%d 分鐘',
            h: '1 小時',
            hh: '%d 小時',
            d: '1 天',
            dd: '%d 天',
            M: '1 個月',
            MM: '%d 個月',
            y: '1 年',
            yy: '%d 年'
        }
    });

    return zhHk;
});

/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Chinese (Taiwan) [zh-tw]
//! author : Ben : https://github.com/ben-lin
//! author : Chris Lam : https://github.com/hehachris

;(function (global, factory) {
     true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);
})(this, function (moment) {
    'use strict';

    var zhTw = moment.defineLocale('zh-tw', {
        months: '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split('_'),
        monthsShort: '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
        weekdays: '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
        weekdaysShort: '週日_週一_週二_週三_週四_週五_週六'.split('_'),
        weekdaysMin: '日_一_二_三_四_五_六'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'YYYY年MMMD日',
            LL: 'YYYY年MMMD日',
            LLL: 'YYYY年MMMD日 HH:mm',
            LLLL: 'YYYY年MMMD日dddd HH:mm',
            l: 'YYYY年MMMD日',
            ll: 'YYYY年MMMD日',
            lll: 'YYYY年MMMD日 HH:mm',
            llll: 'YYYY年MMMD日dddd HH:mm'
        },
        meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === '凌晨' || meridiem === '早上' || meridiem === '上午') {
                return hour;
            } else if (meridiem === '中午') {
                return hour >= 11 ? hour : hour + 12;
            } else if (meridiem === '下午' || meridiem === '晚上') {
                return hour + 12;
            }
        },
        meridiem: function (hour, minute, isLower) {
            var hm = hour * 100 + minute;
            if (hm < 600) {
                return '凌晨';
            } else if (hm < 900) {
                return '早上';
            } else if (hm < 1130) {
                return '上午';
            } else if (hm < 1230) {
                return '中午';
            } else if (hm < 1800) {
                return '下午';
            } else {
                return '晚上';
            }
        },
        calendar: {
            sameDay: '[今天]LT',
            nextDay: '[明天]LT',
            nextWeek: '[下]ddddLT',
            lastDay: '[昨天]LT',
            lastWeek: '[上]ddddLT',
            sameElse: 'L'
        },
        dayOfMonthOrdinalParse: /\d{1,2}(日|月|週)/,
        ordinal: function (number, period) {
            switch (period) {
                case 'd':
                case 'D':
                case 'DDD':
                    return number + '日';
                case 'M':
                    return number + '月';
                case 'w':
                case 'W':
                    return number + '週';
                default:
                    return number;
            }
        },
        relativeTime: {
            future: '%s內',
            past: '%s前',
            s: '幾秒',
            m: '1 分鐘',
            mm: '%d 分鐘',
            h: '1 小時',
            hh: '%d 小時',
            d: '1 天',
            dd: '%d 天',
            M: '1 個月',
            MM: '%d 個月',
            y: '1 年',
            yy: '%d 年'
        }
    });

    return zhTw;
});

/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(121);
__webpack_require__(1);
__webpack_require__(123);
__webpack_require__(126);
__webpack_require__(127);
module.exports = __webpack_require__(128);


/***/ }),
/* 121 */
/***/ (function(module, exports) {

// Avoid `console` errors in browsers that lack a console.
(function () {
    var method;
    var noop = function () {};
    var methods = ['assert', 'clear', 'count', 'debug', 'dir', 'dirxml', 'error', 'exception', 'group', 'groupCollapsed', 'groupEnd', 'info', 'log', 'markTimeline', 'profile', 'profileEnd', 'table', 'time', 'timeEnd', 'timeline', 'timelineEnd', 'timeStamp', 'trace', 'warn'];
    var length = methods.length;
    var console = window.console = window.console || {};

    while (length--) {
        method = methods[length];

        // Only stub undefined methods.
        if (!console[method]) {
            console[method] = noop;
        }
    }
})();

// Place any jQuery/helper plugins in here.

/***/ }),
/* 122 */
/***/ (function(module, exports) {

/* WEBPACK VAR INJECTION */(function(__webpack_amd_options__) {/* globals __webpack_amd_options__ */
module.exports = __webpack_amd_options__;

/* WEBPACK VAR INJECTION */}.call(exports, {}))

/***/ }),
/* 123 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* WEBPACK VAR INJECTION */(function($) {/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_moment__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_moment___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_moment__);


let getRandomArbitrary = (min, max) => {
    return Math.random() * (max - min) + min;
};

let cities = [{
    name: 'Поточне місцезнаходження'
    //longitude: currentPosition.longitude,
    //latitude: currentPosition.longitude
}, {
    name: 'Kyiv',
    longitude: 30.490064099999994,
    latitude: 50.4346147
}, {
    name: 'Kharkiv',
    longitude: 36.2328,
    latitude: 49.9984
}, {
    name: 'Lviv',
    longitude: 23.9935,
    latitude: 49.8398
}];

let dic = {
    'Thunderstorm': {
        ind: [200, 201, 202, 210, 211, 212, 221, 230, 231, 232],
        img: 'img/image_for_Thunderstorm.jpg'
    },
    'Drizzle': {
        ind: [300, 301, 302, 310, 311, 312, 313, 314, 321],
        img: 'img/image_for_Drizzle.jpg'
    },
    'Rain': {
        ind: [500, 501, 502, 503, 504, 511, 520, 521, 522, 531],
        img: 'img/image_for_Rain.jpg'
    },
    'Snow': {
        ind: [600, 601, 602, 611, 612, 615, 616, 620, 621, 622],
        img: 'img/image_for_Snow.jpg'
    },
    'Mist': {
        ind: [701, 711, 721, 731, 741, 751, 761, 762, 771, 781],
        img: 'img/image_for_Mist.jpg'
    },
    'Clear': {
        ind: [800],
        img: 'img/image_for_Clear.jpg'
    },
    'Clouds': {
        ind: [801, 802, 803, 804],
        img: 'img/image_for_Clouds.jpg'
    },
    'Storm': {
        ind: [960, 961, 962, 959, 958, 957, 956],
        img: 'img/image_for_Storm.jpg'
    },
    'Hurricane': {
        ind: [902, 901, 900],
        img: 'img/image_for_Hurricane.jpg'
    }
};

let getWeatherClothes = id => {
    let indexes = Object.keys(dic);

    $('#clothesWrapper').html('');

    indexes.forEach(child => {
        dic[child].ind.forEach(weather => {
            if (weather == id) {
                $('#clothesWrapper').append(`<img class="img-responsive clothes" 
                    src="${dic[child].img}" alt="Image for ${child}" />`);
            }
        });
    });
};

let weatherCtrl = () => {
    let currentPosition;
    const apiKey = '06b35b79d950c1636ced91b9b62f506b';
    const apiKey_pixabay = '7345804-d2dd778dcdd715c08a57bebf3';
    $('#now').html(`${__WEBPACK_IMPORTED_MODULE_0_moment___default()().format('HH:mm')}`);

    let getWeatherImage = search => {
        let settings = {
            "async": true,
            "crossDomain": true,
            "url": `https://pixabay.com/api/?key=${apiKey_pixabay}&q=${search}&image_type=photo`,
            "method": "GET"
        };

        $.ajax(settings).done(function (response) {
            $('#fountainG').css('display', 'none');
            let factor = Math.round(getRandomArbitrary(0, +response.hits.length));
            $('.jumbotronAfter').css('background-image', `url(${response.hits[factor].webformatURL})`);
        });
    };

    let parseData = data => {
        let temp = Math.round(data.main.temp - 273.15);

        $('#temp').html(`${temp} °C`);
        $('#humidity').html(`${data.main.humidity} %`);
        $('#pressure').html(`${data.main.pressure} мм рт. ст.`);
        $('#clouds').html(`${data.clouds.all} %`);
        $('#visibility').html(`${data.visibility} м`);
        $('#wind').html(`${data.wind.speed} м/с`);

        let string = '';
        $('#weather').html('');

        data.weather.forEach(child => {
            $('#weather').append(`<p>${child.description}
                <img src="http://openweathermap.org/img/w/${child.icon}.png" 
                    alt="${child.description}" class="weatherIcon">
                </p>`);

            string += `${child.main}+`;
            getWeatherClothes(child.id);
        });
        $('#fountainG').css('display', 'none');
        //getWeatherImage(string);
    };

    let getCurrentWeather = data => {
        let settings = {
            "async": true,
            "crossDomain": true,
            "url": `http://api.openweathermap.org/data/2.5/weather?lat=${data.latitude}&lon=${data.longitude}&appid=${apiKey}&lang=ua`,
            "method": "GET"
        };

        $.ajax(settings).done(function (response) {
            parseData(response);
        });
    };

    if (navigator.geolocation) {
        $('#fountainG').css('display', 'block');
        navigator.geolocation.getCurrentPosition(res => {
            currentPosition = res.coords;
            getCurrentWeather(currentPosition);
            cities[0].longitude = currentPosition.longitude;
            cities[0].latitude = currentPosition.latitude;
            mapInit(currentPosition);
        }, error => {
            console.log(error);
        });
    }

    $('#selectWeather').change(function () {
        getCurrentWeather(cities[$(this).val()]);
        mapInit(cities[$(this).val()]);
    });
};

let map;

let mapInit = position => {
    console.log(position);
    map.setCenter(new google.maps.LatLng(position.latitude, position.longitude));
};

$(document).ready(() => {
    weatherCtrl();
});

function init() {
    let latlng = new google.maps.LatLng(0, 0);
    let myOptions = {
        zoom: 12,
        center: latlng,
        mapTypeId: google.maps.MapTypeId.ROADMAP
    };
    map = new google.maps.Map(document.getElementById("map"), myOptions);
}

google.maps.event.addDomListener(window, 'load', init);
/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(1)))

/***/ }),
/* 124 */
/***/ (function(module, exports) {

module.exports = function (module) {
	if (!module.webpackPolyfill) {
		module.deprecate = function () {};
		module.paths = [];
		// module.parent = undefined by default
		if (!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function () {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function () {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};

/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./af": 2,
	"./af.js": 2,
	"./ar": 3,
	"./ar-dz": 4,
	"./ar-dz.js": 4,
	"./ar-kw": 5,
	"./ar-kw.js": 5,
	"./ar-ly": 6,
	"./ar-ly.js": 6,
	"./ar-ma": 7,
	"./ar-ma.js": 7,
	"./ar-sa": 8,
	"./ar-sa.js": 8,
	"./ar-tn": 9,
	"./ar-tn.js": 9,
	"./ar.js": 3,
	"./az": 10,
	"./az.js": 10,
	"./be": 11,
	"./be.js": 11,
	"./bg": 12,
	"./bg.js": 12,
	"./bm": 13,
	"./bm.js": 13,
	"./bn": 14,
	"./bn.js": 14,
	"./bo": 15,
	"./bo.js": 15,
	"./br": 16,
	"./br.js": 16,
	"./bs": 17,
	"./bs.js": 17,
	"./ca": 18,
	"./ca.js": 18,
	"./cs": 19,
	"./cs.js": 19,
	"./cv": 20,
	"./cv.js": 20,
	"./cy": 21,
	"./cy.js": 21,
	"./da": 22,
	"./da.js": 22,
	"./de": 23,
	"./de-at": 24,
	"./de-at.js": 24,
	"./de-ch": 25,
	"./de-ch.js": 25,
	"./de.js": 23,
	"./dv": 26,
	"./dv.js": 26,
	"./el": 27,
	"./el.js": 27,
	"./en-au": 28,
	"./en-au.js": 28,
	"./en-ca": 29,
	"./en-ca.js": 29,
	"./en-gb": 30,
	"./en-gb.js": 30,
	"./en-ie": 31,
	"./en-ie.js": 31,
	"./en-nz": 32,
	"./en-nz.js": 32,
	"./eo": 33,
	"./eo.js": 33,
	"./es": 34,
	"./es-do": 35,
	"./es-do.js": 35,
	"./es-us": 36,
	"./es-us.js": 36,
	"./es.js": 34,
	"./et": 37,
	"./et.js": 37,
	"./eu": 38,
	"./eu.js": 38,
	"./fa": 39,
	"./fa.js": 39,
	"./fi": 40,
	"./fi.js": 40,
	"./fo": 41,
	"./fo.js": 41,
	"./fr": 42,
	"./fr-ca": 43,
	"./fr-ca.js": 43,
	"./fr-ch": 44,
	"./fr-ch.js": 44,
	"./fr.js": 42,
	"./fy": 45,
	"./fy.js": 45,
	"./gd": 46,
	"./gd.js": 46,
	"./gl": 47,
	"./gl.js": 47,
	"./gom-latn": 48,
	"./gom-latn.js": 48,
	"./gu": 49,
	"./gu.js": 49,
	"./he": 50,
	"./he.js": 50,
	"./hi": 51,
	"./hi.js": 51,
	"./hr": 52,
	"./hr.js": 52,
	"./hu": 53,
	"./hu.js": 53,
	"./hy-am": 54,
	"./hy-am.js": 54,
	"./id": 55,
	"./id.js": 55,
	"./is": 56,
	"./is.js": 56,
	"./it": 57,
	"./it.js": 57,
	"./ja": 58,
	"./ja.js": 58,
	"./jv": 59,
	"./jv.js": 59,
	"./ka": 60,
	"./ka.js": 60,
	"./kk": 61,
	"./kk.js": 61,
	"./km": 62,
	"./km.js": 62,
	"./kn": 63,
	"./kn.js": 63,
	"./ko": 64,
	"./ko.js": 64,
	"./ky": 65,
	"./ky.js": 65,
	"./lb": 66,
	"./lb.js": 66,
	"./lo": 67,
	"./lo.js": 67,
	"./lt": 68,
	"./lt.js": 68,
	"./lv": 69,
	"./lv.js": 69,
	"./me": 70,
	"./me.js": 70,
	"./mi": 71,
	"./mi.js": 71,
	"./mk": 72,
	"./mk.js": 72,
	"./ml": 73,
	"./ml.js": 73,
	"./mr": 74,
	"./mr.js": 74,
	"./ms": 75,
	"./ms-my": 76,
	"./ms-my.js": 76,
	"./ms.js": 75,
	"./my": 77,
	"./my.js": 77,
	"./nb": 78,
	"./nb.js": 78,
	"./ne": 79,
	"./ne.js": 79,
	"./nl": 80,
	"./nl-be": 81,
	"./nl-be.js": 81,
	"./nl.js": 80,
	"./nn": 82,
	"./nn.js": 82,
	"./pa-in": 83,
	"./pa-in.js": 83,
	"./pl": 84,
	"./pl.js": 84,
	"./pt": 85,
	"./pt-br": 86,
	"./pt-br.js": 86,
	"./pt.js": 85,
	"./ro": 87,
	"./ro.js": 87,
	"./ru": 88,
	"./ru.js": 88,
	"./sd": 89,
	"./sd.js": 89,
	"./se": 90,
	"./se.js": 90,
	"./si": 91,
	"./si.js": 91,
	"./sk": 92,
	"./sk.js": 92,
	"./sl": 93,
	"./sl.js": 93,
	"./sq": 94,
	"./sq.js": 94,
	"./sr": 95,
	"./sr-cyrl": 96,
	"./sr-cyrl.js": 96,
	"./sr.js": 95,
	"./ss": 97,
	"./ss.js": 97,
	"./sv": 98,
	"./sv.js": 98,
	"./sw": 99,
	"./sw.js": 99,
	"./ta": 100,
	"./ta.js": 100,
	"./te": 101,
	"./te.js": 101,
	"./tet": 102,
	"./tet.js": 102,
	"./th": 103,
	"./th.js": 103,
	"./tl-ph": 104,
	"./tl-ph.js": 104,
	"./tlh": 105,
	"./tlh.js": 105,
	"./tr": 106,
	"./tr.js": 106,
	"./tzl": 107,
	"./tzl.js": 107,
	"./tzm": 108,
	"./tzm-latn": 109,
	"./tzm-latn.js": 109,
	"./tzm.js": 108,
	"./uk": 110,
	"./uk.js": 110,
	"./ur": 111,
	"./ur.js": 111,
	"./uz": 112,
	"./uz-latn": 113,
	"./uz-latn.js": 113,
	"./uz.js": 112,
	"./vi": 114,
	"./vi.js": 114,
	"./x-pseudo": 115,
	"./x-pseudo.js": 115,
	"./yo": 116,
	"./yo.js": 116,
	"./zh-cn": 117,
	"./zh-cn.js": 117,
	"./zh-hk": 118,
	"./zh-hk.js": 118,
	"./zh-tw": 119,
	"./zh-tw.js": 119
};
function webpackContext(req) {
	return __webpack_require__(webpackContextResolve(req));
};
function webpackContextResolve(req) {
	var id = map[req];
	if(!(id + 1)) // check for number or string
		throw new Error("Cannot find module '" + req + "'.");
	return id;
};
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = 125;

/***/ }),
/* 126 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 127 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 128 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ })
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgNGQ5N2IwYzY2MDMxNzgxYmYxZjEiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9tb21lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vanMvdmVuZG9yL2pxdWVyeS0zLjIuMS5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvYWYuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvYXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvYXItZHouanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvYXIta3cuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvYXItbHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvYXItbWEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvYXItc2EuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvYXItdG4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvYXouanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvYmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvYmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvYm0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvYm4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvYm8uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvYnIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvYnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvY2EuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvY3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvY3YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvY3kuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZGUtYXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZGUtY2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZHYuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZW4tYXUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZW4tY2EuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZW4tZ2IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZW4taWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZW4tbnouanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZW8uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZXMtZG8uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZXMtdXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZXUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZmEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZmkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZm8uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZnIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZnItY2EuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZnItY2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZ2QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZ2wuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZ29tLWxhdG4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZ3UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvaGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvaGkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvaHIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvaHUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvaHktYW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvaWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvaXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvaXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvamEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvanYuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUva2EuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUva2suanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUva20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUva24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUva28uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUva3kuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvbGIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvbG8uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvbHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvbHYuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvbWkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvbWsuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvbWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvbXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvbXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvbXMtbXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvbXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvbmIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvbmwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvbmwtYmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvbm4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvcGEtaW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvcGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvcHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvcHQtYnIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvcm8uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvcnUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvc2QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvc2kuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvc2suanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvc2wuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvc3EuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvc3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvc3ItY3lybC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9zcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9zdi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9zdy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS90YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS90ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS90ZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvdGwtcGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvdGxoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3RyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3R6bC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS90em0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvdHptLWxhdG4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvdWsuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvdXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvdXouanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvdXotbGF0bi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS92aS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS94LXBzZXVkby5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS95by5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS96aC1jbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS96aC1oay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS96aC10dy5qcyIsIndlYnBhY2s6Ly8vLi9qcy9wbHVnaW5zLmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9hbWQtb3B0aW9ucy5qcyIsIndlYnBhY2s6Ly8vLi9qcy9tYWluLmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUgXlxcLlxcLy4qJCIsIndlYnBhY2s6Ly8vLi9jc3MvYm9vdHN0cmFwLm1pbi5jc3MiLCJ3ZWJwYWNrOi8vLy4vY3NzL21haW4uY3NzIiwid2VicGFjazovLy8uL2Nzcy9ub3JtYWxpemUuY3NzIl0sIm5hbWVzIjpbImdsb2JhbCIsImZhY3RvcnkiLCJtb2R1bGUiLCJleHBvcnRzIiwiZGVmaW5lIiwiYW1kIiwibW9tZW50IiwiaG9va0NhbGxiYWNrIiwiaG9va3MiLCJhcHBseSIsImFyZ3VtZW50cyIsInNldEhvb2tDYWxsYmFjayIsImNhbGxiYWNrIiwiaXNBcnJheSIsImlucHV0IiwiQXJyYXkiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJ0b1N0cmluZyIsImNhbGwiLCJpc09iamVjdCIsImlzT2JqZWN0RW1wdHkiLCJvYmoiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwibGVuZ3RoIiwiayIsImhhc093blByb3BlcnR5IiwiaXNVbmRlZmluZWQiLCJpc051bWJlciIsImlzRGF0ZSIsIkRhdGUiLCJtYXAiLCJhcnIiLCJmbiIsInJlcyIsImkiLCJwdXNoIiwiaGFzT3duUHJvcCIsImEiLCJiIiwiZXh0ZW5kIiwidmFsdWVPZiIsImNyZWF0ZVVUQyIsImZvcm1hdCIsImxvY2FsZSIsInN0cmljdCIsImNyZWF0ZUxvY2FsT3JVVEMiLCJ1dGMiLCJkZWZhdWx0UGFyc2luZ0ZsYWdzIiwiZW1wdHkiLCJ1bnVzZWRUb2tlbnMiLCJ1bnVzZWRJbnB1dCIsIm92ZXJmbG93IiwiY2hhcnNMZWZ0T3ZlciIsIm51bGxJbnB1dCIsImludmFsaWRNb250aCIsImludmFsaWRGb3JtYXQiLCJ1c2VySW52YWxpZGF0ZWQiLCJpc28iLCJwYXJzZWREYXRlUGFydHMiLCJtZXJpZGllbSIsInJmYzI4MjIiLCJ3ZWVrZGF5TWlzbWF0Y2giLCJnZXRQYXJzaW5nRmxhZ3MiLCJtIiwiX3BmIiwic29tZSIsImZ1biIsInQiLCJsZW4iLCJpc1ZhbGlkIiwiX2lzVmFsaWQiLCJmbGFncyIsInBhcnNlZFBhcnRzIiwiaXNOb3dWYWxpZCIsImlzTmFOIiwiX2QiLCJnZXRUaW1lIiwiaW52YWxpZFdlZWtkYXkiLCJfc3RyaWN0IiwiYmlnSG91ciIsInVuZGVmaW5lZCIsImlzRnJvemVuIiwiY3JlYXRlSW52YWxpZCIsIk5hTiIsIm1vbWVudFByb3BlcnRpZXMiLCJjb3B5Q29uZmlnIiwidG8iLCJmcm9tIiwicHJvcCIsInZhbCIsIl9pc0FNb21lbnRPYmplY3QiLCJfaSIsIl9mIiwiX2wiLCJfdHptIiwiX2lzVVRDIiwiX29mZnNldCIsIl9sb2NhbGUiLCJ1cGRhdGVJblByb2dyZXNzIiwiTW9tZW50IiwiY29uZmlnIiwidXBkYXRlT2Zmc2V0IiwiaXNNb21lbnQiLCJhYnNGbG9vciIsIm51bWJlciIsIk1hdGgiLCJjZWlsIiwiZmxvb3IiLCJ0b0ludCIsImFyZ3VtZW50Rm9yQ29lcmNpb24iLCJjb2VyY2VkTnVtYmVyIiwidmFsdWUiLCJpc0Zpbml0ZSIsImNvbXBhcmVBcnJheXMiLCJhcnJheTEiLCJhcnJheTIiLCJkb250Q29udmVydCIsIm1pbiIsImxlbmd0aERpZmYiLCJhYnMiLCJkaWZmcyIsIndhcm4iLCJtc2ciLCJzdXBwcmVzc0RlcHJlY2F0aW9uV2FybmluZ3MiLCJjb25zb2xlIiwiZGVwcmVjYXRlIiwiZmlyc3RUaW1lIiwiZGVwcmVjYXRpb25IYW5kbGVyIiwiYXJncyIsImFyZyIsImtleSIsInNsaWNlIiwiam9pbiIsIkVycm9yIiwic3RhY2siLCJkZXByZWNhdGlvbnMiLCJkZXByZWNhdGVTaW1wbGUiLCJuYW1lIiwiaXNGdW5jdGlvbiIsIkZ1bmN0aW9uIiwic2V0IiwiX2NvbmZpZyIsIl9kYXlPZk1vbnRoT3JkaW5hbFBhcnNlTGVuaWVudCIsIlJlZ0V4cCIsIl9kYXlPZk1vbnRoT3JkaW5hbFBhcnNlIiwic291cmNlIiwiX29yZGluYWxQYXJzZSIsIm1lcmdlQ29uZmlncyIsInBhcmVudENvbmZpZyIsImNoaWxkQ29uZmlnIiwiTG9jYWxlIiwia2V5cyIsImRlZmF1bHRDYWxlbmRhciIsInNhbWVEYXkiLCJuZXh0RGF5IiwibmV4dFdlZWsiLCJsYXN0RGF5IiwibGFzdFdlZWsiLCJzYW1lRWxzZSIsImNhbGVuZGFyIiwibW9tIiwibm93Iiwib3V0cHV0IiwiX2NhbGVuZGFyIiwiZGVmYXVsdExvbmdEYXRlRm9ybWF0IiwiTFRTIiwiTFQiLCJMIiwiTEwiLCJMTEwiLCJMTExMIiwibG9uZ0RhdGVGb3JtYXQiLCJfbG9uZ0RhdGVGb3JtYXQiLCJmb3JtYXRVcHBlciIsInRvVXBwZXJDYXNlIiwicmVwbGFjZSIsImRlZmF1bHRJbnZhbGlkRGF0ZSIsImludmFsaWREYXRlIiwiX2ludmFsaWREYXRlIiwiZGVmYXVsdE9yZGluYWwiLCJkZWZhdWx0RGF5T2ZNb250aE9yZGluYWxQYXJzZSIsIm9yZGluYWwiLCJfb3JkaW5hbCIsImRlZmF1bHRSZWxhdGl2ZVRpbWUiLCJmdXR1cmUiLCJwYXN0IiwicyIsInNzIiwibW0iLCJoIiwiaGgiLCJkIiwiZGQiLCJNIiwiTU0iLCJ5IiwieXkiLCJyZWxhdGl2ZVRpbWUiLCJ3aXRob3V0U3VmZml4Iiwic3RyaW5nIiwiaXNGdXR1cmUiLCJfcmVsYXRpdmVUaW1lIiwicGFzdEZ1dHVyZSIsImRpZmYiLCJhbGlhc2VzIiwiYWRkVW5pdEFsaWFzIiwidW5pdCIsInNob3J0aGFuZCIsImxvd2VyQ2FzZSIsInRvTG93ZXJDYXNlIiwibm9ybWFsaXplVW5pdHMiLCJ1bml0cyIsIm5vcm1hbGl6ZU9iamVjdFVuaXRzIiwiaW5wdXRPYmplY3QiLCJub3JtYWxpemVkSW5wdXQiLCJub3JtYWxpemVkUHJvcCIsInByaW9yaXRpZXMiLCJhZGRVbml0UHJpb3JpdHkiLCJwcmlvcml0eSIsImdldFByaW9yaXRpemVkVW5pdHMiLCJ1bml0c09iaiIsInUiLCJzb3J0IiwiemVyb0ZpbGwiLCJ0YXJnZXRMZW5ndGgiLCJmb3JjZVNpZ24iLCJhYnNOdW1iZXIiLCJ6ZXJvc1RvRmlsbCIsInNpZ24iLCJwb3ciLCJtYXgiLCJzdWJzdHIiLCJmb3JtYXR0aW5nVG9rZW5zIiwibG9jYWxGb3JtYXR0aW5nVG9rZW5zIiwiZm9ybWF0RnVuY3Rpb25zIiwiZm9ybWF0VG9rZW5GdW5jdGlvbnMiLCJhZGRGb3JtYXRUb2tlbiIsInRva2VuIiwicGFkZGVkIiwiZnVuYyIsImxvY2FsZURhdGEiLCJyZW1vdmVGb3JtYXR0aW5nVG9rZW5zIiwibWF0Y2giLCJtYWtlRm9ybWF0RnVuY3Rpb24iLCJhcnJheSIsImZvcm1hdE1vbWVudCIsImV4cGFuZEZvcm1hdCIsInJlcGxhY2VMb25nRGF0ZUZvcm1hdFRva2VucyIsImxhc3RJbmRleCIsInRlc3QiLCJtYXRjaDEiLCJtYXRjaDIiLCJtYXRjaDMiLCJtYXRjaDQiLCJtYXRjaDYiLCJtYXRjaDF0bzIiLCJtYXRjaDN0bzQiLCJtYXRjaDV0bzYiLCJtYXRjaDF0bzMiLCJtYXRjaDF0bzQiLCJtYXRjaDF0bzYiLCJtYXRjaFVuc2lnbmVkIiwibWF0Y2hTaWduZWQiLCJtYXRjaE9mZnNldCIsIm1hdGNoU2hvcnRPZmZzZXQiLCJtYXRjaFRpbWVzdGFtcCIsIm1hdGNoV29yZCIsInJlZ2V4ZXMiLCJhZGRSZWdleFRva2VuIiwicmVnZXgiLCJzdHJpY3RSZWdleCIsImlzU3RyaWN0IiwiZ2V0UGFyc2VSZWdleEZvclRva2VuIiwidW5lc2NhcGVGb3JtYXQiLCJyZWdleEVzY2FwZSIsIm1hdGNoZWQiLCJwMSIsInAyIiwicDMiLCJwNCIsInRva2VucyIsImFkZFBhcnNlVG9rZW4iLCJhZGRXZWVrUGFyc2VUb2tlbiIsIl93IiwiYWRkVGltZVRvQXJyYXlGcm9tVG9rZW4iLCJfYSIsIllFQVIiLCJNT05USCIsIkRBVEUiLCJIT1VSIiwiTUlOVVRFIiwiU0VDT05EIiwiTUlMTElTRUNPTkQiLCJXRUVLIiwiV0VFS0RBWSIsInllYXIiLCJwYXJzZVR3b0RpZ2l0WWVhciIsInBhcnNlSW50IiwiZGF5c0luWWVhciIsImlzTGVhcFllYXIiLCJnZXRTZXRZZWFyIiwibWFrZUdldFNldCIsImdldElzTGVhcFllYXIiLCJrZWVwVGltZSIsInNldCQxIiwiZ2V0IiwibW9udGgiLCJkYXRlIiwiZGF5c0luTW9udGgiLCJzdHJpbmdHZXQiLCJzdHJpbmdTZXQiLCJwcmlvcml0aXplZCIsIm1vZCIsIm4iLCJ4IiwiaW5kZXhPZiIsIm8iLCJtb2RNb250aCIsIm1vbnRoc1Nob3J0IiwibW9udGhzIiwibW9udGhzU2hvcnRSZWdleCIsIm1vbnRoc1JlZ2V4IiwibW9udGhzUGFyc2UiLCJNT05USFNfSU5fRk9STUFUIiwiZGVmYXVsdExvY2FsZU1vbnRocyIsInNwbGl0IiwibG9jYWxlTW9udGhzIiwiX21vbnRocyIsImlzRm9ybWF0IiwiZGVmYXVsdExvY2FsZU1vbnRoc1Nob3J0IiwibG9jYWxlTW9udGhzU2hvcnQiLCJfbW9udGhzU2hvcnQiLCJoYW5kbGVTdHJpY3RQYXJzZSIsIm1vbnRoTmFtZSIsImlpIiwibGxjIiwidG9Mb2NhbGVMb3dlckNhc2UiLCJfbW9udGhzUGFyc2UiLCJfbG9uZ01vbnRoc1BhcnNlIiwiX3Nob3J0TW9udGhzUGFyc2UiLCJsb2NhbGVNb250aHNQYXJzZSIsIl9tb250aHNQYXJzZUV4YWN0Iiwic2V0TW9udGgiLCJkYXlPZk1vbnRoIiwiZ2V0U2V0TW9udGgiLCJnZXREYXlzSW5Nb250aCIsImRlZmF1bHRNb250aHNTaG9ydFJlZ2V4IiwiY29tcHV0ZU1vbnRoc1BhcnNlIiwiX21vbnRoc1Nob3J0U3RyaWN0UmVnZXgiLCJfbW9udGhzU2hvcnRSZWdleCIsImRlZmF1bHRNb250aHNSZWdleCIsIl9tb250aHNTdHJpY3RSZWdleCIsIl9tb250aHNSZWdleCIsImNtcExlblJldiIsInNob3J0UGllY2VzIiwibG9uZ1BpZWNlcyIsIm1peGVkUGllY2VzIiwiY3JlYXRlRGF0ZSIsIm1zIiwiZ2V0RnVsbFllYXIiLCJzZXRGdWxsWWVhciIsImNyZWF0ZVVUQ0RhdGUiLCJVVEMiLCJnZXRVVENGdWxsWWVhciIsInNldFVUQ0Z1bGxZZWFyIiwiZmlyc3RXZWVrT2Zmc2V0IiwiZG93IiwiZG95IiwiZndkIiwiZndkbHciLCJnZXRVVENEYXkiLCJkYXlPZlllYXJGcm9tV2Vla3MiLCJ3ZWVrIiwid2Vla2RheSIsImxvY2FsV2Vla2RheSIsIndlZWtPZmZzZXQiLCJkYXlPZlllYXIiLCJyZXNZZWFyIiwicmVzRGF5T2ZZZWFyIiwid2Vla09mWWVhciIsInJlc1dlZWsiLCJ3ZWVrc0luWWVhciIsIndlZWtPZmZzZXROZXh0IiwibG9jYWxlV2VlayIsIl93ZWVrIiwiZGVmYXVsdExvY2FsZVdlZWsiLCJsb2NhbGVGaXJzdERheU9mV2VlayIsImxvY2FsZUZpcnN0RGF5T2ZZZWFyIiwiZ2V0U2V0V2VlayIsImFkZCIsImdldFNldElTT1dlZWsiLCJ3ZWVrZGF5c01pbiIsIndlZWtkYXlzU2hvcnQiLCJ3ZWVrZGF5cyIsIndlZWtkYXlzTWluUmVnZXgiLCJ3ZWVrZGF5c1Nob3J0UmVnZXgiLCJ3ZWVrZGF5c1JlZ2V4Iiwid2Vla2RheXNQYXJzZSIsInBhcnNlV2Vla2RheSIsInBhcnNlSXNvV2Vla2RheSIsImRlZmF1bHRMb2NhbGVXZWVrZGF5cyIsImxvY2FsZVdlZWtkYXlzIiwiX3dlZWtkYXlzIiwiZGF5IiwiZGVmYXVsdExvY2FsZVdlZWtkYXlzU2hvcnQiLCJsb2NhbGVXZWVrZGF5c1Nob3J0IiwiX3dlZWtkYXlzU2hvcnQiLCJkZWZhdWx0TG9jYWxlV2Vla2RheXNNaW4iLCJsb2NhbGVXZWVrZGF5c01pbiIsIl93ZWVrZGF5c01pbiIsImhhbmRsZVN0cmljdFBhcnNlJDEiLCJ3ZWVrZGF5TmFtZSIsIl93ZWVrZGF5c1BhcnNlIiwiX3Nob3J0V2Vla2RheXNQYXJzZSIsIl9taW5XZWVrZGF5c1BhcnNlIiwibG9jYWxlV2Vla2RheXNQYXJzZSIsIl93ZWVrZGF5c1BhcnNlRXhhY3QiLCJfZnVsbFdlZWtkYXlzUGFyc2UiLCJnZXRTZXREYXlPZldlZWsiLCJnZXREYXkiLCJnZXRTZXRMb2NhbGVEYXlPZldlZWsiLCJnZXRTZXRJU09EYXlPZldlZWsiLCJkZWZhdWx0V2Vla2RheXNSZWdleCIsImNvbXB1dGVXZWVrZGF5c1BhcnNlIiwiX3dlZWtkYXlzU3RyaWN0UmVnZXgiLCJfd2Vla2RheXNSZWdleCIsImRlZmF1bHRXZWVrZGF5c1Nob3J0UmVnZXgiLCJfd2Vla2RheXNTaG9ydFN0cmljdFJlZ2V4IiwiX3dlZWtkYXlzU2hvcnRSZWdleCIsImRlZmF1bHRXZWVrZGF5c01pblJlZ2V4IiwiX3dlZWtkYXlzTWluU3RyaWN0UmVnZXgiLCJfd2Vla2RheXNNaW5SZWdleCIsIm1pblBpZWNlcyIsIm1pbnAiLCJzaG9ydHAiLCJsb25ncCIsImhGb3JtYXQiLCJob3VycyIsImtGb3JtYXQiLCJtaW51dGVzIiwic2Vjb25kcyIsImxvd2VyY2FzZSIsIm1hdGNoTWVyaWRpZW0iLCJfbWVyaWRpZW1QYXJzZSIsImtJbnB1dCIsIl9pc1BtIiwiaXNQTSIsIl9tZXJpZGllbSIsInBvcyIsInBvczEiLCJwb3MyIiwibG9jYWxlSXNQTSIsImNoYXJBdCIsImRlZmF1bHRMb2NhbGVNZXJpZGllbVBhcnNlIiwibG9jYWxlTWVyaWRpZW0iLCJpc0xvd2VyIiwiZ2V0U2V0SG91ciIsImJhc2VDb25maWciLCJkYXlPZk1vbnRoT3JkaW5hbFBhcnNlIiwibWVyaWRpZW1QYXJzZSIsImxvY2FsZXMiLCJsb2NhbGVGYW1pbGllcyIsImdsb2JhbExvY2FsZSIsIm5vcm1hbGl6ZUxvY2FsZSIsImNob29zZUxvY2FsZSIsIm5hbWVzIiwiaiIsIm5leHQiLCJsb2FkTG9jYWxlIiwib2xkTG9jYWxlIiwiX2FiYnIiLCJhbGlhc2VkUmVxdWlyZSIsInJlcXVpcmUiLCJnZXRTZXRHbG9iYWxMb2NhbGUiLCJlIiwidmFsdWVzIiwiZGF0YSIsImdldExvY2FsZSIsImRlZmluZUxvY2FsZSIsImFiYnIiLCJwYXJlbnRMb2NhbGUiLCJmb3JFYWNoIiwidXBkYXRlTG9jYWxlIiwidG1wTG9jYWxlIiwibGlzdExvY2FsZXMiLCJjaGVja092ZXJmbG93IiwiX292ZXJmbG93RGF5T2ZZZWFyIiwiX292ZXJmbG93V2Vla3MiLCJfb3ZlcmZsb3dXZWVrZGF5IiwiZGVmYXVsdHMiLCJjIiwiY3VycmVudERhdGVBcnJheSIsIm5vd1ZhbHVlIiwiX3VzZVVUQyIsImdldFVUQ01vbnRoIiwiZ2V0VVRDRGF0ZSIsImdldE1vbnRoIiwiZ2V0RGF0ZSIsImNvbmZpZ0Zyb21BcnJheSIsImN1cnJlbnREYXRlIiwieWVhclRvVXNlIiwiZGF5T2ZZZWFyRnJvbVdlZWtJbmZvIiwiX2RheU9mWWVhciIsIl9uZXh0RGF5Iiwic2V0VVRDTWludXRlcyIsImdldFVUQ01pbnV0ZXMiLCJ3Iiwid2Vla1llYXIiLCJ0ZW1wIiwid2Vla2RheU92ZXJmbG93IiwiR0ciLCJXIiwiRSIsImNyZWF0ZUxvY2FsIiwiY3VyV2VlayIsImdnIiwiZXh0ZW5kZWRJc29SZWdleCIsImJhc2ljSXNvUmVnZXgiLCJ0elJlZ2V4IiwiaXNvRGF0ZXMiLCJpc29UaW1lcyIsImFzcE5ldEpzb25SZWdleCIsImNvbmZpZ0Zyb21JU08iLCJsIiwiZXhlYyIsImFsbG93VGltZSIsImRhdGVGb3JtYXQiLCJ0aW1lRm9ybWF0IiwidHpGb3JtYXQiLCJjb25maWdGcm9tU3RyaW5nQW5kRm9ybWF0IiwiZXh0cmFjdEZyb21SRkMyODIyU3RyaW5ncyIsInllYXJTdHIiLCJtb250aFN0ciIsImRheVN0ciIsImhvdXJTdHIiLCJtaW51dGVTdHIiLCJzZWNvbmRTdHIiLCJyZXN1bHQiLCJ1bnRydW5jYXRlWWVhciIsInByZXByb2Nlc3NSRkMyODIyIiwidHJpbSIsImNoZWNrV2Vla2RheSIsIndlZWtkYXlTdHIiLCJwYXJzZWRJbnB1dCIsIndlZWtkYXlQcm92aWRlZCIsIndlZWtkYXlBY3R1YWwiLCJvYnNPZmZzZXRzIiwiVVQiLCJHTVQiLCJFRFQiLCJFU1QiLCJDRFQiLCJDU1QiLCJNRFQiLCJNU1QiLCJQRFQiLCJQU1QiLCJjYWxjdWxhdGVPZmZzZXQiLCJvYnNPZmZzZXQiLCJtaWxpdGFyeU9mZnNldCIsIm51bU9mZnNldCIsImhtIiwiY29uZmlnRnJvbVJGQzI4MjIiLCJwYXJzZWRBcnJheSIsImNvbmZpZ0Zyb21TdHJpbmciLCJjcmVhdGVGcm9tSW5wdXRGYWxsYmFjayIsIklTT184NjAxIiwiUkZDXzI4MjIiLCJza2lwcGVkIiwic3RyaW5nTGVuZ3RoIiwidG90YWxQYXJzZWRJbnB1dExlbmd0aCIsIm1lcmlkaWVtRml4V3JhcCIsImhvdXIiLCJpc1BtIiwibWVyaWRpZW1Ib3VyIiwiY29uZmlnRnJvbVN0cmluZ0FuZEFycmF5IiwidGVtcENvbmZpZyIsImJlc3RNb21lbnQiLCJzY29yZVRvQmVhdCIsImN1cnJlbnRTY29yZSIsInNjb3JlIiwiY29uZmlnRnJvbU9iamVjdCIsIm1pbnV0ZSIsInNlY29uZCIsIm1pbGxpc2Vjb25kIiwiY3JlYXRlRnJvbUNvbmZpZyIsInByZXBhcmVDb25maWciLCJwcmVwYXJzZSIsImNvbmZpZ0Zyb21JbnB1dCIsImlzVVRDIiwicHJvdG90eXBlTWluIiwib3RoZXIiLCJwcm90b3R5cGVNYXgiLCJwaWNrQnkiLCJtb21lbnRzIiwib3JkZXJpbmciLCJpc0R1cmF0aW9uVmFsaWQiLCJ1bml0SGFzRGVjaW1hbCIsInBhcnNlRmxvYXQiLCJpc1ZhbGlkJDEiLCJjcmVhdGVJbnZhbGlkJDEiLCJjcmVhdGVEdXJhdGlvbiIsIkR1cmF0aW9uIiwiZHVyYXRpb24iLCJ5ZWFycyIsInF1YXJ0ZXJzIiwicXVhcnRlciIsIndlZWtzIiwiZGF5cyIsIm1pbGxpc2Vjb25kcyIsIl9taWxsaXNlY29uZHMiLCJfZGF5cyIsIl9kYXRhIiwiX2J1YmJsZSIsImlzRHVyYXRpb24iLCJhYnNSb3VuZCIsInJvdW5kIiwib2Zmc2V0Iiwic2VwYXJhdG9yIiwidXRjT2Zmc2V0Iiwib2Zmc2V0RnJvbVN0cmluZyIsImNodW5rT2Zmc2V0IiwibWF0Y2hlciIsIm1hdGNoZXMiLCJjaHVuayIsInBhcnRzIiwiY2xvbmVXaXRoT2Zmc2V0IiwibW9kZWwiLCJjbG9uZSIsInNldFRpbWUiLCJsb2NhbCIsImdldERhdGVPZmZzZXQiLCJnZXRUaW1lem9uZU9mZnNldCIsImdldFNldE9mZnNldCIsImtlZXBMb2NhbFRpbWUiLCJrZWVwTWludXRlcyIsImxvY2FsQWRqdXN0IiwiX2NoYW5nZUluUHJvZ3Jlc3MiLCJhZGRTdWJ0cmFjdCIsImdldFNldFpvbmUiLCJzZXRPZmZzZXRUb1VUQyIsInNldE9mZnNldFRvTG9jYWwiLCJzdWJ0cmFjdCIsInNldE9mZnNldFRvUGFyc2VkT2Zmc2V0IiwidFpvbmUiLCJoYXNBbGlnbmVkSG91ck9mZnNldCIsImlzRGF5bGlnaHRTYXZpbmdUaW1lIiwiaXNEYXlsaWdodFNhdmluZ1RpbWVTaGlmdGVkIiwiX2lzRFNUU2hpZnRlZCIsInRvQXJyYXkiLCJpc0xvY2FsIiwiaXNVdGNPZmZzZXQiLCJpc1V0YyIsImFzcE5ldFJlZ2V4IiwiaXNvUmVnZXgiLCJyZXQiLCJkaWZmUmVzIiwicGFyc2VJc28iLCJtb21lbnRzRGlmZmVyZW5jZSIsImludmFsaWQiLCJpbnAiLCJwb3NpdGl2ZU1vbWVudHNEaWZmZXJlbmNlIiwiYmFzZSIsImlzQWZ0ZXIiLCJpc0JlZm9yZSIsImNyZWF0ZUFkZGVyIiwiZGlyZWN0aW9uIiwicGVyaW9kIiwiZHVyIiwidG1wIiwiaXNBZGRpbmciLCJnZXRDYWxlbmRhckZvcm1hdCIsIm15TW9tZW50IiwiY2FsZW5kYXIkMSIsInRpbWUiLCJmb3JtYXRzIiwic29kIiwic3RhcnRPZiIsImNhbGVuZGFyRm9ybWF0IiwibG9jYWxJbnB1dCIsImVuZE9mIiwiaXNCZXR3ZWVuIiwiaW5jbHVzaXZpdHkiLCJpc1NhbWUiLCJpbnB1dE1zIiwiaXNTYW1lT3JBZnRlciIsImlzU2FtZU9yQmVmb3JlIiwiYXNGbG9hdCIsInRoYXQiLCJ6b25lRGVsdGEiLCJkZWx0YSIsIm1vbnRoRGlmZiIsIndob2xlTW9udGhEaWZmIiwiYW5jaG9yIiwiYW5jaG9yMiIsImFkanVzdCIsImRlZmF1bHRGb3JtYXQiLCJkZWZhdWx0Rm9ybWF0VXRjIiwidG9JU09TdHJpbmciLCJ0b0RhdGUiLCJpbnNwZWN0Iiwiem9uZSIsInByZWZpeCIsImRhdGV0aW1lIiwic3VmZml4IiwiaW5wdXRTdHJpbmciLCJwb3N0Zm9ybWF0IiwiaHVtYW5pemUiLCJmcm9tTm93IiwidG9Ob3ciLCJuZXdMb2NhbGVEYXRhIiwibGFuZyIsImlzb1dlZWtkYXkiLCJ1bml4IiwidG9PYmplY3QiLCJ0b0pTT04iLCJpc1ZhbGlkJDIiLCJwYXJzaW5nRmxhZ3MiLCJpbnZhbGlkQXQiLCJjcmVhdGlvbkRhdGEiLCJpc29XZWVrWWVhciIsImFkZFdlZWtZZWFyRm9ybWF0VG9rZW4iLCJnZXR0ZXIiLCJnZXRTZXRXZWVrWWVhciIsImdldFNldFdlZWtZZWFySGVscGVyIiwiZ2V0U2V0SVNPV2Vla1llYXIiLCJpc29XZWVrIiwiZ2V0SVNPV2Vla3NJblllYXIiLCJnZXRXZWVrc0luWWVhciIsIndlZWtJbmZvIiwid2Vla3NUYXJnZXQiLCJzZXRXZWVrQWxsIiwiZGF5T2ZZZWFyRGF0YSIsImdldFNldFF1YXJ0ZXIiLCJnZXRTZXREYXlPZk1vbnRoIiwiZ2V0U2V0RGF5T2ZZZWFyIiwiZ2V0U2V0TWludXRlIiwiZ2V0U2V0U2Vjb25kIiwicGFyc2VNcyIsImdldFNldE1pbGxpc2Vjb25kIiwiZ2V0Wm9uZUFiYnIiLCJnZXRab25lTmFtZSIsInByb3RvIiwiaXNvV2Vla3MiLCJpc29XZWVrc0luWWVhciIsInBhcnNlWm9uZSIsImlzRFNUIiwiem9uZUFiYnIiLCJ6b25lTmFtZSIsImRhdGVzIiwiaXNEU1RTaGlmdGVkIiwiY3JlYXRlVW5peCIsImNyZWF0ZUluWm9uZSIsInByZVBhcnNlUG9zdEZvcm1hdCIsInByb3RvJDEiLCJmaXJzdERheU9mWWVhciIsImZpcnN0RGF5T2ZXZWVrIiwiZ2V0JDEiLCJpbmRleCIsImZpZWxkIiwic2V0dGVyIiwibGlzdE1vbnRoc0ltcGwiLCJvdXQiLCJsaXN0V2Vla2RheXNJbXBsIiwibG9jYWxlU29ydGVkIiwic2hpZnQiLCJsaXN0TW9udGhzIiwibGlzdE1vbnRoc1Nob3J0IiwibGlzdFdlZWtkYXlzIiwibGlzdFdlZWtkYXlzU2hvcnQiLCJsaXN0V2Vla2RheXNNaW4iLCJsYW5nRGF0YSIsIm1hdGhBYnMiLCJhZGRTdWJ0cmFjdCQxIiwiYWRkJDEiLCJzdWJ0cmFjdCQxIiwiYWJzQ2VpbCIsImJ1YmJsZSIsIm1vbnRoc0Zyb21EYXlzIiwibW9udGhzVG9EYXlzIiwiZGF5c1RvTW9udGhzIiwiYXMiLCJ2YWx1ZU9mJDEiLCJtYWtlQXMiLCJhbGlhcyIsImFzTWlsbGlzZWNvbmRzIiwiYXNTZWNvbmRzIiwiYXNNaW51dGVzIiwiYXNIb3VycyIsImFzRGF5cyIsImFzV2Vla3MiLCJhc01vbnRocyIsImFzWWVhcnMiLCJjbG9uZSQxIiwiZ2V0JDIiLCJtYWtlR2V0dGVyIiwidGhyZXNob2xkcyIsInN1YnN0aXR1dGVUaW1lQWdvIiwicmVsYXRpdmVUaW1lJDEiLCJwb3NOZWdEdXJhdGlvbiIsImdldFNldFJlbGF0aXZlVGltZVJvdW5kaW5nIiwicm91bmRpbmdGdW5jdGlvbiIsImdldFNldFJlbGF0aXZlVGltZVRocmVzaG9sZCIsInRocmVzaG9sZCIsImxpbWl0Iiwid2l0aFN1ZmZpeCIsImFicyQxIiwidG9JU09TdHJpbmckMSIsIlkiLCJEIiwidG9GaXhlZCIsInRvdGFsIiwidG90YWxTaWduIiwieW1TaWduIiwiZGF5c1NpZ24iLCJobXNTaWduIiwicHJvdG8kMiIsInRvSXNvU3RyaW5nIiwidmVyc2lvbiIsInJlbGF0aXZlVGltZVJvdW5kaW5nIiwicmVsYXRpdmVUaW1lVGhyZXNob2xkIiwiZG9jdW1lbnQiLCJ3aW5kb3ciLCJnZXRQcm90b3R5cGVPZiIsImYiLCJnIiwiY29uY2F0IiwicCIsImNyZWF0ZUVsZW1lbnQiLCJ0ZXh0IiwiaGVhZCIsImFwcGVuZENoaWxkIiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwicSIsInIiLCJpbml0IiwidiIsImpxdWVyeSIsImNvbnN0cnVjdG9yIiwicHVzaFN0YWNrIiwibWVyZ2UiLCJwcmV2T2JqZWN0IiwiZWFjaCIsImZpcnN0IiwiZXEiLCJsYXN0IiwiZW5kIiwic3BsaWNlIiwiaXNQbGFpbk9iamVjdCIsImV4cGFuZG8iLCJyYW5kb20iLCJpc1JlYWR5IiwiZXJyb3IiLCJub29wIiwidHlwZSIsImlzV2luZG93IiwiaXNOdW1lcmljIiwiaXNFbXB0eU9iamVjdCIsImdsb2JhbEV2YWwiLCJjYW1lbENhc2UiLCJtYWtlQXJyYXkiLCJpbkFycmF5IiwiZ3JlcCIsImd1aWQiLCJwcm94eSIsInN1cHBvcnQiLCJTeW1ib2wiLCJpdGVyYXRvciIsImhhIiwieiIsIkEiLCJCIiwiQyIsInBvcCIsIkYiLCJHIiwiSCIsIkkiLCJKIiwiSyIsIk4iLCJPIiwiUCIsIlEiLCJSIiwiUyIsIlQiLCJVIiwiViIsIklEIiwiQ0xBU1MiLCJUQUciLCJBVFRSIiwiUFNFVURPIiwiQ0hJTEQiLCJib29sIiwibmVlZHNDb250ZXh0IiwiWCIsIloiLCIkIiwiXyIsImFhIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwiYmEiLCJjYSIsImNoYXJDb2RlQXQiLCJkYSIsImVhIiwidGEiLCJkaXNhYmxlZCIsImRpciIsImNoaWxkTm9kZXMiLCJub2RlVHlwZSIsImZhIiwiZ2EiLCJvd25lckRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJpZCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsInFzYSIsIm5vZGVOYW1lIiwiZ2V0QXR0cmlidXRlIiwic2V0QXR0cmlidXRlIiwic2EiLCJxYSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJyZW1vdmVBdHRyaWJ1dGUiLCJjYWNoZUxlbmd0aCIsImlhIiwiamEiLCJrYSIsImF0dHJIYW5kbGUiLCJsYSIsInNvdXJjZUluZGV4IiwibmV4dFNpYmxpbmciLCJtYSIsIm5hIiwib2EiLCJpc0Rpc2FibGVkIiwicGEiLCJpc1hNTCIsImRvY3VtZW50RWxlbWVudCIsInNldERvY3VtZW50IiwiZGVmYXVsdFZpZXciLCJ0b3AiLCJhZGRFdmVudExpc3RlbmVyIiwiYXR0YWNoRXZlbnQiLCJhdHRyaWJ1dGVzIiwiY2xhc3NOYW1lIiwiY3JlYXRlQ29tbWVudCIsImdldEJ5SWQiLCJnZXRFbGVtZW50c0J5TmFtZSIsImZpbHRlciIsImZpbmQiLCJnZXRBdHRyaWJ1dGVOb2RlIiwiaW5uZXJIVE1MIiwibWF0Y2hlc1NlbGVjdG9yIiwid2Via2l0TWF0Y2hlc1NlbGVjdG9yIiwibW96TWF0Y2hlc1NlbGVjdG9yIiwib01hdGNoZXNTZWxlY3RvciIsIm1zTWF0Y2hlc1NlbGVjdG9yIiwiZGlzY29ubmVjdGVkTWF0Y2giLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsImNvbnRhaW5zIiwic29ydERldGFjaGVkIiwidW5zaGlmdCIsImF0dHIiLCJzcGVjaWZpZWQiLCJlc2NhcGUiLCJ1bmlxdWVTb3J0IiwiZGV0ZWN0RHVwbGljYXRlcyIsInNvcnRTdGFibGUiLCJnZXRUZXh0IiwidGV4dENvbnRlbnQiLCJmaXJzdENoaWxkIiwibm9kZVZhbHVlIiwic2VsZWN0b3JzIiwiY3JlYXRlUHNldWRvIiwicmVsYXRpdmUiLCJwcmVGaWx0ZXIiLCJsYXN0Q2hpbGQiLCJ1bmlxdWVJRCIsInBzZXVkb3MiLCJzZXRGaWx0ZXJzIiwibm90IiwiaGFzIiwiaW5uZXJUZXh0IiwidGFyZ2V0IiwibG9jYXRpb24iLCJoYXNoIiwicm9vdCIsImZvY3VzIiwiYWN0aXZlRWxlbWVudCIsImhhc0ZvY3VzIiwiaHJlZiIsInRhYkluZGV4IiwiZW5hYmxlZCIsImNoZWNrZWQiLCJzZWxlY3RlZCIsInNlbGVjdGVkSW5kZXgiLCJwYXJlbnQiLCJoZWFkZXIiLCJidXR0b24iLCJldmVuIiwib2RkIiwibHQiLCJndCIsIm50aCIsInJhZGlvIiwiY2hlY2tib3giLCJmaWxlIiwicGFzc3dvcmQiLCJpbWFnZSIsInN1Ym1pdCIsInJlc2V0IiwicmEiLCJmaWx0ZXJzIiwidG9rZW5pemUiLCJ1YSIsInZhIiwid2EiLCJ4YSIsInlhIiwiemEiLCJjb21waWxlIiwic2VsZWN0b3IiLCJzZWxlY3QiLCJkZWZhdWx0VmFsdWUiLCJleHByIiwidW5pcXVlIiwiaXNYTUxEb2MiLCJlc2NhcGVTZWxlY3RvciIsImlzIiwicGFyc2VIVE1MIiwicmVhZHkiLCJjaGlsZHJlbiIsImNvbnRlbnRzIiwicHJldiIsImNsb3Nlc3QiLCJwcmV2QWxsIiwiYWRkQmFjayIsInBhcmVudHMiLCJwYXJlbnRzVW50aWwiLCJuZXh0QWxsIiwibmV4dFVudGlsIiwicHJldlVudGlsIiwic2libGluZ3MiLCJjb250ZW50RG9jdW1lbnQiLCJjb250ZW50IiwicmV2ZXJzZSIsIkNhbGxiYWNrcyIsIm9uY2UiLCJzdG9wT25GYWxzZSIsIm1lbW9yeSIsInJlbW92ZSIsImRpc2FibGUiLCJsb2NrIiwibG9ja2VkIiwiZmlyZVdpdGgiLCJmaXJlIiwiZmlyZWQiLCJwcm9taXNlIiwiZG9uZSIsImZhaWwiLCJ0aGVuIiwiRGVmZXJyZWQiLCJzdGF0ZSIsImFsd2F5cyIsInBpcGUiLCJwcm9ncmVzcyIsIm5vdGlmeSIsInJlc29sdmUiLCJyZWplY3QiLCJUeXBlRXJyb3IiLCJub3RpZnlXaXRoIiwicmVzb2x2ZVdpdGgiLCJleGNlcHRpb25Ib29rIiwic3RhY2tUcmFjZSIsInJlamVjdFdpdGgiLCJnZXRTdGFja0hvb2siLCJzZXRUaW1lb3V0Iiwid2hlbiIsIm1lc3NhZ2UiLCJyZWFkeUV4Y2VwdGlvbiIsInJlYWR5V2FpdCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJyZWFkeVN0YXRlIiwiZG9TY3JvbGwiLCJ1aWQiLCJjYWNoZSIsImRlZmluZVByb3BlcnR5IiwiY29uZmlndXJhYmxlIiwiYWNjZXNzIiwiaGFzRGF0YSIsIkpTT04iLCJwYXJzZSIsInJlbW92ZURhdGEiLCJfcmVtb3ZlRGF0YSIsInF1ZXVlIiwiZGVxdWV1ZSIsIl9xdWV1ZUhvb2tzIiwic3RvcCIsImNsZWFyUXVldWUiLCJzdHlsZSIsImRpc3BsYXkiLCJjc3MiLCJjdXIiLCJjc3NOdW1iZXIiLCJzdGFydCIsImJvZHkiLCJzaG93IiwiaGlkZSIsInRvZ2dsZSIsIm9wdGlvbiIsInRoZWFkIiwiY29sIiwidHIiLCJ0ZCIsIl9kZWZhdWx0Iiwib3B0Z3JvdXAiLCJ0Ym9keSIsInRmb290IiwiY29sZ3JvdXAiLCJjYXB0aW9uIiwidGgiLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50IiwiaHRtbFByZWZpbHRlciIsImNyZWF0ZVRleHROb2RlIiwiY2hlY2tDbG9uZSIsImNsb25lTm9kZSIsIm5vQ2xvbmVDaGVja2VkIiwib2ZmIiwiZXZlbnQiLCJoYW5kbGVyIiwiZXZlbnRzIiwiaGFuZGxlIiwidHJpZ2dlcmVkIiwiZGlzcGF0Y2giLCJzcGVjaWFsIiwiZGVsZWdhdGVUeXBlIiwiYmluZFR5cGUiLCJvcmlnVHlwZSIsIm5hbWVzcGFjZSIsImRlbGVnYXRlQ291bnQiLCJzZXR1cCIsInRlYXJkb3duIiwicmVtb3ZlRXZlbnQiLCJmaXgiLCJkZWxlZ2F0ZVRhcmdldCIsInByZURpc3BhdGNoIiwiaGFuZGxlcnMiLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsImN1cnJlbnRUYXJnZXQiLCJlbGVtIiwiaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQiLCJybmFtZXNwYWNlIiwiaGFuZGxlT2JqIiwicHJldmVudERlZmF1bHQiLCJzdG9wUHJvcGFnYXRpb24iLCJwb3N0RGlzcGF0Y2giLCJhZGRQcm9wIiwiRXZlbnQiLCJlbnVtZXJhYmxlIiwib3JpZ2luYWxFdmVudCIsIndyaXRhYmxlIiwibG9hZCIsIm5vQnViYmxlIiwidHJpZ2dlciIsImJsdXIiLCJjbGljayIsImJlZm9yZXVubG9hZCIsInJldHVyblZhbHVlIiwiaXNEZWZhdWx0UHJldmVudGVkIiwiZGVmYXVsdFByZXZlbnRlZCIsInJlbGF0ZWRUYXJnZXQiLCJ0aW1lU3RhbXAiLCJpc1NpbXVsYXRlZCIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsImFsdEtleSIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwiY2hhbmdlZFRvdWNoZXMiLCJjdHJsS2V5IiwiZGV0YWlsIiwiZXZlbnRQaGFzZSIsIm1ldGFLZXkiLCJwYWdlWCIsInBhZ2VZIiwic2hpZnRLZXkiLCJ2aWV3IiwiY2hhckNvZGUiLCJrZXlDb2RlIiwiYnV0dG9ucyIsImNsaWVudFgiLCJjbGllbnRZIiwib2Zmc2V0WCIsIm9mZnNldFkiLCJwb2ludGVySWQiLCJwb2ludGVyVHlwZSIsInNjcmVlblgiLCJzY3JlZW5ZIiwidGFyZ2V0VG91Y2hlcyIsInRvRWxlbWVudCIsInRvdWNoZXMiLCJ3aGljaCIsIm1vdXNlZW50ZXIiLCJtb3VzZWxlYXZlIiwicG9pbnRlcmVudGVyIiwicG9pbnRlcmxlYXZlIiwib24iLCJvbmUiLCJBYSIsIkJhIiwiQ2EiLCJEYSIsIkVhIiwiRmEiLCJHYSIsIkhhIiwiSWEiLCJKYSIsImh0bWwiLCJzcmMiLCJfZXZhbFVybCIsIkthIiwiY2xlYW5EYXRhIiwiZGV0YWNoIiwiYXBwZW5kIiwicHJlcGVuZCIsImluc2VydEJlZm9yZSIsImJlZm9yZSIsImFmdGVyIiwicmVwbGFjZVdpdGgiLCJyZXBsYWNlQ2hpbGQiLCJhcHBlbmRUbyIsInByZXBlbmRUbyIsImluc2VydEFmdGVyIiwicmVwbGFjZUFsbCIsIkxhIiwiTWEiLCJOYSIsIm9wZW5lciIsImdldENvbXB1dGVkU3R5bGUiLCJjc3NUZXh0IiwibWFyZ2luTGVmdCIsIndpZHRoIiwibWFyZ2luUmlnaHQiLCJiYWNrZ3JvdW5kQ2xpcCIsImNsZWFyQ2xvbmVTdHlsZSIsInBpeGVsUG9zaXRpb24iLCJib3hTaXppbmdSZWxpYWJsZSIsInBpeGVsTWFyZ2luUmlnaHQiLCJyZWxpYWJsZU1hcmdpbkxlZnQiLCJPYSIsImdldFByb3BlcnR5VmFsdWUiLCJtaW5XaWR0aCIsIm1heFdpZHRoIiwiUGEiLCJRYSIsIlJhIiwiU2EiLCJwb3NpdGlvbiIsInZpc2liaWxpdHkiLCJUYSIsImxldHRlclNwYWNpbmciLCJmb250V2VpZ2h0IiwiVWEiLCJWYSIsIldhIiwiWGEiLCJjc3NQcm9wcyIsIllhIiwiWmEiLCIkYSIsImNzc0hvb2tzIiwib3BhY2l0eSIsImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50IiwiY29sdW1uQ291bnQiLCJmaWxsT3BhY2l0eSIsImZsZXhHcm93IiwiZmxleFNocmluayIsImxpbmVIZWlnaHQiLCJvcmRlciIsIm9ycGhhbnMiLCJ3aWRvd3MiLCJ6SW5kZXgiLCJ6b29tIiwic2V0UHJvcGVydHkiLCJnZXRDbGllbnRSZWN0cyIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImxlZnQiLCJtYXJnaW4iLCJwYWRkaW5nIiwiYm9yZGVyIiwiZXhwYW5kIiwiVHdlZW4iLCJlYXNpbmciLCJvcHRpb25zIiwicHJvcEhvb2tzIiwicnVuIiwic3RlcCIsImZ4Iiwic2Nyb2xsVG9wIiwic2Nyb2xsTGVmdCIsImxpbmVhciIsInN3aW5nIiwiY29zIiwiUEkiLCJhYiIsImJiIiwiY2IiLCJkYiIsImViIiwiaGlkZGVuIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiaW50ZXJ2YWwiLCJ0aWNrIiwiZmIiLCJnYiIsImhlaWdodCIsImhiIiwia2IiLCJ0d2VlbmVycyIsImliIiwidW5xdWV1ZWQiLCJvdmVyZmxvd1giLCJvdmVyZmxvd1kiLCJqYiIsInByZWZpbHRlcnMiLCJzdGFydFRpbWUiLCJ0d2VlbnMiLCJwcm9wcyIsIm9wdHMiLCJzcGVjaWFsRWFzaW5nIiwib3JpZ2luYWxQcm9wZXJ0aWVzIiwib3JpZ2luYWxPcHRpb25zIiwiY3JlYXRlVHdlZW4iLCJjb21wbGV0ZSIsInRpbWVyIiwiYW5pbSIsIkFuaW1hdGlvbiIsInR3ZWVuZXIiLCJwcmVmaWx0ZXIiLCJzcGVlZCIsInNwZWVkcyIsIm9sZCIsImZhZGVUbyIsImFuaW1hdGUiLCJmaW5pc2giLCJ0aW1lcnMiLCJzbGlkZURvd24iLCJzbGlkZVVwIiwic2xpZGVUb2dnbGUiLCJmYWRlSW4iLCJmYWRlT3V0IiwiZmFkZVRvZ2dsZSIsInNsb3ciLCJmYXN0IiwiZGVsYXkiLCJjbGVhclRpbWVvdXQiLCJjaGVja09uIiwib3B0U2VsZWN0ZWQiLCJyYWRpb1ZhbHVlIiwibGIiLCJtYiIsInJlbW92ZUF0dHIiLCJhdHRySG9va3MiLCJuYiIsIm9iIiwicmVtb3ZlUHJvcCIsInByb3BGaXgiLCJwYiIsInFiIiwiYWRkQ2xhc3MiLCJyZW1vdmVDbGFzcyIsInRvZ2dsZUNsYXNzIiwiaGFzQ2xhc3MiLCJyYiIsInZhbEhvb2tzIiwic2IiLCJpc1RyaWdnZXIiLCJwYXJlbnRXaW5kb3ciLCJzaW11bGF0ZSIsInRyaWdnZXJIYW5kbGVyIiwiaG92ZXIiLCJmb2N1c2luIiwidGIiLCJ1YiIsInZiIiwicGFyc2VYTUwiLCJET01QYXJzZXIiLCJwYXJzZUZyb21TdHJpbmciLCJ3YiIsInhiIiwieWIiLCJ6YiIsIkFiIiwicGFyYW0iLCJlbmNvZGVVUklDb21wb25lbnQiLCJzZXJpYWxpemUiLCJzZXJpYWxpemVBcnJheSIsIkJiIiwiQ2IiLCJEYiIsIkViIiwiRmIiLCJHYiIsIkhiIiwiSWIiLCJKYiIsIktiIiwiTGIiLCJNYiIsIk5iIiwiZGF0YVR5cGVzIiwiT2IiLCJhamF4U2V0dGluZ3MiLCJmbGF0T3B0aW9ucyIsIlBiIiwibWltZVR5cGUiLCJnZXRSZXNwb25zZUhlYWRlciIsImNvbnZlcnRlcnMiLCJRYiIsInJlc3BvbnNlRmllbGRzIiwiZGF0YUZpbHRlciIsImRhdGFUeXBlIiwiYWN0aXZlIiwibGFzdE1vZGlmaWVkIiwiZXRhZyIsInVybCIsInByb3RvY29sIiwicHJvY2Vzc0RhdGEiLCJhc3luYyIsImNvbnRlbnRUeXBlIiwiYWNjZXB0cyIsInhtbCIsImpzb24iLCJjb250ZXh0IiwiYWpheFNldHVwIiwiYWpheFByZWZpbHRlciIsImFqYXhUcmFuc3BvcnQiLCJhamF4Iiwic3RhdHVzQ29kZSIsImdldEFsbFJlc3BvbnNlSGVhZGVycyIsInNldFJlcXVlc3RIZWFkZXIiLCJvdmVycmlkZU1pbWVUeXBlIiwic3RhdHVzIiwiYWJvcnQiLCJtZXRob2QiLCJjcm9zc0RvbWFpbiIsImhvc3QiLCJ0cmFkaXRpb25hbCIsImhhc0NvbnRlbnQiLCJpZk1vZGlmaWVkIiwiaGVhZGVycyIsImJlZm9yZVNlbmQiLCJzdWNjZXNzIiwidGltZW91dCIsInNlbmQiLCJzdGF0dXNUZXh0IiwiZ2V0SlNPTiIsImdldFNjcmlwdCIsIndyYXBBbGwiLCJmaXJzdEVsZW1lbnRDaGlsZCIsIndyYXBJbm5lciIsIndyYXAiLCJ1bndyYXAiLCJ2aXNpYmxlIiwib2Zmc2V0V2lkdGgiLCJvZmZzZXRIZWlnaHQiLCJ4aHIiLCJYTUxIdHRwUmVxdWVzdCIsIlJiIiwiU2IiLCJjb3JzIiwib3BlbiIsInVzZXJuYW1lIiwieGhyRmllbGRzIiwib25sb2FkIiwib25lcnJvciIsIm9uYWJvcnQiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZXNwb25zZVR5cGUiLCJyZXNwb25zZVRleHQiLCJiaW5hcnkiLCJyZXNwb25zZSIsInNjcmlwdCIsImNoYXJzZXQiLCJzY3JpcHRDaGFyc2V0IiwiVGIiLCJVYiIsImpzb25wIiwianNvbnBDYWxsYmFjayIsImNyZWF0ZUhUTUxEb2N1bWVudCIsImltcGxlbWVudGF0aW9uIiwiYW5pbWF0ZWQiLCJzZXRPZmZzZXQiLCJ1c2luZyIsInBhZ2VZT2Zmc2V0IiwiY2xpZW50VG9wIiwicGFnZVhPZmZzZXQiLCJjbGllbnRMZWZ0Iiwib2Zmc2V0UGFyZW50Iiwic2Nyb2xsVG8iLCJIZWlnaHQiLCJXaWR0aCIsImJpbmQiLCJ1bmJpbmQiLCJkZWxlZ2F0ZSIsInVuZGVsZWdhdGUiLCJob2xkUmVhZHkiLCJwYXJzZUpTT04iLCJWYiIsImpRdWVyeSIsIldiIiwibm9Db25mbGljdCIsImFmIiwic3ltYm9sTWFwIiwibnVtYmVyTWFwIiwicGx1cmFsRm9ybSIsInBsdXJhbHMiLCJwbHVyYWxpemUiLCJzdHIiLCJhciIsIndlZWtkYXlzUGFyc2VFeGFjdCIsImFyRHoiLCJhckt3IiwiYXJMeSIsImFyTWEiLCJhclNhIiwiYXJUbiIsInN1ZmZpeGVzIiwiYXoiLCJwbHVyYWwiLCJ3b3JkIiwibnVtIiwiZm9ybXMiLCJyZWxhdGl2ZVRpbWVXaXRoUGx1cmFsIiwiYmUiLCJzdGFuZGFsb25lIiwiYmciLCJsYXN0RGlnaXQiLCJsYXN0MkRpZ2l0cyIsImJtIiwiYm4iLCJibyIsInJlbGF0aXZlVGltZVdpdGhNdXRhdGlvbiIsIm11dGF0aW9uIiwic3BlY2lhbE11dGF0aW9uRm9yWWVhcnMiLCJsYXN0TnVtYmVyIiwic29mdE11dGF0aW9uIiwibXV0YXRpb25UYWJsZSIsInN1YnN0cmluZyIsImJyIiwidHJhbnNsYXRlIiwiYnMiLCJtb250aHNQYXJzZUV4YWN0IiwibGwiLCJsbGwiLCJsbGxsIiwiY3MiLCJzaG9ydE1vbnRoc1BhcnNlIiwibG9uZ01vbnRoc1BhcnNlIiwiY3YiLCJhZmZpeCIsImN5IiwibG9va3VwIiwicHJvY2Vzc1JlbGF0aXZlVGltZSIsImRlIiwiZGVBdCIsImRlQ2giLCJkdiIsImVsIiwibW9udGhzTm9taW5hdGl2ZUVsIiwibW9udGhzR2VuaXRpdmVFbCIsIm1vbWVudFRvRm9ybWF0IiwiX21vbnRoc05vbWluYXRpdmVFbCIsIl9tb250aHNHZW5pdGl2ZUVsIiwiY2FsZW5kYXJFbCIsIl9jYWxlbmRhckVsIiwiZW5BdSIsImVuQ2EiLCJlbkdiIiwiZW5JZSIsImVuTnoiLCJlbyIsIm1vbnRoc1Nob3J0RG90IiwiZXMiLCJtb250aHNTdHJpY3RSZWdleCIsIm1vbnRoc1Nob3J0U3RyaWN0UmVnZXgiLCJlc0RvIiwiZXNVcyIsImV0IiwiZXUiLCJudW1iZXJzUGFzdCIsIm51bWJlcnNGdXR1cmUiLCJ2ZXJiYWxOdW1iZXIiLCJmaSIsImZvIiwiZnIiLCJmckNhIiwiZnJDaCIsIm1vbnRoc1Nob3J0V2l0aERvdHMiLCJtb250aHNTaG9ydFdpdGhvdXREb3RzIiwiZnkiLCJnZCIsImdsIiwiZ29tTGF0biIsImd1IiwiaGUiLCJoaSIsImhyIiwid2Vla0VuZGluZ3MiLCJodSIsImh5QW0iLCJpdCIsImp2Iiwia2siLCJrbSIsImtuIiwia28iLCJpc1VwcGVyIiwia3kiLCJwcm9jZXNzRnV0dXJlVGltZSIsImVpZmVsZXJSZWdlbEFwcGxpZXNUb051bWJlciIsInByb2Nlc3NQYXN0VGltZSIsImZpcnN0RGlnaXQiLCJsbyIsInRyYW5zbGF0ZVNlY29uZHMiLCJ0cmFuc2xhdGVTaW5ndWxhciIsInJlbGF0aXZlVGltZVdpdGhTaW5ndWxhciIsInJlbGF0aXZlU2Vjb25kcyIsImx2IiwidHJhbnNsYXRvciIsIndvcmRzIiwiY29ycmVjdEdyYW1tYXRpY2FsQ2FzZSIsIndvcmRLZXkiLCJtZSIsImxhc3RXZWVrRGF5cyIsIm1pIiwibWsiLCJtbCIsInJlbGF0aXZlVGltZU1yIiwibXIiLCJtc015IiwibXkiLCJuZSIsIm5sIiwibmxCZSIsIm5uIiwicGFJbiIsIm1vbnRoc05vbWluYXRpdmUiLCJtb250aHNTdWJqZWN0aXZlIiwicGwiLCJwdCIsInB0QnIiLCJybyIsInJ1Iiwic2QiLCJzZSIsInNpIiwic2siLCJzbCIsInNxIiwic3IiLCJzckN5cmwiLCJzdiIsInN3IiwidGUiLCJ0ZXQiLCJ0bFBoIiwibnVtYmVyc05vdW5zIiwidHJhbnNsYXRlRnV0dXJlIiwidHJhbnNsYXRlUGFzdCIsIm51bWJlck5vdW4iLCJudW1iZXJBc05vdW4iLCJodW5kcmVkIiwidGVuIiwidGxoIiwidHpsIiwidHptIiwidHptTGF0biIsIndlZWtkYXlzQ2FzZVJlcGxhY2UiLCJub3VuQ2FzZSIsInByb2Nlc3NIb3Vyc0Z1bmN0aW9uIiwidWsiLCJ1ciIsInV6IiwidXpMYXRuIiwidmkiLCJ4UHNldWRvIiwieW8iLCJ6aENuIiwiemhIayIsInpoVHciLCJtZXRob2RzIiwiZ2V0UmFuZG9tQXJiaXRyYXJ5IiwiY2l0aWVzIiwibG9uZ2l0dWRlIiwibGF0aXR1ZGUiLCJkaWMiLCJpbmQiLCJpbWciLCJnZXRXZWF0aGVyQ2xvdGhlcyIsImluZGV4ZXMiLCJjaGlsZCIsIndlYXRoZXIiLCJ3ZWF0aGVyQ3RybCIsImN1cnJlbnRQb3NpdGlvbiIsImFwaUtleSIsImFwaUtleV9waXhhYmF5IiwiZ2V0V2VhdGhlckltYWdlIiwic2VhcmNoIiwic2V0dGluZ3MiLCJmYWN0b3IiLCJoaXRzIiwid2ViZm9ybWF0VVJMIiwicGFyc2VEYXRhIiwibWFpbiIsImh1bWlkaXR5IiwicHJlc3N1cmUiLCJjbG91ZHMiLCJhbGwiLCJ3aW5kIiwiZGVzY3JpcHRpb24iLCJpY29uIiwiZ2V0Q3VycmVudFdlYXRoZXIiLCJuYXZpZ2F0b3IiLCJnZW9sb2NhdGlvbiIsImdldEN1cnJlbnRQb3NpdGlvbiIsImNvb3JkcyIsIm1hcEluaXQiLCJsb2ciLCJjaGFuZ2UiLCJzZXRDZW50ZXIiLCJnb29nbGUiLCJtYXBzIiwiTGF0TG5nIiwibGF0bG5nIiwibXlPcHRpb25zIiwiY2VudGVyIiwibWFwVHlwZUlkIiwiTWFwVHlwZUlkIiwiUk9BRE1BUCIsIk1hcCIsImFkZERvbUxpc3RlbmVyIiwid2VicGFja1BvbHlmaWxs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QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3Qjs7Ozs7O0FDNVBBLHlDOzs7Ozs7QUNBQSx5Qzs7Ozs7O0FDQUEseUMiLCJmaWxlIjoiYXBwLmJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwge1xuIFx0XHRcdFx0Y29uZmlndXJhYmxlOiBmYWxzZSxcbiBcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG4gXHRcdFx0XHRnZXQ6IGdldHRlclxuIFx0XHRcdH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDEyMCk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gd2VicGFjay9ib290c3RyYXAgNGQ5N2IwYzY2MDMxNzgxYmYxZjEiLCIvLyEgbW9tZW50LmpzXG4vLyEgdmVyc2lvbiA6IDIuMTkuM1xuLy8hIGF1dGhvcnMgOiBUaW0gV29vZCwgSXNrcmVuIENoZXJuZXYsIE1vbWVudC5qcyBjb250cmlidXRvcnNcbi8vISBsaWNlbnNlIDogTUlUXG4vLyEgbW9tZW50anMuY29tXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpIDpcbiAgICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoZmFjdG9yeSkgOlxuICAgIGdsb2JhbC5tb21lbnQgPSBmYWN0b3J5KClcbn0odGhpcywgKGZ1bmN0aW9uICgpIHsgJ3VzZSBzdHJpY3QnO1xuXG52YXIgaG9va0NhbGxiYWNrO1xuXG5mdW5jdGlvbiBob29rcyAoKSB7XG4gICAgcmV0dXJuIGhvb2tDYWxsYmFjay5hcHBseShudWxsLCBhcmd1bWVudHMpO1xufVxuXG4vLyBUaGlzIGlzIGRvbmUgdG8gcmVnaXN0ZXIgdGhlIG1ldGhvZCBjYWxsZWQgd2l0aCBtb21lbnQoKVxuLy8gd2l0aG91dCBjcmVhdGluZyBjaXJjdWxhciBkZXBlbmRlbmNpZXMuXG5mdW5jdGlvbiBzZXRIb29rQ2FsbGJhY2sgKGNhbGxiYWNrKSB7XG4gICAgaG9va0NhbGxiYWNrID0gY2FsbGJhY2s7XG59XG5cbmZ1bmN0aW9uIGlzQXJyYXkoaW5wdXQpIHtcbiAgICByZXR1cm4gaW5wdXQgaW5zdGFuY2VvZiBBcnJheSB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaW5wdXQpID09PSAnW29iamVjdCBBcnJheV0nO1xufVxuXG5mdW5jdGlvbiBpc09iamVjdChpbnB1dCkge1xuICAgIC8vIElFOCB3aWxsIHRyZWF0IHVuZGVmaW5lZCBhbmQgbnVsbCBhcyBvYmplY3QgaWYgaXQgd2Fzbid0IGZvclxuICAgIC8vIGlucHV0ICE9IG51bGxcbiAgICByZXR1cm4gaW5wdXQgIT0gbnVsbCAmJiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaW5wdXQpID09PSAnW29iamVjdCBPYmplY3RdJztcbn1cblxuZnVuY3Rpb24gaXNPYmplY3RFbXB0eShvYmopIHtcbiAgICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMpIHtcbiAgICAgICAgcmV0dXJuIChPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhvYmopLmxlbmd0aCA9PT0gMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGs7XG4gICAgICAgIGZvciAoayBpbiBvYmopIHtcbiAgICAgICAgICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkoaykpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBpc1VuZGVmaW5lZChpbnB1dCkge1xuICAgIHJldHVybiBpbnB1dCA9PT0gdm9pZCAwO1xufVxuXG5mdW5jdGlvbiBpc051bWJlcihpbnB1dCkge1xuICAgIHJldHVybiB0eXBlb2YgaW5wdXQgPT09ICdudW1iZXInIHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpbnB1dCkgPT09ICdbb2JqZWN0IE51bWJlcl0nO1xufVxuXG5mdW5jdGlvbiBpc0RhdGUoaW5wdXQpIHtcbiAgICByZXR1cm4gaW5wdXQgaW5zdGFuY2VvZiBEYXRlIHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpbnB1dCkgPT09ICdbb2JqZWN0IERhdGVdJztcbn1cblxuZnVuY3Rpb24gbWFwKGFyciwgZm4pIHtcbiAgICB2YXIgcmVzID0gW10sIGk7XG4gICAgZm9yIChpID0gMDsgaSA8IGFyci5sZW5ndGg7ICsraSkge1xuICAgICAgICByZXMucHVzaChmbihhcnJbaV0sIGkpKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbn1cblxuZnVuY3Rpb24gaGFzT3duUHJvcChhLCBiKSB7XG4gICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChhLCBiKTtcbn1cblxuZnVuY3Rpb24gZXh0ZW5kKGEsIGIpIHtcbiAgICBmb3IgKHZhciBpIGluIGIpIHtcbiAgICAgICAgaWYgKGhhc093blByb3AoYiwgaSkpIHtcbiAgICAgICAgICAgIGFbaV0gPSBiW2ldO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGhhc093blByb3AoYiwgJ3RvU3RyaW5nJykpIHtcbiAgICAgICAgYS50b1N0cmluZyA9IGIudG9TdHJpbmc7XG4gICAgfVxuXG4gICAgaWYgKGhhc093blByb3AoYiwgJ3ZhbHVlT2YnKSkge1xuICAgICAgICBhLnZhbHVlT2YgPSBiLnZhbHVlT2Y7XG4gICAgfVxuXG4gICAgcmV0dXJuIGE7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVVUQyAoaW5wdXQsIGZvcm1hdCwgbG9jYWxlLCBzdHJpY3QpIHtcbiAgICByZXR1cm4gY3JlYXRlTG9jYWxPclVUQyhpbnB1dCwgZm9ybWF0LCBsb2NhbGUsIHN0cmljdCwgdHJ1ZSkudXRjKCk7XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRQYXJzaW5nRmxhZ3MoKSB7XG4gICAgLy8gV2UgbmVlZCB0byBkZWVwIGNsb25lIHRoaXMgb2JqZWN0LlxuICAgIHJldHVybiB7XG4gICAgICAgIGVtcHR5ICAgICAgICAgICA6IGZhbHNlLFxuICAgICAgICB1bnVzZWRUb2tlbnMgICAgOiBbXSxcbiAgICAgICAgdW51c2VkSW5wdXQgICAgIDogW10sXG4gICAgICAgIG92ZXJmbG93ICAgICAgICA6IC0yLFxuICAgICAgICBjaGFyc0xlZnRPdmVyICAgOiAwLFxuICAgICAgICBudWxsSW5wdXQgICAgICAgOiBmYWxzZSxcbiAgICAgICAgaW52YWxpZE1vbnRoICAgIDogbnVsbCxcbiAgICAgICAgaW52YWxpZEZvcm1hdCAgIDogZmFsc2UsXG4gICAgICAgIHVzZXJJbnZhbGlkYXRlZCA6IGZhbHNlLFxuICAgICAgICBpc28gICAgICAgICAgICAgOiBmYWxzZSxcbiAgICAgICAgcGFyc2VkRGF0ZVBhcnRzIDogW10sXG4gICAgICAgIG1lcmlkaWVtICAgICAgICA6IG51bGwsXG4gICAgICAgIHJmYzI4MjIgICAgICAgICA6IGZhbHNlLFxuICAgICAgICB3ZWVrZGF5TWlzbWF0Y2ggOiBmYWxzZVxuICAgIH07XG59XG5cbmZ1bmN0aW9uIGdldFBhcnNpbmdGbGFncyhtKSB7XG4gICAgaWYgKG0uX3BmID09IG51bGwpIHtcbiAgICAgICAgbS5fcGYgPSBkZWZhdWx0UGFyc2luZ0ZsYWdzKCk7XG4gICAgfVxuICAgIHJldHVybiBtLl9wZjtcbn1cblxudmFyIHNvbWU7XG5pZiAoQXJyYXkucHJvdG90eXBlLnNvbWUpIHtcbiAgICBzb21lID0gQXJyYXkucHJvdG90eXBlLnNvbWU7XG59IGVsc2Uge1xuICAgIHNvbWUgPSBmdW5jdGlvbiAoZnVuKSB7XG4gICAgICAgIHZhciB0ID0gT2JqZWN0KHRoaXMpO1xuICAgICAgICB2YXIgbGVuID0gdC5sZW5ndGggPj4+IDA7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgaWYgKGkgaW4gdCAmJiBmdW4uY2FsbCh0aGlzLCB0W2ldLCBpLCB0KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG59XG5cbmZ1bmN0aW9uIGlzVmFsaWQobSkge1xuICAgIGlmIChtLl9pc1ZhbGlkID09IG51bGwpIHtcbiAgICAgICAgdmFyIGZsYWdzID0gZ2V0UGFyc2luZ0ZsYWdzKG0pO1xuICAgICAgICB2YXIgcGFyc2VkUGFydHMgPSBzb21lLmNhbGwoZmxhZ3MucGFyc2VkRGF0ZVBhcnRzLCBmdW5jdGlvbiAoaSkge1xuICAgICAgICAgICAgcmV0dXJuIGkgIT0gbnVsbDtcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBpc05vd1ZhbGlkID0gIWlzTmFOKG0uX2QuZ2V0VGltZSgpKSAmJlxuICAgICAgICAgICAgZmxhZ3Mub3ZlcmZsb3cgPCAwICYmXG4gICAgICAgICAgICAhZmxhZ3MuZW1wdHkgJiZcbiAgICAgICAgICAgICFmbGFncy5pbnZhbGlkTW9udGggJiZcbiAgICAgICAgICAgICFmbGFncy5pbnZhbGlkV2Vla2RheSAmJlxuICAgICAgICAgICAgIWZsYWdzLndlZWtkYXlNaXNtYXRjaCAmJlxuICAgICAgICAgICAgIWZsYWdzLm51bGxJbnB1dCAmJlxuICAgICAgICAgICAgIWZsYWdzLmludmFsaWRGb3JtYXQgJiZcbiAgICAgICAgICAgICFmbGFncy51c2VySW52YWxpZGF0ZWQgJiZcbiAgICAgICAgICAgICghZmxhZ3MubWVyaWRpZW0gfHwgKGZsYWdzLm1lcmlkaWVtICYmIHBhcnNlZFBhcnRzKSk7XG5cbiAgICAgICAgaWYgKG0uX3N0cmljdCkge1xuICAgICAgICAgICAgaXNOb3dWYWxpZCA9IGlzTm93VmFsaWQgJiZcbiAgICAgICAgICAgICAgICBmbGFncy5jaGFyc0xlZnRPdmVyID09PSAwICYmXG4gICAgICAgICAgICAgICAgZmxhZ3MudW51c2VkVG9rZW5zLmxlbmd0aCA9PT0gMCAmJlxuICAgICAgICAgICAgICAgIGZsYWdzLmJpZ0hvdXIgPT09IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChPYmplY3QuaXNGcm96ZW4gPT0gbnVsbCB8fCAhT2JqZWN0LmlzRnJvemVuKG0pKSB7XG4gICAgICAgICAgICBtLl9pc1ZhbGlkID0gaXNOb3dWYWxpZDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBpc05vd1ZhbGlkO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBtLl9pc1ZhbGlkO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVJbnZhbGlkIChmbGFncykge1xuICAgIHZhciBtID0gY3JlYXRlVVRDKE5hTik7XG4gICAgaWYgKGZsYWdzICE9IG51bGwpIHtcbiAgICAgICAgZXh0ZW5kKGdldFBhcnNpbmdGbGFncyhtKSwgZmxhZ3MpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKG0pLnVzZXJJbnZhbGlkYXRlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIG07XG59XG5cbi8vIFBsdWdpbnMgdGhhdCBhZGQgcHJvcGVydGllcyBzaG91bGQgYWxzbyBhZGQgdGhlIGtleSBoZXJlIChudWxsIHZhbHVlKSxcbi8vIHNvIHdlIGNhbiBwcm9wZXJseSBjbG9uZSBvdXJzZWx2ZXMuXG52YXIgbW9tZW50UHJvcGVydGllcyA9IGhvb2tzLm1vbWVudFByb3BlcnRpZXMgPSBbXTtcblxuZnVuY3Rpb24gY29weUNvbmZpZyh0bywgZnJvbSkge1xuICAgIHZhciBpLCBwcm9wLCB2YWw7XG5cbiAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX2lzQU1vbWVudE9iamVjdCkpIHtcbiAgICAgICAgdG8uX2lzQU1vbWVudE9iamVjdCA9IGZyb20uX2lzQU1vbWVudE9iamVjdDtcbiAgICB9XG4gICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl9pKSkge1xuICAgICAgICB0by5faSA9IGZyb20uX2k7XG4gICAgfVxuICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5fZikpIHtcbiAgICAgICAgdG8uX2YgPSBmcm9tLl9mO1xuICAgIH1cbiAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX2wpKSB7XG4gICAgICAgIHRvLl9sID0gZnJvbS5fbDtcbiAgICB9XG4gICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl9zdHJpY3QpKSB7XG4gICAgICAgIHRvLl9zdHJpY3QgPSBmcm9tLl9zdHJpY3Q7XG4gICAgfVxuICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5fdHptKSkge1xuICAgICAgICB0by5fdHptID0gZnJvbS5fdHptO1xuICAgIH1cbiAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX2lzVVRDKSkge1xuICAgICAgICB0by5faXNVVEMgPSBmcm9tLl9pc1VUQztcbiAgICB9XG4gICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl9vZmZzZXQpKSB7XG4gICAgICAgIHRvLl9vZmZzZXQgPSBmcm9tLl9vZmZzZXQ7XG4gICAgfVxuICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5fcGYpKSB7XG4gICAgICAgIHRvLl9wZiA9IGdldFBhcnNpbmdGbGFncyhmcm9tKTtcbiAgICB9XG4gICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl9sb2NhbGUpKSB7XG4gICAgICAgIHRvLl9sb2NhbGUgPSBmcm9tLl9sb2NhbGU7XG4gICAgfVxuXG4gICAgaWYgKG1vbWVudFByb3BlcnRpZXMubGVuZ3RoID4gMCkge1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbW9tZW50UHJvcGVydGllcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgcHJvcCA9IG1vbWVudFByb3BlcnRpZXNbaV07XG4gICAgICAgICAgICB2YWwgPSBmcm9tW3Byb3BdO1xuICAgICAgICAgICAgaWYgKCFpc1VuZGVmaW5lZCh2YWwpKSB7XG4gICAgICAgICAgICAgICAgdG9bcHJvcF0gPSB2YWw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdG87XG59XG5cbnZhciB1cGRhdGVJblByb2dyZXNzID0gZmFsc2U7XG5cbi8vIE1vbWVudCBwcm90b3R5cGUgb2JqZWN0XG5mdW5jdGlvbiBNb21lbnQoY29uZmlnKSB7XG4gICAgY29weUNvbmZpZyh0aGlzLCBjb25maWcpO1xuICAgIHRoaXMuX2QgPSBuZXcgRGF0ZShjb25maWcuX2QgIT0gbnVsbCA/IGNvbmZpZy5fZC5nZXRUaW1lKCkgOiBOYU4pO1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgdGhpcy5fZCA9IG5ldyBEYXRlKE5hTik7XG4gICAgfVxuICAgIC8vIFByZXZlbnQgaW5maW5pdGUgbG9vcCBpbiBjYXNlIHVwZGF0ZU9mZnNldCBjcmVhdGVzIG5ldyBtb21lbnRcbiAgICAvLyBvYmplY3RzLlxuICAgIGlmICh1cGRhdGVJblByb2dyZXNzID09PSBmYWxzZSkge1xuICAgICAgICB1cGRhdGVJblByb2dyZXNzID0gdHJ1ZTtcbiAgICAgICAgaG9va3MudXBkYXRlT2Zmc2V0KHRoaXMpO1xuICAgICAgICB1cGRhdGVJblByb2dyZXNzID0gZmFsc2U7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBpc01vbWVudCAob2JqKSB7XG4gICAgcmV0dXJuIG9iaiBpbnN0YW5jZW9mIE1vbWVudCB8fCAob2JqICE9IG51bGwgJiYgb2JqLl9pc0FNb21lbnRPYmplY3QgIT0gbnVsbCk7XG59XG5cbmZ1bmN0aW9uIGFic0Zsb29yIChudW1iZXIpIHtcbiAgICBpZiAobnVtYmVyIDwgMCkge1xuICAgICAgICAvLyAtMCAtPiAwXG4gICAgICAgIHJldHVybiBNYXRoLmNlaWwobnVtYmVyKSB8fCAwO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBNYXRoLmZsb29yKG51bWJlcik7XG4gICAgfVxufVxuXG5mdW5jdGlvbiB0b0ludChhcmd1bWVudEZvckNvZXJjaW9uKSB7XG4gICAgdmFyIGNvZXJjZWROdW1iZXIgPSArYXJndW1lbnRGb3JDb2VyY2lvbixcbiAgICAgICAgdmFsdWUgPSAwO1xuXG4gICAgaWYgKGNvZXJjZWROdW1iZXIgIT09IDAgJiYgaXNGaW5pdGUoY29lcmNlZE51bWJlcikpIHtcbiAgICAgICAgdmFsdWUgPSBhYnNGbG9vcihjb2VyY2VkTnVtYmVyKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsdWU7XG59XG5cbi8vIGNvbXBhcmUgdHdvIGFycmF5cywgcmV0dXJuIHRoZSBudW1iZXIgb2YgZGlmZmVyZW5jZXNcbmZ1bmN0aW9uIGNvbXBhcmVBcnJheXMoYXJyYXkxLCBhcnJheTIsIGRvbnRDb252ZXJ0KSB7XG4gICAgdmFyIGxlbiA9IE1hdGgubWluKGFycmF5MS5sZW5ndGgsIGFycmF5Mi5sZW5ndGgpLFxuICAgICAgICBsZW5ndGhEaWZmID0gTWF0aC5hYnMoYXJyYXkxLmxlbmd0aCAtIGFycmF5Mi5sZW5ndGgpLFxuICAgICAgICBkaWZmcyA9IDAsXG4gICAgICAgIGk7XG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGlmICgoZG9udENvbnZlcnQgJiYgYXJyYXkxW2ldICE9PSBhcnJheTJbaV0pIHx8XG4gICAgICAgICAgICAoIWRvbnRDb252ZXJ0ICYmIHRvSW50KGFycmF5MVtpXSkgIT09IHRvSW50KGFycmF5MltpXSkpKSB7XG4gICAgICAgICAgICBkaWZmcysrO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBkaWZmcyArIGxlbmd0aERpZmY7XG59XG5cbmZ1bmN0aW9uIHdhcm4obXNnKSB7XG4gICAgaWYgKGhvb2tzLnN1cHByZXNzRGVwcmVjYXRpb25XYXJuaW5ncyA9PT0gZmFsc2UgJiZcbiAgICAgICAgICAgICh0eXBlb2YgY29uc29sZSAhPT0gICd1bmRlZmluZWQnKSAmJiBjb25zb2xlLndhcm4pIHtcbiAgICAgICAgY29uc29sZS53YXJuKCdEZXByZWNhdGlvbiB3YXJuaW5nOiAnICsgbXNnKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRlcHJlY2F0ZShtc2csIGZuKSB7XG4gICAgdmFyIGZpcnN0VGltZSA9IHRydWU7XG5cbiAgICByZXR1cm4gZXh0ZW5kKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGhvb2tzLmRlcHJlY2F0aW9uSGFuZGxlciAhPSBudWxsKSB7XG4gICAgICAgICAgICBob29rcy5kZXByZWNhdGlvbkhhbmRsZXIobnVsbCwgbXNnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZmlyc3RUaW1lKSB7XG4gICAgICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICAgICAgdmFyIGFyZztcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgYXJnID0gJyc7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBhcmd1bWVudHNbaV0gPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgICAgIGFyZyArPSAnXFxuWycgKyBpICsgJ10gJztcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIGFyZ3VtZW50c1swXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXJnICs9IGtleSArICc6ICcgKyBhcmd1bWVudHNbMF1ba2V5XSArICcsICc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYXJnID0gYXJnLnNsaWNlKDAsIC0yKTsgLy8gUmVtb3ZlIHRyYWlsaW5nIGNvbW1hIGFuZCBzcGFjZVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGFyZyA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYXJncy5wdXNoKGFyZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB3YXJuKG1zZyArICdcXG5Bcmd1bWVudHM6ICcgKyBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmdzKS5qb2luKCcnKSArICdcXG4nICsgKG5ldyBFcnJvcigpKS5zdGFjayk7XG4gICAgICAgICAgICBmaXJzdFRpbWUgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9LCBmbik7XG59XG5cbnZhciBkZXByZWNhdGlvbnMgPSB7fTtcblxuZnVuY3Rpb24gZGVwcmVjYXRlU2ltcGxlKG5hbWUsIG1zZykge1xuICAgIGlmIChob29rcy5kZXByZWNhdGlvbkhhbmRsZXIgIT0gbnVsbCkge1xuICAgICAgICBob29rcy5kZXByZWNhdGlvbkhhbmRsZXIobmFtZSwgbXNnKTtcbiAgICB9XG4gICAgaWYgKCFkZXByZWNhdGlvbnNbbmFtZV0pIHtcbiAgICAgICAgd2Fybihtc2cpO1xuICAgICAgICBkZXByZWNhdGlvbnNbbmFtZV0gPSB0cnVlO1xuICAgIH1cbn1cblxuaG9va3Muc3VwcHJlc3NEZXByZWNhdGlvbldhcm5pbmdzID0gZmFsc2U7XG5ob29rcy5kZXByZWNhdGlvbkhhbmRsZXIgPSBudWxsO1xuXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKGlucHV0KSB7XG4gICAgcmV0dXJuIGlucHV0IGluc3RhbmNlb2YgRnVuY3Rpb24gfHwgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGlucHV0KSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbn1cblxuZnVuY3Rpb24gc2V0IChjb25maWcpIHtcbiAgICB2YXIgcHJvcCwgaTtcbiAgICBmb3IgKGkgaW4gY29uZmlnKSB7XG4gICAgICAgIHByb3AgPSBjb25maWdbaV07XG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKHByb3ApKSB7XG4gICAgICAgICAgICB0aGlzW2ldID0gcHJvcDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXNbJ18nICsgaV0gPSBwcm9wO1xuICAgICAgICB9XG4gICAgfVxuICAgIHRoaXMuX2NvbmZpZyA9IGNvbmZpZztcbiAgICAvLyBMZW5pZW50IG9yZGluYWwgcGFyc2luZyBhY2NlcHRzIGp1c3QgYSBudW1iZXIgaW4gYWRkaXRpb24gdG9cbiAgICAvLyBudW1iZXIgKyAocG9zc2libHkpIHN0dWZmIGNvbWluZyBmcm9tIF9kYXlPZk1vbnRoT3JkaW5hbFBhcnNlLlxuICAgIC8vIFRPRE86IFJlbW92ZSBcIm9yZGluYWxQYXJzZVwiIGZhbGxiYWNrIGluIG5leHQgbWFqb3IgcmVsZWFzZS5cbiAgICB0aGlzLl9kYXlPZk1vbnRoT3JkaW5hbFBhcnNlTGVuaWVudCA9IG5ldyBSZWdFeHAoXG4gICAgICAgICh0aGlzLl9kYXlPZk1vbnRoT3JkaW5hbFBhcnNlLnNvdXJjZSB8fCB0aGlzLl9vcmRpbmFsUGFyc2Uuc291cmNlKSArXG4gICAgICAgICAgICAnfCcgKyAoL1xcZHsxLDJ9Lykuc291cmNlKTtcbn1cblxuZnVuY3Rpb24gbWVyZ2VDb25maWdzKHBhcmVudENvbmZpZywgY2hpbGRDb25maWcpIHtcbiAgICB2YXIgcmVzID0gZXh0ZW5kKHt9LCBwYXJlbnRDb25maWcpLCBwcm9wO1xuICAgIGZvciAocHJvcCBpbiBjaGlsZENvbmZpZykge1xuICAgICAgICBpZiAoaGFzT3duUHJvcChjaGlsZENvbmZpZywgcHJvcCkpIHtcbiAgICAgICAgICAgIGlmIChpc09iamVjdChwYXJlbnRDb25maWdbcHJvcF0pICYmIGlzT2JqZWN0KGNoaWxkQ29uZmlnW3Byb3BdKSkge1xuICAgICAgICAgICAgICAgIHJlc1twcm9wXSA9IHt9O1xuICAgICAgICAgICAgICAgIGV4dGVuZChyZXNbcHJvcF0sIHBhcmVudENvbmZpZ1twcm9wXSk7XG4gICAgICAgICAgICAgICAgZXh0ZW5kKHJlc1twcm9wXSwgY2hpbGRDb25maWdbcHJvcF0pO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChjaGlsZENvbmZpZ1twcm9wXSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmVzW3Byb3BdID0gY2hpbGRDb25maWdbcHJvcF07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSByZXNbcHJvcF07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZm9yIChwcm9wIGluIHBhcmVudENvbmZpZykge1xuICAgICAgICBpZiAoaGFzT3duUHJvcChwYXJlbnRDb25maWcsIHByb3ApICYmXG4gICAgICAgICAgICAgICAgIWhhc093blByb3AoY2hpbGRDb25maWcsIHByb3ApICYmXG4gICAgICAgICAgICAgICAgaXNPYmplY3QocGFyZW50Q29uZmlnW3Byb3BdKSkge1xuICAgICAgICAgICAgLy8gbWFrZSBzdXJlIGNoYW5nZXMgdG8gcHJvcGVydGllcyBkb24ndCBtb2RpZnkgcGFyZW50IGNvbmZpZ1xuICAgICAgICAgICAgcmVzW3Byb3BdID0gZXh0ZW5kKHt9LCByZXNbcHJvcF0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXM7XG59XG5cbmZ1bmN0aW9uIExvY2FsZShjb25maWcpIHtcbiAgICBpZiAoY29uZmlnICE9IG51bGwpIHtcbiAgICAgICAgdGhpcy5zZXQoY29uZmlnKTtcbiAgICB9XG59XG5cbnZhciBrZXlzO1xuXG5pZiAoT2JqZWN0LmtleXMpIHtcbiAgICBrZXlzID0gT2JqZWN0LmtleXM7XG59IGVsc2Uge1xuICAgIGtleXMgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgIHZhciBpLCByZXMgPSBbXTtcbiAgICAgICAgZm9yIChpIGluIG9iaikge1xuICAgICAgICAgICAgaWYgKGhhc093blByb3Aob2JqLCBpKSkge1xuICAgICAgICAgICAgICAgIHJlcy5wdXNoKGkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfTtcbn1cblxudmFyIGRlZmF1bHRDYWxlbmRhciA9IHtcbiAgICBzYW1lRGF5IDogJ1tUb2RheSBhdF0gTFQnLFxuICAgIG5leHREYXkgOiAnW1RvbW9ycm93IGF0XSBMVCcsXG4gICAgbmV4dFdlZWsgOiAnZGRkZCBbYXRdIExUJyxcbiAgICBsYXN0RGF5IDogJ1tZZXN0ZXJkYXkgYXRdIExUJyxcbiAgICBsYXN0V2VlayA6ICdbTGFzdF0gZGRkZCBbYXRdIExUJyxcbiAgICBzYW1lRWxzZSA6ICdMJ1xufTtcblxuZnVuY3Rpb24gY2FsZW5kYXIgKGtleSwgbW9tLCBub3cpIHtcbiAgICB2YXIgb3V0cHV0ID0gdGhpcy5fY2FsZW5kYXJba2V5XSB8fCB0aGlzLl9jYWxlbmRhclsnc2FtZUVsc2UnXTtcbiAgICByZXR1cm4gaXNGdW5jdGlvbihvdXRwdXQpID8gb3V0cHV0LmNhbGwobW9tLCBub3cpIDogb3V0cHV0O1xufVxuXG52YXIgZGVmYXVsdExvbmdEYXRlRm9ybWF0ID0ge1xuICAgIExUUyAgOiAnaDptbTpzcyBBJyxcbiAgICBMVCAgIDogJ2g6bW0gQScsXG4gICAgTCAgICA6ICdNTS9ERC9ZWVlZJyxcbiAgICBMTCAgIDogJ01NTU0gRCwgWVlZWScsXG4gICAgTExMICA6ICdNTU1NIEQsIFlZWVkgaDptbSBBJyxcbiAgICBMTExMIDogJ2RkZGQsIE1NTU0gRCwgWVlZWSBoOm1tIEEnXG59O1xuXG5mdW5jdGlvbiBsb25nRGF0ZUZvcm1hdCAoa2V5KSB7XG4gICAgdmFyIGZvcm1hdCA9IHRoaXMuX2xvbmdEYXRlRm9ybWF0W2tleV0sXG4gICAgICAgIGZvcm1hdFVwcGVyID0gdGhpcy5fbG9uZ0RhdGVGb3JtYXRba2V5LnRvVXBwZXJDYXNlKCldO1xuXG4gICAgaWYgKGZvcm1hdCB8fCAhZm9ybWF0VXBwZXIpIHtcbiAgICAgICAgcmV0dXJuIGZvcm1hdDtcbiAgICB9XG5cbiAgICB0aGlzLl9sb25nRGF0ZUZvcm1hdFtrZXldID0gZm9ybWF0VXBwZXIucmVwbGFjZSgvTU1NTXxNTXxERHxkZGRkL2csIGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgcmV0dXJuIHZhbC5zbGljZSgxKTtcbiAgICB9KTtcblxuICAgIHJldHVybiB0aGlzLl9sb25nRGF0ZUZvcm1hdFtrZXldO1xufVxuXG52YXIgZGVmYXVsdEludmFsaWREYXRlID0gJ0ludmFsaWQgZGF0ZSc7XG5cbmZ1bmN0aW9uIGludmFsaWREYXRlICgpIHtcbiAgICByZXR1cm4gdGhpcy5faW52YWxpZERhdGU7XG59XG5cbnZhciBkZWZhdWx0T3JkaW5hbCA9ICclZCc7XG52YXIgZGVmYXVsdERheU9mTW9udGhPcmRpbmFsUGFyc2UgPSAvXFxkezEsMn0vO1xuXG5mdW5jdGlvbiBvcmRpbmFsIChudW1iZXIpIHtcbiAgICByZXR1cm4gdGhpcy5fb3JkaW5hbC5yZXBsYWNlKCclZCcsIG51bWJlcik7XG59XG5cbnZhciBkZWZhdWx0UmVsYXRpdmVUaW1lID0ge1xuICAgIGZ1dHVyZSA6ICdpbiAlcycsXG4gICAgcGFzdCAgIDogJyVzIGFnbycsXG4gICAgcyAgOiAnYSBmZXcgc2Vjb25kcycsXG4gICAgc3MgOiAnJWQgc2Vjb25kcycsXG4gICAgbSAgOiAnYSBtaW51dGUnLFxuICAgIG1tIDogJyVkIG1pbnV0ZXMnLFxuICAgIGggIDogJ2FuIGhvdXInLFxuICAgIGhoIDogJyVkIGhvdXJzJyxcbiAgICBkICA6ICdhIGRheScsXG4gICAgZGQgOiAnJWQgZGF5cycsXG4gICAgTSAgOiAnYSBtb250aCcsXG4gICAgTU0gOiAnJWQgbW9udGhzJyxcbiAgICB5ICA6ICdhIHllYXInLFxuICAgIHl5IDogJyVkIHllYXJzJ1xufTtcblxuZnVuY3Rpb24gcmVsYXRpdmVUaW1lIChudW1iZXIsIHdpdGhvdXRTdWZmaXgsIHN0cmluZywgaXNGdXR1cmUpIHtcbiAgICB2YXIgb3V0cHV0ID0gdGhpcy5fcmVsYXRpdmVUaW1lW3N0cmluZ107XG4gICAgcmV0dXJuIChpc0Z1bmN0aW9uKG91dHB1dCkpID9cbiAgICAgICAgb3V0cHV0KG51bWJlciwgd2l0aG91dFN1ZmZpeCwgc3RyaW5nLCBpc0Z1dHVyZSkgOlxuICAgICAgICBvdXRwdXQucmVwbGFjZSgvJWQvaSwgbnVtYmVyKTtcbn1cblxuZnVuY3Rpb24gcGFzdEZ1dHVyZSAoZGlmZiwgb3V0cHV0KSB7XG4gICAgdmFyIGZvcm1hdCA9IHRoaXMuX3JlbGF0aXZlVGltZVtkaWZmID4gMCA/ICdmdXR1cmUnIDogJ3Bhc3QnXTtcbiAgICByZXR1cm4gaXNGdW5jdGlvbihmb3JtYXQpID8gZm9ybWF0KG91dHB1dCkgOiBmb3JtYXQucmVwbGFjZSgvJXMvaSwgb3V0cHV0KTtcbn1cblxudmFyIGFsaWFzZXMgPSB7fTtcblxuZnVuY3Rpb24gYWRkVW5pdEFsaWFzICh1bml0LCBzaG9ydGhhbmQpIHtcbiAgICB2YXIgbG93ZXJDYXNlID0gdW5pdC50b0xvd2VyQ2FzZSgpO1xuICAgIGFsaWFzZXNbbG93ZXJDYXNlXSA9IGFsaWFzZXNbbG93ZXJDYXNlICsgJ3MnXSA9IGFsaWFzZXNbc2hvcnRoYW5kXSA9IHVuaXQ7XG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZVVuaXRzKHVuaXRzKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB1bml0cyA9PT0gJ3N0cmluZycgPyBhbGlhc2VzW3VuaXRzXSB8fCBhbGlhc2VzW3VuaXRzLnRvTG93ZXJDYXNlKCldIDogdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiBub3JtYWxpemVPYmplY3RVbml0cyhpbnB1dE9iamVjdCkge1xuICAgIHZhciBub3JtYWxpemVkSW5wdXQgPSB7fSxcbiAgICAgICAgbm9ybWFsaXplZFByb3AsXG4gICAgICAgIHByb3A7XG5cbiAgICBmb3IgKHByb3AgaW4gaW5wdXRPYmplY3QpIHtcbiAgICAgICAgaWYgKGhhc093blByb3AoaW5wdXRPYmplY3QsIHByb3ApKSB7XG4gICAgICAgICAgICBub3JtYWxpemVkUHJvcCA9IG5vcm1hbGl6ZVVuaXRzKHByb3ApO1xuICAgICAgICAgICAgaWYgKG5vcm1hbGl6ZWRQcm9wKSB7XG4gICAgICAgICAgICAgICAgbm9ybWFsaXplZElucHV0W25vcm1hbGl6ZWRQcm9wXSA9IGlucHV0T2JqZWN0W3Byb3BdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG5vcm1hbGl6ZWRJbnB1dDtcbn1cblxudmFyIHByaW9yaXRpZXMgPSB7fTtcblxuZnVuY3Rpb24gYWRkVW5pdFByaW9yaXR5KHVuaXQsIHByaW9yaXR5KSB7XG4gICAgcHJpb3JpdGllc1t1bml0XSA9IHByaW9yaXR5O1xufVxuXG5mdW5jdGlvbiBnZXRQcmlvcml0aXplZFVuaXRzKHVuaXRzT2JqKSB7XG4gICAgdmFyIHVuaXRzID0gW107XG4gICAgZm9yICh2YXIgdSBpbiB1bml0c09iaikge1xuICAgICAgICB1bml0cy5wdXNoKHt1bml0OiB1LCBwcmlvcml0eTogcHJpb3JpdGllc1t1XX0pO1xuICAgIH1cbiAgICB1bml0cy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgIHJldHVybiBhLnByaW9yaXR5IC0gYi5wcmlvcml0eTtcbiAgICB9KTtcbiAgICByZXR1cm4gdW5pdHM7XG59XG5cbmZ1bmN0aW9uIHplcm9GaWxsKG51bWJlciwgdGFyZ2V0TGVuZ3RoLCBmb3JjZVNpZ24pIHtcbiAgICB2YXIgYWJzTnVtYmVyID0gJycgKyBNYXRoLmFicyhudW1iZXIpLFxuICAgICAgICB6ZXJvc1RvRmlsbCA9IHRhcmdldExlbmd0aCAtIGFic051bWJlci5sZW5ndGgsXG4gICAgICAgIHNpZ24gPSBudW1iZXIgPj0gMDtcbiAgICByZXR1cm4gKHNpZ24gPyAoZm9yY2VTaWduID8gJysnIDogJycpIDogJy0nKSArXG4gICAgICAgIE1hdGgucG93KDEwLCBNYXRoLm1heCgwLCB6ZXJvc1RvRmlsbCkpLnRvU3RyaW5nKCkuc3Vic3RyKDEpICsgYWJzTnVtYmVyO1xufVxuXG52YXIgZm9ybWF0dGluZ1Rva2VucyA9IC8oXFxbW15cXFtdKlxcXSl8KFxcXFwpPyhbSGhdbW0oc3MpP3xNb3xNTT9NP00/fERvfERERG98REQ/RD9EP3xkZGQ/ZD98ZG8/fHdbb3x3XT98V1tvfFddP3xRbz98WVlZWVlZfFlZWVlZfFlZWVl8WVl8Z2coZ2dnPyk/fEdHKEdHRz8pP3xlfEV8YXxBfGhoP3xISD98a2s/fG1tP3xzcz98U3sxLDl9fHh8WHx6ej98Wlo/fC4pL2c7XG5cbnZhciBsb2NhbEZvcm1hdHRpbmdUb2tlbnMgPSAvKFxcW1teXFxbXSpcXF0pfChcXFxcKT8oTFRTfExUfExMP0w/TD98bHsxLDR9KS9nO1xuXG52YXIgZm9ybWF0RnVuY3Rpb25zID0ge307XG5cbnZhciBmb3JtYXRUb2tlbkZ1bmN0aW9ucyA9IHt9O1xuXG4vLyB0b2tlbjogICAgJ00nXG4vLyBwYWRkZWQ6ICAgWydNTScsIDJdXG4vLyBvcmRpbmFsOiAgJ01vJ1xuLy8gY2FsbGJhY2s6IGZ1bmN0aW9uICgpIHsgdGhpcy5tb250aCgpICsgMSB9XG5mdW5jdGlvbiBhZGRGb3JtYXRUb2tlbiAodG9rZW4sIHBhZGRlZCwgb3JkaW5hbCwgY2FsbGJhY2spIHtcbiAgICB2YXIgZnVuYyA9IGNhbGxiYWNrO1xuICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGZ1bmMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpc1tjYWxsYmFja10oKTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgaWYgKHRva2VuKSB7XG4gICAgICAgIGZvcm1hdFRva2VuRnVuY3Rpb25zW3Rva2VuXSA9IGZ1bmM7XG4gICAgfVxuICAgIGlmIChwYWRkZWQpIHtcbiAgICAgICAgZm9ybWF0VG9rZW5GdW5jdGlvbnNbcGFkZGVkWzBdXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB6ZXJvRmlsbChmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksIHBhZGRlZFsxXSwgcGFkZGVkWzJdKTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgaWYgKG9yZGluYWwpIHtcbiAgICAgICAgZm9ybWF0VG9rZW5GdW5jdGlvbnNbb3JkaW5hbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkub3JkaW5hbChmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksIHRva2VuKTtcbiAgICAgICAgfTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUZvcm1hdHRpbmdUb2tlbnMoaW5wdXQpIHtcbiAgICBpZiAoaW5wdXQubWF0Y2goL1xcW1tcXHNcXFNdLykpIHtcbiAgICAgICAgcmV0dXJuIGlucHV0LnJlcGxhY2UoL15cXFt8XFxdJC9nLCAnJyk7XG4gICAgfVxuICAgIHJldHVybiBpbnB1dC5yZXBsYWNlKC9cXFxcL2csICcnKTtcbn1cblxuZnVuY3Rpb24gbWFrZUZvcm1hdEZ1bmN0aW9uKGZvcm1hdCkge1xuICAgIHZhciBhcnJheSA9IGZvcm1hdC5tYXRjaChmb3JtYXR0aW5nVG9rZW5zKSwgaSwgbGVuZ3RoO1xuXG4gICAgZm9yIChpID0gMCwgbGVuZ3RoID0gYXJyYXkubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGZvcm1hdFRva2VuRnVuY3Rpb25zW2FycmF5W2ldXSkge1xuICAgICAgICAgICAgYXJyYXlbaV0gPSBmb3JtYXRUb2tlbkZ1bmN0aW9uc1thcnJheVtpXV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhcnJheVtpXSA9IHJlbW92ZUZvcm1hdHRpbmdUb2tlbnMoYXJyYXlbaV0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChtb20pIHtcbiAgICAgICAgdmFyIG91dHB1dCA9ICcnLCBpO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIG91dHB1dCArPSBpc0Z1bmN0aW9uKGFycmF5W2ldKSA/IGFycmF5W2ldLmNhbGwobW9tLCBmb3JtYXQpIDogYXJyYXlbaV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICB9O1xufVxuXG4vLyBmb3JtYXQgZGF0ZSB1c2luZyBuYXRpdmUgZGF0ZSBvYmplY3RcbmZ1bmN0aW9uIGZvcm1hdE1vbWVudChtLCBmb3JtYXQpIHtcbiAgICBpZiAoIW0uaXNWYWxpZCgpKSB7XG4gICAgICAgIHJldHVybiBtLmxvY2FsZURhdGEoKS5pbnZhbGlkRGF0ZSgpO1xuICAgIH1cblxuICAgIGZvcm1hdCA9IGV4cGFuZEZvcm1hdChmb3JtYXQsIG0ubG9jYWxlRGF0YSgpKTtcbiAgICBmb3JtYXRGdW5jdGlvbnNbZm9ybWF0XSA9IGZvcm1hdEZ1bmN0aW9uc1tmb3JtYXRdIHx8IG1ha2VGb3JtYXRGdW5jdGlvbihmb3JtYXQpO1xuXG4gICAgcmV0dXJuIGZvcm1hdEZ1bmN0aW9uc1tmb3JtYXRdKG0pO1xufVxuXG5mdW5jdGlvbiBleHBhbmRGb3JtYXQoZm9ybWF0LCBsb2NhbGUpIHtcbiAgICB2YXIgaSA9IDU7XG5cbiAgICBmdW5jdGlvbiByZXBsYWNlTG9uZ0RhdGVGb3JtYXRUb2tlbnMoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZS5sb25nRGF0ZUZvcm1hdChpbnB1dCkgfHwgaW5wdXQ7XG4gICAgfVxuXG4gICAgbG9jYWxGb3JtYXR0aW5nVG9rZW5zLmxhc3RJbmRleCA9IDA7XG4gICAgd2hpbGUgKGkgPj0gMCAmJiBsb2NhbEZvcm1hdHRpbmdUb2tlbnMudGVzdChmb3JtYXQpKSB7XG4gICAgICAgIGZvcm1hdCA9IGZvcm1hdC5yZXBsYWNlKGxvY2FsRm9ybWF0dGluZ1Rva2VucywgcmVwbGFjZUxvbmdEYXRlRm9ybWF0VG9rZW5zKTtcbiAgICAgICAgbG9jYWxGb3JtYXR0aW5nVG9rZW5zLmxhc3RJbmRleCA9IDA7XG4gICAgICAgIGkgLT0gMTtcbiAgICB9XG5cbiAgICByZXR1cm4gZm9ybWF0O1xufVxuXG52YXIgbWF0Y2gxICAgICAgICAgPSAvXFxkLzsgICAgICAgICAgICAvLyAgICAgICAwIC0gOVxudmFyIG1hdGNoMiAgICAgICAgID0gL1xcZFxcZC87ICAgICAgICAgIC8vICAgICAgMDAgLSA5OVxudmFyIG1hdGNoMyAgICAgICAgID0gL1xcZHszfS87ICAgICAgICAgLy8gICAgIDAwMCAtIDk5OVxudmFyIG1hdGNoNCAgICAgICAgID0gL1xcZHs0fS87ICAgICAgICAgLy8gICAgMDAwMCAtIDk5OTlcbnZhciBtYXRjaDYgICAgICAgICA9IC9bKy1dP1xcZHs2fS87ICAgIC8vIC05OTk5OTkgLSA5OTk5OTlcbnZhciBtYXRjaDF0bzIgICAgICA9IC9cXGRcXGQ/LzsgICAgICAgICAvLyAgICAgICAwIC0gOTlcbnZhciBtYXRjaDN0bzQgICAgICA9IC9cXGRcXGRcXGRcXGQ/LzsgICAgIC8vICAgICA5OTkgLSA5OTk5XG52YXIgbWF0Y2g1dG82ICAgICAgPSAvXFxkXFxkXFxkXFxkXFxkXFxkPy87IC8vICAgOTk5OTkgLSA5OTk5OTlcbnZhciBtYXRjaDF0bzMgICAgICA9IC9cXGR7MSwzfS87ICAgICAgIC8vICAgICAgIDAgLSA5OTlcbnZhciBtYXRjaDF0bzQgICAgICA9IC9cXGR7MSw0fS87ICAgICAgIC8vICAgICAgIDAgLSA5OTk5XG52YXIgbWF0Y2gxdG82ICAgICAgPSAvWystXT9cXGR7MSw2fS87ICAvLyAtOTk5OTk5IC0gOTk5OTk5XG5cbnZhciBtYXRjaFVuc2lnbmVkICA9IC9cXGQrLzsgICAgICAgICAgIC8vICAgICAgIDAgLSBpbmZcbnZhciBtYXRjaFNpZ25lZCAgICA9IC9bKy1dP1xcZCsvOyAgICAgIC8vICAgIC1pbmYgLSBpbmZcblxudmFyIG1hdGNoT2Zmc2V0ICAgID0gL1p8WystXVxcZFxcZDo/XFxkXFxkL2dpOyAvLyArMDA6MDAgLTAwOjAwICswMDAwIC0wMDAwIG9yIFpcbnZhciBtYXRjaFNob3J0T2Zmc2V0ID0gL1p8WystXVxcZFxcZCg/Ojo/XFxkXFxkKT8vZ2k7IC8vICswMCAtMDAgKzAwOjAwIC0wMDowMCArMDAwMCAtMDAwMCBvciBaXG5cbnZhciBtYXRjaFRpbWVzdGFtcCA9IC9bKy1dP1xcZCsoXFwuXFxkezEsM30pPy87IC8vIDEyMzQ1Njc4OSAxMjM0NTY3ODkuMTIzXG5cbi8vIGFueSB3b3JkIChvciB0d28pIGNoYXJhY3RlcnMgb3IgbnVtYmVycyBpbmNsdWRpbmcgdHdvL3RocmVlIHdvcmQgbW9udGggaW4gYXJhYmljLlxuLy8gaW5jbHVkZXMgc2NvdHRpc2ggZ2FlbGljIHR3byB3b3JkIGFuZCBoeXBoZW5hdGVkIG1vbnRoc1xudmFyIG1hdGNoV29yZCA9IC9bMC05XXswLDI1Nn1bJ2EtelxcdTAwQTAtXFx1MDVGRlxcdTA3MDAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl17MSwyNTZ9fFtcXHUwNjAwLVxcdTA2RkZcXC9dezEsMjU2fShcXHMqP1tcXHUwNjAwLVxcdTA2RkZdezEsMjU2fSl7MSwyfS9pO1xuXG5cbnZhciByZWdleGVzID0ge307XG5cbmZ1bmN0aW9uIGFkZFJlZ2V4VG9rZW4gKHRva2VuLCByZWdleCwgc3RyaWN0UmVnZXgpIHtcbiAgICByZWdleGVzW3Rva2VuXSA9IGlzRnVuY3Rpb24ocmVnZXgpID8gcmVnZXggOiBmdW5jdGlvbiAoaXNTdHJpY3QsIGxvY2FsZURhdGEpIHtcbiAgICAgICAgcmV0dXJuIChpc1N0cmljdCAmJiBzdHJpY3RSZWdleCkgPyBzdHJpY3RSZWdleCA6IHJlZ2V4O1xuICAgIH07XG59XG5cbmZ1bmN0aW9uIGdldFBhcnNlUmVnZXhGb3JUb2tlbiAodG9rZW4sIGNvbmZpZykge1xuICAgIGlmICghaGFzT3duUHJvcChyZWdleGVzLCB0b2tlbikpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBSZWdFeHAodW5lc2NhcGVGb3JtYXQodG9rZW4pKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVnZXhlc1t0b2tlbl0oY29uZmlnLl9zdHJpY3QsIGNvbmZpZy5fbG9jYWxlKTtcbn1cblxuLy8gQ29kZSBmcm9tIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMzU2MTQ5My9pcy10aGVyZS1hLXJlZ2V4cC1lc2NhcGUtZnVuY3Rpb24taW4tamF2YXNjcmlwdFxuZnVuY3Rpb24gdW5lc2NhcGVGb3JtYXQocykge1xuICAgIHJldHVybiByZWdleEVzY2FwZShzLnJlcGxhY2UoJ1xcXFwnLCAnJykucmVwbGFjZSgvXFxcXChcXFspfFxcXFwoXFxdKXxcXFsoW15cXF1cXFtdKilcXF18XFxcXCguKS9nLCBmdW5jdGlvbiAobWF0Y2hlZCwgcDEsIHAyLCBwMywgcDQpIHtcbiAgICAgICAgcmV0dXJuIHAxIHx8IHAyIHx8IHAzIHx8IHA0O1xuICAgIH0pKTtcbn1cblxuZnVuY3Rpb24gcmVnZXhFc2NhcGUocykge1xuICAgIHJldHVybiBzLnJlcGxhY2UoL1stXFwvXFxcXF4kKis/LigpfFtcXF17fV0vZywgJ1xcXFwkJicpO1xufVxuXG52YXIgdG9rZW5zID0ge307XG5cbmZ1bmN0aW9uIGFkZFBhcnNlVG9rZW4gKHRva2VuLCBjYWxsYmFjaykge1xuICAgIHZhciBpLCBmdW5jID0gY2FsbGJhY2s7XG4gICAgaWYgKHR5cGVvZiB0b2tlbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdG9rZW4gPSBbdG9rZW5dO1xuICAgIH1cbiAgICBpZiAoaXNOdW1iZXIoY2FsbGJhY2spKSB7XG4gICAgICAgIGZ1bmMgPSBmdW5jdGlvbiAoaW5wdXQsIGFycmF5KSB7XG4gICAgICAgICAgICBhcnJheVtjYWxsYmFja10gPSB0b0ludChpbnB1dCk7XG4gICAgICAgIH07XG4gICAgfVxuICAgIGZvciAoaSA9IDA7IGkgPCB0b2tlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICB0b2tlbnNbdG9rZW5baV1dID0gZnVuYztcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGFkZFdlZWtQYXJzZVRva2VuICh0b2tlbiwgY2FsbGJhY2spIHtcbiAgICBhZGRQYXJzZVRva2VuKHRva2VuLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcsIHRva2VuKSB7XG4gICAgICAgIGNvbmZpZy5fdyA9IGNvbmZpZy5fdyB8fCB7fTtcbiAgICAgICAgY2FsbGJhY2soaW5wdXQsIGNvbmZpZy5fdywgY29uZmlnLCB0b2tlbik7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGFkZFRpbWVUb0FycmF5RnJvbVRva2VuKHRva2VuLCBpbnB1dCwgY29uZmlnKSB7XG4gICAgaWYgKGlucHV0ICE9IG51bGwgJiYgaGFzT3duUHJvcCh0b2tlbnMsIHRva2VuKSkge1xuICAgICAgICB0b2tlbnNbdG9rZW5dKGlucHV0LCBjb25maWcuX2EsIGNvbmZpZywgdG9rZW4pO1xuICAgIH1cbn1cblxudmFyIFlFQVIgPSAwO1xudmFyIE1PTlRIID0gMTtcbnZhciBEQVRFID0gMjtcbnZhciBIT1VSID0gMztcbnZhciBNSU5VVEUgPSA0O1xudmFyIFNFQ09ORCA9IDU7XG52YXIgTUlMTElTRUNPTkQgPSA2O1xudmFyIFdFRUsgPSA3O1xudmFyIFdFRUtEQVkgPSA4O1xuXG4vLyBGT1JNQVRUSU5HXG5cbmFkZEZvcm1hdFRva2VuKCdZJywgMCwgMCwgZnVuY3Rpb24gKCkge1xuICAgIHZhciB5ID0gdGhpcy55ZWFyKCk7XG4gICAgcmV0dXJuIHkgPD0gOTk5OSA/ICcnICsgeSA6ICcrJyArIHk7XG59KTtcblxuYWRkRm9ybWF0VG9rZW4oMCwgWydZWScsIDJdLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMueWVhcigpICUgMTAwO1xufSk7XG5cbmFkZEZvcm1hdFRva2VuKDAsIFsnWVlZWScsICAgNF0sICAgICAgIDAsICd5ZWFyJyk7XG5hZGRGb3JtYXRUb2tlbigwLCBbJ1lZWVlZJywgIDVdLCAgICAgICAwLCAneWVhcicpO1xuYWRkRm9ybWF0VG9rZW4oMCwgWydZWVlZWVknLCA2LCB0cnVlXSwgMCwgJ3llYXInKTtcblxuLy8gQUxJQVNFU1xuXG5hZGRVbml0QWxpYXMoJ3llYXInLCAneScpO1xuXG4vLyBQUklPUklUSUVTXG5cbmFkZFVuaXRQcmlvcml0eSgneWVhcicsIDEpO1xuXG4vLyBQQVJTSU5HXG5cbmFkZFJlZ2V4VG9rZW4oJ1knLCAgICAgIG1hdGNoU2lnbmVkKTtcbmFkZFJlZ2V4VG9rZW4oJ1lZJywgICAgIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbmFkZFJlZ2V4VG9rZW4oJ1lZWVknLCAgIG1hdGNoMXRvNCwgbWF0Y2g0KTtcbmFkZFJlZ2V4VG9rZW4oJ1lZWVlZJywgIG1hdGNoMXRvNiwgbWF0Y2g2KTtcbmFkZFJlZ2V4VG9rZW4oJ1lZWVlZWScsIG1hdGNoMXRvNiwgbWF0Y2g2KTtcblxuYWRkUGFyc2VUb2tlbihbJ1lZWVlZJywgJ1lZWVlZWSddLCBZRUFSKTtcbmFkZFBhcnNlVG9rZW4oJ1lZWVknLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5KSB7XG4gICAgYXJyYXlbWUVBUl0gPSBpbnB1dC5sZW5ndGggPT09IDIgPyBob29rcy5wYXJzZVR3b0RpZ2l0WWVhcihpbnB1dCkgOiB0b0ludChpbnB1dCk7XG59KTtcbmFkZFBhcnNlVG9rZW4oJ1lZJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSkge1xuICAgIGFycmF5W1lFQVJdID0gaG9va3MucGFyc2VUd29EaWdpdFllYXIoaW5wdXQpO1xufSk7XG5hZGRQYXJzZVRva2VuKCdZJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSkge1xuICAgIGFycmF5W1lFQVJdID0gcGFyc2VJbnQoaW5wdXQsIDEwKTtcbn0pO1xuXG4vLyBIRUxQRVJTXG5cbmZ1bmN0aW9uIGRheXNJblllYXIoeWVhcikge1xuICAgIHJldHVybiBpc0xlYXBZZWFyKHllYXIpID8gMzY2IDogMzY1O1xufVxuXG5mdW5jdGlvbiBpc0xlYXBZZWFyKHllYXIpIHtcbiAgICByZXR1cm4gKHllYXIgJSA0ID09PSAwICYmIHllYXIgJSAxMDAgIT09IDApIHx8IHllYXIgJSA0MDAgPT09IDA7XG59XG5cbi8vIEhPT0tTXG5cbmhvb2tzLnBhcnNlVHdvRGlnaXRZZWFyID0gZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgcmV0dXJuIHRvSW50KGlucHV0KSArICh0b0ludChpbnB1dCkgPiA2OCA/IDE5MDAgOiAyMDAwKTtcbn07XG5cbi8vIE1PTUVOVFNcblxudmFyIGdldFNldFllYXIgPSBtYWtlR2V0U2V0KCdGdWxsWWVhcicsIHRydWUpO1xuXG5mdW5jdGlvbiBnZXRJc0xlYXBZZWFyICgpIHtcbiAgICByZXR1cm4gaXNMZWFwWWVhcih0aGlzLnllYXIoKSk7XG59XG5cbmZ1bmN0aW9uIG1ha2VHZXRTZXQgKHVuaXQsIGtlZXBUaW1lKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgc2V0JDEodGhpcywgdW5pdCwgdmFsdWUpO1xuICAgICAgICAgICAgaG9va3MudXBkYXRlT2Zmc2V0KHRoaXMsIGtlZXBUaW1lKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGdldCh0aGlzLCB1bml0KTtcbiAgICAgICAgfVxuICAgIH07XG59XG5cbmZ1bmN0aW9uIGdldCAobW9tLCB1bml0KSB7XG4gICAgcmV0dXJuIG1vbS5pc1ZhbGlkKCkgP1xuICAgICAgICBtb20uX2RbJ2dldCcgKyAobW9tLl9pc1VUQyA/ICdVVEMnIDogJycpICsgdW5pdF0oKSA6IE5hTjtcbn1cblxuZnVuY3Rpb24gc2V0JDEgKG1vbSwgdW5pdCwgdmFsdWUpIHtcbiAgICBpZiAobW9tLmlzVmFsaWQoKSAmJiAhaXNOYU4odmFsdWUpKSB7XG4gICAgICAgIGlmICh1bml0ID09PSAnRnVsbFllYXInICYmIGlzTGVhcFllYXIobW9tLnllYXIoKSkgJiYgbW9tLm1vbnRoKCkgPT09IDEgJiYgbW9tLmRhdGUoKSA9PT0gMjkpIHtcbiAgICAgICAgICAgIG1vbS5fZFsnc2V0JyArIChtb20uX2lzVVRDID8gJ1VUQycgOiAnJykgKyB1bml0XSh2YWx1ZSwgbW9tLm1vbnRoKCksIGRheXNJbk1vbnRoKHZhbHVlLCBtb20ubW9udGgoKSkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbW9tLl9kWydzZXQnICsgKG1vbS5faXNVVEMgPyAnVVRDJyA6ICcnKSArIHVuaXRdKHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuLy8gTU9NRU5UU1xuXG5mdW5jdGlvbiBzdHJpbmdHZXQgKHVuaXRzKSB7XG4gICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cyk7XG4gICAgaWYgKGlzRnVuY3Rpb24odGhpc1t1bml0c10pKSB7XG4gICAgICAgIHJldHVybiB0aGlzW3VuaXRzXSgpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbn1cblxuXG5mdW5jdGlvbiBzdHJpbmdTZXQgKHVuaXRzLCB2YWx1ZSkge1xuICAgIGlmICh0eXBlb2YgdW5pdHMgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIHVuaXRzID0gbm9ybWFsaXplT2JqZWN0VW5pdHModW5pdHMpO1xuICAgICAgICB2YXIgcHJpb3JpdGl6ZWQgPSBnZXRQcmlvcml0aXplZFVuaXRzKHVuaXRzKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcmlvcml0aXplZC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdGhpc1twcmlvcml0aXplZFtpXS51bml0XSh1bml0c1twcmlvcml0aXplZFtpXS51bml0XSk7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKTtcbiAgICAgICAgaWYgKGlzRnVuY3Rpb24odGhpc1t1bml0c10pKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpc1t1bml0c10odmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiBtb2QobiwgeCkge1xuICAgIHJldHVybiAoKG4gJSB4KSArIHgpICUgeDtcbn1cblxudmFyIGluZGV4T2Y7XG5cbmlmIChBcnJheS5wcm90b3R5cGUuaW5kZXhPZikge1xuICAgIGluZGV4T2YgPSBBcnJheS5wcm90b3R5cGUuaW5kZXhPZjtcbn0gZWxzZSB7XG4gICAgaW5kZXhPZiA9IGZ1bmN0aW9uIChvKSB7XG4gICAgICAgIC8vIEkga25vd1xuICAgICAgICB2YXIgaTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGlmICh0aGlzW2ldID09PSBvKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIC0xO1xuICAgIH07XG59XG5cbmZ1bmN0aW9uIGRheXNJbk1vbnRoKHllYXIsIG1vbnRoKSB7XG4gICAgaWYgKGlzTmFOKHllYXIpIHx8IGlzTmFOKG1vbnRoKSkge1xuICAgICAgICByZXR1cm4gTmFOO1xuICAgIH1cbiAgICB2YXIgbW9kTW9udGggPSBtb2QobW9udGgsIDEyKTtcbiAgICB5ZWFyICs9IChtb250aCAtIG1vZE1vbnRoKSAvIDEyO1xuICAgIHJldHVybiBtb2RNb250aCA9PT0gMSA/IChpc0xlYXBZZWFyKHllYXIpID8gMjkgOiAyOCkgOiAoMzEgLSBtb2RNb250aCAlIDcgJSAyKTtcbn1cblxuLy8gRk9STUFUVElOR1xuXG5hZGRGb3JtYXRUb2tlbignTScsIFsnTU0nLCAyXSwgJ01vJywgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLm1vbnRoKCkgKyAxO1xufSk7XG5cbmFkZEZvcm1hdFRva2VuKCdNTU0nLCAwLCAwLCBmdW5jdGlvbiAoZm9ybWF0KSB7XG4gICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLm1vbnRoc1Nob3J0KHRoaXMsIGZvcm1hdCk7XG59KTtcblxuYWRkRm9ybWF0VG9rZW4oJ01NTU0nLCAwLCAwLCBmdW5jdGlvbiAoZm9ybWF0KSB7XG4gICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLm1vbnRocyh0aGlzLCBmb3JtYXQpO1xufSk7XG5cbi8vIEFMSUFTRVNcblxuYWRkVW5pdEFsaWFzKCdtb250aCcsICdNJyk7XG5cbi8vIFBSSU9SSVRZXG5cbmFkZFVuaXRQcmlvcml0eSgnbW9udGgnLCA4KTtcblxuLy8gUEFSU0lOR1xuXG5hZGRSZWdleFRva2VuKCdNJywgICAgbWF0Y2gxdG8yKTtcbmFkZFJlZ2V4VG9rZW4oJ01NJywgICBtYXRjaDF0bzIsIG1hdGNoMik7XG5hZGRSZWdleFRva2VuKCdNTU0nLCAgZnVuY3Rpb24gKGlzU3RyaWN0LCBsb2NhbGUpIHtcbiAgICByZXR1cm4gbG9jYWxlLm1vbnRoc1Nob3J0UmVnZXgoaXNTdHJpY3QpO1xufSk7XG5hZGRSZWdleFRva2VuKCdNTU1NJywgZnVuY3Rpb24gKGlzU3RyaWN0LCBsb2NhbGUpIHtcbiAgICByZXR1cm4gbG9jYWxlLm1vbnRoc1JlZ2V4KGlzU3RyaWN0KTtcbn0pO1xuXG5hZGRQYXJzZVRva2VuKFsnTScsICdNTSddLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5KSB7XG4gICAgYXJyYXlbTU9OVEhdID0gdG9JbnQoaW5wdXQpIC0gMTtcbn0pO1xuXG5hZGRQYXJzZVRva2VuKFsnTU1NJywgJ01NTU0nXSwgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnLCB0b2tlbikge1xuICAgIHZhciBtb250aCA9IGNvbmZpZy5fbG9jYWxlLm1vbnRoc1BhcnNlKGlucHV0LCB0b2tlbiwgY29uZmlnLl9zdHJpY3QpO1xuICAgIC8vIGlmIHdlIGRpZG4ndCBmaW5kIGEgbW9udGggbmFtZSwgbWFyayB0aGUgZGF0ZSBhcyBpbnZhbGlkLlxuICAgIGlmIChtb250aCAhPSBudWxsKSB7XG4gICAgICAgIGFycmF5W01PTlRIXSA9IG1vbnRoO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmludmFsaWRNb250aCA9IGlucHV0O1xuICAgIH1cbn0pO1xuXG4vLyBMT0NBTEVTXG5cbnZhciBNT05USFNfSU5fRk9STUFUID0gL0Rbb0RdPyhcXFtbXlxcW1xcXV0qXFxdfFxccykrTU1NTT8vO1xudmFyIGRlZmF1bHRMb2NhbGVNb250aHMgPSAnSmFudWFyeV9GZWJydWFyeV9NYXJjaF9BcHJpbF9NYXlfSnVuZV9KdWx5X0F1Z3VzdF9TZXB0ZW1iZXJfT2N0b2Jlcl9Ob3ZlbWJlcl9EZWNlbWJlcicuc3BsaXQoJ18nKTtcbmZ1bmN0aW9uIGxvY2FsZU1vbnRocyAobSwgZm9ybWF0KSB7XG4gICAgaWYgKCFtKSB7XG4gICAgICAgIHJldHVybiBpc0FycmF5KHRoaXMuX21vbnRocykgPyB0aGlzLl9tb250aHMgOlxuICAgICAgICAgICAgdGhpcy5fbW9udGhzWydzdGFuZGFsb25lJ107XG4gICAgfVxuICAgIHJldHVybiBpc0FycmF5KHRoaXMuX21vbnRocykgPyB0aGlzLl9tb250aHNbbS5tb250aCgpXSA6XG4gICAgICAgIHRoaXMuX21vbnRoc1sodGhpcy5fbW9udGhzLmlzRm9ybWF0IHx8IE1PTlRIU19JTl9GT1JNQVQpLnRlc3QoZm9ybWF0KSA/ICdmb3JtYXQnIDogJ3N0YW5kYWxvbmUnXVttLm1vbnRoKCldO1xufVxuXG52YXIgZGVmYXVsdExvY2FsZU1vbnRoc1Nob3J0ID0gJ0phbl9GZWJfTWFyX0Fwcl9NYXlfSnVuX0p1bF9BdWdfU2VwX09jdF9Ob3ZfRGVjJy5zcGxpdCgnXycpO1xuZnVuY3Rpb24gbG9jYWxlTW9udGhzU2hvcnQgKG0sIGZvcm1hdCkge1xuICAgIGlmICghbSkge1xuICAgICAgICByZXR1cm4gaXNBcnJheSh0aGlzLl9tb250aHNTaG9ydCkgPyB0aGlzLl9tb250aHNTaG9ydCA6XG4gICAgICAgICAgICB0aGlzLl9tb250aHNTaG9ydFsnc3RhbmRhbG9uZSddO1xuICAgIH1cbiAgICByZXR1cm4gaXNBcnJheSh0aGlzLl9tb250aHNTaG9ydCkgPyB0aGlzLl9tb250aHNTaG9ydFttLm1vbnRoKCldIDpcbiAgICAgICAgdGhpcy5fbW9udGhzU2hvcnRbTU9OVEhTX0lOX0ZPUk1BVC50ZXN0KGZvcm1hdCkgPyAnZm9ybWF0JyA6ICdzdGFuZGFsb25lJ11bbS5tb250aCgpXTtcbn1cblxuZnVuY3Rpb24gaGFuZGxlU3RyaWN0UGFyc2UobW9udGhOYW1lLCBmb3JtYXQsIHN0cmljdCkge1xuICAgIHZhciBpLCBpaSwgbW9tLCBsbGMgPSBtb250aE5hbWUudG9Mb2NhbGVMb3dlckNhc2UoKTtcbiAgICBpZiAoIXRoaXMuX21vbnRoc1BhcnNlKSB7XG4gICAgICAgIC8vIHRoaXMgaXMgbm90IHVzZWRcbiAgICAgICAgdGhpcy5fbW9udGhzUGFyc2UgPSBbXTtcbiAgICAgICAgdGhpcy5fbG9uZ01vbnRoc1BhcnNlID0gW107XG4gICAgICAgIHRoaXMuX3Nob3J0TW9udGhzUGFyc2UgPSBbXTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IDEyOyArK2kpIHtcbiAgICAgICAgICAgIG1vbSA9IGNyZWF0ZVVUQyhbMjAwMCwgaV0pO1xuICAgICAgICAgICAgdGhpcy5fc2hvcnRNb250aHNQYXJzZVtpXSA9IHRoaXMubW9udGhzU2hvcnQobW9tLCAnJykudG9Mb2NhbGVMb3dlckNhc2UoKTtcbiAgICAgICAgICAgIHRoaXMuX2xvbmdNb250aHNQYXJzZVtpXSA9IHRoaXMubW9udGhzKG1vbSwgJycpLnRvTG9jYWxlTG93ZXJDYXNlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoc3RyaWN0KSB7XG4gICAgICAgIGlmIChmb3JtYXQgPT09ICdNTU0nKSB7XG4gICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9zaG9ydE1vbnRoc1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX2xvbmdNb250aHNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoZm9ybWF0ID09PSAnTU1NJykge1xuICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fc2hvcnRNb250aHNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgIGlmIChpaSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9sb25nTW9udGhzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fbG9uZ01vbnRoc1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgaWYgKGlpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3Nob3J0TW9udGhzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5mdW5jdGlvbiBsb2NhbGVNb250aHNQYXJzZSAobW9udGhOYW1lLCBmb3JtYXQsIHN0cmljdCkge1xuICAgIHZhciBpLCBtb20sIHJlZ2V4O1xuXG4gICAgaWYgKHRoaXMuX21vbnRoc1BhcnNlRXhhY3QpIHtcbiAgICAgICAgcmV0dXJuIGhhbmRsZVN0cmljdFBhcnNlLmNhbGwodGhpcywgbW9udGhOYW1lLCBmb3JtYXQsIHN0cmljdCk7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLl9tb250aHNQYXJzZSkge1xuICAgICAgICB0aGlzLl9tb250aHNQYXJzZSA9IFtdO1xuICAgICAgICB0aGlzLl9sb25nTW9udGhzUGFyc2UgPSBbXTtcbiAgICAgICAgdGhpcy5fc2hvcnRNb250aHNQYXJzZSA9IFtdO1xuICAgIH1cblxuICAgIC8vIFRPRE86IGFkZCBzb3J0aW5nXG4gICAgLy8gU29ydGluZyBtYWtlcyBzdXJlIGlmIG9uZSBtb250aCAob3IgYWJicikgaXMgYSBwcmVmaXggb2YgYW5vdGhlclxuICAgIC8vIHNlZSBzb3J0aW5nIGluIGNvbXB1dGVNb250aHNQYXJzZVxuICAgIGZvciAoaSA9IDA7IGkgPCAxMjsgaSsrKSB7XG4gICAgICAgIC8vIG1ha2UgdGhlIHJlZ2V4IGlmIHdlIGRvbid0IGhhdmUgaXQgYWxyZWFkeVxuICAgICAgICBtb20gPSBjcmVhdGVVVEMoWzIwMDAsIGldKTtcbiAgICAgICAgaWYgKHN0cmljdCAmJiAhdGhpcy5fbG9uZ01vbnRoc1BhcnNlW2ldKSB7XG4gICAgICAgICAgICB0aGlzLl9sb25nTW9udGhzUGFyc2VbaV0gPSBuZXcgUmVnRXhwKCdeJyArIHRoaXMubW9udGhzKG1vbSwgJycpLnJlcGxhY2UoJy4nLCAnJykgKyAnJCcsICdpJyk7XG4gICAgICAgICAgICB0aGlzLl9zaG9ydE1vbnRoc1BhcnNlW2ldID0gbmV3IFJlZ0V4cCgnXicgKyB0aGlzLm1vbnRoc1Nob3J0KG1vbSwgJycpLnJlcGxhY2UoJy4nLCAnJykgKyAnJCcsICdpJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFzdHJpY3QgJiYgIXRoaXMuX21vbnRoc1BhcnNlW2ldKSB7XG4gICAgICAgICAgICByZWdleCA9ICdeJyArIHRoaXMubW9udGhzKG1vbSwgJycpICsgJ3xeJyArIHRoaXMubW9udGhzU2hvcnQobW9tLCAnJyk7XG4gICAgICAgICAgICB0aGlzLl9tb250aHNQYXJzZVtpXSA9IG5ldyBSZWdFeHAocmVnZXgucmVwbGFjZSgnLicsICcnKSwgJ2knKTtcbiAgICAgICAgfVxuICAgICAgICAvLyB0ZXN0IHRoZSByZWdleFxuICAgICAgICBpZiAoc3RyaWN0ICYmIGZvcm1hdCA9PT0gJ01NTU0nICYmIHRoaXMuX2xvbmdNb250aHNQYXJzZVtpXS50ZXN0KG1vbnRoTmFtZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICB9IGVsc2UgaWYgKHN0cmljdCAmJiBmb3JtYXQgPT09ICdNTU0nICYmIHRoaXMuX3Nob3J0TW9udGhzUGFyc2VbaV0udGVzdChtb250aE5hbWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgfSBlbHNlIGlmICghc3RyaWN0ICYmIHRoaXMuX21vbnRoc1BhcnNlW2ldLnRlc3QobW9udGhOYW1lKSkge1xuICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8vIE1PTUVOVFNcblxuZnVuY3Rpb24gc2V0TW9udGggKG1vbSwgdmFsdWUpIHtcbiAgICB2YXIgZGF5T2ZNb250aDtcblxuICAgIGlmICghbW9tLmlzVmFsaWQoKSkge1xuICAgICAgICAvLyBObyBvcFxuICAgICAgICByZXR1cm4gbW9tO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGlmICgvXlxcZCskLy50ZXN0KHZhbHVlKSkge1xuICAgICAgICAgICAgdmFsdWUgPSB0b0ludCh2YWx1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YWx1ZSA9IG1vbS5sb2NhbGVEYXRhKCkubW9udGhzUGFyc2UodmFsdWUpO1xuICAgICAgICAgICAgLy8gVE9ETzogQW5vdGhlciBzaWxlbnQgZmFpbHVyZT9cbiAgICAgICAgICAgIGlmICghaXNOdW1iZXIodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1vbTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGRheU9mTW9udGggPSBNYXRoLm1pbihtb20uZGF0ZSgpLCBkYXlzSW5Nb250aChtb20ueWVhcigpLCB2YWx1ZSkpO1xuICAgIG1vbS5fZFsnc2V0JyArIChtb20uX2lzVVRDID8gJ1VUQycgOiAnJykgKyAnTW9udGgnXSh2YWx1ZSwgZGF5T2ZNb250aCk7XG4gICAgcmV0dXJuIG1vbTtcbn1cblxuZnVuY3Rpb24gZ2V0U2V0TW9udGggKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgc2V0TW9udGgodGhpcywgdmFsdWUpO1xuICAgICAgICBob29rcy51cGRhdGVPZmZzZXQodGhpcywgdHJ1ZSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBnZXQodGhpcywgJ01vbnRoJyk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBnZXREYXlzSW5Nb250aCAoKSB7XG4gICAgcmV0dXJuIGRheXNJbk1vbnRoKHRoaXMueWVhcigpLCB0aGlzLm1vbnRoKCkpO1xufVxuXG52YXIgZGVmYXVsdE1vbnRoc1Nob3J0UmVnZXggPSBtYXRjaFdvcmQ7XG5mdW5jdGlvbiBtb250aHNTaG9ydFJlZ2V4IChpc1N0cmljdCkge1xuICAgIGlmICh0aGlzLl9tb250aHNQYXJzZUV4YWN0KSB7XG4gICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX21vbnRoc1JlZ2V4JykpIHtcbiAgICAgICAgICAgIGNvbXB1dGVNb250aHNQYXJzZS5jYWxsKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1N0cmljdCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21vbnRoc1Nob3J0U3RyaWN0UmVnZXg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbW9udGhzU2hvcnRSZWdleDtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX21vbnRoc1Nob3J0UmVnZXgnKSkge1xuICAgICAgICAgICAgdGhpcy5fbW9udGhzU2hvcnRSZWdleCA9IGRlZmF1bHRNb250aHNTaG9ydFJlZ2V4O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9tb250aHNTaG9ydFN0cmljdFJlZ2V4ICYmIGlzU3RyaWN0ID9cbiAgICAgICAgICAgIHRoaXMuX21vbnRoc1Nob3J0U3RyaWN0UmVnZXggOiB0aGlzLl9tb250aHNTaG9ydFJlZ2V4O1xuICAgIH1cbn1cblxudmFyIGRlZmF1bHRNb250aHNSZWdleCA9IG1hdGNoV29yZDtcbmZ1bmN0aW9uIG1vbnRoc1JlZ2V4IChpc1N0cmljdCkge1xuICAgIGlmICh0aGlzLl9tb250aHNQYXJzZUV4YWN0KSB7XG4gICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX21vbnRoc1JlZ2V4JykpIHtcbiAgICAgICAgICAgIGNvbXB1dGVNb250aHNQYXJzZS5jYWxsKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1N0cmljdCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21vbnRoc1N0cmljdFJlZ2V4O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21vbnRoc1JlZ2V4O1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfbW9udGhzUmVnZXgnKSkge1xuICAgICAgICAgICAgdGhpcy5fbW9udGhzUmVnZXggPSBkZWZhdWx0TW9udGhzUmVnZXg7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX21vbnRoc1N0cmljdFJlZ2V4ICYmIGlzU3RyaWN0ID9cbiAgICAgICAgICAgIHRoaXMuX21vbnRoc1N0cmljdFJlZ2V4IDogdGhpcy5fbW9udGhzUmVnZXg7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBjb21wdXRlTW9udGhzUGFyc2UgKCkge1xuICAgIGZ1bmN0aW9uIGNtcExlblJldihhLCBiKSB7XG4gICAgICAgIHJldHVybiBiLmxlbmd0aCAtIGEubGVuZ3RoO1xuICAgIH1cblxuICAgIHZhciBzaG9ydFBpZWNlcyA9IFtdLCBsb25nUGllY2VzID0gW10sIG1peGVkUGllY2VzID0gW10sXG4gICAgICAgIGksIG1vbTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgMTI7IGkrKykge1xuICAgICAgICAvLyBtYWtlIHRoZSByZWdleCBpZiB3ZSBkb24ndCBoYXZlIGl0IGFscmVhZHlcbiAgICAgICAgbW9tID0gY3JlYXRlVVRDKFsyMDAwLCBpXSk7XG4gICAgICAgIHNob3J0UGllY2VzLnB1c2godGhpcy5tb250aHNTaG9ydChtb20sICcnKSk7XG4gICAgICAgIGxvbmdQaWVjZXMucHVzaCh0aGlzLm1vbnRocyhtb20sICcnKSk7XG4gICAgICAgIG1peGVkUGllY2VzLnB1c2godGhpcy5tb250aHMobW9tLCAnJykpO1xuICAgICAgICBtaXhlZFBpZWNlcy5wdXNoKHRoaXMubW9udGhzU2hvcnQobW9tLCAnJykpO1xuICAgIH1cbiAgICAvLyBTb3J0aW5nIG1ha2VzIHN1cmUgaWYgb25lIG1vbnRoIChvciBhYmJyKSBpcyBhIHByZWZpeCBvZiBhbm90aGVyIGl0XG4gICAgLy8gd2lsbCBtYXRjaCB0aGUgbG9uZ2VyIHBpZWNlLlxuICAgIHNob3J0UGllY2VzLnNvcnQoY21wTGVuUmV2KTtcbiAgICBsb25nUGllY2VzLnNvcnQoY21wTGVuUmV2KTtcbiAgICBtaXhlZFBpZWNlcy5zb3J0KGNtcExlblJldik7XG4gICAgZm9yIChpID0gMDsgaSA8IDEyOyBpKyspIHtcbiAgICAgICAgc2hvcnRQaWVjZXNbaV0gPSByZWdleEVzY2FwZShzaG9ydFBpZWNlc1tpXSk7XG4gICAgICAgIGxvbmdQaWVjZXNbaV0gPSByZWdleEVzY2FwZShsb25nUGllY2VzW2ldKTtcbiAgICB9XG4gICAgZm9yIChpID0gMDsgaSA8IDI0OyBpKyspIHtcbiAgICAgICAgbWl4ZWRQaWVjZXNbaV0gPSByZWdleEVzY2FwZShtaXhlZFBpZWNlc1tpXSk7XG4gICAgfVxuXG4gICAgdGhpcy5fbW9udGhzUmVnZXggPSBuZXcgUmVnRXhwKCdeKCcgKyBtaXhlZFBpZWNlcy5qb2luKCd8JykgKyAnKScsICdpJyk7XG4gICAgdGhpcy5fbW9udGhzU2hvcnRSZWdleCA9IHRoaXMuX21vbnRoc1JlZ2V4O1xuICAgIHRoaXMuX21vbnRoc1N0cmljdFJlZ2V4ID0gbmV3IFJlZ0V4cCgnXignICsgbG9uZ1BpZWNlcy5qb2luKCd8JykgKyAnKScsICdpJyk7XG4gICAgdGhpcy5fbW9udGhzU2hvcnRTdHJpY3RSZWdleCA9IG5ldyBSZWdFeHAoJ14oJyArIHNob3J0UGllY2VzLmpvaW4oJ3wnKSArICcpJywgJ2knKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlRGF0ZSAoeSwgbSwgZCwgaCwgTSwgcywgbXMpIHtcbiAgICAvLyBjYW4ndCBqdXN0IGFwcGx5KCkgdG8gY3JlYXRlIGEgZGF0ZTpcbiAgICAvLyBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3EvMTgxMzQ4XG4gICAgdmFyIGRhdGUgPSBuZXcgRGF0ZSh5LCBtLCBkLCBoLCBNLCBzLCBtcyk7XG5cbiAgICAvLyB0aGUgZGF0ZSBjb25zdHJ1Y3RvciByZW1hcHMgeWVhcnMgMC05OSB0byAxOTAwLTE5OTlcbiAgICBpZiAoeSA8IDEwMCAmJiB5ID49IDAgJiYgaXNGaW5pdGUoZGF0ZS5nZXRGdWxsWWVhcigpKSkge1xuICAgICAgICBkYXRlLnNldEZ1bGxZZWFyKHkpO1xuICAgIH1cbiAgICByZXR1cm4gZGF0ZTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlVVRDRGF0ZSAoeSkge1xuICAgIHZhciBkYXRlID0gbmV3IERhdGUoRGF0ZS5VVEMuYXBwbHkobnVsbCwgYXJndW1lbnRzKSk7XG5cbiAgICAvLyB0aGUgRGF0ZS5VVEMgZnVuY3Rpb24gcmVtYXBzIHllYXJzIDAtOTkgdG8gMTkwMC0xOTk5XG4gICAgaWYgKHkgPCAxMDAgJiYgeSA+PSAwICYmIGlzRmluaXRlKGRhdGUuZ2V0VVRDRnVsbFllYXIoKSkpIHtcbiAgICAgICAgZGF0ZS5zZXRVVENGdWxsWWVhcih5KTtcbiAgICB9XG4gICAgcmV0dXJuIGRhdGU7XG59XG5cbi8vIHN0YXJ0LW9mLWZpcnN0LXdlZWsgLSBzdGFydC1vZi15ZWFyXG5mdW5jdGlvbiBmaXJzdFdlZWtPZmZzZXQoeWVhciwgZG93LCBkb3kpIHtcbiAgICB2YXIgLy8gZmlyc3Qtd2VlayBkYXkgLS0gd2hpY2ggamFudWFyeSBpcyBhbHdheXMgaW4gdGhlIGZpcnN0IHdlZWsgKDQgZm9yIGlzbywgMSBmb3Igb3RoZXIpXG4gICAgICAgIGZ3ZCA9IDcgKyBkb3cgLSBkb3ksXG4gICAgICAgIC8vIGZpcnN0LXdlZWsgZGF5IGxvY2FsIHdlZWtkYXkgLS0gd2hpY2ggbG9jYWwgd2Vla2RheSBpcyBmd2RcbiAgICAgICAgZndkbHcgPSAoNyArIGNyZWF0ZVVUQ0RhdGUoeWVhciwgMCwgZndkKS5nZXRVVENEYXkoKSAtIGRvdykgJSA3O1xuXG4gICAgcmV0dXJuIC1md2RsdyArIGZ3ZCAtIDE7XG59XG5cbi8vIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0lTT193ZWVrX2RhdGUjQ2FsY3VsYXRpbmdfYV9kYXRlX2dpdmVuX3RoZV95ZWFyLjJDX3dlZWtfbnVtYmVyX2FuZF93ZWVrZGF5XG5mdW5jdGlvbiBkYXlPZlllYXJGcm9tV2Vla3MoeWVhciwgd2Vlaywgd2Vla2RheSwgZG93LCBkb3kpIHtcbiAgICB2YXIgbG9jYWxXZWVrZGF5ID0gKDcgKyB3ZWVrZGF5IC0gZG93KSAlIDcsXG4gICAgICAgIHdlZWtPZmZzZXQgPSBmaXJzdFdlZWtPZmZzZXQoeWVhciwgZG93LCBkb3kpLFxuICAgICAgICBkYXlPZlllYXIgPSAxICsgNyAqICh3ZWVrIC0gMSkgKyBsb2NhbFdlZWtkYXkgKyB3ZWVrT2Zmc2V0LFxuICAgICAgICByZXNZZWFyLCByZXNEYXlPZlllYXI7XG5cbiAgICBpZiAoZGF5T2ZZZWFyIDw9IDApIHtcbiAgICAgICAgcmVzWWVhciA9IHllYXIgLSAxO1xuICAgICAgICByZXNEYXlPZlllYXIgPSBkYXlzSW5ZZWFyKHJlc1llYXIpICsgZGF5T2ZZZWFyO1xuICAgIH0gZWxzZSBpZiAoZGF5T2ZZZWFyID4gZGF5c0luWWVhcih5ZWFyKSkge1xuICAgICAgICByZXNZZWFyID0geWVhciArIDE7XG4gICAgICAgIHJlc0RheU9mWWVhciA9IGRheU9mWWVhciAtIGRheXNJblllYXIoeWVhcik7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmVzWWVhciA9IHllYXI7XG4gICAgICAgIHJlc0RheU9mWWVhciA9IGRheU9mWWVhcjtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgICB5ZWFyOiByZXNZZWFyLFxuICAgICAgICBkYXlPZlllYXI6IHJlc0RheU9mWWVhclxuICAgIH07XG59XG5cbmZ1bmN0aW9uIHdlZWtPZlllYXIobW9tLCBkb3csIGRveSkge1xuICAgIHZhciB3ZWVrT2Zmc2V0ID0gZmlyc3RXZWVrT2Zmc2V0KG1vbS55ZWFyKCksIGRvdywgZG95KSxcbiAgICAgICAgd2VlayA9IE1hdGguZmxvb3IoKG1vbS5kYXlPZlllYXIoKSAtIHdlZWtPZmZzZXQgLSAxKSAvIDcpICsgMSxcbiAgICAgICAgcmVzV2VlaywgcmVzWWVhcjtcblxuICAgIGlmICh3ZWVrIDwgMSkge1xuICAgICAgICByZXNZZWFyID0gbW9tLnllYXIoKSAtIDE7XG4gICAgICAgIHJlc1dlZWsgPSB3ZWVrICsgd2Vla3NJblllYXIocmVzWWVhciwgZG93LCBkb3kpO1xuICAgIH0gZWxzZSBpZiAod2VlayA+IHdlZWtzSW5ZZWFyKG1vbS55ZWFyKCksIGRvdywgZG95KSkge1xuICAgICAgICByZXNXZWVrID0gd2VlayAtIHdlZWtzSW5ZZWFyKG1vbS55ZWFyKCksIGRvdywgZG95KTtcbiAgICAgICAgcmVzWWVhciA9IG1vbS55ZWFyKCkgKyAxO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc1llYXIgPSBtb20ueWVhcigpO1xuICAgICAgICByZXNXZWVrID0gd2VlaztcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgICB3ZWVrOiByZXNXZWVrLFxuICAgICAgICB5ZWFyOiByZXNZZWFyXG4gICAgfTtcbn1cblxuZnVuY3Rpb24gd2Vla3NJblllYXIoeWVhciwgZG93LCBkb3kpIHtcbiAgICB2YXIgd2Vla09mZnNldCA9IGZpcnN0V2Vla09mZnNldCh5ZWFyLCBkb3csIGRveSksXG4gICAgICAgIHdlZWtPZmZzZXROZXh0ID0gZmlyc3RXZWVrT2Zmc2V0KHllYXIgKyAxLCBkb3csIGRveSk7XG4gICAgcmV0dXJuIChkYXlzSW5ZZWFyKHllYXIpIC0gd2Vla09mZnNldCArIHdlZWtPZmZzZXROZXh0KSAvIDc7XG59XG5cbi8vIEZPUk1BVFRJTkdcblxuYWRkRm9ybWF0VG9rZW4oJ3cnLCBbJ3d3JywgMl0sICd3bycsICd3ZWVrJyk7XG5hZGRGb3JtYXRUb2tlbignVycsIFsnV1cnLCAyXSwgJ1dvJywgJ2lzb1dlZWsnKTtcblxuLy8gQUxJQVNFU1xuXG5hZGRVbml0QWxpYXMoJ3dlZWsnLCAndycpO1xuYWRkVW5pdEFsaWFzKCdpc29XZWVrJywgJ1cnKTtcblxuLy8gUFJJT1JJVElFU1xuXG5hZGRVbml0UHJpb3JpdHkoJ3dlZWsnLCA1KTtcbmFkZFVuaXRQcmlvcml0eSgnaXNvV2VlaycsIDUpO1xuXG4vLyBQQVJTSU5HXG5cbmFkZFJlZ2V4VG9rZW4oJ3cnLCAgbWF0Y2gxdG8yKTtcbmFkZFJlZ2V4VG9rZW4oJ3d3JywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuYWRkUmVnZXhUb2tlbignVycsICBtYXRjaDF0bzIpO1xuYWRkUmVnZXhUb2tlbignV1cnLCBtYXRjaDF0bzIsIG1hdGNoMik7XG5cbmFkZFdlZWtQYXJzZVRva2VuKFsndycsICd3dycsICdXJywgJ1dXJ10sIGZ1bmN0aW9uIChpbnB1dCwgd2VlaywgY29uZmlnLCB0b2tlbikge1xuICAgIHdlZWtbdG9rZW4uc3Vic3RyKDAsIDEpXSA9IHRvSW50KGlucHV0KTtcbn0pO1xuXG4vLyBIRUxQRVJTXG5cbi8vIExPQ0FMRVNcblxuZnVuY3Rpb24gbG9jYWxlV2VlayAobW9tKSB7XG4gICAgcmV0dXJuIHdlZWtPZlllYXIobW9tLCB0aGlzLl93ZWVrLmRvdywgdGhpcy5fd2Vlay5kb3kpLndlZWs7XG59XG5cbnZhciBkZWZhdWx0TG9jYWxlV2VlayA9IHtcbiAgICBkb3cgOiAwLCAvLyBTdW5kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICBkb3kgOiA2ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiAxc3QgaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG59O1xuXG5mdW5jdGlvbiBsb2NhbGVGaXJzdERheU9mV2VlayAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3dlZWsuZG93O1xufVxuXG5mdW5jdGlvbiBsb2NhbGVGaXJzdERheU9mWWVhciAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3dlZWsuZG95O1xufVxuXG4vLyBNT01FTlRTXG5cbmZ1bmN0aW9uIGdldFNldFdlZWsgKGlucHV0KSB7XG4gICAgdmFyIHdlZWsgPSB0aGlzLmxvY2FsZURhdGEoKS53ZWVrKHRoaXMpO1xuICAgIHJldHVybiBpbnB1dCA9PSBudWxsID8gd2VlayA6IHRoaXMuYWRkKChpbnB1dCAtIHdlZWspICogNywgJ2QnKTtcbn1cblxuZnVuY3Rpb24gZ2V0U2V0SVNPV2VlayAoaW5wdXQpIHtcbiAgICB2YXIgd2VlayA9IHdlZWtPZlllYXIodGhpcywgMSwgNCkud2VlaztcbiAgICByZXR1cm4gaW5wdXQgPT0gbnVsbCA/IHdlZWsgOiB0aGlzLmFkZCgoaW5wdXQgLSB3ZWVrKSAqIDcsICdkJyk7XG59XG5cbi8vIEZPUk1BVFRJTkdcblxuYWRkRm9ybWF0VG9rZW4oJ2QnLCAwLCAnZG8nLCAnZGF5Jyk7XG5cbmFkZEZvcm1hdFRva2VuKCdkZCcsIDAsIDAsIGZ1bmN0aW9uIChmb3JtYXQpIHtcbiAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkud2Vla2RheXNNaW4odGhpcywgZm9ybWF0KTtcbn0pO1xuXG5hZGRGb3JtYXRUb2tlbignZGRkJywgMCwgMCwgZnVuY3Rpb24gKGZvcm1hdCkge1xuICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS53ZWVrZGF5c1Nob3J0KHRoaXMsIGZvcm1hdCk7XG59KTtcblxuYWRkRm9ybWF0VG9rZW4oJ2RkZGQnLCAwLCAwLCBmdW5jdGlvbiAoZm9ybWF0KSB7XG4gICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLndlZWtkYXlzKHRoaXMsIGZvcm1hdCk7XG59KTtcblxuYWRkRm9ybWF0VG9rZW4oJ2UnLCAwLCAwLCAnd2Vla2RheScpO1xuYWRkRm9ybWF0VG9rZW4oJ0UnLCAwLCAwLCAnaXNvV2Vla2RheScpO1xuXG4vLyBBTElBU0VTXG5cbmFkZFVuaXRBbGlhcygnZGF5JywgJ2QnKTtcbmFkZFVuaXRBbGlhcygnd2Vla2RheScsICdlJyk7XG5hZGRVbml0QWxpYXMoJ2lzb1dlZWtkYXknLCAnRScpO1xuXG4vLyBQUklPUklUWVxuYWRkVW5pdFByaW9yaXR5KCdkYXknLCAxMSk7XG5hZGRVbml0UHJpb3JpdHkoJ3dlZWtkYXknLCAxMSk7XG5hZGRVbml0UHJpb3JpdHkoJ2lzb1dlZWtkYXknLCAxMSk7XG5cbi8vIFBBUlNJTkdcblxuYWRkUmVnZXhUb2tlbignZCcsICAgIG1hdGNoMXRvMik7XG5hZGRSZWdleFRva2VuKCdlJywgICAgbWF0Y2gxdG8yKTtcbmFkZFJlZ2V4VG9rZW4oJ0UnLCAgICBtYXRjaDF0bzIpO1xuYWRkUmVnZXhUb2tlbignZGQnLCAgIGZ1bmN0aW9uIChpc1N0cmljdCwgbG9jYWxlKSB7XG4gICAgcmV0dXJuIGxvY2FsZS53ZWVrZGF5c01pblJlZ2V4KGlzU3RyaWN0KTtcbn0pO1xuYWRkUmVnZXhUb2tlbignZGRkJywgICBmdW5jdGlvbiAoaXNTdHJpY3QsIGxvY2FsZSkge1xuICAgIHJldHVybiBsb2NhbGUud2Vla2RheXNTaG9ydFJlZ2V4KGlzU3RyaWN0KTtcbn0pO1xuYWRkUmVnZXhUb2tlbignZGRkZCcsICAgZnVuY3Rpb24gKGlzU3RyaWN0LCBsb2NhbGUpIHtcbiAgICByZXR1cm4gbG9jYWxlLndlZWtkYXlzUmVnZXgoaXNTdHJpY3QpO1xufSk7XG5cbmFkZFdlZWtQYXJzZVRva2VuKFsnZGQnLCAnZGRkJywgJ2RkZGQnXSwgZnVuY3Rpb24gKGlucHV0LCB3ZWVrLCBjb25maWcsIHRva2VuKSB7XG4gICAgdmFyIHdlZWtkYXkgPSBjb25maWcuX2xvY2FsZS53ZWVrZGF5c1BhcnNlKGlucHV0LCB0b2tlbiwgY29uZmlnLl9zdHJpY3QpO1xuICAgIC8vIGlmIHdlIGRpZG4ndCBnZXQgYSB3ZWVrZGF5IG5hbWUsIG1hcmsgdGhlIGRhdGUgYXMgaW52YWxpZFxuICAgIGlmICh3ZWVrZGF5ICE9IG51bGwpIHtcbiAgICAgICAgd2Vlay5kID0gd2Vla2RheTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5pbnZhbGlkV2Vla2RheSA9IGlucHV0O1xuICAgIH1cbn0pO1xuXG5hZGRXZWVrUGFyc2VUb2tlbihbJ2QnLCAnZScsICdFJ10sIGZ1bmN0aW9uIChpbnB1dCwgd2VlaywgY29uZmlnLCB0b2tlbikge1xuICAgIHdlZWtbdG9rZW5dID0gdG9JbnQoaW5wdXQpO1xufSk7XG5cbi8vIEhFTFBFUlNcblxuZnVuY3Rpb24gcGFyc2VXZWVrZGF5KGlucHV0LCBsb2NhbGUpIHtcbiAgICBpZiAodHlwZW9mIGlucHV0ICE9PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gaW5wdXQ7XG4gICAgfVxuXG4gICAgaWYgKCFpc05hTihpbnB1dCkpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlSW50KGlucHV0LCAxMCk7XG4gICAgfVxuXG4gICAgaW5wdXQgPSBsb2NhbGUud2Vla2RheXNQYXJzZShpbnB1dCk7XG4gICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgcmV0dXJuIGlucHV0O1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xufVxuXG5mdW5jdGlvbiBwYXJzZUlzb1dlZWtkYXkoaW5wdXQsIGxvY2FsZSkge1xuICAgIGlmICh0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiBsb2NhbGUud2Vla2RheXNQYXJzZShpbnB1dCkgJSA3IHx8IDc7XG4gICAgfVxuICAgIHJldHVybiBpc05hTihpbnB1dCkgPyBudWxsIDogaW5wdXQ7XG59XG5cbi8vIExPQ0FMRVNcblxudmFyIGRlZmF1bHRMb2NhbGVXZWVrZGF5cyA9ICdTdW5kYXlfTW9uZGF5X1R1ZXNkYXlfV2VkbmVzZGF5X1RodXJzZGF5X0ZyaWRheV9TYXR1cmRheScuc3BsaXQoJ18nKTtcbmZ1bmN0aW9uIGxvY2FsZVdlZWtkYXlzIChtLCBmb3JtYXQpIHtcbiAgICBpZiAoIW0pIHtcbiAgICAgICAgcmV0dXJuIGlzQXJyYXkodGhpcy5fd2Vla2RheXMpID8gdGhpcy5fd2Vla2RheXMgOlxuICAgICAgICAgICAgdGhpcy5fd2Vla2RheXNbJ3N0YW5kYWxvbmUnXTtcbiAgICB9XG4gICAgcmV0dXJuIGlzQXJyYXkodGhpcy5fd2Vla2RheXMpID8gdGhpcy5fd2Vla2RheXNbbS5kYXkoKV0gOlxuICAgICAgICB0aGlzLl93ZWVrZGF5c1t0aGlzLl93ZWVrZGF5cy5pc0Zvcm1hdC50ZXN0KGZvcm1hdCkgPyAnZm9ybWF0JyA6ICdzdGFuZGFsb25lJ11bbS5kYXkoKV07XG59XG5cbnZhciBkZWZhdWx0TG9jYWxlV2Vla2RheXNTaG9ydCA9ICdTdW5fTW9uX1R1ZV9XZWRfVGh1X0ZyaV9TYXQnLnNwbGl0KCdfJyk7XG5mdW5jdGlvbiBsb2NhbGVXZWVrZGF5c1Nob3J0IChtKSB7XG4gICAgcmV0dXJuIChtKSA/IHRoaXMuX3dlZWtkYXlzU2hvcnRbbS5kYXkoKV0gOiB0aGlzLl93ZWVrZGF5c1Nob3J0O1xufVxuXG52YXIgZGVmYXVsdExvY2FsZVdlZWtkYXlzTWluID0gJ1N1X01vX1R1X1dlX1RoX0ZyX1NhJy5zcGxpdCgnXycpO1xuZnVuY3Rpb24gbG9jYWxlV2Vla2RheXNNaW4gKG0pIHtcbiAgICByZXR1cm4gKG0pID8gdGhpcy5fd2Vla2RheXNNaW5bbS5kYXkoKV0gOiB0aGlzLl93ZWVrZGF5c01pbjtcbn1cblxuZnVuY3Rpb24gaGFuZGxlU3RyaWN0UGFyc2UkMSh3ZWVrZGF5TmFtZSwgZm9ybWF0LCBzdHJpY3QpIHtcbiAgICB2YXIgaSwgaWksIG1vbSwgbGxjID0gd2Vla2RheU5hbWUudG9Mb2NhbGVMb3dlckNhc2UoKTtcbiAgICBpZiAoIXRoaXMuX3dlZWtkYXlzUGFyc2UpIHtcbiAgICAgICAgdGhpcy5fd2Vla2RheXNQYXJzZSA9IFtdO1xuICAgICAgICB0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2UgPSBbXTtcbiAgICAgICAgdGhpcy5fbWluV2Vla2RheXNQYXJzZSA9IFtdO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCA3OyArK2kpIHtcbiAgICAgICAgICAgIG1vbSA9IGNyZWF0ZVVUQyhbMjAwMCwgMV0pLmRheShpKTtcbiAgICAgICAgICAgIHRoaXMuX21pbldlZWtkYXlzUGFyc2VbaV0gPSB0aGlzLndlZWtkYXlzTWluKG1vbSwgJycpLnRvTG9jYWxlTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICB0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2VbaV0gPSB0aGlzLndlZWtkYXlzU2hvcnQobW9tLCAnJykudG9Mb2NhbGVMb3dlckNhc2UoKTtcbiAgICAgICAgICAgIHRoaXMuX3dlZWtkYXlzUGFyc2VbaV0gPSB0aGlzLndlZWtkYXlzKG1vbSwgJycpLnRvTG9jYWxlTG93ZXJDYXNlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoc3RyaWN0KSB7XG4gICAgICAgIGlmIChmb3JtYXQgPT09ICdkZGRkJykge1xuICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fd2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgIH0gZWxzZSBpZiAoZm9ybWF0ID09PSAnZGRkJykge1xuICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fc2hvcnRXZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX21pbldlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsO1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGZvcm1hdCA9PT0gJ2RkZGQnKSB7XG4gICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl93ZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgaWYgKGlpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3Nob3J0V2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgIGlmIChpaSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9taW5XZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbDtcbiAgICAgICAgfSBlbHNlIGlmIChmb3JtYXQgPT09ICdkZGQnKSB7XG4gICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICBpZiAoaWkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fd2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgIGlmIChpaSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9taW5XZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX21pbldlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICBpZiAoaWkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fd2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgIGlmIChpaSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5mdW5jdGlvbiBsb2NhbGVXZWVrZGF5c1BhcnNlICh3ZWVrZGF5TmFtZSwgZm9ybWF0LCBzdHJpY3QpIHtcbiAgICB2YXIgaSwgbW9tLCByZWdleDtcblxuICAgIGlmICh0aGlzLl93ZWVrZGF5c1BhcnNlRXhhY3QpIHtcbiAgICAgICAgcmV0dXJuIGhhbmRsZVN0cmljdFBhcnNlJDEuY2FsbCh0aGlzLCB3ZWVrZGF5TmFtZSwgZm9ybWF0LCBzdHJpY3QpO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5fd2Vla2RheXNQYXJzZSkge1xuICAgICAgICB0aGlzLl93ZWVrZGF5c1BhcnNlID0gW107XG4gICAgICAgIHRoaXMuX21pbldlZWtkYXlzUGFyc2UgPSBbXTtcbiAgICAgICAgdGhpcy5fc2hvcnRXZWVrZGF5c1BhcnNlID0gW107XG4gICAgICAgIHRoaXMuX2Z1bGxXZWVrZGF5c1BhcnNlID0gW107XG4gICAgfVxuXG4gICAgZm9yIChpID0gMDsgaSA8IDc7IGkrKykge1xuICAgICAgICAvLyBtYWtlIHRoZSByZWdleCBpZiB3ZSBkb24ndCBoYXZlIGl0IGFscmVhZHlcblxuICAgICAgICBtb20gPSBjcmVhdGVVVEMoWzIwMDAsIDFdKS5kYXkoaSk7XG4gICAgICAgIGlmIChzdHJpY3QgJiYgIXRoaXMuX2Z1bGxXZWVrZGF5c1BhcnNlW2ldKSB7XG4gICAgICAgICAgICB0aGlzLl9mdWxsV2Vla2RheXNQYXJzZVtpXSA9IG5ldyBSZWdFeHAoJ14nICsgdGhpcy53ZWVrZGF5cyhtb20sICcnKS5yZXBsYWNlKCcuJywgJ1xcLj8nKSArICckJywgJ2knKTtcbiAgICAgICAgICAgIHRoaXMuX3Nob3J0V2Vla2RheXNQYXJzZVtpXSA9IG5ldyBSZWdFeHAoJ14nICsgdGhpcy53ZWVrZGF5c1Nob3J0KG1vbSwgJycpLnJlcGxhY2UoJy4nLCAnXFwuPycpICsgJyQnLCAnaScpO1xuICAgICAgICAgICAgdGhpcy5fbWluV2Vla2RheXNQYXJzZVtpXSA9IG5ldyBSZWdFeHAoJ14nICsgdGhpcy53ZWVrZGF5c01pbihtb20sICcnKS5yZXBsYWNlKCcuJywgJ1xcLj8nKSArICckJywgJ2knKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuX3dlZWtkYXlzUGFyc2VbaV0pIHtcbiAgICAgICAgICAgIHJlZ2V4ID0gJ14nICsgdGhpcy53ZWVrZGF5cyhtb20sICcnKSArICd8XicgKyB0aGlzLndlZWtkYXlzU2hvcnQobW9tLCAnJykgKyAnfF4nICsgdGhpcy53ZWVrZGF5c01pbihtb20sICcnKTtcbiAgICAgICAgICAgIHRoaXMuX3dlZWtkYXlzUGFyc2VbaV0gPSBuZXcgUmVnRXhwKHJlZ2V4LnJlcGxhY2UoJy4nLCAnJyksICdpJyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gdGVzdCB0aGUgcmVnZXhcbiAgICAgICAgaWYgKHN0cmljdCAmJiBmb3JtYXQgPT09ICdkZGRkJyAmJiB0aGlzLl9mdWxsV2Vla2RheXNQYXJzZVtpXS50ZXN0KHdlZWtkYXlOYW1lKSkge1xuICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgIH0gZWxzZSBpZiAoc3RyaWN0ICYmIGZvcm1hdCA9PT0gJ2RkZCcgJiYgdGhpcy5fc2hvcnRXZWVrZGF5c1BhcnNlW2ldLnRlc3Qod2Vla2RheU5hbWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgfSBlbHNlIGlmIChzdHJpY3QgJiYgZm9ybWF0ID09PSAnZGQnICYmIHRoaXMuX21pbldlZWtkYXlzUGFyc2VbaV0udGVzdCh3ZWVrZGF5TmFtZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICB9IGVsc2UgaWYgKCFzdHJpY3QgJiYgdGhpcy5fd2Vla2RheXNQYXJzZVtpXS50ZXN0KHdlZWtkYXlOYW1lKSkge1xuICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8vIE1PTUVOVFNcblxuZnVuY3Rpb24gZ2V0U2V0RGF5T2ZXZWVrIChpbnB1dCkge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgcmV0dXJuIGlucHV0ICE9IG51bGwgPyB0aGlzIDogTmFOO1xuICAgIH1cbiAgICB2YXIgZGF5ID0gdGhpcy5faXNVVEMgPyB0aGlzLl9kLmdldFVUQ0RheSgpIDogdGhpcy5fZC5nZXREYXkoKTtcbiAgICBpZiAoaW5wdXQgIT0gbnVsbCkge1xuICAgICAgICBpbnB1dCA9IHBhcnNlV2Vla2RheShpbnB1dCwgdGhpcy5sb2NhbGVEYXRhKCkpO1xuICAgICAgICByZXR1cm4gdGhpcy5hZGQoaW5wdXQgLSBkYXksICdkJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGRheTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGdldFNldExvY2FsZURheU9mV2VlayAoaW5wdXQpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgIHJldHVybiBpbnB1dCAhPSBudWxsID8gdGhpcyA6IE5hTjtcbiAgICB9XG4gICAgdmFyIHdlZWtkYXkgPSAodGhpcy5kYXkoKSArIDcgLSB0aGlzLmxvY2FsZURhdGEoKS5fd2Vlay5kb3cpICUgNztcbiAgICByZXR1cm4gaW5wdXQgPT0gbnVsbCA/IHdlZWtkYXkgOiB0aGlzLmFkZChpbnB1dCAtIHdlZWtkYXksICdkJyk7XG59XG5cbmZ1bmN0aW9uIGdldFNldElTT0RheU9mV2VlayAoaW5wdXQpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgIHJldHVybiBpbnB1dCAhPSBudWxsID8gdGhpcyA6IE5hTjtcbiAgICB9XG5cbiAgICAvLyBiZWhhdmVzIHRoZSBzYW1lIGFzIG1vbWVudCNkYXkgZXhjZXB0XG4gICAgLy8gYXMgYSBnZXR0ZXIsIHJldHVybnMgNyBpbnN0ZWFkIG9mIDAgKDEtNyByYW5nZSBpbnN0ZWFkIG9mIDAtNilcbiAgICAvLyBhcyBhIHNldHRlciwgc3VuZGF5IHNob3VsZCBiZWxvbmcgdG8gdGhlIHByZXZpb3VzIHdlZWsuXG5cbiAgICBpZiAoaW5wdXQgIT0gbnVsbCkge1xuICAgICAgICB2YXIgd2Vla2RheSA9IHBhcnNlSXNvV2Vla2RheShpbnB1dCwgdGhpcy5sb2NhbGVEYXRhKCkpO1xuICAgICAgICByZXR1cm4gdGhpcy5kYXkodGhpcy5kYXkoKSAlIDcgPyB3ZWVrZGF5IDogd2Vla2RheSAtIDcpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRheSgpIHx8IDc7XG4gICAgfVxufVxuXG52YXIgZGVmYXVsdFdlZWtkYXlzUmVnZXggPSBtYXRjaFdvcmQ7XG5mdW5jdGlvbiB3ZWVrZGF5c1JlZ2V4IChpc1N0cmljdCkge1xuICAgIGlmICh0aGlzLl93ZWVrZGF5c1BhcnNlRXhhY3QpIHtcbiAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfd2Vla2RheXNSZWdleCcpKSB7XG4gICAgICAgICAgICBjb21wdXRlV2Vla2RheXNQYXJzZS5jYWxsKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1N0cmljdCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWtkYXlzU3RyaWN0UmVnZXg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fd2Vla2RheXNSZWdleDtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX3dlZWtkYXlzUmVnZXgnKSkge1xuICAgICAgICAgICAgdGhpcy5fd2Vla2RheXNSZWdleCA9IGRlZmF1bHRXZWVrZGF5c1JlZ2V4O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c1N0cmljdFJlZ2V4ICYmIGlzU3RyaWN0ID9cbiAgICAgICAgICAgIHRoaXMuX3dlZWtkYXlzU3RyaWN0UmVnZXggOiB0aGlzLl93ZWVrZGF5c1JlZ2V4O1xuICAgIH1cbn1cblxudmFyIGRlZmF1bHRXZWVrZGF5c1Nob3J0UmVnZXggPSBtYXRjaFdvcmQ7XG5mdW5jdGlvbiB3ZWVrZGF5c1Nob3J0UmVnZXggKGlzU3RyaWN0KSB7XG4gICAgaWYgKHRoaXMuX3dlZWtkYXlzUGFyc2VFeGFjdCkge1xuICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ193ZWVrZGF5c1JlZ2V4JykpIHtcbiAgICAgICAgICAgIGNvbXB1dGVXZWVrZGF5c1BhcnNlLmNhbGwodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzU3RyaWN0KSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fd2Vla2RheXNTaG9ydFN0cmljdFJlZ2V4O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWtkYXlzU2hvcnRSZWdleDtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX3dlZWtkYXlzU2hvcnRSZWdleCcpKSB7XG4gICAgICAgICAgICB0aGlzLl93ZWVrZGF5c1Nob3J0UmVnZXggPSBkZWZhdWx0V2Vla2RheXNTaG9ydFJlZ2V4O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c1Nob3J0U3RyaWN0UmVnZXggJiYgaXNTdHJpY3QgP1xuICAgICAgICAgICAgdGhpcy5fd2Vla2RheXNTaG9ydFN0cmljdFJlZ2V4IDogdGhpcy5fd2Vla2RheXNTaG9ydFJlZ2V4O1xuICAgIH1cbn1cblxudmFyIGRlZmF1bHRXZWVrZGF5c01pblJlZ2V4ID0gbWF0Y2hXb3JkO1xuZnVuY3Rpb24gd2Vla2RheXNNaW5SZWdleCAoaXNTdHJpY3QpIHtcbiAgICBpZiAodGhpcy5fd2Vla2RheXNQYXJzZUV4YWN0KSB7XG4gICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX3dlZWtkYXlzUmVnZXgnKSkge1xuICAgICAgICAgICAgY29tcHV0ZVdlZWtkYXlzUGFyc2UuY2FsbCh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNTdHJpY3QpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c01pblN0cmljdFJlZ2V4O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWtkYXlzTWluUmVnZXg7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ193ZWVrZGF5c01pblJlZ2V4JykpIHtcbiAgICAgICAgICAgIHRoaXMuX3dlZWtkYXlzTWluUmVnZXggPSBkZWZhdWx0V2Vla2RheXNNaW5SZWdleDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fd2Vla2RheXNNaW5TdHJpY3RSZWdleCAmJiBpc1N0cmljdCA/XG4gICAgICAgICAgICB0aGlzLl93ZWVrZGF5c01pblN0cmljdFJlZ2V4IDogdGhpcy5fd2Vla2RheXNNaW5SZWdleDtcbiAgICB9XG59XG5cblxuZnVuY3Rpb24gY29tcHV0ZVdlZWtkYXlzUGFyc2UgKCkge1xuICAgIGZ1bmN0aW9uIGNtcExlblJldihhLCBiKSB7XG4gICAgICAgIHJldHVybiBiLmxlbmd0aCAtIGEubGVuZ3RoO1xuICAgIH1cblxuICAgIHZhciBtaW5QaWVjZXMgPSBbXSwgc2hvcnRQaWVjZXMgPSBbXSwgbG9uZ1BpZWNlcyA9IFtdLCBtaXhlZFBpZWNlcyA9IFtdLFxuICAgICAgICBpLCBtb20sIG1pbnAsIHNob3J0cCwgbG9uZ3A7XG4gICAgZm9yIChpID0gMDsgaSA8IDc7IGkrKykge1xuICAgICAgICAvLyBtYWtlIHRoZSByZWdleCBpZiB3ZSBkb24ndCBoYXZlIGl0IGFscmVhZHlcbiAgICAgICAgbW9tID0gY3JlYXRlVVRDKFsyMDAwLCAxXSkuZGF5KGkpO1xuICAgICAgICBtaW5wID0gdGhpcy53ZWVrZGF5c01pbihtb20sICcnKTtcbiAgICAgICAgc2hvcnRwID0gdGhpcy53ZWVrZGF5c1Nob3J0KG1vbSwgJycpO1xuICAgICAgICBsb25ncCA9IHRoaXMud2Vla2RheXMobW9tLCAnJyk7XG4gICAgICAgIG1pblBpZWNlcy5wdXNoKG1pbnApO1xuICAgICAgICBzaG9ydFBpZWNlcy5wdXNoKHNob3J0cCk7XG4gICAgICAgIGxvbmdQaWVjZXMucHVzaChsb25ncCk7XG4gICAgICAgIG1peGVkUGllY2VzLnB1c2gobWlucCk7XG4gICAgICAgIG1peGVkUGllY2VzLnB1c2goc2hvcnRwKTtcbiAgICAgICAgbWl4ZWRQaWVjZXMucHVzaChsb25ncCk7XG4gICAgfVxuICAgIC8vIFNvcnRpbmcgbWFrZXMgc3VyZSBpZiBvbmUgd2Vla2RheSAob3IgYWJicikgaXMgYSBwcmVmaXggb2YgYW5vdGhlciBpdFxuICAgIC8vIHdpbGwgbWF0Y2ggdGhlIGxvbmdlciBwaWVjZS5cbiAgICBtaW5QaWVjZXMuc29ydChjbXBMZW5SZXYpO1xuICAgIHNob3J0UGllY2VzLnNvcnQoY21wTGVuUmV2KTtcbiAgICBsb25nUGllY2VzLnNvcnQoY21wTGVuUmV2KTtcbiAgICBtaXhlZFBpZWNlcy5zb3J0KGNtcExlblJldik7XG4gICAgZm9yIChpID0gMDsgaSA8IDc7IGkrKykge1xuICAgICAgICBzaG9ydFBpZWNlc1tpXSA9IHJlZ2V4RXNjYXBlKHNob3J0UGllY2VzW2ldKTtcbiAgICAgICAgbG9uZ1BpZWNlc1tpXSA9IHJlZ2V4RXNjYXBlKGxvbmdQaWVjZXNbaV0pO1xuICAgICAgICBtaXhlZFBpZWNlc1tpXSA9IHJlZ2V4RXNjYXBlKG1peGVkUGllY2VzW2ldKTtcbiAgICB9XG5cbiAgICB0aGlzLl93ZWVrZGF5c1JlZ2V4ID0gbmV3IFJlZ0V4cCgnXignICsgbWl4ZWRQaWVjZXMuam9pbignfCcpICsgJyknLCAnaScpO1xuICAgIHRoaXMuX3dlZWtkYXlzU2hvcnRSZWdleCA9IHRoaXMuX3dlZWtkYXlzUmVnZXg7XG4gICAgdGhpcy5fd2Vla2RheXNNaW5SZWdleCA9IHRoaXMuX3dlZWtkYXlzUmVnZXg7XG5cbiAgICB0aGlzLl93ZWVrZGF5c1N0cmljdFJlZ2V4ID0gbmV3IFJlZ0V4cCgnXignICsgbG9uZ1BpZWNlcy5qb2luKCd8JykgKyAnKScsICdpJyk7XG4gICAgdGhpcy5fd2Vla2RheXNTaG9ydFN0cmljdFJlZ2V4ID0gbmV3IFJlZ0V4cCgnXignICsgc2hvcnRQaWVjZXMuam9pbignfCcpICsgJyknLCAnaScpO1xuICAgIHRoaXMuX3dlZWtkYXlzTWluU3RyaWN0UmVnZXggPSBuZXcgUmVnRXhwKCdeKCcgKyBtaW5QaWVjZXMuam9pbignfCcpICsgJyknLCAnaScpO1xufVxuXG4vLyBGT1JNQVRUSU5HXG5cbmZ1bmN0aW9uIGhGb3JtYXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuaG91cnMoKSAlIDEyIHx8IDEyO1xufVxuXG5mdW5jdGlvbiBrRm9ybWF0KCkge1xuICAgIHJldHVybiB0aGlzLmhvdXJzKCkgfHwgMjQ7XG59XG5cbmFkZEZvcm1hdFRva2VuKCdIJywgWydISCcsIDJdLCAwLCAnaG91cicpO1xuYWRkRm9ybWF0VG9rZW4oJ2gnLCBbJ2hoJywgMl0sIDAsIGhGb3JtYXQpO1xuYWRkRm9ybWF0VG9rZW4oJ2snLCBbJ2trJywgMl0sIDAsIGtGb3JtYXQpO1xuXG5hZGRGb3JtYXRUb2tlbignaG1tJywgMCwgMCwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAnJyArIGhGb3JtYXQuYXBwbHkodGhpcykgKyB6ZXJvRmlsbCh0aGlzLm1pbnV0ZXMoKSwgMik7XG59KTtcblxuYWRkRm9ybWF0VG9rZW4oJ2htbXNzJywgMCwgMCwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAnJyArIGhGb3JtYXQuYXBwbHkodGhpcykgKyB6ZXJvRmlsbCh0aGlzLm1pbnV0ZXMoKSwgMikgK1xuICAgICAgICB6ZXJvRmlsbCh0aGlzLnNlY29uZHMoKSwgMik7XG59KTtcblxuYWRkRm9ybWF0VG9rZW4oJ0htbScsIDAsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gJycgKyB0aGlzLmhvdXJzKCkgKyB6ZXJvRmlsbCh0aGlzLm1pbnV0ZXMoKSwgMik7XG59KTtcblxuYWRkRm9ybWF0VG9rZW4oJ0htbXNzJywgMCwgMCwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAnJyArIHRoaXMuaG91cnMoKSArIHplcm9GaWxsKHRoaXMubWludXRlcygpLCAyKSArXG4gICAgICAgIHplcm9GaWxsKHRoaXMuc2Vjb25kcygpLCAyKTtcbn0pO1xuXG5mdW5jdGlvbiBtZXJpZGllbSAodG9rZW4sIGxvd2VyY2FzZSkge1xuICAgIGFkZEZvcm1hdFRva2VuKHRva2VuLCAwLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS5tZXJpZGllbSh0aGlzLmhvdXJzKCksIHRoaXMubWludXRlcygpLCBsb3dlcmNhc2UpO1xuICAgIH0pO1xufVxuXG5tZXJpZGllbSgnYScsIHRydWUpO1xubWVyaWRpZW0oJ0EnLCBmYWxzZSk7XG5cbi8vIEFMSUFTRVNcblxuYWRkVW5pdEFsaWFzKCdob3VyJywgJ2gnKTtcblxuLy8gUFJJT1JJVFlcbmFkZFVuaXRQcmlvcml0eSgnaG91cicsIDEzKTtcblxuLy8gUEFSU0lOR1xuXG5mdW5jdGlvbiBtYXRjaE1lcmlkaWVtIChpc1N0cmljdCwgbG9jYWxlKSB7XG4gICAgcmV0dXJuIGxvY2FsZS5fbWVyaWRpZW1QYXJzZTtcbn1cblxuYWRkUmVnZXhUb2tlbignYScsICBtYXRjaE1lcmlkaWVtKTtcbmFkZFJlZ2V4VG9rZW4oJ0EnLCAgbWF0Y2hNZXJpZGllbSk7XG5hZGRSZWdleFRva2VuKCdIJywgIG1hdGNoMXRvMik7XG5hZGRSZWdleFRva2VuKCdoJywgIG1hdGNoMXRvMik7XG5hZGRSZWdleFRva2VuKCdrJywgIG1hdGNoMXRvMik7XG5hZGRSZWdleFRva2VuKCdISCcsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbmFkZFJlZ2V4VG9rZW4oJ2hoJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuYWRkUmVnZXhUb2tlbigna2snLCBtYXRjaDF0bzIsIG1hdGNoMik7XG5cbmFkZFJlZ2V4VG9rZW4oJ2htbScsIG1hdGNoM3RvNCk7XG5hZGRSZWdleFRva2VuKCdobW1zcycsIG1hdGNoNXRvNik7XG5hZGRSZWdleFRva2VuKCdIbW0nLCBtYXRjaDN0bzQpO1xuYWRkUmVnZXhUb2tlbignSG1tc3MnLCBtYXRjaDV0bzYpO1xuXG5hZGRQYXJzZVRva2VuKFsnSCcsICdISCddLCBIT1VSKTtcbmFkZFBhcnNlVG9rZW4oWydrJywgJ2trJ10sIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgIHZhciBrSW5wdXQgPSB0b0ludChpbnB1dCk7XG4gICAgYXJyYXlbSE9VUl0gPSBrSW5wdXQgPT09IDI0ID8gMCA6IGtJbnB1dDtcbn0pO1xuYWRkUGFyc2VUb2tlbihbJ2EnLCAnQSddLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICBjb25maWcuX2lzUG0gPSBjb25maWcuX2xvY2FsZS5pc1BNKGlucHV0KTtcbiAgICBjb25maWcuX21lcmlkaWVtID0gaW5wdXQ7XG59KTtcbmFkZFBhcnNlVG9rZW4oWydoJywgJ2hoJ10sIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgIGFycmF5W0hPVVJdID0gdG9JbnQoaW5wdXQpO1xuICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmJpZ0hvdXIgPSB0cnVlO1xufSk7XG5hZGRQYXJzZVRva2VuKCdobW0nLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICB2YXIgcG9zID0gaW5wdXQubGVuZ3RoIC0gMjtcbiAgICBhcnJheVtIT1VSXSA9IHRvSW50KGlucHV0LnN1YnN0cigwLCBwb3MpKTtcbiAgICBhcnJheVtNSU5VVEVdID0gdG9JbnQoaW5wdXQuc3Vic3RyKHBvcykpO1xuICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmJpZ0hvdXIgPSB0cnVlO1xufSk7XG5hZGRQYXJzZVRva2VuKCdobW1zcycsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgIHZhciBwb3MxID0gaW5wdXQubGVuZ3RoIC0gNDtcbiAgICB2YXIgcG9zMiA9IGlucHV0Lmxlbmd0aCAtIDI7XG4gICAgYXJyYXlbSE9VUl0gPSB0b0ludChpbnB1dC5zdWJzdHIoMCwgcG9zMSkpO1xuICAgIGFycmF5W01JTlVURV0gPSB0b0ludChpbnB1dC5zdWJzdHIocG9zMSwgMikpO1xuICAgIGFycmF5W1NFQ09ORF0gPSB0b0ludChpbnB1dC5zdWJzdHIocG9zMikpO1xuICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmJpZ0hvdXIgPSB0cnVlO1xufSk7XG5hZGRQYXJzZVRva2VuKCdIbW0nLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICB2YXIgcG9zID0gaW5wdXQubGVuZ3RoIC0gMjtcbiAgICBhcnJheVtIT1VSXSA9IHRvSW50KGlucHV0LnN1YnN0cigwLCBwb3MpKTtcbiAgICBhcnJheVtNSU5VVEVdID0gdG9JbnQoaW5wdXQuc3Vic3RyKHBvcykpO1xufSk7XG5hZGRQYXJzZVRva2VuKCdIbW1zcycsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgIHZhciBwb3MxID0gaW5wdXQubGVuZ3RoIC0gNDtcbiAgICB2YXIgcG9zMiA9IGlucHV0Lmxlbmd0aCAtIDI7XG4gICAgYXJyYXlbSE9VUl0gPSB0b0ludChpbnB1dC5zdWJzdHIoMCwgcG9zMSkpO1xuICAgIGFycmF5W01JTlVURV0gPSB0b0ludChpbnB1dC5zdWJzdHIocG9zMSwgMikpO1xuICAgIGFycmF5W1NFQ09ORF0gPSB0b0ludChpbnB1dC5zdWJzdHIocG9zMikpO1xufSk7XG5cbi8vIExPQ0FMRVNcblxuZnVuY3Rpb24gbG9jYWxlSXNQTSAoaW5wdXQpIHtcbiAgICAvLyBJRTggUXVpcmtzIE1vZGUgJiBJRTcgU3RhbmRhcmRzIE1vZGUgZG8gbm90IGFsbG93IGFjY2Vzc2luZyBzdHJpbmdzIGxpa2UgYXJyYXlzXG4gICAgLy8gVXNpbmcgY2hhckF0IHNob3VsZCBiZSBtb3JlIGNvbXBhdGlibGUuXG4gICAgcmV0dXJuICgoaW5wdXQgKyAnJykudG9Mb3dlckNhc2UoKS5jaGFyQXQoMCkgPT09ICdwJyk7XG59XG5cbnZhciBkZWZhdWx0TG9jYWxlTWVyaWRpZW1QYXJzZSA9IC9bYXBdXFwuP20/XFwuPy9pO1xuZnVuY3Rpb24gbG9jYWxlTWVyaWRpZW0gKGhvdXJzLCBtaW51dGVzLCBpc0xvd2VyKSB7XG4gICAgaWYgKGhvdXJzID4gMTEpIHtcbiAgICAgICAgcmV0dXJuIGlzTG93ZXIgPyAncG0nIDogJ1BNJztcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gaXNMb3dlciA/ICdhbScgOiAnQU0nO1xuICAgIH1cbn1cblxuXG4vLyBNT01FTlRTXG5cbi8vIFNldHRpbmcgdGhlIGhvdXIgc2hvdWxkIGtlZXAgdGhlIHRpbWUsIGJlY2F1c2UgdGhlIHVzZXIgZXhwbGljaXRseVxuLy8gc3BlY2lmaWVkIHdoaWNoIGhvdXIgaGUgd2FudHMuIFNvIHRyeWluZyB0byBtYWludGFpbiB0aGUgc2FtZSBob3VyIChpblxuLy8gYSBuZXcgdGltZXpvbmUpIG1ha2VzIHNlbnNlLiBBZGRpbmcvc3VidHJhY3RpbmcgaG91cnMgZG9lcyBub3QgZm9sbG93XG4vLyB0aGlzIHJ1bGUuXG52YXIgZ2V0U2V0SG91ciA9IG1ha2VHZXRTZXQoJ0hvdXJzJywgdHJ1ZSk7XG5cbi8vIG1vbnRoc1xuLy8gd2Vla1xuLy8gd2Vla2RheXNcbi8vIG1lcmlkaWVtXG52YXIgYmFzZUNvbmZpZyA9IHtcbiAgICBjYWxlbmRhcjogZGVmYXVsdENhbGVuZGFyLFxuICAgIGxvbmdEYXRlRm9ybWF0OiBkZWZhdWx0TG9uZ0RhdGVGb3JtYXQsXG4gICAgaW52YWxpZERhdGU6IGRlZmF1bHRJbnZhbGlkRGF0ZSxcbiAgICBvcmRpbmFsOiBkZWZhdWx0T3JkaW5hbCxcbiAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiBkZWZhdWx0RGF5T2ZNb250aE9yZGluYWxQYXJzZSxcbiAgICByZWxhdGl2ZVRpbWU6IGRlZmF1bHRSZWxhdGl2ZVRpbWUsXG5cbiAgICBtb250aHM6IGRlZmF1bHRMb2NhbGVNb250aHMsXG4gICAgbW9udGhzU2hvcnQ6IGRlZmF1bHRMb2NhbGVNb250aHNTaG9ydCxcblxuICAgIHdlZWs6IGRlZmF1bHRMb2NhbGVXZWVrLFxuXG4gICAgd2Vla2RheXM6IGRlZmF1bHRMb2NhbGVXZWVrZGF5cyxcbiAgICB3ZWVrZGF5c01pbjogZGVmYXVsdExvY2FsZVdlZWtkYXlzTWluLFxuICAgIHdlZWtkYXlzU2hvcnQ6IGRlZmF1bHRMb2NhbGVXZWVrZGF5c1Nob3J0LFxuXG4gICAgbWVyaWRpZW1QYXJzZTogZGVmYXVsdExvY2FsZU1lcmlkaWVtUGFyc2Vcbn07XG5cbi8vIGludGVybmFsIHN0b3JhZ2UgZm9yIGxvY2FsZSBjb25maWcgZmlsZXNcbnZhciBsb2NhbGVzID0ge307XG52YXIgbG9jYWxlRmFtaWxpZXMgPSB7fTtcbnZhciBnbG9iYWxMb2NhbGU7XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZUxvY2FsZShrZXkpIHtcbiAgICByZXR1cm4ga2V5ID8ga2V5LnRvTG93ZXJDYXNlKCkucmVwbGFjZSgnXycsICctJykgOiBrZXk7XG59XG5cbi8vIHBpY2sgdGhlIGxvY2FsZSBmcm9tIHRoZSBhcnJheVxuLy8gdHJ5IFsnZW4tYXUnLCAnZW4tZ2InXSBhcyAnZW4tYXUnLCAnZW4tZ2InLCAnZW4nLCBhcyBpbiBtb3ZlIHRocm91Z2ggdGhlIGxpc3QgdHJ5aW5nIGVhY2hcbi8vIHN1YnN0cmluZyBmcm9tIG1vc3Qgc3BlY2lmaWMgdG8gbGVhc3QsIGJ1dCBtb3ZlIHRvIHRoZSBuZXh0IGFycmF5IGl0ZW0gaWYgaXQncyBhIG1vcmUgc3BlY2lmaWMgdmFyaWFudCB0aGFuIHRoZSBjdXJyZW50IHJvb3RcbmZ1bmN0aW9uIGNob29zZUxvY2FsZShuYW1lcykge1xuICAgIHZhciBpID0gMCwgaiwgbmV4dCwgbG9jYWxlLCBzcGxpdDtcblxuICAgIHdoaWxlIChpIDwgbmFtZXMubGVuZ3RoKSB7XG4gICAgICAgIHNwbGl0ID0gbm9ybWFsaXplTG9jYWxlKG5hbWVzW2ldKS5zcGxpdCgnLScpO1xuICAgICAgICBqID0gc3BsaXQubGVuZ3RoO1xuICAgICAgICBuZXh0ID0gbm9ybWFsaXplTG9jYWxlKG5hbWVzW2kgKyAxXSk7XG4gICAgICAgIG5leHQgPSBuZXh0ID8gbmV4dC5zcGxpdCgnLScpIDogbnVsbDtcbiAgICAgICAgd2hpbGUgKGogPiAwKSB7XG4gICAgICAgICAgICBsb2NhbGUgPSBsb2FkTG9jYWxlKHNwbGl0LnNsaWNlKDAsIGopLmpvaW4oJy0nKSk7XG4gICAgICAgICAgICBpZiAobG9jYWxlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxvY2FsZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChuZXh0ICYmIG5leHQubGVuZ3RoID49IGogJiYgY29tcGFyZUFycmF5cyhzcGxpdCwgbmV4dCwgdHJ1ZSkgPj0gaiAtIDEpIHtcbiAgICAgICAgICAgICAgICAvL3RoZSBuZXh0IGFycmF5IGl0ZW0gaXMgYmV0dGVyIHRoYW4gYSBzaGFsbG93ZXIgc3Vic3RyaW5nIG9mIHRoaXMgb25lXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBqLS07XG4gICAgICAgIH1cbiAgICAgICAgaSsrO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cblxuZnVuY3Rpb24gbG9hZExvY2FsZShuYW1lKSB7XG4gICAgdmFyIG9sZExvY2FsZSA9IG51bGw7XG4gICAgLy8gVE9ETzogRmluZCBhIGJldHRlciB3YXkgdG8gcmVnaXN0ZXIgYW5kIGxvYWQgYWxsIHRoZSBsb2NhbGVzIGluIE5vZGVcbiAgICBpZiAoIWxvY2FsZXNbbmFtZV0gJiYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnKSAmJlxuICAgICAgICAgICAgbW9kdWxlICYmIG1vZHVsZS5leHBvcnRzKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBvbGRMb2NhbGUgPSBnbG9iYWxMb2NhbGUuX2FiYnI7XG4gICAgICAgICAgICB2YXIgYWxpYXNlZFJlcXVpcmUgPSByZXF1aXJlO1xuICAgICAgICAgICAgYWxpYXNlZFJlcXVpcmUoJy4vbG9jYWxlLycgKyBuYW1lKTtcbiAgICAgICAgICAgIGdldFNldEdsb2JhbExvY2FsZShvbGRMb2NhbGUpO1xuICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgIH1cbiAgICByZXR1cm4gbG9jYWxlc1tuYW1lXTtcbn1cblxuLy8gVGhpcyBmdW5jdGlvbiB3aWxsIGxvYWQgbG9jYWxlIGFuZCB0aGVuIHNldCB0aGUgZ2xvYmFsIGxvY2FsZS4gIElmXG4vLyBubyBhcmd1bWVudHMgYXJlIHBhc3NlZCBpbiwgaXQgd2lsbCBzaW1wbHkgcmV0dXJuIHRoZSBjdXJyZW50IGdsb2JhbFxuLy8gbG9jYWxlIGtleS5cbmZ1bmN0aW9uIGdldFNldEdsb2JhbExvY2FsZSAoa2V5LCB2YWx1ZXMpIHtcbiAgICB2YXIgZGF0YTtcbiAgICBpZiAoa2V5KSB7XG4gICAgICAgIGlmIChpc1VuZGVmaW5lZCh2YWx1ZXMpKSB7XG4gICAgICAgICAgICBkYXRhID0gZ2V0TG9jYWxlKGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBkYXRhID0gZGVmaW5lTG9jYWxlKGtleSwgdmFsdWVzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgICAgICAvLyBtb21lbnQuZHVyYXRpb24uX2xvY2FsZSA9IG1vbWVudC5fbG9jYWxlID0gZGF0YTtcbiAgICAgICAgICAgIGdsb2JhbExvY2FsZSA9IGRhdGE7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZ2xvYmFsTG9jYWxlLl9hYmJyO1xufVxuXG5mdW5jdGlvbiBkZWZpbmVMb2NhbGUgKG5hbWUsIGNvbmZpZykge1xuICAgIGlmIChjb25maWcgIT09IG51bGwpIHtcbiAgICAgICAgdmFyIHBhcmVudENvbmZpZyA9IGJhc2VDb25maWc7XG4gICAgICAgIGNvbmZpZy5hYmJyID0gbmFtZTtcbiAgICAgICAgaWYgKGxvY2FsZXNbbmFtZV0gIT0gbnVsbCkge1xuICAgICAgICAgICAgZGVwcmVjYXRlU2ltcGxlKCdkZWZpbmVMb2NhbGVPdmVycmlkZScsXG4gICAgICAgICAgICAgICAgICAgICd1c2UgbW9tZW50LnVwZGF0ZUxvY2FsZShsb2NhbGVOYW1lLCBjb25maWcpIHRvIGNoYW5nZSAnICtcbiAgICAgICAgICAgICAgICAgICAgJ2FuIGV4aXN0aW5nIGxvY2FsZS4gbW9tZW50LmRlZmluZUxvY2FsZShsb2NhbGVOYW1lLCAnICtcbiAgICAgICAgICAgICAgICAgICAgJ2NvbmZpZykgc2hvdWxkIG9ubHkgYmUgdXNlZCBmb3IgY3JlYXRpbmcgYSBuZXcgbG9jYWxlICcgK1xuICAgICAgICAgICAgICAgICAgICAnU2VlIGh0dHA6Ly9tb21lbnRqcy5jb20vZ3VpZGVzLyMvd2FybmluZ3MvZGVmaW5lLWxvY2FsZS8gZm9yIG1vcmUgaW5mby4nKTtcbiAgICAgICAgICAgIHBhcmVudENvbmZpZyA9IGxvY2FsZXNbbmFtZV0uX2NvbmZpZztcbiAgICAgICAgfSBlbHNlIGlmIChjb25maWcucGFyZW50TG9jYWxlICE9IG51bGwpIHtcbiAgICAgICAgICAgIGlmIChsb2NhbGVzW2NvbmZpZy5wYXJlbnRMb2NhbGVdICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBwYXJlbnRDb25maWcgPSBsb2NhbGVzW2NvbmZpZy5wYXJlbnRMb2NhbGVdLl9jb25maWc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICghbG9jYWxlRmFtaWxpZXNbY29uZmlnLnBhcmVudExvY2FsZV0pIHtcbiAgICAgICAgICAgICAgICAgICAgbG9jYWxlRmFtaWxpZXNbY29uZmlnLnBhcmVudExvY2FsZV0gPSBbXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbG9jYWxlRmFtaWxpZXNbY29uZmlnLnBhcmVudExvY2FsZV0ucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZzogY29uZmlnXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbG9jYWxlc1tuYW1lXSA9IG5ldyBMb2NhbGUobWVyZ2VDb25maWdzKHBhcmVudENvbmZpZywgY29uZmlnKSk7XG5cbiAgICAgICAgaWYgKGxvY2FsZUZhbWlsaWVzW25hbWVdKSB7XG4gICAgICAgICAgICBsb2NhbGVGYW1pbGllc1tuYW1lXS5mb3JFYWNoKGZ1bmN0aW9uICh4KSB7XG4gICAgICAgICAgICAgICAgZGVmaW5lTG9jYWxlKHgubmFtZSwgeC5jb25maWcpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBiYWNrd2FyZHMgY29tcGF0IGZvciBub3c6IGFsc28gc2V0IHRoZSBsb2NhbGVcbiAgICAgICAgLy8gbWFrZSBzdXJlIHdlIHNldCB0aGUgbG9jYWxlIEFGVEVSIGFsbCBjaGlsZCBsb2NhbGVzIGhhdmUgYmVlblxuICAgICAgICAvLyBjcmVhdGVkLCBzbyB3ZSB3b24ndCBlbmQgdXAgd2l0aCB0aGUgY2hpbGQgbG9jYWxlIHNldC5cbiAgICAgICAgZ2V0U2V0R2xvYmFsTG9jYWxlKG5hbWUpO1xuXG5cbiAgICAgICAgcmV0dXJuIGxvY2FsZXNbbmFtZV07XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gdXNlZnVsIGZvciB0ZXN0aW5nXG4gICAgICAgIGRlbGV0ZSBsb2NhbGVzW25hbWVdO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUxvY2FsZShuYW1lLCBjb25maWcpIHtcbiAgICBpZiAoY29uZmlnICE9IG51bGwpIHtcbiAgICAgICAgdmFyIGxvY2FsZSwgdG1wTG9jYWxlLCBwYXJlbnRDb25maWcgPSBiYXNlQ29uZmlnO1xuICAgICAgICAvLyBNRVJHRVxuICAgICAgICB0bXBMb2NhbGUgPSBsb2FkTG9jYWxlKG5hbWUpO1xuICAgICAgICBpZiAodG1wTG9jYWxlICE9IG51bGwpIHtcbiAgICAgICAgICAgIHBhcmVudENvbmZpZyA9IHRtcExvY2FsZS5fY29uZmlnO1xuICAgICAgICB9XG4gICAgICAgIGNvbmZpZyA9IG1lcmdlQ29uZmlncyhwYXJlbnRDb25maWcsIGNvbmZpZyk7XG4gICAgICAgIGxvY2FsZSA9IG5ldyBMb2NhbGUoY29uZmlnKTtcbiAgICAgICAgbG9jYWxlLnBhcmVudExvY2FsZSA9IGxvY2FsZXNbbmFtZV07XG4gICAgICAgIGxvY2FsZXNbbmFtZV0gPSBsb2NhbGU7XG5cbiAgICAgICAgLy8gYmFja3dhcmRzIGNvbXBhdCBmb3Igbm93OiBhbHNvIHNldCB0aGUgbG9jYWxlXG4gICAgICAgIGdldFNldEdsb2JhbExvY2FsZShuYW1lKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyBwYXNzIG51bGwgZm9yIGNvbmZpZyB0byB1bnVwZGF0ZSwgdXNlZnVsIGZvciB0ZXN0c1xuICAgICAgICBpZiAobG9jYWxlc1tuYW1lXSAhPSBudWxsKSB7XG4gICAgICAgICAgICBpZiAobG9jYWxlc1tuYW1lXS5wYXJlbnRMb2NhbGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGxvY2FsZXNbbmFtZV0gPSBsb2NhbGVzW25hbWVdLnBhcmVudExvY2FsZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobG9jYWxlc1tuYW1lXSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgZGVsZXRlIGxvY2FsZXNbbmFtZV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGxvY2FsZXNbbmFtZV07XG59XG5cbi8vIHJldHVybnMgbG9jYWxlIGRhdGFcbmZ1bmN0aW9uIGdldExvY2FsZSAoa2V5KSB7XG4gICAgdmFyIGxvY2FsZTtcblxuICAgIGlmIChrZXkgJiYga2V5Ll9sb2NhbGUgJiYga2V5Ll9sb2NhbGUuX2FiYnIpIHtcbiAgICAgICAga2V5ID0ga2V5Ll9sb2NhbGUuX2FiYnI7XG4gICAgfVxuXG4gICAgaWYgKCFrZXkpIHtcbiAgICAgICAgcmV0dXJuIGdsb2JhbExvY2FsZTtcbiAgICB9XG5cbiAgICBpZiAoIWlzQXJyYXkoa2V5KSkge1xuICAgICAgICAvL3Nob3J0LWNpcmN1aXQgZXZlcnl0aGluZyBlbHNlXG4gICAgICAgIGxvY2FsZSA9IGxvYWRMb2NhbGUoa2V5KTtcbiAgICAgICAgaWYgKGxvY2FsZSkge1xuICAgICAgICAgICAgcmV0dXJuIGxvY2FsZTtcbiAgICAgICAgfVxuICAgICAgICBrZXkgPSBba2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2hvb3NlTG9jYWxlKGtleSk7XG59XG5cbmZ1bmN0aW9uIGxpc3RMb2NhbGVzKCkge1xuICAgIHJldHVybiBrZXlzKGxvY2FsZXMpO1xufVxuXG5mdW5jdGlvbiBjaGVja092ZXJmbG93IChtKSB7XG4gICAgdmFyIG92ZXJmbG93O1xuICAgIHZhciBhID0gbS5fYTtcblxuICAgIGlmIChhICYmIGdldFBhcnNpbmdGbGFncyhtKS5vdmVyZmxvdyA9PT0gLTIpIHtcbiAgICAgICAgb3ZlcmZsb3cgPVxuICAgICAgICAgICAgYVtNT05USF0gICAgICAgPCAwIHx8IGFbTU9OVEhdICAgICAgID4gMTEgID8gTU9OVEggOlxuICAgICAgICAgICAgYVtEQVRFXSAgICAgICAgPCAxIHx8IGFbREFURV0gICAgICAgID4gZGF5c0luTW9udGgoYVtZRUFSXSwgYVtNT05USF0pID8gREFURSA6XG4gICAgICAgICAgICBhW0hPVVJdICAgICAgICA8IDAgfHwgYVtIT1VSXSAgICAgICAgPiAyNCB8fCAoYVtIT1VSXSA9PT0gMjQgJiYgKGFbTUlOVVRFXSAhPT0gMCB8fCBhW1NFQ09ORF0gIT09IDAgfHwgYVtNSUxMSVNFQ09ORF0gIT09IDApKSA/IEhPVVIgOlxuICAgICAgICAgICAgYVtNSU5VVEVdICAgICAgPCAwIHx8IGFbTUlOVVRFXSAgICAgID4gNTkgID8gTUlOVVRFIDpcbiAgICAgICAgICAgIGFbU0VDT05EXSAgICAgIDwgMCB8fCBhW1NFQ09ORF0gICAgICA+IDU5ICA/IFNFQ09ORCA6XG4gICAgICAgICAgICBhW01JTExJU0VDT05EXSA8IDAgfHwgYVtNSUxMSVNFQ09ORF0gPiA5OTkgPyBNSUxMSVNFQ09ORCA6XG4gICAgICAgICAgICAtMTtcblxuICAgICAgICBpZiAoZ2V0UGFyc2luZ0ZsYWdzKG0pLl9vdmVyZmxvd0RheU9mWWVhciAmJiAob3ZlcmZsb3cgPCBZRUFSIHx8IG92ZXJmbG93ID4gREFURSkpIHtcbiAgICAgICAgICAgIG92ZXJmbG93ID0gREFURTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZ2V0UGFyc2luZ0ZsYWdzKG0pLl9vdmVyZmxvd1dlZWtzICYmIG92ZXJmbG93ID09PSAtMSkge1xuICAgICAgICAgICAgb3ZlcmZsb3cgPSBXRUVLO1xuICAgICAgICB9XG4gICAgICAgIGlmIChnZXRQYXJzaW5nRmxhZ3MobSkuX292ZXJmbG93V2Vla2RheSAmJiBvdmVyZmxvdyA9PT0gLTEpIHtcbiAgICAgICAgICAgIG92ZXJmbG93ID0gV0VFS0RBWTtcbiAgICAgICAgfVxuXG4gICAgICAgIGdldFBhcnNpbmdGbGFncyhtKS5vdmVyZmxvdyA9IG92ZXJmbG93O1xuICAgIH1cblxuICAgIHJldHVybiBtO1xufVxuXG4vLyBQaWNrIHRoZSBmaXJzdCBkZWZpbmVkIG9mIHR3byBvciB0aHJlZSBhcmd1bWVudHMuXG5mdW5jdGlvbiBkZWZhdWx0cyhhLCBiLCBjKSB7XG4gICAgaWYgKGEgIT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gYTtcbiAgICB9XG4gICAgaWYgKGIgIT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gYjtcbiAgICB9XG4gICAgcmV0dXJuIGM7XG59XG5cbmZ1bmN0aW9uIGN1cnJlbnREYXRlQXJyYXkoY29uZmlnKSB7XG4gICAgLy8gaG9va3MgaXMgYWN0dWFsbHkgdGhlIGV4cG9ydGVkIG1vbWVudCBvYmplY3RcbiAgICB2YXIgbm93VmFsdWUgPSBuZXcgRGF0ZShob29rcy5ub3coKSk7XG4gICAgaWYgKGNvbmZpZy5fdXNlVVRDKSB7XG4gICAgICAgIHJldHVybiBbbm93VmFsdWUuZ2V0VVRDRnVsbFllYXIoKSwgbm93VmFsdWUuZ2V0VVRDTW9udGgoKSwgbm93VmFsdWUuZ2V0VVRDRGF0ZSgpXTtcbiAgICB9XG4gICAgcmV0dXJuIFtub3dWYWx1ZS5nZXRGdWxsWWVhcigpLCBub3dWYWx1ZS5nZXRNb250aCgpLCBub3dWYWx1ZS5nZXREYXRlKCldO1xufVxuXG4vLyBjb252ZXJ0IGFuIGFycmF5IHRvIGEgZGF0ZS5cbi8vIHRoZSBhcnJheSBzaG91bGQgbWlycm9yIHRoZSBwYXJhbWV0ZXJzIGJlbG93XG4vLyBub3RlOiBhbGwgdmFsdWVzIHBhc3QgdGhlIHllYXIgYXJlIG9wdGlvbmFsIGFuZCB3aWxsIGRlZmF1bHQgdG8gdGhlIGxvd2VzdCBwb3NzaWJsZSB2YWx1ZS5cbi8vIFt5ZWFyLCBtb250aCwgZGF5ICwgaG91ciwgbWludXRlLCBzZWNvbmQsIG1pbGxpc2Vjb25kXVxuZnVuY3Rpb24gY29uZmlnRnJvbUFycmF5IChjb25maWcpIHtcbiAgICB2YXIgaSwgZGF0ZSwgaW5wdXQgPSBbXSwgY3VycmVudERhdGUsIHllYXJUb1VzZTtcblxuICAgIGlmIChjb25maWcuX2QpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGN1cnJlbnREYXRlID0gY3VycmVudERhdGVBcnJheShjb25maWcpO1xuXG4gICAgLy9jb21wdXRlIGRheSBvZiB0aGUgeWVhciBmcm9tIHdlZWtzIGFuZCB3ZWVrZGF5c1xuICAgIGlmIChjb25maWcuX3cgJiYgY29uZmlnLl9hW0RBVEVdID09IG51bGwgJiYgY29uZmlnLl9hW01PTlRIXSA9PSBudWxsKSB7XG4gICAgICAgIGRheU9mWWVhckZyb21XZWVrSW5mbyhjb25maWcpO1xuICAgIH1cblxuICAgIC8vaWYgdGhlIGRheSBvZiB0aGUgeWVhciBpcyBzZXQsIGZpZ3VyZSBvdXQgd2hhdCBpdCBpc1xuICAgIGlmIChjb25maWcuX2RheU9mWWVhciAhPSBudWxsKSB7XG4gICAgICAgIHllYXJUb1VzZSA9IGRlZmF1bHRzKGNvbmZpZy5fYVtZRUFSXSwgY3VycmVudERhdGVbWUVBUl0pO1xuXG4gICAgICAgIGlmIChjb25maWcuX2RheU9mWWVhciA+IGRheXNJblllYXIoeWVhclRvVXNlKSB8fCBjb25maWcuX2RheU9mWWVhciA9PT0gMCkge1xuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuX292ZXJmbG93RGF5T2ZZZWFyID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRhdGUgPSBjcmVhdGVVVENEYXRlKHllYXJUb1VzZSwgMCwgY29uZmlnLl9kYXlPZlllYXIpO1xuICAgICAgICBjb25maWcuX2FbTU9OVEhdID0gZGF0ZS5nZXRVVENNb250aCgpO1xuICAgICAgICBjb25maWcuX2FbREFURV0gPSBkYXRlLmdldFVUQ0RhdGUoKTtcbiAgICB9XG5cbiAgICAvLyBEZWZhdWx0IHRvIGN1cnJlbnQgZGF0ZS5cbiAgICAvLyAqIGlmIG5vIHllYXIsIG1vbnRoLCBkYXkgb2YgbW9udGggYXJlIGdpdmVuLCBkZWZhdWx0IHRvIHRvZGF5XG4gICAgLy8gKiBpZiBkYXkgb2YgbW9udGggaXMgZ2l2ZW4sIGRlZmF1bHQgbW9udGggYW5kIHllYXJcbiAgICAvLyAqIGlmIG1vbnRoIGlzIGdpdmVuLCBkZWZhdWx0IG9ubHkgeWVhclxuICAgIC8vICogaWYgeWVhciBpcyBnaXZlbiwgZG9uJ3QgZGVmYXVsdCBhbnl0aGluZ1xuICAgIGZvciAoaSA9IDA7IGkgPCAzICYmIGNvbmZpZy5fYVtpXSA9PSBudWxsOyArK2kpIHtcbiAgICAgICAgY29uZmlnLl9hW2ldID0gaW5wdXRbaV0gPSBjdXJyZW50RGF0ZVtpXTtcbiAgICB9XG5cbiAgICAvLyBaZXJvIG91dCB3aGF0ZXZlciB3YXMgbm90IGRlZmF1bHRlZCwgaW5jbHVkaW5nIHRpbWVcbiAgICBmb3IgKDsgaSA8IDc7IGkrKykge1xuICAgICAgICBjb25maWcuX2FbaV0gPSBpbnB1dFtpXSA9IChjb25maWcuX2FbaV0gPT0gbnVsbCkgPyAoaSA9PT0gMiA/IDEgOiAwKSA6IGNvbmZpZy5fYVtpXTtcbiAgICB9XG5cbiAgICAvLyBDaGVjayBmb3IgMjQ6MDA6MDAuMDAwXG4gICAgaWYgKGNvbmZpZy5fYVtIT1VSXSA9PT0gMjQgJiZcbiAgICAgICAgICAgIGNvbmZpZy5fYVtNSU5VVEVdID09PSAwICYmXG4gICAgICAgICAgICBjb25maWcuX2FbU0VDT05EXSA9PT0gMCAmJlxuICAgICAgICAgICAgY29uZmlnLl9hW01JTExJU0VDT05EXSA9PT0gMCkge1xuICAgICAgICBjb25maWcuX25leHREYXkgPSB0cnVlO1xuICAgICAgICBjb25maWcuX2FbSE9VUl0gPSAwO1xuICAgIH1cblxuICAgIGNvbmZpZy5fZCA9IChjb25maWcuX3VzZVVUQyA/IGNyZWF0ZVVUQ0RhdGUgOiBjcmVhdGVEYXRlKS5hcHBseShudWxsLCBpbnB1dCk7XG4gICAgLy8gQXBwbHkgdGltZXpvbmUgb2Zmc2V0IGZyb20gaW5wdXQuIFRoZSBhY3R1YWwgdXRjT2Zmc2V0IGNhbiBiZSBjaGFuZ2VkXG4gICAgLy8gd2l0aCBwYXJzZVpvbmUuXG4gICAgaWYgKGNvbmZpZy5fdHptICE9IG51bGwpIHtcbiAgICAgICAgY29uZmlnLl9kLnNldFVUQ01pbnV0ZXMoY29uZmlnLl9kLmdldFVUQ01pbnV0ZXMoKSAtIGNvbmZpZy5fdHptKTtcbiAgICB9XG5cbiAgICBpZiAoY29uZmlnLl9uZXh0RGF5KSB7XG4gICAgICAgIGNvbmZpZy5fYVtIT1VSXSA9IDI0O1xuICAgIH1cblxuICAgIC8vIGNoZWNrIGZvciBtaXNtYXRjaGluZyBkYXkgb2Ygd2Vla1xuICAgIGlmIChjb25maWcuX3cgJiYgdHlwZW9mIGNvbmZpZy5fdy5kICE9PSAndW5kZWZpbmVkJyAmJiBjb25maWcuX3cuZCAhPT0gY29uZmlnLl9kLmdldERheSgpKSB7XG4gICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLndlZWtkYXlNaXNtYXRjaCA9IHRydWU7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkYXlPZlllYXJGcm9tV2Vla0luZm8oY29uZmlnKSB7XG4gICAgdmFyIHcsIHdlZWtZZWFyLCB3ZWVrLCB3ZWVrZGF5LCBkb3csIGRveSwgdGVtcCwgd2Vla2RheU92ZXJmbG93O1xuXG4gICAgdyA9IGNvbmZpZy5fdztcbiAgICBpZiAody5HRyAhPSBudWxsIHx8IHcuVyAhPSBudWxsIHx8IHcuRSAhPSBudWxsKSB7XG4gICAgICAgIGRvdyA9IDE7XG4gICAgICAgIGRveSA9IDQ7XG5cbiAgICAgICAgLy8gVE9ETzogV2UgbmVlZCB0byB0YWtlIHRoZSBjdXJyZW50IGlzb1dlZWtZZWFyLCBidXQgdGhhdCBkZXBlbmRzIG9uXG4gICAgICAgIC8vIGhvdyB3ZSBpbnRlcnByZXQgbm93IChsb2NhbCwgdXRjLCBmaXhlZCBvZmZzZXQpLiBTbyBjcmVhdGVcbiAgICAgICAgLy8gYSBub3cgdmVyc2lvbiBvZiBjdXJyZW50IGNvbmZpZyAodGFrZSBsb2NhbC91dGMvb2Zmc2V0IGZsYWdzLCBhbmRcbiAgICAgICAgLy8gY3JlYXRlIG5vdykuXG4gICAgICAgIHdlZWtZZWFyID0gZGVmYXVsdHMody5HRywgY29uZmlnLl9hW1lFQVJdLCB3ZWVrT2ZZZWFyKGNyZWF0ZUxvY2FsKCksIDEsIDQpLnllYXIpO1xuICAgICAgICB3ZWVrID0gZGVmYXVsdHMody5XLCAxKTtcbiAgICAgICAgd2Vla2RheSA9IGRlZmF1bHRzKHcuRSwgMSk7XG4gICAgICAgIGlmICh3ZWVrZGF5IDwgMSB8fCB3ZWVrZGF5ID4gNykge1xuICAgICAgICAgICAgd2Vla2RheU92ZXJmbG93ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGRvdyA9IGNvbmZpZy5fbG9jYWxlLl93ZWVrLmRvdztcbiAgICAgICAgZG95ID0gY29uZmlnLl9sb2NhbGUuX3dlZWsuZG95O1xuXG4gICAgICAgIHZhciBjdXJXZWVrID0gd2Vla09mWWVhcihjcmVhdGVMb2NhbCgpLCBkb3csIGRveSk7XG5cbiAgICAgICAgd2Vla1llYXIgPSBkZWZhdWx0cyh3LmdnLCBjb25maWcuX2FbWUVBUl0sIGN1cldlZWsueWVhcik7XG5cbiAgICAgICAgLy8gRGVmYXVsdCB0byBjdXJyZW50IHdlZWsuXG4gICAgICAgIHdlZWsgPSBkZWZhdWx0cyh3LncsIGN1cldlZWsud2Vlayk7XG5cbiAgICAgICAgaWYgKHcuZCAhPSBudWxsKSB7XG4gICAgICAgICAgICAvLyB3ZWVrZGF5IC0tIGxvdyBkYXkgbnVtYmVycyBhcmUgY29uc2lkZXJlZCBuZXh0IHdlZWtcbiAgICAgICAgICAgIHdlZWtkYXkgPSB3LmQ7XG4gICAgICAgICAgICBpZiAod2Vla2RheSA8IDAgfHwgd2Vla2RheSA+IDYpIHtcbiAgICAgICAgICAgICAgICB3ZWVrZGF5T3ZlcmZsb3cgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHcuZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAvLyBsb2NhbCB3ZWVrZGF5IC0tIGNvdW50aW5nIHN0YXJ0cyBmcm9tIGJlZ2luaW5nIG9mIHdlZWtcbiAgICAgICAgICAgIHdlZWtkYXkgPSB3LmUgKyBkb3c7XG4gICAgICAgICAgICBpZiAody5lIDwgMCB8fCB3LmUgPiA2KSB7XG4gICAgICAgICAgICAgICAgd2Vla2RheU92ZXJmbG93ID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIGRlZmF1bHQgdG8gYmVnaW5pbmcgb2Ygd2Vla1xuICAgICAgICAgICAgd2Vla2RheSA9IGRvdztcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAod2VlayA8IDEgfHwgd2VlayA+IHdlZWtzSW5ZZWFyKHdlZWtZZWFyLCBkb3csIGRveSkpIHtcbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuX292ZXJmbG93V2Vla3MgPSB0cnVlO1xuICAgIH0gZWxzZSBpZiAod2Vla2RheU92ZXJmbG93ICE9IG51bGwpIHtcbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuX292ZXJmbG93V2Vla2RheSA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGVtcCA9IGRheU9mWWVhckZyb21XZWVrcyh3ZWVrWWVhciwgd2Vlaywgd2Vla2RheSwgZG93LCBkb3kpO1xuICAgICAgICBjb25maWcuX2FbWUVBUl0gPSB0ZW1wLnllYXI7XG4gICAgICAgIGNvbmZpZy5fZGF5T2ZZZWFyID0gdGVtcC5kYXlPZlllYXI7XG4gICAgfVxufVxuXG4vLyBpc28gODYwMSByZWdleFxuLy8gMDAwMC0wMC0wMCAwMDAwLVcwMCBvciAwMDAwLVcwMC0wICsgVCArIDAwIG9yIDAwOjAwIG9yIDAwOjAwOjAwIG9yIDAwOjAwOjAwLjAwMCArICswMDowMCBvciArMDAwMCBvciArMDApXG52YXIgZXh0ZW5kZWRJc29SZWdleCA9IC9eXFxzKigoPzpbKy1dXFxkezZ9fFxcZHs0fSktKD86XFxkXFxkLVxcZFxcZHxXXFxkXFxkLVxcZHxXXFxkXFxkfFxcZFxcZFxcZHxcXGRcXGQpKSg/OihUfCApKFxcZFxcZCg/OjpcXGRcXGQoPzo6XFxkXFxkKD86Wy4sXVxcZCspPyk/KT8pKFtcXCtcXC1dXFxkXFxkKD86Oj9cXGRcXGQpP3xcXHMqWik/KT8kLztcbnZhciBiYXNpY0lzb1JlZ2V4ID0gL15cXHMqKCg/OlsrLV1cXGR7Nn18XFxkezR9KSg/OlxcZFxcZFxcZFxcZHxXXFxkXFxkXFxkfFdcXGRcXGR8XFxkXFxkXFxkfFxcZFxcZCkpKD86KFR8ICkoXFxkXFxkKD86XFxkXFxkKD86XFxkXFxkKD86Wy4sXVxcZCspPyk/KT8pKFtcXCtcXC1dXFxkXFxkKD86Oj9cXGRcXGQpP3xcXHMqWik/KT8kLztcblxudmFyIHR6UmVnZXggPSAvWnxbKy1dXFxkXFxkKD86Oj9cXGRcXGQpPy87XG5cbnZhciBpc29EYXRlcyA9IFtcbiAgICBbJ1lZWVlZWS1NTS1ERCcsIC9bKy1dXFxkezZ9LVxcZFxcZC1cXGRcXGQvXSxcbiAgICBbJ1lZWVktTU0tREQnLCAvXFxkezR9LVxcZFxcZC1cXGRcXGQvXSxcbiAgICBbJ0dHR0ctW1ddV1ctRScsIC9cXGR7NH0tV1xcZFxcZC1cXGQvXSxcbiAgICBbJ0dHR0ctW1ddV1cnLCAvXFxkezR9LVdcXGRcXGQvLCBmYWxzZV0sXG4gICAgWydZWVlZLURERCcsIC9cXGR7NH0tXFxkezN9L10sXG4gICAgWydZWVlZLU1NJywgL1xcZHs0fS1cXGRcXGQvLCBmYWxzZV0sXG4gICAgWydZWVlZWVlNTUREJywgL1srLV1cXGR7MTB9L10sXG4gICAgWydZWVlZTU1ERCcsIC9cXGR7OH0vXSxcbiAgICAvLyBZWVlZTU0gaXMgTk9UIGFsbG93ZWQgYnkgdGhlIHN0YW5kYXJkXG4gICAgWydHR0dHW1ddV1dFJywgL1xcZHs0fVdcXGR7M30vXSxcbiAgICBbJ0dHR0dbV11XVycsIC9cXGR7NH1XXFxkezJ9LywgZmFsc2VdLFxuICAgIFsnWVlZWURERCcsIC9cXGR7N30vXVxuXTtcblxuLy8gaXNvIHRpbWUgZm9ybWF0cyBhbmQgcmVnZXhlc1xudmFyIGlzb1RpbWVzID0gW1xuICAgIFsnSEg6bW06c3MuU1NTUycsIC9cXGRcXGQ6XFxkXFxkOlxcZFxcZFxcLlxcZCsvXSxcbiAgICBbJ0hIOm1tOnNzLFNTU1MnLCAvXFxkXFxkOlxcZFxcZDpcXGRcXGQsXFxkKy9dLFxuICAgIFsnSEg6bW06c3MnLCAvXFxkXFxkOlxcZFxcZDpcXGRcXGQvXSxcbiAgICBbJ0hIOm1tJywgL1xcZFxcZDpcXGRcXGQvXSxcbiAgICBbJ0hIbW1zcy5TU1NTJywgL1xcZFxcZFxcZFxcZFxcZFxcZFxcLlxcZCsvXSxcbiAgICBbJ0hIbW1zcyxTU1NTJywgL1xcZFxcZFxcZFxcZFxcZFxcZCxcXGQrL10sXG4gICAgWydISG1tc3MnLCAvXFxkXFxkXFxkXFxkXFxkXFxkL10sXG4gICAgWydISG1tJywgL1xcZFxcZFxcZFxcZC9dLFxuICAgIFsnSEgnLCAvXFxkXFxkL11cbl07XG5cbnZhciBhc3BOZXRKc29uUmVnZXggPSAvXlxcLz9EYXRlXFwoKFxcLT9cXGQrKS9pO1xuXG4vLyBkYXRlIGZyb20gaXNvIGZvcm1hdFxuZnVuY3Rpb24gY29uZmlnRnJvbUlTTyhjb25maWcpIHtcbiAgICB2YXIgaSwgbCxcbiAgICAgICAgc3RyaW5nID0gY29uZmlnLl9pLFxuICAgICAgICBtYXRjaCA9IGV4dGVuZGVkSXNvUmVnZXguZXhlYyhzdHJpbmcpIHx8IGJhc2ljSXNvUmVnZXguZXhlYyhzdHJpbmcpLFxuICAgICAgICBhbGxvd1RpbWUsIGRhdGVGb3JtYXQsIHRpbWVGb3JtYXQsIHR6Rm9ybWF0O1xuXG4gICAgaWYgKG1hdGNoKSB7XG4gICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmlzbyA9IHRydWU7XG5cbiAgICAgICAgZm9yIChpID0gMCwgbCA9IGlzb0RhdGVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgaWYgKGlzb0RhdGVzW2ldWzFdLmV4ZWMobWF0Y2hbMV0pKSB7XG4gICAgICAgICAgICAgICAgZGF0ZUZvcm1hdCA9IGlzb0RhdGVzW2ldWzBdO1xuICAgICAgICAgICAgICAgIGFsbG93VGltZSA9IGlzb0RhdGVzW2ldWzJdICE9PSBmYWxzZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0ZUZvcm1hdCA9PSBudWxsKSB7XG4gICAgICAgICAgICBjb25maWcuX2lzVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWF0Y2hbM10pIHtcbiAgICAgICAgICAgIGZvciAoaSA9IDAsIGwgPSBpc29UaW1lcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNvVGltZXNbaV1bMV0uZXhlYyhtYXRjaFszXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gbWF0Y2hbMl0gc2hvdWxkIGJlICdUJyBvciBzcGFjZVxuICAgICAgICAgICAgICAgICAgICB0aW1lRm9ybWF0ID0gKG1hdGNoWzJdIHx8ICcgJykgKyBpc29UaW1lc1tpXVswXTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRpbWVGb3JtYXQgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGNvbmZpZy5faXNWYWxpZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIWFsbG93VGltZSAmJiB0aW1lRm9ybWF0ICE9IG51bGwpIHtcbiAgICAgICAgICAgIGNvbmZpZy5faXNWYWxpZCA9IGZhbHNlO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtYXRjaFs0XSkge1xuICAgICAgICAgICAgaWYgKHR6UmVnZXguZXhlYyhtYXRjaFs0XSkpIHtcbiAgICAgICAgICAgICAgICB0ekZvcm1hdCA9ICdaJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uZmlnLl9pc1ZhbGlkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbmZpZy5fZiA9IGRhdGVGb3JtYXQgKyAodGltZUZvcm1hdCB8fCAnJykgKyAodHpGb3JtYXQgfHwgJycpO1xuICAgICAgICBjb25maWdGcm9tU3RyaW5nQW5kRm9ybWF0KGNvbmZpZyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgY29uZmlnLl9pc1ZhbGlkID0gZmFsc2U7XG4gICAgfVxufVxuXG4vLyBSRkMgMjgyMiByZWdleDogRm9yIGRldGFpbHMgc2VlIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMyODIyI3NlY3Rpb24tMy4zXG52YXIgcmZjMjgyMiA9IC9eKD86KE1vbnxUdWV8V2VkfFRodXxGcml8U2F0fFN1biksP1xccyk/KFxcZHsxLDJ9KVxccyhKYW58RmVifE1hcnxBcHJ8TWF5fEp1bnxKdWx8QXVnfFNlcHxPY3R8Tm92fERlYylcXHMoXFxkezIsNH0pXFxzKFxcZFxcZCk6KFxcZFxcZCkoPzo6KFxcZFxcZCkpP1xccyg/OihVVHxHTVR8W0VDTVBdW1NEXVQpfChbWnpdKXwoWystXVxcZHs0fSkpJC87XG5cbmZ1bmN0aW9uIGV4dHJhY3RGcm9tUkZDMjgyMlN0cmluZ3MoeWVhclN0ciwgbW9udGhTdHIsIGRheVN0ciwgaG91clN0ciwgbWludXRlU3RyLCBzZWNvbmRTdHIpIHtcbiAgICB2YXIgcmVzdWx0ID0gW1xuICAgICAgICB1bnRydW5jYXRlWWVhcih5ZWFyU3RyKSxcbiAgICAgICAgZGVmYXVsdExvY2FsZU1vbnRoc1Nob3J0LmluZGV4T2YobW9udGhTdHIpLFxuICAgICAgICBwYXJzZUludChkYXlTdHIsIDEwKSxcbiAgICAgICAgcGFyc2VJbnQoaG91clN0ciwgMTApLFxuICAgICAgICBwYXJzZUludChtaW51dGVTdHIsIDEwKVxuICAgIF07XG5cbiAgICBpZiAoc2Vjb25kU3RyKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKHBhcnNlSW50KHNlY29uZFN0ciwgMTApKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiB1bnRydW5jYXRlWWVhcih5ZWFyU3RyKSB7XG4gICAgdmFyIHllYXIgPSBwYXJzZUludCh5ZWFyU3RyLCAxMCk7XG4gICAgaWYgKHllYXIgPD0gNDkpIHtcbiAgICAgICAgcmV0dXJuIDIwMDAgKyB5ZWFyO1xuICAgIH0gZWxzZSBpZiAoeWVhciA8PSA5OTkpIHtcbiAgICAgICAgcmV0dXJuIDE5MDAgKyB5ZWFyO1xuICAgIH1cbiAgICByZXR1cm4geWVhcjtcbn1cblxuZnVuY3Rpb24gcHJlcHJvY2Vzc1JGQzI4MjIocykge1xuICAgIC8vIFJlbW92ZSBjb21tZW50cyBhbmQgZm9sZGluZyB3aGl0ZXNwYWNlIGFuZCByZXBsYWNlIG11bHRpcGxlLXNwYWNlcyB3aXRoIGEgc2luZ2xlIHNwYWNlXG4gICAgcmV0dXJuIHMucmVwbGFjZSgvXFwoW14pXSpcXCl8W1xcblxcdF0vZywgJyAnKS5yZXBsYWNlKC8oXFxzXFxzKykvZywgJyAnKS50cmltKCk7XG59XG5cbmZ1bmN0aW9uIGNoZWNrV2Vla2RheSh3ZWVrZGF5U3RyLCBwYXJzZWRJbnB1dCwgY29uZmlnKSB7XG4gICAgaWYgKHdlZWtkYXlTdHIpIHtcbiAgICAgICAgLy8gVE9ETzogUmVwbGFjZSB0aGUgdmFuaWxsYSBKUyBEYXRlIG9iamVjdCB3aXRoIGFuIGluZGVwZW50ZW50IGRheS1vZi13ZWVrIGNoZWNrLlxuICAgICAgICB2YXIgd2Vla2RheVByb3ZpZGVkID0gZGVmYXVsdExvY2FsZVdlZWtkYXlzU2hvcnQuaW5kZXhPZih3ZWVrZGF5U3RyKSxcbiAgICAgICAgICAgIHdlZWtkYXlBY3R1YWwgPSBuZXcgRGF0ZShwYXJzZWRJbnB1dFswXSwgcGFyc2VkSW5wdXRbMV0sIHBhcnNlZElucHV0WzJdKS5nZXREYXkoKTtcbiAgICAgICAgaWYgKHdlZWtkYXlQcm92aWRlZCAhPT0gd2Vla2RheUFjdHVhbCkge1xuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykud2Vla2RheU1pc21hdGNoID0gdHJ1ZTtcbiAgICAgICAgICAgIGNvbmZpZy5faXNWYWxpZCA9IGZhbHNlO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuXG52YXIgb2JzT2Zmc2V0cyA9IHtcbiAgICBVVDogMCxcbiAgICBHTVQ6IDAsXG4gICAgRURUOiAtNCAqIDYwLFxuICAgIEVTVDogLTUgKiA2MCxcbiAgICBDRFQ6IC01ICogNjAsXG4gICAgQ1NUOiAtNiAqIDYwLFxuICAgIE1EVDogLTYgKiA2MCxcbiAgICBNU1Q6IC03ICogNjAsXG4gICAgUERUOiAtNyAqIDYwLFxuICAgIFBTVDogLTggKiA2MFxufTtcblxuZnVuY3Rpb24gY2FsY3VsYXRlT2Zmc2V0KG9ic09mZnNldCwgbWlsaXRhcnlPZmZzZXQsIG51bU9mZnNldCkge1xuICAgIGlmIChvYnNPZmZzZXQpIHtcbiAgICAgICAgcmV0dXJuIG9ic09mZnNldHNbb2JzT2Zmc2V0XTtcbiAgICB9IGVsc2UgaWYgKG1pbGl0YXJ5T2Zmc2V0KSB7XG4gICAgICAgIC8vIHRoZSBvbmx5IGFsbG93ZWQgbWlsaXRhcnkgdHogaXMgWlxuICAgICAgICByZXR1cm4gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgaG0gPSBwYXJzZUludChudW1PZmZzZXQsIDEwKTtcbiAgICAgICAgdmFyIG0gPSBobSAlIDEwMCwgaCA9IChobSAtIG0pIC8gMTAwO1xuICAgICAgICByZXR1cm4gaCAqIDYwICsgbTtcbiAgICB9XG59XG5cbi8vIGRhdGUgYW5kIHRpbWUgZnJvbSByZWYgMjgyMiBmb3JtYXRcbmZ1bmN0aW9uIGNvbmZpZ0Zyb21SRkMyODIyKGNvbmZpZykge1xuICAgIHZhciBtYXRjaCA9IHJmYzI4MjIuZXhlYyhwcmVwcm9jZXNzUkZDMjgyMihjb25maWcuX2kpKTtcbiAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgdmFyIHBhcnNlZEFycmF5ID0gZXh0cmFjdEZyb21SRkMyODIyU3RyaW5ncyhtYXRjaFs0XSwgbWF0Y2hbM10sIG1hdGNoWzJdLCBtYXRjaFs1XSwgbWF0Y2hbNl0sIG1hdGNoWzddKTtcbiAgICAgICAgaWYgKCFjaGVja1dlZWtkYXkobWF0Y2hbMV0sIHBhcnNlZEFycmF5LCBjb25maWcpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25maWcuX2EgPSBwYXJzZWRBcnJheTtcbiAgICAgICAgY29uZmlnLl90em0gPSBjYWxjdWxhdGVPZmZzZXQobWF0Y2hbOF0sIG1hdGNoWzldLCBtYXRjaFsxMF0pO1xuXG4gICAgICAgIGNvbmZpZy5fZCA9IGNyZWF0ZVVUQ0RhdGUuYXBwbHkobnVsbCwgY29uZmlnLl9hKTtcbiAgICAgICAgY29uZmlnLl9kLnNldFVUQ01pbnV0ZXMoY29uZmlnLl9kLmdldFVUQ01pbnV0ZXMoKSAtIGNvbmZpZy5fdHptKTtcblxuICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5yZmMyODIyID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBjb25maWcuX2lzVmFsaWQgPSBmYWxzZTtcbiAgICB9XG59XG5cbi8vIGRhdGUgZnJvbSBpc28gZm9ybWF0IG9yIGZhbGxiYWNrXG5mdW5jdGlvbiBjb25maWdGcm9tU3RyaW5nKGNvbmZpZykge1xuICAgIHZhciBtYXRjaGVkID0gYXNwTmV0SnNvblJlZ2V4LmV4ZWMoY29uZmlnLl9pKTtcblxuICAgIGlmIChtYXRjaGVkICE9PSBudWxsKSB7XG4gICAgICAgIGNvbmZpZy5fZCA9IG5ldyBEYXRlKCttYXRjaGVkWzFdKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbmZpZ0Zyb21JU08oY29uZmlnKTtcbiAgICBpZiAoY29uZmlnLl9pc1ZhbGlkID09PSBmYWxzZSkge1xuICAgICAgICBkZWxldGUgY29uZmlnLl9pc1ZhbGlkO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25maWdGcm9tUkZDMjgyMihjb25maWcpO1xuICAgIGlmIChjb25maWcuX2lzVmFsaWQgPT09IGZhbHNlKSB7XG4gICAgICAgIGRlbGV0ZSBjb25maWcuX2lzVmFsaWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIEZpbmFsIGF0dGVtcHQsIHVzZSBJbnB1dCBGYWxsYmFja1xuICAgIGhvb2tzLmNyZWF0ZUZyb21JbnB1dEZhbGxiYWNrKGNvbmZpZyk7XG59XG5cbmhvb2tzLmNyZWF0ZUZyb21JbnB1dEZhbGxiYWNrID0gZGVwcmVjYXRlKFxuICAgICd2YWx1ZSBwcm92aWRlZCBpcyBub3QgaW4gYSByZWNvZ25pemVkIFJGQzI4MjIgb3IgSVNPIGZvcm1hdC4gbW9tZW50IGNvbnN0cnVjdGlvbiBmYWxscyBiYWNrIHRvIGpzIERhdGUoKSwgJyArXG4gICAgJ3doaWNoIGlzIG5vdCByZWxpYWJsZSBhY3Jvc3MgYWxsIGJyb3dzZXJzIGFuZCB2ZXJzaW9ucy4gTm9uIFJGQzI4MjIvSVNPIGRhdGUgZm9ybWF0cyBhcmUgJyArXG4gICAgJ2Rpc2NvdXJhZ2VkIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gYW4gdXBjb21pbmcgbWFqb3IgcmVsZWFzZS4gUGxlYXNlIHJlZmVyIHRvICcgK1xuICAgICdodHRwOi8vbW9tZW50anMuY29tL2d1aWRlcy8jL3dhcm5pbmdzL2pzLWRhdGUvIGZvciBtb3JlIGluZm8uJyxcbiAgICBmdW5jdGlvbiAoY29uZmlnKSB7XG4gICAgICAgIGNvbmZpZy5fZCA9IG5ldyBEYXRlKGNvbmZpZy5faSArIChjb25maWcuX3VzZVVUQyA/ICcgVVRDJyA6ICcnKSk7XG4gICAgfVxuKTtcblxuLy8gY29uc3RhbnQgdGhhdCByZWZlcnMgdG8gdGhlIElTTyBzdGFuZGFyZFxuaG9va3MuSVNPXzg2MDEgPSBmdW5jdGlvbiAoKSB7fTtcblxuLy8gY29uc3RhbnQgdGhhdCByZWZlcnMgdG8gdGhlIFJGQyAyODIyIGZvcm1cbmhvb2tzLlJGQ18yODIyID0gZnVuY3Rpb24gKCkge307XG5cbi8vIGRhdGUgZnJvbSBzdHJpbmcgYW5kIGZvcm1hdCBzdHJpbmdcbmZ1bmN0aW9uIGNvbmZpZ0Zyb21TdHJpbmdBbmRGb3JtYXQoY29uZmlnKSB7XG4gICAgLy8gVE9ETzogTW92ZSB0aGlzIHRvIGFub3RoZXIgcGFydCBvZiB0aGUgY3JlYXRpb24gZmxvdyB0byBwcmV2ZW50IGNpcmN1bGFyIGRlcHNcbiAgICBpZiAoY29uZmlnLl9mID09PSBob29rcy5JU09fODYwMSkge1xuICAgICAgICBjb25maWdGcm9tSVNPKGNvbmZpZyk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGNvbmZpZy5fZiA9PT0gaG9va3MuUkZDXzI4MjIpIHtcbiAgICAgICAgY29uZmlnRnJvbVJGQzI4MjIoY29uZmlnKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25maWcuX2EgPSBbXTtcbiAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5lbXB0eSA9IHRydWU7XG5cbiAgICAvLyBUaGlzIGFycmF5IGlzIHVzZWQgdG8gbWFrZSBhIERhdGUsIGVpdGhlciB3aXRoIGBuZXcgRGF0ZWAgb3IgYERhdGUuVVRDYFxuICAgIHZhciBzdHJpbmcgPSAnJyArIGNvbmZpZy5faSxcbiAgICAgICAgaSwgcGFyc2VkSW5wdXQsIHRva2VucywgdG9rZW4sIHNraXBwZWQsXG4gICAgICAgIHN0cmluZ0xlbmd0aCA9IHN0cmluZy5sZW5ndGgsXG4gICAgICAgIHRvdGFsUGFyc2VkSW5wdXRMZW5ndGggPSAwO1xuXG4gICAgdG9rZW5zID0gZXhwYW5kRm9ybWF0KGNvbmZpZy5fZiwgY29uZmlnLl9sb2NhbGUpLm1hdGNoKGZvcm1hdHRpbmdUb2tlbnMpIHx8IFtdO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgICAgICB0b2tlbiA9IHRva2Vuc1tpXTtcbiAgICAgICAgcGFyc2VkSW5wdXQgPSAoc3RyaW5nLm1hdGNoKGdldFBhcnNlUmVnZXhGb3JUb2tlbih0b2tlbiwgY29uZmlnKSkgfHwgW10pWzBdO1xuICAgICAgICAvLyBjb25zb2xlLmxvZygndG9rZW4nLCB0b2tlbiwgJ3BhcnNlZElucHV0JywgcGFyc2VkSW5wdXQsXG4gICAgICAgIC8vICAgICAgICAgJ3JlZ2V4JywgZ2V0UGFyc2VSZWdleEZvclRva2VuKHRva2VuLCBjb25maWcpKTtcbiAgICAgICAgaWYgKHBhcnNlZElucHV0KSB7XG4gICAgICAgICAgICBza2lwcGVkID0gc3RyaW5nLnN1YnN0cigwLCBzdHJpbmcuaW5kZXhPZihwYXJzZWRJbnB1dCkpO1xuICAgICAgICAgICAgaWYgKHNraXBwZWQubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLnVudXNlZElucHV0LnB1c2goc2tpcHBlZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdHJpbmcgPSBzdHJpbmcuc2xpY2Uoc3RyaW5nLmluZGV4T2YocGFyc2VkSW5wdXQpICsgcGFyc2VkSW5wdXQubGVuZ3RoKTtcbiAgICAgICAgICAgIHRvdGFsUGFyc2VkSW5wdXRMZW5ndGggKz0gcGFyc2VkSW5wdXQubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIC8vIGRvbid0IHBhcnNlIGlmIGl0J3Mgbm90IGEga25vd24gdG9rZW5cbiAgICAgICAgaWYgKGZvcm1hdFRva2VuRnVuY3Rpb25zW3Rva2VuXSkge1xuICAgICAgICAgICAgaWYgKHBhcnNlZElucHV0KSB7XG4gICAgICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuZW1wdHkgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLnVudXNlZFRva2Vucy5wdXNoKHRva2VuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFkZFRpbWVUb0FycmF5RnJvbVRva2VuKHRva2VuLCBwYXJzZWRJbnB1dCwgY29uZmlnKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjb25maWcuX3N0cmljdCAmJiAhcGFyc2VkSW5wdXQpIHtcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLnVudXNlZFRva2Vucy5wdXNoKHRva2VuKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIGFkZCByZW1haW5pbmcgdW5wYXJzZWQgaW5wdXQgbGVuZ3RoIHRvIHRoZSBzdHJpbmdcbiAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5jaGFyc0xlZnRPdmVyID0gc3RyaW5nTGVuZ3RoIC0gdG90YWxQYXJzZWRJbnB1dExlbmd0aDtcbiAgICBpZiAoc3RyaW5nLmxlbmd0aCA+IDApIHtcbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykudW51c2VkSW5wdXQucHVzaChzdHJpbmcpO1xuICAgIH1cblxuICAgIC8vIGNsZWFyIF8xMmggZmxhZyBpZiBob3VyIGlzIDw9IDEyXG4gICAgaWYgKGNvbmZpZy5fYVtIT1VSXSA8PSAxMiAmJlxuICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5iaWdIb3VyID09PSB0cnVlICYmXG4gICAgICAgIGNvbmZpZy5fYVtIT1VSXSA+IDApIHtcbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuYmlnSG91ciA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5wYXJzZWREYXRlUGFydHMgPSBjb25maWcuX2Euc2xpY2UoMCk7XG4gICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykubWVyaWRpZW0gPSBjb25maWcuX21lcmlkaWVtO1xuICAgIC8vIGhhbmRsZSBtZXJpZGllbVxuICAgIGNvbmZpZy5fYVtIT1VSXSA9IG1lcmlkaWVtRml4V3JhcChjb25maWcuX2xvY2FsZSwgY29uZmlnLl9hW0hPVVJdLCBjb25maWcuX21lcmlkaWVtKTtcblxuICAgIGNvbmZpZ0Zyb21BcnJheShjb25maWcpO1xuICAgIGNoZWNrT3ZlcmZsb3coY29uZmlnKTtcbn1cblxuXG5mdW5jdGlvbiBtZXJpZGllbUZpeFdyYXAgKGxvY2FsZSwgaG91ciwgbWVyaWRpZW0pIHtcbiAgICB2YXIgaXNQbTtcblxuICAgIGlmIChtZXJpZGllbSA9PSBudWxsKSB7XG4gICAgICAgIC8vIG5vdGhpbmcgdG8gZG9cbiAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgfVxuICAgIGlmIChsb2NhbGUubWVyaWRpZW1Ib3VyICE9IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZS5tZXJpZGllbUhvdXIoaG91ciwgbWVyaWRpZW0pO1xuICAgIH0gZWxzZSBpZiAobG9jYWxlLmlzUE0gIT0gbnVsbCkge1xuICAgICAgICAvLyBGYWxsYmFja1xuICAgICAgICBpc1BtID0gbG9jYWxlLmlzUE0obWVyaWRpZW0pO1xuICAgICAgICBpZiAoaXNQbSAmJiBob3VyIDwgMTIpIHtcbiAgICAgICAgICAgIGhvdXIgKz0gMTI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc1BtICYmIGhvdXIgPT09IDEyKSB7XG4gICAgICAgICAgICBob3VyID0gMDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaG91cjtcbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyB0aGlzIGlzIG5vdCBzdXBwb3NlZCB0byBoYXBwZW5cbiAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgfVxufVxuXG4vLyBkYXRlIGZyb20gc3RyaW5nIGFuZCBhcnJheSBvZiBmb3JtYXQgc3RyaW5nc1xuZnVuY3Rpb24gY29uZmlnRnJvbVN0cmluZ0FuZEFycmF5KGNvbmZpZykge1xuICAgIHZhciB0ZW1wQ29uZmlnLFxuICAgICAgICBiZXN0TW9tZW50LFxuXG4gICAgICAgIHNjb3JlVG9CZWF0LFxuICAgICAgICBpLFxuICAgICAgICBjdXJyZW50U2NvcmU7XG5cbiAgICBpZiAoY29uZmlnLl9mLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5pbnZhbGlkRm9ybWF0ID0gdHJ1ZTtcbiAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUoTmFOKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGZvciAoaSA9IDA7IGkgPCBjb25maWcuX2YubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY3VycmVudFNjb3JlID0gMDtcbiAgICAgICAgdGVtcENvbmZpZyA9IGNvcHlDb25maWcoe30sIGNvbmZpZyk7XG4gICAgICAgIGlmIChjb25maWcuX3VzZVVUQyAhPSBudWxsKSB7XG4gICAgICAgICAgICB0ZW1wQ29uZmlnLl91c2VVVEMgPSBjb25maWcuX3VzZVVUQztcbiAgICAgICAgfVxuICAgICAgICB0ZW1wQ29uZmlnLl9mID0gY29uZmlnLl9mW2ldO1xuICAgICAgICBjb25maWdGcm9tU3RyaW5nQW5kRm9ybWF0KHRlbXBDb25maWcpO1xuXG4gICAgICAgIGlmICghaXNWYWxpZCh0ZW1wQ29uZmlnKSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBpZiB0aGVyZSBpcyBhbnkgaW5wdXQgdGhhdCB3YXMgbm90IHBhcnNlZCBhZGQgYSBwZW5hbHR5IGZvciB0aGF0IGZvcm1hdFxuICAgICAgICBjdXJyZW50U2NvcmUgKz0gZ2V0UGFyc2luZ0ZsYWdzKHRlbXBDb25maWcpLmNoYXJzTGVmdE92ZXI7XG5cbiAgICAgICAgLy9vciB0b2tlbnNcbiAgICAgICAgY3VycmVudFNjb3JlICs9IGdldFBhcnNpbmdGbGFncyh0ZW1wQ29uZmlnKS51bnVzZWRUb2tlbnMubGVuZ3RoICogMTA7XG5cbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKHRlbXBDb25maWcpLnNjb3JlID0gY3VycmVudFNjb3JlO1xuXG4gICAgICAgIGlmIChzY29yZVRvQmVhdCA9PSBudWxsIHx8IGN1cnJlbnRTY29yZSA8IHNjb3JlVG9CZWF0KSB7XG4gICAgICAgICAgICBzY29yZVRvQmVhdCA9IGN1cnJlbnRTY29yZTtcbiAgICAgICAgICAgIGJlc3RNb21lbnQgPSB0ZW1wQ29uZmlnO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZXh0ZW5kKGNvbmZpZywgYmVzdE1vbWVudCB8fCB0ZW1wQ29uZmlnKTtcbn1cblxuZnVuY3Rpb24gY29uZmlnRnJvbU9iamVjdChjb25maWcpIHtcbiAgICBpZiAoY29uZmlnLl9kKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgaSA9IG5vcm1hbGl6ZU9iamVjdFVuaXRzKGNvbmZpZy5faSk7XG4gICAgY29uZmlnLl9hID0gbWFwKFtpLnllYXIsIGkubW9udGgsIGkuZGF5IHx8IGkuZGF0ZSwgaS5ob3VyLCBpLm1pbnV0ZSwgaS5zZWNvbmQsIGkubWlsbGlzZWNvbmRdLCBmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgIHJldHVybiBvYmogJiYgcGFyc2VJbnQob2JqLCAxMCk7XG4gICAgfSk7XG5cbiAgICBjb25maWdGcm9tQXJyYXkoY29uZmlnKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlRnJvbUNvbmZpZyAoY29uZmlnKSB7XG4gICAgdmFyIHJlcyA9IG5ldyBNb21lbnQoY2hlY2tPdmVyZmxvdyhwcmVwYXJlQ29uZmlnKGNvbmZpZykpKTtcbiAgICBpZiAocmVzLl9uZXh0RGF5KSB7XG4gICAgICAgIC8vIEFkZGluZyBpcyBzbWFydCBlbm91Z2ggYXJvdW5kIERTVFxuICAgICAgICByZXMuYWRkKDEsICdkJyk7XG4gICAgICAgIHJlcy5fbmV4dERheSA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzO1xufVxuXG5mdW5jdGlvbiBwcmVwYXJlQ29uZmlnIChjb25maWcpIHtcbiAgICB2YXIgaW5wdXQgPSBjb25maWcuX2ksXG4gICAgICAgIGZvcm1hdCA9IGNvbmZpZy5fZjtcblxuICAgIGNvbmZpZy5fbG9jYWxlID0gY29uZmlnLl9sb2NhbGUgfHwgZ2V0TG9jYWxlKGNvbmZpZy5fbCk7XG5cbiAgICBpZiAoaW5wdXQgPT09IG51bGwgfHwgKGZvcm1hdCA9PT0gdW5kZWZpbmVkICYmIGlucHV0ID09PSAnJykpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUludmFsaWQoe251bGxJbnB1dDogdHJ1ZX0pO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGNvbmZpZy5faSA9IGlucHV0ID0gY29uZmlnLl9sb2NhbGUucHJlcGFyc2UoaW5wdXQpO1xuICAgIH1cblxuICAgIGlmIChpc01vbWVudChpbnB1dCkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBNb21lbnQoY2hlY2tPdmVyZmxvdyhpbnB1dCkpO1xuICAgIH0gZWxzZSBpZiAoaXNEYXRlKGlucHV0KSkge1xuICAgICAgICBjb25maWcuX2QgPSBpbnB1dDtcbiAgICB9IGVsc2UgaWYgKGlzQXJyYXkoZm9ybWF0KSkge1xuICAgICAgICBjb25maWdGcm9tU3RyaW5nQW5kQXJyYXkoY29uZmlnKTtcbiAgICB9IGVsc2UgaWYgKGZvcm1hdCkge1xuICAgICAgICBjb25maWdGcm9tU3RyaW5nQW5kRm9ybWF0KGNvbmZpZyk7XG4gICAgfSAgZWxzZSB7XG4gICAgICAgIGNvbmZpZ0Zyb21JbnB1dChjb25maWcpO1xuICAgIH1cblxuICAgIGlmICghaXNWYWxpZChjb25maWcpKSB7XG4gICAgICAgIGNvbmZpZy5fZCA9IG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbmZpZztcbn1cblxuZnVuY3Rpb24gY29uZmlnRnJvbUlucHV0KGNvbmZpZykge1xuICAgIHZhciBpbnB1dCA9IGNvbmZpZy5faTtcbiAgICBpZiAoaXNVbmRlZmluZWQoaW5wdXQpKSB7XG4gICAgICAgIGNvbmZpZy5fZCA9IG5ldyBEYXRlKGhvb2tzLm5vdygpKTtcbiAgICB9IGVsc2UgaWYgKGlzRGF0ZShpbnB1dCkpIHtcbiAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUoaW5wdXQudmFsdWVPZigpKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgY29uZmlnRnJvbVN0cmluZyhjb25maWcpO1xuICAgIH0gZWxzZSBpZiAoaXNBcnJheShpbnB1dCkpIHtcbiAgICAgICAgY29uZmlnLl9hID0gbWFwKGlucHV0LnNsaWNlKDApLCBmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VJbnQob2JqLCAxMCk7XG4gICAgICAgIH0pO1xuICAgICAgICBjb25maWdGcm9tQXJyYXkoY29uZmlnKTtcbiAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KGlucHV0KSkge1xuICAgICAgICBjb25maWdGcm9tT2JqZWN0KGNvbmZpZyk7XG4gICAgfSBlbHNlIGlmIChpc051bWJlcihpbnB1dCkpIHtcbiAgICAgICAgLy8gZnJvbSBtaWxsaXNlY29uZHNcbiAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUoaW5wdXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGhvb2tzLmNyZWF0ZUZyb21JbnB1dEZhbGxiYWNrKGNvbmZpZyk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVMb2NhbE9yVVRDIChpbnB1dCwgZm9ybWF0LCBsb2NhbGUsIHN0cmljdCwgaXNVVEMpIHtcbiAgICB2YXIgYyA9IHt9O1xuXG4gICAgaWYgKGxvY2FsZSA9PT0gdHJ1ZSB8fCBsb2NhbGUgPT09IGZhbHNlKSB7XG4gICAgICAgIHN0cmljdCA9IGxvY2FsZTtcbiAgICAgICAgbG9jYWxlID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGlmICgoaXNPYmplY3QoaW5wdXQpICYmIGlzT2JqZWN0RW1wdHkoaW5wdXQpKSB8fFxuICAgICAgICAgICAgKGlzQXJyYXkoaW5wdXQpICYmIGlucHV0Lmxlbmd0aCA9PT0gMCkpIHtcbiAgICAgICAgaW5wdXQgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIC8vIG9iamVjdCBjb25zdHJ1Y3Rpb24gbXVzdCBiZSBkb25lIHRoaXMgd2F5LlxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tb21lbnQvbW9tZW50L2lzc3Vlcy8xNDIzXG4gICAgYy5faXNBTW9tZW50T2JqZWN0ID0gdHJ1ZTtcbiAgICBjLl91c2VVVEMgPSBjLl9pc1VUQyA9IGlzVVRDO1xuICAgIGMuX2wgPSBsb2NhbGU7XG4gICAgYy5faSA9IGlucHV0O1xuICAgIGMuX2YgPSBmb3JtYXQ7XG4gICAgYy5fc3RyaWN0ID0gc3RyaWN0O1xuXG4gICAgcmV0dXJuIGNyZWF0ZUZyb21Db25maWcoYyk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUxvY2FsIChpbnB1dCwgZm9ybWF0LCBsb2NhbGUsIHN0cmljdCkge1xuICAgIHJldHVybiBjcmVhdGVMb2NhbE9yVVRDKGlucHV0LCBmb3JtYXQsIGxvY2FsZSwgc3RyaWN0LCBmYWxzZSk7XG59XG5cbnZhciBwcm90b3R5cGVNaW4gPSBkZXByZWNhdGUoXG4gICAgJ21vbWVudCgpLm1pbiBpcyBkZXByZWNhdGVkLCB1c2UgbW9tZW50Lm1heCBpbnN0ZWFkLiBodHRwOi8vbW9tZW50anMuY29tL2d1aWRlcy8jL3dhcm5pbmdzL21pbi1tYXgvJyxcbiAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBvdGhlciA9IGNyZWF0ZUxvY2FsLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgICAgIGlmICh0aGlzLmlzVmFsaWQoKSAmJiBvdGhlci5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBvdGhlciA8IHRoaXMgPyB0aGlzIDogb3RoZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlSW52YWxpZCgpO1xuICAgICAgICB9XG4gICAgfVxuKTtcblxudmFyIHByb3RvdHlwZU1heCA9IGRlcHJlY2F0ZShcbiAgICAnbW9tZW50KCkubWF4IGlzIGRlcHJlY2F0ZWQsIHVzZSBtb21lbnQubWluIGluc3RlYWQuIGh0dHA6Ly9tb21lbnRqcy5jb20vZ3VpZGVzLyMvd2FybmluZ3MvbWluLW1heC8nLFxuICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG90aGVyID0gY3JlYXRlTG9jYWwuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICAgICAgaWYgKHRoaXMuaXNWYWxpZCgpICYmIG90aGVyLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIG90aGVyID4gdGhpcyA/IHRoaXMgOiBvdGhlcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVJbnZhbGlkKCk7XG4gICAgICAgIH1cbiAgICB9XG4pO1xuXG4vLyBQaWNrIGEgbW9tZW50IG0gZnJvbSBtb21lbnRzIHNvIHRoYXQgbVtmbl0ob3RoZXIpIGlzIHRydWUgZm9yIGFsbFxuLy8gb3RoZXIuIFRoaXMgcmVsaWVzIG9uIHRoZSBmdW5jdGlvbiBmbiB0byBiZSB0cmFuc2l0aXZlLlxuLy9cbi8vIG1vbWVudHMgc2hvdWxkIGVpdGhlciBiZSBhbiBhcnJheSBvZiBtb21lbnQgb2JqZWN0cyBvciBhbiBhcnJheSwgd2hvc2Vcbi8vIGZpcnN0IGVsZW1lbnQgaXMgYW4gYXJyYXkgb2YgbW9tZW50IG9iamVjdHMuXG5mdW5jdGlvbiBwaWNrQnkoZm4sIG1vbWVudHMpIHtcbiAgICB2YXIgcmVzLCBpO1xuICAgIGlmIChtb21lbnRzLmxlbmd0aCA9PT0gMSAmJiBpc0FycmF5KG1vbWVudHNbMF0pKSB7XG4gICAgICAgIG1vbWVudHMgPSBtb21lbnRzWzBdO1xuICAgIH1cbiAgICBpZiAoIW1vbWVudHMubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVMb2NhbCgpO1xuICAgIH1cbiAgICByZXMgPSBtb21lbnRzWzBdO1xuICAgIGZvciAoaSA9IDE7IGkgPCBtb21lbnRzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGlmICghbW9tZW50c1tpXS5pc1ZhbGlkKCkgfHwgbW9tZW50c1tpXVtmbl0ocmVzKSkge1xuICAgICAgICAgICAgcmVzID0gbW9tZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzO1xufVxuXG4vLyBUT0RPOiBVc2UgW10uc29ydCBpbnN0ZWFkP1xuZnVuY3Rpb24gbWluICgpIHtcbiAgICB2YXIgYXJncyA9IFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKTtcblxuICAgIHJldHVybiBwaWNrQnkoJ2lzQmVmb3JlJywgYXJncyk7XG59XG5cbmZ1bmN0aW9uIG1heCAoKSB7XG4gICAgdmFyIGFyZ3MgPSBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMCk7XG5cbiAgICByZXR1cm4gcGlja0J5KCdpc0FmdGVyJywgYXJncyk7XG59XG5cbnZhciBub3cgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIERhdGUubm93ID8gRGF0ZS5ub3coKSA6ICsobmV3IERhdGUoKSk7XG59O1xuXG52YXIgb3JkZXJpbmcgPSBbJ3llYXInLCAncXVhcnRlcicsICdtb250aCcsICd3ZWVrJywgJ2RheScsICdob3VyJywgJ21pbnV0ZScsICdzZWNvbmQnLCAnbWlsbGlzZWNvbmQnXTtcblxuZnVuY3Rpb24gaXNEdXJhdGlvblZhbGlkKG0pIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gbSkge1xuICAgICAgICBpZiAoIShpbmRleE9mLmNhbGwob3JkZXJpbmcsIGtleSkgIT09IC0xICYmIChtW2tleV0gPT0gbnVsbCB8fCAhaXNOYU4obVtrZXldKSkpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgdW5pdEhhc0RlY2ltYWwgPSBmYWxzZTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9yZGVyaW5nLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGlmIChtW29yZGVyaW5nW2ldXSkge1xuICAgICAgICAgICAgaWYgKHVuaXRIYXNEZWNpbWFsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOyAvLyBvbmx5IGFsbG93IG5vbi1pbnRlZ2VycyBmb3Igc21hbGxlc3QgdW5pdFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHBhcnNlRmxvYXQobVtvcmRlcmluZ1tpXV0pICE9PSB0b0ludChtW29yZGVyaW5nW2ldXSkpIHtcbiAgICAgICAgICAgICAgICB1bml0SGFzRGVjaW1hbCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gaXNWYWxpZCQxKCkge1xuICAgIHJldHVybiB0aGlzLl9pc1ZhbGlkO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVJbnZhbGlkJDEoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUR1cmF0aW9uKE5hTik7XG59XG5cbmZ1bmN0aW9uIER1cmF0aW9uIChkdXJhdGlvbikge1xuICAgIHZhciBub3JtYWxpemVkSW5wdXQgPSBub3JtYWxpemVPYmplY3RVbml0cyhkdXJhdGlvbiksXG4gICAgICAgIHllYXJzID0gbm9ybWFsaXplZElucHV0LnllYXIgfHwgMCxcbiAgICAgICAgcXVhcnRlcnMgPSBub3JtYWxpemVkSW5wdXQucXVhcnRlciB8fCAwLFxuICAgICAgICBtb250aHMgPSBub3JtYWxpemVkSW5wdXQubW9udGggfHwgMCxcbiAgICAgICAgd2Vla3MgPSBub3JtYWxpemVkSW5wdXQud2VlayB8fCAwLFxuICAgICAgICBkYXlzID0gbm9ybWFsaXplZElucHV0LmRheSB8fCAwLFxuICAgICAgICBob3VycyA9IG5vcm1hbGl6ZWRJbnB1dC5ob3VyIHx8IDAsXG4gICAgICAgIG1pbnV0ZXMgPSBub3JtYWxpemVkSW5wdXQubWludXRlIHx8IDAsXG4gICAgICAgIHNlY29uZHMgPSBub3JtYWxpemVkSW5wdXQuc2Vjb25kIHx8IDAsXG4gICAgICAgIG1pbGxpc2Vjb25kcyA9IG5vcm1hbGl6ZWRJbnB1dC5taWxsaXNlY29uZCB8fCAwO1xuXG4gICAgdGhpcy5faXNWYWxpZCA9IGlzRHVyYXRpb25WYWxpZChub3JtYWxpemVkSW5wdXQpO1xuXG4gICAgLy8gcmVwcmVzZW50YXRpb24gZm9yIGRhdGVBZGRSZW1vdmVcbiAgICB0aGlzLl9taWxsaXNlY29uZHMgPSArbWlsbGlzZWNvbmRzICtcbiAgICAgICAgc2Vjb25kcyAqIDFlMyArIC8vIDEwMDBcbiAgICAgICAgbWludXRlcyAqIDZlNCArIC8vIDEwMDAgKiA2MFxuICAgICAgICBob3VycyAqIDEwMDAgKiA2MCAqIDYwOyAvL3VzaW5nIDEwMDAgKiA2MCAqIDYwIGluc3RlYWQgb2YgMzZlNSB0byBhdm9pZCBmbG9hdGluZyBwb2ludCByb3VuZGluZyBlcnJvcnMgaHR0cHM6Ly9naXRodWIuY29tL21vbWVudC9tb21lbnQvaXNzdWVzLzI5NzhcbiAgICAvLyBCZWNhdXNlIG9mIGRhdGVBZGRSZW1vdmUgdHJlYXRzIDI0IGhvdXJzIGFzIGRpZmZlcmVudCBmcm9tIGFcbiAgICAvLyBkYXkgd2hlbiB3b3JraW5nIGFyb3VuZCBEU1QsIHdlIG5lZWQgdG8gc3RvcmUgdGhlbSBzZXBhcmF0ZWx5XG4gICAgdGhpcy5fZGF5cyA9ICtkYXlzICtcbiAgICAgICAgd2Vla3MgKiA3O1xuICAgIC8vIEl0IGlzIGltcG9zc2libGUgdG8gdHJhbnNsYXRlIG1vbnRocyBpbnRvIGRheXMgd2l0aG91dCBrbm93aW5nXG4gICAgLy8gd2hpY2ggbW9udGhzIHlvdSBhcmUgYXJlIHRhbGtpbmcgYWJvdXQsIHNvIHdlIGhhdmUgdG8gc3RvcmVcbiAgICAvLyBpdCBzZXBhcmF0ZWx5LlxuICAgIHRoaXMuX21vbnRocyA9ICttb250aHMgK1xuICAgICAgICBxdWFydGVycyAqIDMgK1xuICAgICAgICB5ZWFycyAqIDEyO1xuXG4gICAgdGhpcy5fZGF0YSA9IHt9O1xuXG4gICAgdGhpcy5fbG9jYWxlID0gZ2V0TG9jYWxlKCk7XG5cbiAgICB0aGlzLl9idWJibGUoKTtcbn1cblxuZnVuY3Rpb24gaXNEdXJhdGlvbiAob2JqKSB7XG4gICAgcmV0dXJuIG9iaiBpbnN0YW5jZW9mIER1cmF0aW9uO1xufVxuXG5mdW5jdGlvbiBhYnNSb3VuZCAobnVtYmVyKSB7XG4gICAgaWYgKG51bWJlciA8IDApIHtcbiAgICAgICAgcmV0dXJuIE1hdGgucm91bmQoLTEgKiBudW1iZXIpICogLTE7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIE1hdGgucm91bmQobnVtYmVyKTtcbiAgICB9XG59XG5cbi8vIEZPUk1BVFRJTkdcblxuZnVuY3Rpb24gb2Zmc2V0ICh0b2tlbiwgc2VwYXJhdG9yKSB7XG4gICAgYWRkRm9ybWF0VG9rZW4odG9rZW4sIDAsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG9mZnNldCA9IHRoaXMudXRjT2Zmc2V0KCk7XG4gICAgICAgIHZhciBzaWduID0gJysnO1xuICAgICAgICBpZiAob2Zmc2V0IDwgMCkge1xuICAgICAgICAgICAgb2Zmc2V0ID0gLW9mZnNldDtcbiAgICAgICAgICAgIHNpZ24gPSAnLSc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNpZ24gKyB6ZXJvRmlsbCh+fihvZmZzZXQgLyA2MCksIDIpICsgc2VwYXJhdG9yICsgemVyb0ZpbGwofn4ob2Zmc2V0KSAlIDYwLCAyKTtcbiAgICB9KTtcbn1cblxub2Zmc2V0KCdaJywgJzonKTtcbm9mZnNldCgnWlonLCAnJyk7XG5cbi8vIFBBUlNJTkdcblxuYWRkUmVnZXhUb2tlbignWicsICBtYXRjaFNob3J0T2Zmc2V0KTtcbmFkZFJlZ2V4VG9rZW4oJ1paJywgbWF0Y2hTaG9ydE9mZnNldCk7XG5hZGRQYXJzZVRva2VuKFsnWicsICdaWiddLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICBjb25maWcuX3VzZVVUQyA9IHRydWU7XG4gICAgY29uZmlnLl90em0gPSBvZmZzZXRGcm9tU3RyaW5nKG1hdGNoU2hvcnRPZmZzZXQsIGlucHV0KTtcbn0pO1xuXG4vLyBIRUxQRVJTXG5cbi8vIHRpbWV6b25lIGNodW5rZXJcbi8vICcrMTA6MDAnID4gWycxMCcsICAnMDAnXVxuLy8gJy0xNTMwJyAgPiBbJy0xNScsICczMCddXG52YXIgY2h1bmtPZmZzZXQgPSAvKFtcXCtcXC1dfFxcZFxcZCkvZ2k7XG5cbmZ1bmN0aW9uIG9mZnNldEZyb21TdHJpbmcobWF0Y2hlciwgc3RyaW5nKSB7XG4gICAgdmFyIG1hdGNoZXMgPSAoc3RyaW5nIHx8ICcnKS5tYXRjaChtYXRjaGVyKTtcblxuICAgIGlmIChtYXRjaGVzID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHZhciBjaHVuayAgID0gbWF0Y2hlc1ttYXRjaGVzLmxlbmd0aCAtIDFdIHx8IFtdO1xuICAgIHZhciBwYXJ0cyAgID0gKGNodW5rICsgJycpLm1hdGNoKGNodW5rT2Zmc2V0KSB8fCBbJy0nLCAwLCAwXTtcbiAgICB2YXIgbWludXRlcyA9ICsocGFydHNbMV0gKiA2MCkgKyB0b0ludChwYXJ0c1syXSk7XG5cbiAgICByZXR1cm4gbWludXRlcyA9PT0gMCA/XG4gICAgICAwIDpcbiAgICAgIHBhcnRzWzBdID09PSAnKycgPyBtaW51dGVzIDogLW1pbnV0ZXM7XG59XG5cbi8vIFJldHVybiBhIG1vbWVudCBmcm9tIGlucHV0LCB0aGF0IGlzIGxvY2FsL3V0Yy96b25lIGVxdWl2YWxlbnQgdG8gbW9kZWwuXG5mdW5jdGlvbiBjbG9uZVdpdGhPZmZzZXQoaW5wdXQsIG1vZGVsKSB7XG4gICAgdmFyIHJlcywgZGlmZjtcbiAgICBpZiAobW9kZWwuX2lzVVRDKSB7XG4gICAgICAgIHJlcyA9IG1vZGVsLmNsb25lKCk7XG4gICAgICAgIGRpZmYgPSAoaXNNb21lbnQoaW5wdXQpIHx8IGlzRGF0ZShpbnB1dCkgPyBpbnB1dC52YWx1ZU9mKCkgOiBjcmVhdGVMb2NhbChpbnB1dCkudmFsdWVPZigpKSAtIHJlcy52YWx1ZU9mKCk7XG4gICAgICAgIC8vIFVzZSBsb3ctbGV2ZWwgYXBpLCBiZWNhdXNlIHRoaXMgZm4gaXMgbG93LWxldmVsIGFwaS5cbiAgICAgICAgcmVzLl9kLnNldFRpbWUocmVzLl9kLnZhbHVlT2YoKSArIGRpZmYpO1xuICAgICAgICBob29rcy51cGRhdGVPZmZzZXQocmVzLCBmYWxzZSk7XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUxvY2FsKGlucHV0KS5sb2NhbCgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZ2V0RGF0ZU9mZnNldCAobSkge1xuICAgIC8vIE9uIEZpcmVmb3guMjQgRGF0ZSNnZXRUaW1lem9uZU9mZnNldCByZXR1cm5zIGEgZmxvYXRpbmcgcG9pbnQuXG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL21vbWVudC9tb21lbnQvcHVsbC8xODcxXG4gICAgcmV0dXJuIC1NYXRoLnJvdW5kKG0uX2QuZ2V0VGltZXpvbmVPZmZzZXQoKSAvIDE1KSAqIDE1O1xufVxuXG4vLyBIT09LU1xuXG4vLyBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgY2FsbGVkIHdoZW5ldmVyIGEgbW9tZW50IGlzIG11dGF0ZWQuXG4vLyBJdCBpcyBpbnRlbmRlZCB0byBrZWVwIHRoZSBvZmZzZXQgaW4gc3luYyB3aXRoIHRoZSB0aW1lem9uZS5cbmhvb2tzLnVwZGF0ZU9mZnNldCA9IGZ1bmN0aW9uICgpIHt9O1xuXG4vLyBNT01FTlRTXG5cbi8vIGtlZXBMb2NhbFRpbWUgPSB0cnVlIG1lYW5zIG9ubHkgY2hhbmdlIHRoZSB0aW1lem9uZSwgd2l0aG91dFxuLy8gYWZmZWN0aW5nIHRoZSBsb2NhbCBob3VyLiBTbyA1OjMxOjI2ICswMzAwIC0tW3V0Y09mZnNldCgyLCB0cnVlKV0tLT5cbi8vIDU6MzE6MjYgKzAyMDAgSXQgaXMgcG9zc2libGUgdGhhdCA1OjMxOjI2IGRvZXNuJ3QgZXhpc3Qgd2l0aCBvZmZzZXRcbi8vICswMjAwLCBzbyB3ZSBhZGp1c3QgdGhlIHRpbWUgYXMgbmVlZGVkLCB0byBiZSB2YWxpZC5cbi8vXG4vLyBLZWVwaW5nIHRoZSB0aW1lIGFjdHVhbGx5IGFkZHMvc3VidHJhY3RzIChvbmUgaG91cilcbi8vIGZyb20gdGhlIGFjdHVhbCByZXByZXNlbnRlZCB0aW1lLiBUaGF0IGlzIHdoeSB3ZSBjYWxsIHVwZGF0ZU9mZnNldFxuLy8gYSBzZWNvbmQgdGltZS4gSW4gY2FzZSBpdCB3YW50cyB1cyB0byBjaGFuZ2UgdGhlIG9mZnNldCBhZ2FpblxuLy8gX2NoYW5nZUluUHJvZ3Jlc3MgPT0gdHJ1ZSBjYXNlLCB0aGVuIHdlIGhhdmUgdG8gYWRqdXN0LCBiZWNhdXNlXG4vLyB0aGVyZSBpcyBubyBzdWNoIHRpbWUgaW4gdGhlIGdpdmVuIHRpbWV6b25lLlxuZnVuY3Rpb24gZ2V0U2V0T2Zmc2V0IChpbnB1dCwga2VlcExvY2FsVGltZSwga2VlcE1pbnV0ZXMpIHtcbiAgICB2YXIgb2Zmc2V0ID0gdGhpcy5fb2Zmc2V0IHx8IDAsXG4gICAgICAgIGxvY2FsQWRqdXN0O1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgcmV0dXJuIGlucHV0ICE9IG51bGwgPyB0aGlzIDogTmFOO1xuICAgIH1cbiAgICBpZiAoaW5wdXQgIT0gbnVsbCkge1xuICAgICAgICBpZiAodHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgaW5wdXQgPSBvZmZzZXRGcm9tU3RyaW5nKG1hdGNoU2hvcnRPZmZzZXQsIGlucHV0KTtcbiAgICAgICAgICAgIGlmIChpbnB1dCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKE1hdGguYWJzKGlucHV0KSA8IDE2ICYmICFrZWVwTWludXRlcykge1xuICAgICAgICAgICAgaW5wdXQgPSBpbnB1dCAqIDYwO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5faXNVVEMgJiYga2VlcExvY2FsVGltZSkge1xuICAgICAgICAgICAgbG9jYWxBZGp1c3QgPSBnZXREYXRlT2Zmc2V0KHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX29mZnNldCA9IGlucHV0O1xuICAgICAgICB0aGlzLl9pc1VUQyA9IHRydWU7XG4gICAgICAgIGlmIChsb2NhbEFkanVzdCAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmFkZChsb2NhbEFkanVzdCwgJ20nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob2Zmc2V0ICE9PSBpbnB1dCkge1xuICAgICAgICAgICAgaWYgKCFrZWVwTG9jYWxUaW1lIHx8IHRoaXMuX2NoYW5nZUluUHJvZ3Jlc3MpIHtcbiAgICAgICAgICAgICAgICBhZGRTdWJ0cmFjdCh0aGlzLCBjcmVhdGVEdXJhdGlvbihpbnB1dCAtIG9mZnNldCwgJ20nKSwgMSwgZmFsc2UpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICghdGhpcy5fY2hhbmdlSW5Qcm9ncmVzcykge1xuICAgICAgICAgICAgICAgIHRoaXMuX2NoYW5nZUluUHJvZ3Jlc3MgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGhvb2tzLnVwZGF0ZU9mZnNldCh0aGlzLCB0cnVlKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9jaGFuZ2VJblByb2dyZXNzID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGhpcy5faXNVVEMgPyBvZmZzZXQgOiBnZXREYXRlT2Zmc2V0KHRoaXMpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZ2V0U2V0Wm9uZSAoaW5wdXQsIGtlZXBMb2NhbFRpbWUpIHtcbiAgICBpZiAoaW5wdXQgIT0gbnVsbCkge1xuICAgICAgICBpZiAodHlwZW9mIGlucHV0ICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgaW5wdXQgPSAtaW5wdXQ7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnV0Y09mZnNldChpbnB1dCwga2VlcExvY2FsVGltZSk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIC10aGlzLnV0Y09mZnNldCgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gc2V0T2Zmc2V0VG9VVEMgKGtlZXBMb2NhbFRpbWUpIHtcbiAgICByZXR1cm4gdGhpcy51dGNPZmZzZXQoMCwga2VlcExvY2FsVGltZSk7XG59XG5cbmZ1bmN0aW9uIHNldE9mZnNldFRvTG9jYWwgKGtlZXBMb2NhbFRpbWUpIHtcbiAgICBpZiAodGhpcy5faXNVVEMpIHtcbiAgICAgICAgdGhpcy51dGNPZmZzZXQoMCwga2VlcExvY2FsVGltZSk7XG4gICAgICAgIHRoaXMuX2lzVVRDID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKGtlZXBMb2NhbFRpbWUpIHtcbiAgICAgICAgICAgIHRoaXMuc3VidHJhY3QoZ2V0RGF0ZU9mZnNldCh0aGlzKSwgJ20nKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gc2V0T2Zmc2V0VG9QYXJzZWRPZmZzZXQgKCkge1xuICAgIGlmICh0aGlzLl90em0gIT0gbnVsbCkge1xuICAgICAgICB0aGlzLnV0Y09mZnNldCh0aGlzLl90em0sIGZhbHNlLCB0cnVlKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB0aGlzLl9pID09PSAnc3RyaW5nJykge1xuICAgICAgICB2YXIgdFpvbmUgPSBvZmZzZXRGcm9tU3RyaW5nKG1hdGNoT2Zmc2V0LCB0aGlzLl9pKTtcbiAgICAgICAgaWYgKHRab25lICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMudXRjT2Zmc2V0KHRab25lKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMudXRjT2Zmc2V0KDAsIHRydWUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiBoYXNBbGlnbmVkSG91ck9mZnNldCAoaW5wdXQpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaW5wdXQgPSBpbnB1dCA/IGNyZWF0ZUxvY2FsKGlucHV0KS51dGNPZmZzZXQoKSA6IDA7XG5cbiAgICByZXR1cm4gKHRoaXMudXRjT2Zmc2V0KCkgLSBpbnB1dCkgJSA2MCA9PT0gMDtcbn1cblxuZnVuY3Rpb24gaXNEYXlsaWdodFNhdmluZ1RpbWUgKCkge1xuICAgIHJldHVybiAoXG4gICAgICAgIHRoaXMudXRjT2Zmc2V0KCkgPiB0aGlzLmNsb25lKCkubW9udGgoMCkudXRjT2Zmc2V0KCkgfHxcbiAgICAgICAgdGhpcy51dGNPZmZzZXQoKSA+IHRoaXMuY2xvbmUoKS5tb250aCg1KS51dGNPZmZzZXQoKVxuICAgICk7XG59XG5cbmZ1bmN0aW9uIGlzRGF5bGlnaHRTYXZpbmdUaW1lU2hpZnRlZCAoKSB7XG4gICAgaWYgKCFpc1VuZGVmaW5lZCh0aGlzLl9pc0RTVFNoaWZ0ZWQpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pc0RTVFNoaWZ0ZWQ7XG4gICAgfVxuXG4gICAgdmFyIGMgPSB7fTtcblxuICAgIGNvcHlDb25maWcoYywgdGhpcyk7XG4gICAgYyA9IHByZXBhcmVDb25maWcoYyk7XG5cbiAgICBpZiAoYy5fYSkge1xuICAgICAgICB2YXIgb3RoZXIgPSBjLl9pc1VUQyA/IGNyZWF0ZVVUQyhjLl9hKSA6IGNyZWF0ZUxvY2FsKGMuX2EpO1xuICAgICAgICB0aGlzLl9pc0RTVFNoaWZ0ZWQgPSB0aGlzLmlzVmFsaWQoKSAmJlxuICAgICAgICAgICAgY29tcGFyZUFycmF5cyhjLl9hLCBvdGhlci50b0FycmF5KCkpID4gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9pc0RTVFNoaWZ0ZWQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5faXNEU1RTaGlmdGVkO1xufVxuXG5mdW5jdGlvbiBpc0xvY2FsICgpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkKCkgPyAhdGhpcy5faXNVVEMgOiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNVdGNPZmZzZXQgKCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQoKSA/IHRoaXMuX2lzVVRDIDogZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzVXRjICgpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkKCkgPyB0aGlzLl9pc1VUQyAmJiB0aGlzLl9vZmZzZXQgPT09IDAgOiBmYWxzZTtcbn1cblxuLy8gQVNQLk5FVCBqc29uIGRhdGUgZm9ybWF0IHJlZ2V4XG52YXIgYXNwTmV0UmVnZXggPSAvXihcXC18XFwrKT8oPzooXFxkKilbLiBdKT8oXFxkKylcXDooXFxkKykoPzpcXDooXFxkKykoXFwuXFxkKik/KT8kLztcblxuLy8gZnJvbSBodHRwOi8vZG9jcy5jbG9zdXJlLWxpYnJhcnkuZ29vZ2xlY29kZS5jb20vZ2l0L2Nsb3N1cmVfZ29vZ19kYXRlX2RhdGUuanMuc291cmNlLmh0bWxcbi8vIHNvbWV3aGF0IG1vcmUgaW4gbGluZSB3aXRoIDQuNC4zLjIgMjAwNCBzcGVjLCBidXQgYWxsb3dzIGRlY2ltYWwgYW55d2hlcmVcbi8vIGFuZCBmdXJ0aGVyIG1vZGlmaWVkIHRvIGFsbG93IGZvciBzdHJpbmdzIGNvbnRhaW5pbmcgYm90aCB3ZWVrIGFuZCBkYXlcbnZhciBpc29SZWdleCA9IC9eKC18XFwrKT9QKD86KFstK10/WzAtOSwuXSopWSk/KD86KFstK10/WzAtOSwuXSopTSk/KD86KFstK10/WzAtOSwuXSopVyk/KD86KFstK10/WzAtOSwuXSopRCk/KD86VCg/OihbLStdP1swLTksLl0qKUgpPyg/OihbLStdP1swLTksLl0qKU0pPyg/OihbLStdP1swLTksLl0qKVMpPyk/JC87XG5cbmZ1bmN0aW9uIGNyZWF0ZUR1cmF0aW9uIChpbnB1dCwga2V5KSB7XG4gICAgdmFyIGR1cmF0aW9uID0gaW5wdXQsXG4gICAgICAgIC8vIG1hdGNoaW5nIGFnYWluc3QgcmVnZXhwIGlzIGV4cGVuc2l2ZSwgZG8gaXQgb24gZGVtYW5kXG4gICAgICAgIG1hdGNoID0gbnVsbCxcbiAgICAgICAgc2lnbixcbiAgICAgICAgcmV0LFxuICAgICAgICBkaWZmUmVzO1xuXG4gICAgaWYgKGlzRHVyYXRpb24oaW5wdXQpKSB7XG4gICAgICAgIGR1cmF0aW9uID0ge1xuICAgICAgICAgICAgbXMgOiBpbnB1dC5fbWlsbGlzZWNvbmRzLFxuICAgICAgICAgICAgZCAgOiBpbnB1dC5fZGF5cyxcbiAgICAgICAgICAgIE0gIDogaW5wdXQuX21vbnRoc1xuICAgICAgICB9O1xuICAgIH0gZWxzZSBpZiAoaXNOdW1iZXIoaW5wdXQpKSB7XG4gICAgICAgIGR1cmF0aW9uID0ge307XG4gICAgICAgIGlmIChrZXkpIHtcbiAgICAgICAgICAgIGR1cmF0aW9uW2tleV0gPSBpbnB1dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGR1cmF0aW9uLm1pbGxpc2Vjb25kcyA9IGlucHV0O1xuICAgICAgICB9XG4gICAgfSBlbHNlIGlmICghIShtYXRjaCA9IGFzcE5ldFJlZ2V4LmV4ZWMoaW5wdXQpKSkge1xuICAgICAgICBzaWduID0gKG1hdGNoWzFdID09PSAnLScpID8gLTEgOiAxO1xuICAgICAgICBkdXJhdGlvbiA9IHtcbiAgICAgICAgICAgIHkgIDogMCxcbiAgICAgICAgICAgIGQgIDogdG9JbnQobWF0Y2hbREFURV0pICAgICAgICAgICAgICAgICAgICAgICAgICogc2lnbixcbiAgICAgICAgICAgIGggIDogdG9JbnQobWF0Y2hbSE9VUl0pICAgICAgICAgICAgICAgICAgICAgICAgICogc2lnbixcbiAgICAgICAgICAgIG0gIDogdG9JbnQobWF0Y2hbTUlOVVRFXSkgICAgICAgICAgICAgICAgICAgICAgICogc2lnbixcbiAgICAgICAgICAgIHMgIDogdG9JbnQobWF0Y2hbU0VDT05EXSkgICAgICAgICAgICAgICAgICAgICAgICogc2lnbixcbiAgICAgICAgICAgIG1zIDogdG9JbnQoYWJzUm91bmQobWF0Y2hbTUlMTElTRUNPTkRdICogMTAwMCkpICogc2lnbiAvLyB0aGUgbWlsbGlzZWNvbmQgZGVjaW1hbCBwb2ludCBpcyBpbmNsdWRlZCBpbiB0aGUgbWF0Y2hcbiAgICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKCEhKG1hdGNoID0gaXNvUmVnZXguZXhlYyhpbnB1dCkpKSB7XG4gICAgICAgIHNpZ24gPSAobWF0Y2hbMV0gPT09ICctJykgPyAtMSA6IChtYXRjaFsxXSA9PT0gJysnKSA/IDEgOiAxO1xuICAgICAgICBkdXJhdGlvbiA9IHtcbiAgICAgICAgICAgIHkgOiBwYXJzZUlzbyhtYXRjaFsyXSwgc2lnbiksXG4gICAgICAgICAgICBNIDogcGFyc2VJc28obWF0Y2hbM10sIHNpZ24pLFxuICAgICAgICAgICAgdyA6IHBhcnNlSXNvKG1hdGNoWzRdLCBzaWduKSxcbiAgICAgICAgICAgIGQgOiBwYXJzZUlzbyhtYXRjaFs1XSwgc2lnbiksXG4gICAgICAgICAgICBoIDogcGFyc2VJc28obWF0Y2hbNl0sIHNpZ24pLFxuICAgICAgICAgICAgbSA6IHBhcnNlSXNvKG1hdGNoWzddLCBzaWduKSxcbiAgICAgICAgICAgIHMgOiBwYXJzZUlzbyhtYXRjaFs4XSwgc2lnbilcbiAgICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKGR1cmF0aW9uID09IG51bGwpIHsvLyBjaGVja3MgZm9yIG51bGwgb3IgdW5kZWZpbmVkXG4gICAgICAgIGR1cmF0aW9uID0ge307XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZHVyYXRpb24gPT09ICdvYmplY3QnICYmICgnZnJvbScgaW4gZHVyYXRpb24gfHwgJ3RvJyBpbiBkdXJhdGlvbikpIHtcbiAgICAgICAgZGlmZlJlcyA9IG1vbWVudHNEaWZmZXJlbmNlKGNyZWF0ZUxvY2FsKGR1cmF0aW9uLmZyb20pLCBjcmVhdGVMb2NhbChkdXJhdGlvbi50bykpO1xuXG4gICAgICAgIGR1cmF0aW9uID0ge307XG4gICAgICAgIGR1cmF0aW9uLm1zID0gZGlmZlJlcy5taWxsaXNlY29uZHM7XG4gICAgICAgIGR1cmF0aW9uLk0gPSBkaWZmUmVzLm1vbnRocztcbiAgICB9XG5cbiAgICByZXQgPSBuZXcgRHVyYXRpb24oZHVyYXRpb24pO1xuXG4gICAgaWYgKGlzRHVyYXRpb24oaW5wdXQpICYmIGhhc093blByb3AoaW5wdXQsICdfbG9jYWxlJykpIHtcbiAgICAgICAgcmV0Ll9sb2NhbGUgPSBpbnB1dC5fbG9jYWxlO1xuICAgIH1cblxuICAgIHJldHVybiByZXQ7XG59XG5cbmNyZWF0ZUR1cmF0aW9uLmZuID0gRHVyYXRpb24ucHJvdG90eXBlO1xuY3JlYXRlRHVyYXRpb24uaW52YWxpZCA9IGNyZWF0ZUludmFsaWQkMTtcblxuZnVuY3Rpb24gcGFyc2VJc28gKGlucCwgc2lnbikge1xuICAgIC8vIFdlJ2Qgbm9ybWFsbHkgdXNlIH5+aW5wIGZvciB0aGlzLCBidXQgdW5mb3J0dW5hdGVseSBpdCBhbHNvXG4gICAgLy8gY29udmVydHMgZmxvYXRzIHRvIGludHMuXG4gICAgLy8gaW5wIG1heSBiZSB1bmRlZmluZWQsIHNvIGNhcmVmdWwgY2FsbGluZyByZXBsYWNlIG9uIGl0LlxuICAgIHZhciByZXMgPSBpbnAgJiYgcGFyc2VGbG9hdChpbnAucmVwbGFjZSgnLCcsICcuJykpO1xuICAgIC8vIGFwcGx5IHNpZ24gd2hpbGUgd2UncmUgYXQgaXRcbiAgICByZXR1cm4gKGlzTmFOKHJlcykgPyAwIDogcmVzKSAqIHNpZ247XG59XG5cbmZ1bmN0aW9uIHBvc2l0aXZlTW9tZW50c0RpZmZlcmVuY2UoYmFzZSwgb3RoZXIpIHtcbiAgICB2YXIgcmVzID0ge21pbGxpc2Vjb25kczogMCwgbW9udGhzOiAwfTtcblxuICAgIHJlcy5tb250aHMgPSBvdGhlci5tb250aCgpIC0gYmFzZS5tb250aCgpICtcbiAgICAgICAgKG90aGVyLnllYXIoKSAtIGJhc2UueWVhcigpKSAqIDEyO1xuICAgIGlmIChiYXNlLmNsb25lKCkuYWRkKHJlcy5tb250aHMsICdNJykuaXNBZnRlcihvdGhlcikpIHtcbiAgICAgICAgLS1yZXMubW9udGhzO1xuICAgIH1cblxuICAgIHJlcy5taWxsaXNlY29uZHMgPSArb3RoZXIgLSArKGJhc2UuY2xvbmUoKS5hZGQocmVzLm1vbnRocywgJ00nKSk7XG5cbiAgICByZXR1cm4gcmVzO1xufVxuXG5mdW5jdGlvbiBtb21lbnRzRGlmZmVyZW5jZShiYXNlLCBvdGhlcikge1xuICAgIHZhciByZXM7XG4gICAgaWYgKCEoYmFzZS5pc1ZhbGlkKCkgJiYgb3RoZXIuaXNWYWxpZCgpKSkge1xuICAgICAgICByZXR1cm4ge21pbGxpc2Vjb25kczogMCwgbW9udGhzOiAwfTtcbiAgICB9XG5cbiAgICBvdGhlciA9IGNsb25lV2l0aE9mZnNldChvdGhlciwgYmFzZSk7XG4gICAgaWYgKGJhc2UuaXNCZWZvcmUob3RoZXIpKSB7XG4gICAgICAgIHJlcyA9IHBvc2l0aXZlTW9tZW50c0RpZmZlcmVuY2UoYmFzZSwgb3RoZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJlcyA9IHBvc2l0aXZlTW9tZW50c0RpZmZlcmVuY2Uob3RoZXIsIGJhc2UpO1xuICAgICAgICByZXMubWlsbGlzZWNvbmRzID0gLXJlcy5taWxsaXNlY29uZHM7XG4gICAgICAgIHJlcy5tb250aHMgPSAtcmVzLm1vbnRocztcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzO1xufVxuXG4vLyBUT0RPOiByZW1vdmUgJ25hbWUnIGFyZyBhZnRlciBkZXByZWNhdGlvbiBpcyByZW1vdmVkXG5mdW5jdGlvbiBjcmVhdGVBZGRlcihkaXJlY3Rpb24sIG5hbWUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHZhbCwgcGVyaW9kKSB7XG4gICAgICAgIHZhciBkdXIsIHRtcDtcbiAgICAgICAgLy9pbnZlcnQgdGhlIGFyZ3VtZW50cywgYnV0IGNvbXBsYWluIGFib3V0IGl0XG4gICAgICAgIGlmIChwZXJpb2QgIT09IG51bGwgJiYgIWlzTmFOKCtwZXJpb2QpKSB7XG4gICAgICAgICAgICBkZXByZWNhdGVTaW1wbGUobmFtZSwgJ21vbWVudCgpLicgKyBuYW1lICArICcocGVyaW9kLCBudW1iZXIpIGlzIGRlcHJlY2F0ZWQuIFBsZWFzZSB1c2UgbW9tZW50KCkuJyArIG5hbWUgKyAnKG51bWJlciwgcGVyaW9kKS4gJyArXG4gICAgICAgICAgICAnU2VlIGh0dHA6Ly9tb21lbnRqcy5jb20vZ3VpZGVzLyMvd2FybmluZ3MvYWRkLWludmVydGVkLXBhcmFtLyBmb3IgbW9yZSBpbmZvLicpO1xuICAgICAgICAgICAgdG1wID0gdmFsOyB2YWwgPSBwZXJpb2Q7IHBlcmlvZCA9IHRtcDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhbCA9IHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnID8gK3ZhbCA6IHZhbDtcbiAgICAgICAgZHVyID0gY3JlYXRlRHVyYXRpb24odmFsLCBwZXJpb2QpO1xuICAgICAgICBhZGRTdWJ0cmFjdCh0aGlzLCBkdXIsIGRpcmVjdGlvbik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG59XG5cbmZ1bmN0aW9uIGFkZFN1YnRyYWN0IChtb20sIGR1cmF0aW9uLCBpc0FkZGluZywgdXBkYXRlT2Zmc2V0KSB7XG4gICAgdmFyIG1pbGxpc2Vjb25kcyA9IGR1cmF0aW9uLl9taWxsaXNlY29uZHMsXG4gICAgICAgIGRheXMgPSBhYnNSb3VuZChkdXJhdGlvbi5fZGF5cyksXG4gICAgICAgIG1vbnRocyA9IGFic1JvdW5kKGR1cmF0aW9uLl9tb250aHMpO1xuXG4gICAgaWYgKCFtb20uaXNWYWxpZCgpKSB7XG4gICAgICAgIC8vIE5vIG9wXG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB1cGRhdGVPZmZzZXQgPSB1cGRhdGVPZmZzZXQgPT0gbnVsbCA/IHRydWUgOiB1cGRhdGVPZmZzZXQ7XG5cbiAgICBpZiAobW9udGhzKSB7XG4gICAgICAgIHNldE1vbnRoKG1vbSwgZ2V0KG1vbSwgJ01vbnRoJykgKyBtb250aHMgKiBpc0FkZGluZyk7XG4gICAgfVxuICAgIGlmIChkYXlzKSB7XG4gICAgICAgIHNldCQxKG1vbSwgJ0RhdGUnLCBnZXQobW9tLCAnRGF0ZScpICsgZGF5cyAqIGlzQWRkaW5nKTtcbiAgICB9XG4gICAgaWYgKG1pbGxpc2Vjb25kcykge1xuICAgICAgICBtb20uX2Quc2V0VGltZShtb20uX2QudmFsdWVPZigpICsgbWlsbGlzZWNvbmRzICogaXNBZGRpbmcpO1xuICAgIH1cbiAgICBpZiAodXBkYXRlT2Zmc2V0KSB7XG4gICAgICAgIGhvb2tzLnVwZGF0ZU9mZnNldChtb20sIGRheXMgfHwgbW9udGhzKTtcbiAgICB9XG59XG5cbnZhciBhZGQgICAgICA9IGNyZWF0ZUFkZGVyKDEsICdhZGQnKTtcbnZhciBzdWJ0cmFjdCA9IGNyZWF0ZUFkZGVyKC0xLCAnc3VidHJhY3QnKTtcblxuZnVuY3Rpb24gZ2V0Q2FsZW5kYXJGb3JtYXQobXlNb21lbnQsIG5vdykge1xuICAgIHZhciBkaWZmID0gbXlNb21lbnQuZGlmZihub3csICdkYXlzJywgdHJ1ZSk7XG4gICAgcmV0dXJuIGRpZmYgPCAtNiA/ICdzYW1lRWxzZScgOlxuICAgICAgICAgICAgZGlmZiA8IC0xID8gJ2xhc3RXZWVrJyA6XG4gICAgICAgICAgICBkaWZmIDwgMCA/ICdsYXN0RGF5JyA6XG4gICAgICAgICAgICBkaWZmIDwgMSA/ICdzYW1lRGF5JyA6XG4gICAgICAgICAgICBkaWZmIDwgMiA/ICduZXh0RGF5JyA6XG4gICAgICAgICAgICBkaWZmIDwgNyA/ICduZXh0V2VlaycgOiAnc2FtZUVsc2UnO1xufVxuXG5mdW5jdGlvbiBjYWxlbmRhciQxICh0aW1lLCBmb3JtYXRzKSB7XG4gICAgLy8gV2Ugd2FudCB0byBjb21wYXJlIHRoZSBzdGFydCBvZiB0b2RheSwgdnMgdGhpcy5cbiAgICAvLyBHZXR0aW5nIHN0YXJ0LW9mLXRvZGF5IGRlcGVuZHMgb24gd2hldGhlciB3ZSdyZSBsb2NhbC91dGMvb2Zmc2V0IG9yIG5vdC5cbiAgICB2YXIgbm93ID0gdGltZSB8fCBjcmVhdGVMb2NhbCgpLFxuICAgICAgICBzb2QgPSBjbG9uZVdpdGhPZmZzZXQobm93LCB0aGlzKS5zdGFydE9mKCdkYXknKSxcbiAgICAgICAgZm9ybWF0ID0gaG9va3MuY2FsZW5kYXJGb3JtYXQodGhpcywgc29kKSB8fCAnc2FtZUVsc2UnO1xuXG4gICAgdmFyIG91dHB1dCA9IGZvcm1hdHMgJiYgKGlzRnVuY3Rpb24oZm9ybWF0c1tmb3JtYXRdKSA/IGZvcm1hdHNbZm9ybWF0XS5jYWxsKHRoaXMsIG5vdykgOiBmb3JtYXRzW2Zvcm1hdF0pO1xuXG4gICAgcmV0dXJuIHRoaXMuZm9ybWF0KG91dHB1dCB8fCB0aGlzLmxvY2FsZURhdGEoKS5jYWxlbmRhcihmb3JtYXQsIHRoaXMsIGNyZWF0ZUxvY2FsKG5vdykpKTtcbn1cblxuZnVuY3Rpb24gY2xvbmUgKCkge1xuICAgIHJldHVybiBuZXcgTW9tZW50KHRoaXMpO1xufVxuXG5mdW5jdGlvbiBpc0FmdGVyIChpbnB1dCwgdW5pdHMpIHtcbiAgICB2YXIgbG9jYWxJbnB1dCA9IGlzTW9tZW50KGlucHV0KSA/IGlucHV0IDogY3JlYXRlTG9jYWwoaW5wdXQpO1xuICAgIGlmICghKHRoaXMuaXNWYWxpZCgpICYmIGxvY2FsSW5wdXQuaXNWYWxpZCgpKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHMoIWlzVW5kZWZpbmVkKHVuaXRzKSA/IHVuaXRzIDogJ21pbGxpc2Vjb25kJyk7XG4gICAgaWYgKHVuaXRzID09PSAnbWlsbGlzZWNvbmQnKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlT2YoKSA+IGxvY2FsSW5wdXQudmFsdWVPZigpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBsb2NhbElucHV0LnZhbHVlT2YoKSA8IHRoaXMuY2xvbmUoKS5zdGFydE9mKHVuaXRzKS52YWx1ZU9mKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBpc0JlZm9yZSAoaW5wdXQsIHVuaXRzKSB7XG4gICAgdmFyIGxvY2FsSW5wdXQgPSBpc01vbWVudChpbnB1dCkgPyBpbnB1dCA6IGNyZWF0ZUxvY2FsKGlucHV0KTtcbiAgICBpZiAoISh0aGlzLmlzVmFsaWQoKSAmJiBsb2NhbElucHV0LmlzVmFsaWQoKSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKCFpc1VuZGVmaW5lZCh1bml0cykgPyB1bml0cyA6ICdtaWxsaXNlY29uZCcpO1xuICAgIGlmICh1bml0cyA9PT0gJ21pbGxpc2Vjb25kJykge1xuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZU9mKCkgPCBsb2NhbElucHV0LnZhbHVlT2YoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmVuZE9mKHVuaXRzKS52YWx1ZU9mKCkgPCBsb2NhbElucHV0LnZhbHVlT2YoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGlzQmV0d2VlbiAoZnJvbSwgdG8sIHVuaXRzLCBpbmNsdXNpdml0eSkge1xuICAgIGluY2x1c2l2aXR5ID0gaW5jbHVzaXZpdHkgfHwgJygpJztcbiAgICByZXR1cm4gKGluY2x1c2l2aXR5WzBdID09PSAnKCcgPyB0aGlzLmlzQWZ0ZXIoZnJvbSwgdW5pdHMpIDogIXRoaXMuaXNCZWZvcmUoZnJvbSwgdW5pdHMpKSAmJlxuICAgICAgICAoaW5jbHVzaXZpdHlbMV0gPT09ICcpJyA/IHRoaXMuaXNCZWZvcmUodG8sIHVuaXRzKSA6ICF0aGlzLmlzQWZ0ZXIodG8sIHVuaXRzKSk7XG59XG5cbmZ1bmN0aW9uIGlzU2FtZSAoaW5wdXQsIHVuaXRzKSB7XG4gICAgdmFyIGxvY2FsSW5wdXQgPSBpc01vbWVudChpbnB1dCkgPyBpbnB1dCA6IGNyZWF0ZUxvY2FsKGlucHV0KSxcbiAgICAgICAgaW5wdXRNcztcbiAgICBpZiAoISh0aGlzLmlzVmFsaWQoKSAmJiBsb2NhbElucHV0LmlzVmFsaWQoKSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzIHx8ICdtaWxsaXNlY29uZCcpO1xuICAgIGlmICh1bml0cyA9PT0gJ21pbGxpc2Vjb25kJykge1xuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZU9mKCkgPT09IGxvY2FsSW5wdXQudmFsdWVPZigpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGlucHV0TXMgPSBsb2NhbElucHV0LnZhbHVlT2YoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5zdGFydE9mKHVuaXRzKS52YWx1ZU9mKCkgPD0gaW5wdXRNcyAmJiBpbnB1dE1zIDw9IHRoaXMuY2xvbmUoKS5lbmRPZih1bml0cykudmFsdWVPZigpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gaXNTYW1lT3JBZnRlciAoaW5wdXQsIHVuaXRzKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNTYW1lKGlucHV0LCB1bml0cykgfHwgdGhpcy5pc0FmdGVyKGlucHV0LHVuaXRzKTtcbn1cblxuZnVuY3Rpb24gaXNTYW1lT3JCZWZvcmUgKGlucHV0LCB1bml0cykge1xuICAgIHJldHVybiB0aGlzLmlzU2FtZShpbnB1dCwgdW5pdHMpIHx8IHRoaXMuaXNCZWZvcmUoaW5wdXQsdW5pdHMpO1xufVxuXG5mdW5jdGlvbiBkaWZmIChpbnB1dCwgdW5pdHMsIGFzRmxvYXQpIHtcbiAgICB2YXIgdGhhdCxcbiAgICAgICAgem9uZURlbHRhLFxuICAgICAgICBkZWx0YSwgb3V0cHV0O1xuXG4gICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICByZXR1cm4gTmFOO1xuICAgIH1cblxuICAgIHRoYXQgPSBjbG9uZVdpdGhPZmZzZXQoaW5wdXQsIHRoaXMpO1xuXG4gICAgaWYgKCF0aGF0LmlzVmFsaWQoKSkge1xuICAgICAgICByZXR1cm4gTmFOO1xuICAgIH1cblxuICAgIHpvbmVEZWx0YSA9ICh0aGF0LnV0Y09mZnNldCgpIC0gdGhpcy51dGNPZmZzZXQoKSkgKiA2ZTQ7XG5cbiAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKTtcblxuICAgIHN3aXRjaCAodW5pdHMpIHtcbiAgICAgICAgY2FzZSAneWVhcic6IG91dHB1dCA9IG1vbnRoRGlmZih0aGlzLCB0aGF0KSAvIDEyOyBicmVhaztcbiAgICAgICAgY2FzZSAnbW9udGgnOiBvdXRwdXQgPSBtb250aERpZmYodGhpcywgdGhhdCk7IGJyZWFrO1xuICAgICAgICBjYXNlICdxdWFydGVyJzogb3V0cHV0ID0gbW9udGhEaWZmKHRoaXMsIHRoYXQpIC8gMzsgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3NlY29uZCc6IG91dHB1dCA9ICh0aGlzIC0gdGhhdCkgLyAxZTM7IGJyZWFrOyAvLyAxMDAwXG4gICAgICAgIGNhc2UgJ21pbnV0ZSc6IG91dHB1dCA9ICh0aGlzIC0gdGhhdCkgLyA2ZTQ7IGJyZWFrOyAvLyAxMDAwICogNjBcbiAgICAgICAgY2FzZSAnaG91cic6IG91dHB1dCA9ICh0aGlzIC0gdGhhdCkgLyAzNmU1OyBicmVhazsgLy8gMTAwMCAqIDYwICogNjBcbiAgICAgICAgY2FzZSAnZGF5Jzogb3V0cHV0ID0gKHRoaXMgLSB0aGF0IC0gem9uZURlbHRhKSAvIDg2NGU1OyBicmVhazsgLy8gMTAwMCAqIDYwICogNjAgKiAyNCwgbmVnYXRlIGRzdFxuICAgICAgICBjYXNlICd3ZWVrJzogb3V0cHV0ID0gKHRoaXMgLSB0aGF0IC0gem9uZURlbHRhKSAvIDYwNDhlNTsgYnJlYWs7IC8vIDEwMDAgKiA2MCAqIDYwICogMjQgKiA3LCBuZWdhdGUgZHN0XG4gICAgICAgIGRlZmF1bHQ6IG91dHB1dCA9IHRoaXMgLSB0aGF0O1xuICAgIH1cblxuICAgIHJldHVybiBhc0Zsb2F0ID8gb3V0cHV0IDogYWJzRmxvb3Iob3V0cHV0KTtcbn1cblxuZnVuY3Rpb24gbW9udGhEaWZmIChhLCBiKSB7XG4gICAgLy8gZGlmZmVyZW5jZSBpbiBtb250aHNcbiAgICB2YXIgd2hvbGVNb250aERpZmYgPSAoKGIueWVhcigpIC0gYS55ZWFyKCkpICogMTIpICsgKGIubW9udGgoKSAtIGEubW9udGgoKSksXG4gICAgICAgIC8vIGIgaXMgaW4gKGFuY2hvciAtIDEgbW9udGgsIGFuY2hvciArIDEgbW9udGgpXG4gICAgICAgIGFuY2hvciA9IGEuY2xvbmUoKS5hZGQod2hvbGVNb250aERpZmYsICdtb250aHMnKSxcbiAgICAgICAgYW5jaG9yMiwgYWRqdXN0O1xuXG4gICAgaWYgKGIgLSBhbmNob3IgPCAwKSB7XG4gICAgICAgIGFuY2hvcjIgPSBhLmNsb25lKCkuYWRkKHdob2xlTW9udGhEaWZmIC0gMSwgJ21vbnRocycpO1xuICAgICAgICAvLyBsaW5lYXIgYWNyb3NzIHRoZSBtb250aFxuICAgICAgICBhZGp1c3QgPSAoYiAtIGFuY2hvcikgLyAoYW5jaG9yIC0gYW5jaG9yMik7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgYW5jaG9yMiA9IGEuY2xvbmUoKS5hZGQod2hvbGVNb250aERpZmYgKyAxLCAnbW9udGhzJyk7XG4gICAgICAgIC8vIGxpbmVhciBhY3Jvc3MgdGhlIG1vbnRoXG4gICAgICAgIGFkanVzdCA9IChiIC0gYW5jaG9yKSAvIChhbmNob3IyIC0gYW5jaG9yKTtcbiAgICB9XG5cbiAgICAvL2NoZWNrIGZvciBuZWdhdGl2ZSB6ZXJvLCByZXR1cm4gemVybyBpZiBuZWdhdGl2ZSB6ZXJvXG4gICAgcmV0dXJuIC0od2hvbGVNb250aERpZmYgKyBhZGp1c3QpIHx8IDA7XG59XG5cbmhvb2tzLmRlZmF1bHRGb3JtYXQgPSAnWVlZWS1NTS1ERFRISDptbTpzc1onO1xuaG9va3MuZGVmYXVsdEZvcm1hdFV0YyA9ICdZWVlZLU1NLUREVEhIOm1tOnNzW1pdJztcblxuZnVuY3Rpb24gdG9TdHJpbmcgKCkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkubG9jYWxlKCdlbicpLmZvcm1hdCgnZGRkIE1NTSBERCBZWVlZIEhIOm1tOnNzIFtHTVRdWlonKTtcbn1cblxuZnVuY3Rpb24gdG9JU09TdHJpbmcoKSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgdmFyIG0gPSB0aGlzLmNsb25lKCkudXRjKCk7XG4gICAgaWYgKG0ueWVhcigpIDwgMCB8fCBtLnllYXIoKSA+IDk5OTkpIHtcbiAgICAgICAgcmV0dXJuIGZvcm1hdE1vbWVudChtLCAnWVlZWVlZLU1NLUREW1RdSEg6bW06c3MuU1NTW1pdJyk7XG4gICAgfVxuICAgIGlmIChpc0Z1bmN0aW9uKERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nKSkge1xuICAgICAgICAvLyBuYXRpdmUgaW1wbGVtZW50YXRpb24gaXMgfjUweCBmYXN0ZXIsIHVzZSBpdCB3aGVuIHdlIGNhblxuICAgICAgICByZXR1cm4gdGhpcy50b0RhdGUoKS50b0lTT1N0cmluZygpO1xuICAgIH1cbiAgICByZXR1cm4gZm9ybWF0TW9tZW50KG0sICdZWVlZLU1NLUREW1RdSEg6bW06c3MuU1NTW1pdJyk7XG59XG5cbi8qKlxuICogUmV0dXJuIGEgaHVtYW4gcmVhZGFibGUgcmVwcmVzZW50YXRpb24gb2YgYSBtb21lbnQgdGhhdCBjYW5cbiAqIGFsc28gYmUgZXZhbHVhdGVkIHRvIGdldCBhIG5ldyBtb21lbnQgd2hpY2ggaXMgdGhlIHNhbWVcbiAqXG4gKiBAbGluayBodHRwczovL25vZGVqcy5vcmcvZGlzdC9sYXRlc3QvZG9jcy9hcGkvdXRpbC5odG1sI3V0aWxfY3VzdG9tX2luc3BlY3RfZnVuY3Rpb25fb25fb2JqZWN0c1xuICovXG5mdW5jdGlvbiBpbnNwZWN0ICgpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgIHJldHVybiAnbW9tZW50LmludmFsaWQoLyogJyArIHRoaXMuX2kgKyAnICovKSc7XG4gICAgfVxuICAgIHZhciBmdW5jID0gJ21vbWVudCc7XG4gICAgdmFyIHpvbmUgPSAnJztcbiAgICBpZiAoIXRoaXMuaXNMb2NhbCgpKSB7XG4gICAgICAgIGZ1bmMgPSB0aGlzLnV0Y09mZnNldCgpID09PSAwID8gJ21vbWVudC51dGMnIDogJ21vbWVudC5wYXJzZVpvbmUnO1xuICAgICAgICB6b25lID0gJ1onO1xuICAgIH1cbiAgICB2YXIgcHJlZml4ID0gJ1snICsgZnVuYyArICcoXCJdJztcbiAgICB2YXIgeWVhciA9ICgwIDw9IHRoaXMueWVhcigpICYmIHRoaXMueWVhcigpIDw9IDk5OTkpID8gJ1lZWVknIDogJ1lZWVlZWSc7XG4gICAgdmFyIGRhdGV0aW1lID0gJy1NTS1ERFtUXUhIOm1tOnNzLlNTUyc7XG4gICAgdmFyIHN1ZmZpeCA9IHpvbmUgKyAnW1wiKV0nO1xuXG4gICAgcmV0dXJuIHRoaXMuZm9ybWF0KHByZWZpeCArIHllYXIgKyBkYXRldGltZSArIHN1ZmZpeCk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdCAoaW5wdXRTdHJpbmcpIHtcbiAgICBpZiAoIWlucHV0U3RyaW5nKSB7XG4gICAgICAgIGlucHV0U3RyaW5nID0gdGhpcy5pc1V0YygpID8gaG9va3MuZGVmYXVsdEZvcm1hdFV0YyA6IGhvb2tzLmRlZmF1bHRGb3JtYXQ7XG4gICAgfVxuICAgIHZhciBvdXRwdXQgPSBmb3JtYXRNb21lbnQodGhpcywgaW5wdXRTdHJpbmcpO1xuICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS5wb3N0Zm9ybWF0KG91dHB1dCk7XG59XG5cbmZ1bmN0aW9uIGZyb20gKHRpbWUsIHdpdGhvdXRTdWZmaXgpIHtcbiAgICBpZiAodGhpcy5pc1ZhbGlkKCkgJiZcbiAgICAgICAgICAgICgoaXNNb21lbnQodGltZSkgJiYgdGltZS5pc1ZhbGlkKCkpIHx8XG4gICAgICAgICAgICAgY3JlYXRlTG9jYWwodGltZSkuaXNWYWxpZCgpKSkge1xuICAgICAgICByZXR1cm4gY3JlYXRlRHVyYXRpb24oe3RvOiB0aGlzLCBmcm9tOiB0aW1lfSkubG9jYWxlKHRoaXMubG9jYWxlKCkpLmh1bWFuaXplKCF3aXRob3V0U3VmZml4KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkuaW52YWxpZERhdGUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGZyb21Ob3cgKHdpdGhvdXRTdWZmaXgpIHtcbiAgICByZXR1cm4gdGhpcy5mcm9tKGNyZWF0ZUxvY2FsKCksIHdpdGhvdXRTdWZmaXgpO1xufVxuXG5mdW5jdGlvbiB0byAodGltZSwgd2l0aG91dFN1ZmZpeCkge1xuICAgIGlmICh0aGlzLmlzVmFsaWQoKSAmJlxuICAgICAgICAgICAgKChpc01vbWVudCh0aW1lKSAmJiB0aW1lLmlzVmFsaWQoKSkgfHxcbiAgICAgICAgICAgICBjcmVhdGVMb2NhbCh0aW1lKS5pc1ZhbGlkKCkpKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVEdXJhdGlvbih7ZnJvbTogdGhpcywgdG86IHRpbWV9KS5sb2NhbGUodGhpcy5sb2NhbGUoKSkuaHVtYW5pemUoIXdpdGhvdXRTdWZmaXgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS5pbnZhbGlkRGF0ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gdG9Ob3cgKHdpdGhvdXRTdWZmaXgpIHtcbiAgICByZXR1cm4gdGhpcy50byhjcmVhdGVMb2NhbCgpLCB3aXRob3V0U3VmZml4KTtcbn1cblxuLy8gSWYgcGFzc2VkIGEgbG9jYWxlIGtleSwgaXQgd2lsbCBzZXQgdGhlIGxvY2FsZSBmb3IgdGhpc1xuLy8gaW5zdGFuY2UuICBPdGhlcndpc2UsIGl0IHdpbGwgcmV0dXJuIHRoZSBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8gdmFyaWFibGVzIGZvciB0aGlzIGluc3RhbmNlLlxuZnVuY3Rpb24gbG9jYWxlIChrZXkpIHtcbiAgICB2YXIgbmV3TG9jYWxlRGF0YTtcblxuICAgIGlmIChrZXkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbG9jYWxlLl9hYmJyO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIG5ld0xvY2FsZURhdGEgPSBnZXRMb2NhbGUoa2V5KTtcbiAgICAgICAgaWYgKG5ld0xvY2FsZURhdGEgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5fbG9jYWxlID0gbmV3TG9jYWxlRGF0YTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG59XG5cbnZhciBsYW5nID0gZGVwcmVjYXRlKFxuICAgICdtb21lbnQoKS5sYW5nKCkgaXMgZGVwcmVjYXRlZC4gSW5zdGVhZCwgdXNlIG1vbWVudCgpLmxvY2FsZURhdGEoKSB0byBnZXQgdGhlIGxhbmd1YWdlIGNvbmZpZ3VyYXRpb24uIFVzZSBtb21lbnQoKS5sb2NhbGUoKSB0byBjaGFuZ2UgbGFuZ3VhZ2VzLicsXG4gICAgZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBpZiAoa2V5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxvY2FsZShrZXkpO1xuICAgICAgICB9XG4gICAgfVxuKTtcblxuZnVuY3Rpb24gbG9jYWxlRGF0YSAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2xvY2FsZTtcbn1cblxuZnVuY3Rpb24gc3RhcnRPZiAodW5pdHMpIHtcbiAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKTtcbiAgICAvLyB0aGUgZm9sbG93aW5nIHN3aXRjaCBpbnRlbnRpb25hbGx5IG9taXRzIGJyZWFrIGtleXdvcmRzXG4gICAgLy8gdG8gdXRpbGl6ZSBmYWxsaW5nIHRocm91Z2ggdGhlIGNhc2VzLlxuICAgIHN3aXRjaCAodW5pdHMpIHtcbiAgICAgICAgY2FzZSAneWVhcic6XG4gICAgICAgICAgICB0aGlzLm1vbnRoKDApO1xuICAgICAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgICBjYXNlICdxdWFydGVyJzpcbiAgICAgICAgY2FzZSAnbW9udGgnOlxuICAgICAgICAgICAgdGhpcy5kYXRlKDEpO1xuICAgICAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgICBjYXNlICd3ZWVrJzpcbiAgICAgICAgY2FzZSAnaXNvV2Vlayc6XG4gICAgICAgIGNhc2UgJ2RheSc6XG4gICAgICAgIGNhc2UgJ2RhdGUnOlxuICAgICAgICAgICAgdGhpcy5ob3VycygwKTtcbiAgICAgICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgICAgY2FzZSAnaG91cic6XG4gICAgICAgICAgICB0aGlzLm1pbnV0ZXMoMCk7XG4gICAgICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICAgIGNhc2UgJ21pbnV0ZSc6XG4gICAgICAgICAgICB0aGlzLnNlY29uZHMoMCk7XG4gICAgICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICAgIGNhc2UgJ3NlY29uZCc6XG4gICAgICAgICAgICB0aGlzLm1pbGxpc2Vjb25kcygwKTtcbiAgICB9XG5cbiAgICAvLyB3ZWVrcyBhcmUgYSBzcGVjaWFsIGNhc2VcbiAgICBpZiAodW5pdHMgPT09ICd3ZWVrJykge1xuICAgICAgICB0aGlzLndlZWtkYXkoMCk7XG4gICAgfVxuICAgIGlmICh1bml0cyA9PT0gJ2lzb1dlZWsnKSB7XG4gICAgICAgIHRoaXMuaXNvV2Vla2RheSgxKTtcbiAgICB9XG5cbiAgICAvLyBxdWFydGVycyBhcmUgYWxzbyBzcGVjaWFsXG4gICAgaWYgKHVuaXRzID09PSAncXVhcnRlcicpIHtcbiAgICAgICAgdGhpcy5tb250aChNYXRoLmZsb29yKHRoaXMubW9udGgoKSAvIDMpICogMyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIGVuZE9mICh1bml0cykge1xuICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpO1xuICAgIGlmICh1bml0cyA9PT0gdW5kZWZpbmVkIHx8IHVuaXRzID09PSAnbWlsbGlzZWNvbmQnKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vICdkYXRlJyBpcyBhbiBhbGlhcyBmb3IgJ2RheScsIHNvIGl0IHNob3VsZCBiZSBjb25zaWRlcmVkIGFzIHN1Y2guXG4gICAgaWYgKHVuaXRzID09PSAnZGF0ZScpIHtcbiAgICAgICAgdW5pdHMgPSAnZGF5JztcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdGFydE9mKHVuaXRzKS5hZGQoMSwgKHVuaXRzID09PSAnaXNvV2VlaycgPyAnd2VlaycgOiB1bml0cykpLnN1YnRyYWN0KDEsICdtcycpO1xufVxuXG5mdW5jdGlvbiB2YWx1ZU9mICgpIHtcbiAgICByZXR1cm4gdGhpcy5fZC52YWx1ZU9mKCkgLSAoKHRoaXMuX29mZnNldCB8fCAwKSAqIDYwMDAwKTtcbn1cblxuZnVuY3Rpb24gdW5peCAoKSB7XG4gICAgcmV0dXJuIE1hdGguZmxvb3IodGhpcy52YWx1ZU9mKCkgLyAxMDAwKTtcbn1cblxuZnVuY3Rpb24gdG9EYXRlICgpIHtcbiAgICByZXR1cm4gbmV3IERhdGUodGhpcy52YWx1ZU9mKCkpO1xufVxuXG5mdW5jdGlvbiB0b0FycmF5ICgpIHtcbiAgICB2YXIgbSA9IHRoaXM7XG4gICAgcmV0dXJuIFttLnllYXIoKSwgbS5tb250aCgpLCBtLmRhdGUoKSwgbS5ob3VyKCksIG0ubWludXRlKCksIG0uc2Vjb25kKCksIG0ubWlsbGlzZWNvbmQoKV07XG59XG5cbmZ1bmN0aW9uIHRvT2JqZWN0ICgpIHtcbiAgICB2YXIgbSA9IHRoaXM7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgeWVhcnM6IG0ueWVhcigpLFxuICAgICAgICBtb250aHM6IG0ubW9udGgoKSxcbiAgICAgICAgZGF0ZTogbS5kYXRlKCksXG4gICAgICAgIGhvdXJzOiBtLmhvdXJzKCksXG4gICAgICAgIG1pbnV0ZXM6IG0ubWludXRlcygpLFxuICAgICAgICBzZWNvbmRzOiBtLnNlY29uZHMoKSxcbiAgICAgICAgbWlsbGlzZWNvbmRzOiBtLm1pbGxpc2Vjb25kcygpXG4gICAgfTtcbn1cblxuZnVuY3Rpb24gdG9KU09OICgpIHtcbiAgICAvLyBuZXcgRGF0ZShOYU4pLnRvSlNPTigpID09PSBudWxsXG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCgpID8gdGhpcy50b0lTT1N0cmluZygpIDogbnVsbDtcbn1cblxuZnVuY3Rpb24gaXNWYWxpZCQyICgpIHtcbiAgICByZXR1cm4gaXNWYWxpZCh0aGlzKTtcbn1cblxuZnVuY3Rpb24gcGFyc2luZ0ZsYWdzICgpIHtcbiAgICByZXR1cm4gZXh0ZW5kKHt9LCBnZXRQYXJzaW5nRmxhZ3ModGhpcykpO1xufVxuXG5mdW5jdGlvbiBpbnZhbGlkQXQgKCkge1xuICAgIHJldHVybiBnZXRQYXJzaW5nRmxhZ3ModGhpcykub3ZlcmZsb3c7XG59XG5cbmZ1bmN0aW9uIGNyZWF0aW9uRGF0YSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBpbnB1dDogdGhpcy5faSxcbiAgICAgICAgZm9ybWF0OiB0aGlzLl9mLFxuICAgICAgICBsb2NhbGU6IHRoaXMuX2xvY2FsZSxcbiAgICAgICAgaXNVVEM6IHRoaXMuX2lzVVRDLFxuICAgICAgICBzdHJpY3Q6IHRoaXMuX3N0cmljdFxuICAgIH07XG59XG5cbi8vIEZPUk1BVFRJTkdcblxuYWRkRm9ybWF0VG9rZW4oMCwgWydnZycsIDJdLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMud2Vla1llYXIoKSAlIDEwMDtcbn0pO1xuXG5hZGRGb3JtYXRUb2tlbigwLCBbJ0dHJywgMl0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5pc29XZWVrWWVhcigpICUgMTAwO1xufSk7XG5cbmZ1bmN0aW9uIGFkZFdlZWtZZWFyRm9ybWF0VG9rZW4gKHRva2VuLCBnZXR0ZXIpIHtcbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbdG9rZW4sIHRva2VuLmxlbmd0aF0sIDAsIGdldHRlcik7XG59XG5cbmFkZFdlZWtZZWFyRm9ybWF0VG9rZW4oJ2dnZ2cnLCAgICAgJ3dlZWtZZWFyJyk7XG5hZGRXZWVrWWVhckZvcm1hdFRva2VuKCdnZ2dnZycsICAgICd3ZWVrWWVhcicpO1xuYWRkV2Vla1llYXJGb3JtYXRUb2tlbignR0dHRycsICAnaXNvV2Vla1llYXInKTtcbmFkZFdlZWtZZWFyRm9ybWF0VG9rZW4oJ0dHR0dHJywgJ2lzb1dlZWtZZWFyJyk7XG5cbi8vIEFMSUFTRVNcblxuYWRkVW5pdEFsaWFzKCd3ZWVrWWVhcicsICdnZycpO1xuYWRkVW5pdEFsaWFzKCdpc29XZWVrWWVhcicsICdHRycpO1xuXG4vLyBQUklPUklUWVxuXG5hZGRVbml0UHJpb3JpdHkoJ3dlZWtZZWFyJywgMSk7XG5hZGRVbml0UHJpb3JpdHkoJ2lzb1dlZWtZZWFyJywgMSk7XG5cblxuLy8gUEFSU0lOR1xuXG5hZGRSZWdleFRva2VuKCdHJywgICAgICBtYXRjaFNpZ25lZCk7XG5hZGRSZWdleFRva2VuKCdnJywgICAgICBtYXRjaFNpZ25lZCk7XG5hZGRSZWdleFRva2VuKCdHRycsICAgICBtYXRjaDF0bzIsIG1hdGNoMik7XG5hZGRSZWdleFRva2VuKCdnZycsICAgICBtYXRjaDF0bzIsIG1hdGNoMik7XG5hZGRSZWdleFRva2VuKCdHR0dHJywgICBtYXRjaDF0bzQsIG1hdGNoNCk7XG5hZGRSZWdleFRva2VuKCdnZ2dnJywgICBtYXRjaDF0bzQsIG1hdGNoNCk7XG5hZGRSZWdleFRva2VuKCdHR0dHRycsICBtYXRjaDF0bzYsIG1hdGNoNik7XG5hZGRSZWdleFRva2VuKCdnZ2dnZycsICBtYXRjaDF0bzYsIG1hdGNoNik7XG5cbmFkZFdlZWtQYXJzZVRva2VuKFsnZ2dnZycsICdnZ2dnZycsICdHR0dHJywgJ0dHR0dHJ10sIGZ1bmN0aW9uIChpbnB1dCwgd2VlaywgY29uZmlnLCB0b2tlbikge1xuICAgIHdlZWtbdG9rZW4uc3Vic3RyKDAsIDIpXSA9IHRvSW50KGlucHV0KTtcbn0pO1xuXG5hZGRXZWVrUGFyc2VUb2tlbihbJ2dnJywgJ0dHJ10sIGZ1bmN0aW9uIChpbnB1dCwgd2VlaywgY29uZmlnLCB0b2tlbikge1xuICAgIHdlZWtbdG9rZW5dID0gaG9va3MucGFyc2VUd29EaWdpdFllYXIoaW5wdXQpO1xufSk7XG5cbi8vIE1PTUVOVFNcblxuZnVuY3Rpb24gZ2V0U2V0V2Vla1llYXIgKGlucHV0KSB7XG4gICAgcmV0dXJuIGdldFNldFdlZWtZZWFySGVscGVyLmNhbGwodGhpcyxcbiAgICAgICAgICAgIGlucHV0LFxuICAgICAgICAgICAgdGhpcy53ZWVrKCksXG4gICAgICAgICAgICB0aGlzLndlZWtkYXkoKSxcbiAgICAgICAgICAgIHRoaXMubG9jYWxlRGF0YSgpLl93ZWVrLmRvdyxcbiAgICAgICAgICAgIHRoaXMubG9jYWxlRGF0YSgpLl93ZWVrLmRveSk7XG59XG5cbmZ1bmN0aW9uIGdldFNldElTT1dlZWtZZWFyIChpbnB1dCkge1xuICAgIHJldHVybiBnZXRTZXRXZWVrWWVhckhlbHBlci5jYWxsKHRoaXMsXG4gICAgICAgICAgICBpbnB1dCwgdGhpcy5pc29XZWVrKCksIHRoaXMuaXNvV2Vla2RheSgpLCAxLCA0KTtcbn1cblxuZnVuY3Rpb24gZ2V0SVNPV2Vla3NJblllYXIgKCkge1xuICAgIHJldHVybiB3ZWVrc0luWWVhcih0aGlzLnllYXIoKSwgMSwgNCk7XG59XG5cbmZ1bmN0aW9uIGdldFdlZWtzSW5ZZWFyICgpIHtcbiAgICB2YXIgd2Vla0luZm8gPSB0aGlzLmxvY2FsZURhdGEoKS5fd2VlaztcbiAgICByZXR1cm4gd2Vla3NJblllYXIodGhpcy55ZWFyKCksIHdlZWtJbmZvLmRvdywgd2Vla0luZm8uZG95KTtcbn1cblxuZnVuY3Rpb24gZ2V0U2V0V2Vla1llYXJIZWxwZXIoaW5wdXQsIHdlZWssIHdlZWtkYXksIGRvdywgZG95KSB7XG4gICAgdmFyIHdlZWtzVGFyZ2V0O1xuICAgIGlmIChpbnB1dCA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiB3ZWVrT2ZZZWFyKHRoaXMsIGRvdywgZG95KS55ZWFyO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHdlZWtzVGFyZ2V0ID0gd2Vla3NJblllYXIoaW5wdXQsIGRvdywgZG95KTtcbiAgICAgICAgaWYgKHdlZWsgPiB3ZWVrc1RhcmdldCkge1xuICAgICAgICAgICAgd2VlayA9IHdlZWtzVGFyZ2V0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzZXRXZWVrQWxsLmNhbGwodGhpcywgaW5wdXQsIHdlZWssIHdlZWtkYXksIGRvdywgZG95KTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHNldFdlZWtBbGwod2Vla1llYXIsIHdlZWssIHdlZWtkYXksIGRvdywgZG95KSB7XG4gICAgdmFyIGRheU9mWWVhckRhdGEgPSBkYXlPZlllYXJGcm9tV2Vla3Mod2Vla1llYXIsIHdlZWssIHdlZWtkYXksIGRvdywgZG95KSxcbiAgICAgICAgZGF0ZSA9IGNyZWF0ZVVUQ0RhdGUoZGF5T2ZZZWFyRGF0YS55ZWFyLCAwLCBkYXlPZlllYXJEYXRhLmRheU9mWWVhcik7XG5cbiAgICB0aGlzLnllYXIoZGF0ZS5nZXRVVENGdWxsWWVhcigpKTtcbiAgICB0aGlzLm1vbnRoKGRhdGUuZ2V0VVRDTW9udGgoKSk7XG4gICAgdGhpcy5kYXRlKGRhdGUuZ2V0VVRDRGF0ZSgpKTtcbiAgICByZXR1cm4gdGhpcztcbn1cblxuLy8gRk9STUFUVElOR1xuXG5hZGRGb3JtYXRUb2tlbignUScsIDAsICdRbycsICdxdWFydGVyJyk7XG5cbi8vIEFMSUFTRVNcblxuYWRkVW5pdEFsaWFzKCdxdWFydGVyJywgJ1EnKTtcblxuLy8gUFJJT1JJVFlcblxuYWRkVW5pdFByaW9yaXR5KCdxdWFydGVyJywgNyk7XG5cbi8vIFBBUlNJTkdcblxuYWRkUmVnZXhUb2tlbignUScsIG1hdGNoMSk7XG5hZGRQYXJzZVRva2VuKCdRJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSkge1xuICAgIGFycmF5W01PTlRIXSA9ICh0b0ludChpbnB1dCkgLSAxKSAqIDM7XG59KTtcblxuLy8gTU9NRU5UU1xuXG5mdW5jdGlvbiBnZXRTZXRRdWFydGVyIChpbnB1dCkge1xuICAgIHJldHVybiBpbnB1dCA9PSBudWxsID8gTWF0aC5jZWlsKCh0aGlzLm1vbnRoKCkgKyAxKSAvIDMpIDogdGhpcy5tb250aCgoaW5wdXQgLSAxKSAqIDMgKyB0aGlzLm1vbnRoKCkgJSAzKTtcbn1cblxuLy8gRk9STUFUVElOR1xuXG5hZGRGb3JtYXRUb2tlbignRCcsIFsnREQnLCAyXSwgJ0RvJywgJ2RhdGUnKTtcblxuLy8gQUxJQVNFU1xuXG5hZGRVbml0QWxpYXMoJ2RhdGUnLCAnRCcpO1xuXG4vLyBQUklPUk9JVFlcbmFkZFVuaXRQcmlvcml0eSgnZGF0ZScsIDkpO1xuXG4vLyBQQVJTSU5HXG5cbmFkZFJlZ2V4VG9rZW4oJ0QnLCAgbWF0Y2gxdG8yKTtcbmFkZFJlZ2V4VG9rZW4oJ0REJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuYWRkUmVnZXhUb2tlbignRG8nLCBmdW5jdGlvbiAoaXNTdHJpY3QsIGxvY2FsZSkge1xuICAgIC8vIFRPRE86IFJlbW92ZSBcIm9yZGluYWxQYXJzZVwiIGZhbGxiYWNrIGluIG5leHQgbWFqb3IgcmVsZWFzZS5cbiAgICByZXR1cm4gaXNTdHJpY3QgP1xuICAgICAgKGxvY2FsZS5fZGF5T2ZNb250aE9yZGluYWxQYXJzZSB8fCBsb2NhbGUuX29yZGluYWxQYXJzZSkgOlxuICAgICAgbG9jYWxlLl9kYXlPZk1vbnRoT3JkaW5hbFBhcnNlTGVuaWVudDtcbn0pO1xuXG5hZGRQYXJzZVRva2VuKFsnRCcsICdERCddLCBEQVRFKTtcbmFkZFBhcnNlVG9rZW4oJ0RvJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSkge1xuICAgIGFycmF5W0RBVEVdID0gdG9JbnQoaW5wdXQubWF0Y2gobWF0Y2gxdG8yKVswXSwgMTApO1xufSk7XG5cbi8vIE1PTUVOVFNcblxudmFyIGdldFNldERheU9mTW9udGggPSBtYWtlR2V0U2V0KCdEYXRlJywgdHJ1ZSk7XG5cbi8vIEZPUk1BVFRJTkdcblxuYWRkRm9ybWF0VG9rZW4oJ0RERCcsIFsnRERERCcsIDNdLCAnREREbycsICdkYXlPZlllYXInKTtcblxuLy8gQUxJQVNFU1xuXG5hZGRVbml0QWxpYXMoJ2RheU9mWWVhcicsICdEREQnKTtcblxuLy8gUFJJT1JJVFlcbmFkZFVuaXRQcmlvcml0eSgnZGF5T2ZZZWFyJywgNCk7XG5cbi8vIFBBUlNJTkdcblxuYWRkUmVnZXhUb2tlbignREREJywgIG1hdGNoMXRvMyk7XG5hZGRSZWdleFRva2VuKCdEREREJywgbWF0Y2gzKTtcbmFkZFBhcnNlVG9rZW4oWydEREQnLCAnRERERCddLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICBjb25maWcuX2RheU9mWWVhciA9IHRvSW50KGlucHV0KTtcbn0pO1xuXG4vLyBIRUxQRVJTXG5cbi8vIE1PTUVOVFNcblxuZnVuY3Rpb24gZ2V0U2V0RGF5T2ZZZWFyIChpbnB1dCkge1xuICAgIHZhciBkYXlPZlllYXIgPSBNYXRoLnJvdW5kKCh0aGlzLmNsb25lKCkuc3RhcnRPZignZGF5JykgLSB0aGlzLmNsb25lKCkuc3RhcnRPZigneWVhcicpKSAvIDg2NGU1KSArIDE7XG4gICAgcmV0dXJuIGlucHV0ID09IG51bGwgPyBkYXlPZlllYXIgOiB0aGlzLmFkZCgoaW5wdXQgLSBkYXlPZlllYXIpLCAnZCcpO1xufVxuXG4vLyBGT1JNQVRUSU5HXG5cbmFkZEZvcm1hdFRva2VuKCdtJywgWydtbScsIDJdLCAwLCAnbWludXRlJyk7XG5cbi8vIEFMSUFTRVNcblxuYWRkVW5pdEFsaWFzKCdtaW51dGUnLCAnbScpO1xuXG4vLyBQUklPUklUWVxuXG5hZGRVbml0UHJpb3JpdHkoJ21pbnV0ZScsIDE0KTtcblxuLy8gUEFSU0lOR1xuXG5hZGRSZWdleFRva2VuKCdtJywgIG1hdGNoMXRvMik7XG5hZGRSZWdleFRva2VuKCdtbScsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbmFkZFBhcnNlVG9rZW4oWydtJywgJ21tJ10sIE1JTlVURSk7XG5cbi8vIE1PTUVOVFNcblxudmFyIGdldFNldE1pbnV0ZSA9IG1ha2VHZXRTZXQoJ01pbnV0ZXMnLCBmYWxzZSk7XG5cbi8vIEZPUk1BVFRJTkdcblxuYWRkRm9ybWF0VG9rZW4oJ3MnLCBbJ3NzJywgMl0sIDAsICdzZWNvbmQnKTtcblxuLy8gQUxJQVNFU1xuXG5hZGRVbml0QWxpYXMoJ3NlY29uZCcsICdzJyk7XG5cbi8vIFBSSU9SSVRZXG5cbmFkZFVuaXRQcmlvcml0eSgnc2Vjb25kJywgMTUpO1xuXG4vLyBQQVJTSU5HXG5cbmFkZFJlZ2V4VG9rZW4oJ3MnLCAgbWF0Y2gxdG8yKTtcbmFkZFJlZ2V4VG9rZW4oJ3NzJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuYWRkUGFyc2VUb2tlbihbJ3MnLCAnc3MnXSwgU0VDT05EKTtcblxuLy8gTU9NRU5UU1xuXG52YXIgZ2V0U2V0U2Vjb25kID0gbWFrZUdldFNldCgnU2Vjb25kcycsIGZhbHNlKTtcblxuLy8gRk9STUFUVElOR1xuXG5hZGRGb3JtYXRUb2tlbignUycsIDAsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gfn4odGhpcy5taWxsaXNlY29uZCgpIC8gMTAwKTtcbn0pO1xuXG5hZGRGb3JtYXRUb2tlbigwLCBbJ1NTJywgMl0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gfn4odGhpcy5taWxsaXNlY29uZCgpIC8gMTApO1xufSk7XG5cbmFkZEZvcm1hdFRva2VuKDAsIFsnU1NTJywgM10sIDAsICdtaWxsaXNlY29uZCcpO1xuYWRkRm9ybWF0VG9rZW4oMCwgWydTU1NTJywgNF0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5taWxsaXNlY29uZCgpICogMTA7XG59KTtcbmFkZEZvcm1hdFRva2VuKDAsIFsnU1NTU1MnLCA1XSwgMCwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLm1pbGxpc2Vjb25kKCkgKiAxMDA7XG59KTtcbmFkZEZvcm1hdFRva2VuKDAsIFsnU1NTU1NTJywgNl0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5taWxsaXNlY29uZCgpICogMTAwMDtcbn0pO1xuYWRkRm9ybWF0VG9rZW4oMCwgWydTU1NTU1NTJywgN10sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5taWxsaXNlY29uZCgpICogMTAwMDA7XG59KTtcbmFkZEZvcm1hdFRva2VuKDAsIFsnU1NTU1NTU1MnLCA4XSwgMCwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLm1pbGxpc2Vjb25kKCkgKiAxMDAwMDA7XG59KTtcbmFkZEZvcm1hdFRva2VuKDAsIFsnU1NTU1NTU1NTJywgOV0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5taWxsaXNlY29uZCgpICogMTAwMDAwMDtcbn0pO1xuXG5cbi8vIEFMSUFTRVNcblxuYWRkVW5pdEFsaWFzKCdtaWxsaXNlY29uZCcsICdtcycpO1xuXG4vLyBQUklPUklUWVxuXG5hZGRVbml0UHJpb3JpdHkoJ21pbGxpc2Vjb25kJywgMTYpO1xuXG4vLyBQQVJTSU5HXG5cbmFkZFJlZ2V4VG9rZW4oJ1MnLCAgICBtYXRjaDF0bzMsIG1hdGNoMSk7XG5hZGRSZWdleFRva2VuKCdTUycsICAgbWF0Y2gxdG8zLCBtYXRjaDIpO1xuYWRkUmVnZXhUb2tlbignU1NTJywgIG1hdGNoMXRvMywgbWF0Y2gzKTtcblxudmFyIHRva2VuO1xuZm9yICh0b2tlbiA9ICdTU1NTJzsgdG9rZW4ubGVuZ3RoIDw9IDk7IHRva2VuICs9ICdTJykge1xuICAgIGFkZFJlZ2V4VG9rZW4odG9rZW4sIG1hdGNoVW5zaWduZWQpO1xufVxuXG5mdW5jdGlvbiBwYXJzZU1zKGlucHV0LCBhcnJheSkge1xuICAgIGFycmF5W01JTExJU0VDT05EXSA9IHRvSW50KCgnMC4nICsgaW5wdXQpICogMTAwMCk7XG59XG5cbmZvciAodG9rZW4gPSAnUyc7IHRva2VuLmxlbmd0aCA8PSA5OyB0b2tlbiArPSAnUycpIHtcbiAgICBhZGRQYXJzZVRva2VuKHRva2VuLCBwYXJzZU1zKTtcbn1cbi8vIE1PTUVOVFNcblxudmFyIGdldFNldE1pbGxpc2Vjb25kID0gbWFrZUdldFNldCgnTWlsbGlzZWNvbmRzJywgZmFsc2UpO1xuXG4vLyBGT1JNQVRUSU5HXG5cbmFkZEZvcm1hdFRva2VuKCd6JywgIDAsIDAsICd6b25lQWJicicpO1xuYWRkRm9ybWF0VG9rZW4oJ3p6JywgMCwgMCwgJ3pvbmVOYW1lJyk7XG5cbi8vIE1PTUVOVFNcblxuZnVuY3Rpb24gZ2V0Wm9uZUFiYnIgKCkge1xuICAgIHJldHVybiB0aGlzLl9pc1VUQyA/ICdVVEMnIDogJyc7XG59XG5cbmZ1bmN0aW9uIGdldFpvbmVOYW1lICgpIHtcbiAgICByZXR1cm4gdGhpcy5faXNVVEMgPyAnQ29vcmRpbmF0ZWQgVW5pdmVyc2FsIFRpbWUnIDogJyc7XG59XG5cbnZhciBwcm90byA9IE1vbWVudC5wcm90b3R5cGU7XG5cbnByb3RvLmFkZCAgICAgICAgICAgICAgID0gYWRkO1xucHJvdG8uY2FsZW5kYXIgICAgICAgICAgPSBjYWxlbmRhciQxO1xucHJvdG8uY2xvbmUgICAgICAgICAgICAgPSBjbG9uZTtcbnByb3RvLmRpZmYgICAgICAgICAgICAgID0gZGlmZjtcbnByb3RvLmVuZE9mICAgICAgICAgICAgID0gZW5kT2Y7XG5wcm90by5mb3JtYXQgICAgICAgICAgICA9IGZvcm1hdDtcbnByb3RvLmZyb20gICAgICAgICAgICAgID0gZnJvbTtcbnByb3RvLmZyb21Ob3cgICAgICAgICAgID0gZnJvbU5vdztcbnByb3RvLnRvICAgICAgICAgICAgICAgID0gdG87XG5wcm90by50b05vdyAgICAgICAgICAgICA9IHRvTm93O1xucHJvdG8uZ2V0ICAgICAgICAgICAgICAgPSBzdHJpbmdHZXQ7XG5wcm90by5pbnZhbGlkQXQgICAgICAgICA9IGludmFsaWRBdDtcbnByb3RvLmlzQWZ0ZXIgICAgICAgICAgID0gaXNBZnRlcjtcbnByb3RvLmlzQmVmb3JlICAgICAgICAgID0gaXNCZWZvcmU7XG5wcm90by5pc0JldHdlZW4gICAgICAgICA9IGlzQmV0d2VlbjtcbnByb3RvLmlzU2FtZSAgICAgICAgICAgID0gaXNTYW1lO1xucHJvdG8uaXNTYW1lT3JBZnRlciAgICAgPSBpc1NhbWVPckFmdGVyO1xucHJvdG8uaXNTYW1lT3JCZWZvcmUgICAgPSBpc1NhbWVPckJlZm9yZTtcbnByb3RvLmlzVmFsaWQgICAgICAgICAgID0gaXNWYWxpZCQyO1xucHJvdG8ubGFuZyAgICAgICAgICAgICAgPSBsYW5nO1xucHJvdG8ubG9jYWxlICAgICAgICAgICAgPSBsb2NhbGU7XG5wcm90by5sb2NhbGVEYXRhICAgICAgICA9IGxvY2FsZURhdGE7XG5wcm90by5tYXggICAgICAgICAgICAgICA9IHByb3RvdHlwZU1heDtcbnByb3RvLm1pbiAgICAgICAgICAgICAgID0gcHJvdG90eXBlTWluO1xucHJvdG8ucGFyc2luZ0ZsYWdzICAgICAgPSBwYXJzaW5nRmxhZ3M7XG5wcm90by5zZXQgICAgICAgICAgICAgICA9IHN0cmluZ1NldDtcbnByb3RvLnN0YXJ0T2YgICAgICAgICAgID0gc3RhcnRPZjtcbnByb3RvLnN1YnRyYWN0ICAgICAgICAgID0gc3VidHJhY3Q7XG5wcm90by50b0FycmF5ICAgICAgICAgICA9IHRvQXJyYXk7XG5wcm90by50b09iamVjdCAgICAgICAgICA9IHRvT2JqZWN0O1xucHJvdG8udG9EYXRlICAgICAgICAgICAgPSB0b0RhdGU7XG5wcm90by50b0lTT1N0cmluZyAgICAgICA9IHRvSVNPU3RyaW5nO1xucHJvdG8uaW5zcGVjdCAgICAgICAgICAgPSBpbnNwZWN0O1xucHJvdG8udG9KU09OICAgICAgICAgICAgPSB0b0pTT047XG5wcm90by50b1N0cmluZyAgICAgICAgICA9IHRvU3RyaW5nO1xucHJvdG8udW5peCAgICAgICAgICAgICAgPSB1bml4O1xucHJvdG8udmFsdWVPZiAgICAgICAgICAgPSB2YWx1ZU9mO1xucHJvdG8uY3JlYXRpb25EYXRhICAgICAgPSBjcmVhdGlvbkRhdGE7XG5cbi8vIFllYXJcbnByb3RvLnllYXIgICAgICAgPSBnZXRTZXRZZWFyO1xucHJvdG8uaXNMZWFwWWVhciA9IGdldElzTGVhcFllYXI7XG5cbi8vIFdlZWsgWWVhclxucHJvdG8ud2Vla1llYXIgICAgPSBnZXRTZXRXZWVrWWVhcjtcbnByb3RvLmlzb1dlZWtZZWFyID0gZ2V0U2V0SVNPV2Vla1llYXI7XG5cbi8vIFF1YXJ0ZXJcbnByb3RvLnF1YXJ0ZXIgPSBwcm90by5xdWFydGVycyA9IGdldFNldFF1YXJ0ZXI7XG5cbi8vIE1vbnRoXG5wcm90by5tb250aCAgICAgICA9IGdldFNldE1vbnRoO1xucHJvdG8uZGF5c0luTW9udGggPSBnZXREYXlzSW5Nb250aDtcblxuLy8gV2Vla1xucHJvdG8ud2VlayAgICAgICAgICAgPSBwcm90by53ZWVrcyAgICAgICAgPSBnZXRTZXRXZWVrO1xucHJvdG8uaXNvV2VlayAgICAgICAgPSBwcm90by5pc29XZWVrcyAgICAgPSBnZXRTZXRJU09XZWVrO1xucHJvdG8ud2Vla3NJblllYXIgICAgPSBnZXRXZWVrc0luWWVhcjtcbnByb3RvLmlzb1dlZWtzSW5ZZWFyID0gZ2V0SVNPV2Vla3NJblllYXI7XG5cbi8vIERheVxucHJvdG8uZGF0ZSAgICAgICA9IGdldFNldERheU9mTW9udGg7XG5wcm90by5kYXkgICAgICAgID0gcHJvdG8uZGF5cyAgICAgICAgICAgICA9IGdldFNldERheU9mV2VlaztcbnByb3RvLndlZWtkYXkgICAgPSBnZXRTZXRMb2NhbGVEYXlPZldlZWs7XG5wcm90by5pc29XZWVrZGF5ID0gZ2V0U2V0SVNPRGF5T2ZXZWVrO1xucHJvdG8uZGF5T2ZZZWFyICA9IGdldFNldERheU9mWWVhcjtcblxuLy8gSG91clxucHJvdG8uaG91ciA9IHByb3RvLmhvdXJzID0gZ2V0U2V0SG91cjtcblxuLy8gTWludXRlXG5wcm90by5taW51dGUgPSBwcm90by5taW51dGVzID0gZ2V0U2V0TWludXRlO1xuXG4vLyBTZWNvbmRcbnByb3RvLnNlY29uZCA9IHByb3RvLnNlY29uZHMgPSBnZXRTZXRTZWNvbmQ7XG5cbi8vIE1pbGxpc2Vjb25kXG5wcm90by5taWxsaXNlY29uZCA9IHByb3RvLm1pbGxpc2Vjb25kcyA9IGdldFNldE1pbGxpc2Vjb25kO1xuXG4vLyBPZmZzZXRcbnByb3RvLnV0Y09mZnNldCAgICAgICAgICAgID0gZ2V0U2V0T2Zmc2V0O1xucHJvdG8udXRjICAgICAgICAgICAgICAgICAgPSBzZXRPZmZzZXRUb1VUQztcbnByb3RvLmxvY2FsICAgICAgICAgICAgICAgID0gc2V0T2Zmc2V0VG9Mb2NhbDtcbnByb3RvLnBhcnNlWm9uZSAgICAgICAgICAgID0gc2V0T2Zmc2V0VG9QYXJzZWRPZmZzZXQ7XG5wcm90by5oYXNBbGlnbmVkSG91ck9mZnNldCA9IGhhc0FsaWduZWRIb3VyT2Zmc2V0O1xucHJvdG8uaXNEU1QgICAgICAgICAgICAgICAgPSBpc0RheWxpZ2h0U2F2aW5nVGltZTtcbnByb3RvLmlzTG9jYWwgICAgICAgICAgICAgID0gaXNMb2NhbDtcbnByb3RvLmlzVXRjT2Zmc2V0ICAgICAgICAgID0gaXNVdGNPZmZzZXQ7XG5wcm90by5pc1V0YyAgICAgICAgICAgICAgICA9IGlzVXRjO1xucHJvdG8uaXNVVEMgICAgICAgICAgICAgICAgPSBpc1V0YztcblxuLy8gVGltZXpvbmVcbnByb3RvLnpvbmVBYmJyID0gZ2V0Wm9uZUFiYnI7XG5wcm90by56b25lTmFtZSA9IGdldFpvbmVOYW1lO1xuXG4vLyBEZXByZWNhdGlvbnNcbnByb3RvLmRhdGVzICA9IGRlcHJlY2F0ZSgnZGF0ZXMgYWNjZXNzb3IgaXMgZGVwcmVjYXRlZC4gVXNlIGRhdGUgaW5zdGVhZC4nLCBnZXRTZXREYXlPZk1vbnRoKTtcbnByb3RvLm1vbnRocyA9IGRlcHJlY2F0ZSgnbW9udGhzIGFjY2Vzc29yIGlzIGRlcHJlY2F0ZWQuIFVzZSBtb250aCBpbnN0ZWFkJywgZ2V0U2V0TW9udGgpO1xucHJvdG8ueWVhcnMgID0gZGVwcmVjYXRlKCd5ZWFycyBhY2Nlc3NvciBpcyBkZXByZWNhdGVkLiBVc2UgeWVhciBpbnN0ZWFkJywgZ2V0U2V0WWVhcik7XG5wcm90by56b25lICAgPSBkZXByZWNhdGUoJ21vbWVudCgpLnpvbmUgaXMgZGVwcmVjYXRlZCwgdXNlIG1vbWVudCgpLnV0Y09mZnNldCBpbnN0ZWFkLiBodHRwOi8vbW9tZW50anMuY29tL2d1aWRlcy8jL3dhcm5pbmdzL3pvbmUvJywgZ2V0U2V0Wm9uZSk7XG5wcm90by5pc0RTVFNoaWZ0ZWQgPSBkZXByZWNhdGUoJ2lzRFNUU2hpZnRlZCBpcyBkZXByZWNhdGVkLiBTZWUgaHR0cDovL21vbWVudGpzLmNvbS9ndWlkZXMvIy93YXJuaW5ncy9kc3Qtc2hpZnRlZC8gZm9yIG1vcmUgaW5mb3JtYXRpb24nLCBpc0RheWxpZ2h0U2F2aW5nVGltZVNoaWZ0ZWQpO1xuXG5mdW5jdGlvbiBjcmVhdGVVbml4IChpbnB1dCkge1xuICAgIHJldHVybiBjcmVhdGVMb2NhbChpbnB1dCAqIDEwMDApO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVJblpvbmUgKCkge1xuICAgIHJldHVybiBjcmVhdGVMb2NhbC5hcHBseShudWxsLCBhcmd1bWVudHMpLnBhcnNlWm9uZSgpO1xufVxuXG5mdW5jdGlvbiBwcmVQYXJzZVBvc3RGb3JtYXQgKHN0cmluZykge1xuICAgIHJldHVybiBzdHJpbmc7XG59XG5cbnZhciBwcm90byQxID0gTG9jYWxlLnByb3RvdHlwZTtcblxucHJvdG8kMS5jYWxlbmRhciAgICAgICAgPSBjYWxlbmRhcjtcbnByb3RvJDEubG9uZ0RhdGVGb3JtYXQgID0gbG9uZ0RhdGVGb3JtYXQ7XG5wcm90byQxLmludmFsaWREYXRlICAgICA9IGludmFsaWREYXRlO1xucHJvdG8kMS5vcmRpbmFsICAgICAgICAgPSBvcmRpbmFsO1xucHJvdG8kMS5wcmVwYXJzZSAgICAgICAgPSBwcmVQYXJzZVBvc3RGb3JtYXQ7XG5wcm90byQxLnBvc3Rmb3JtYXQgICAgICA9IHByZVBhcnNlUG9zdEZvcm1hdDtcbnByb3RvJDEucmVsYXRpdmVUaW1lICAgID0gcmVsYXRpdmVUaW1lO1xucHJvdG8kMS5wYXN0RnV0dXJlICAgICAgPSBwYXN0RnV0dXJlO1xucHJvdG8kMS5zZXQgICAgICAgICAgICAgPSBzZXQ7XG5cbi8vIE1vbnRoXG5wcm90byQxLm1vbnRocyAgICAgICAgICAgID0gICAgICAgIGxvY2FsZU1vbnRocztcbnByb3RvJDEubW9udGhzU2hvcnQgICAgICAgPSAgICAgICAgbG9jYWxlTW9udGhzU2hvcnQ7XG5wcm90byQxLm1vbnRoc1BhcnNlICAgICAgID0gICAgICAgIGxvY2FsZU1vbnRoc1BhcnNlO1xucHJvdG8kMS5tb250aHNSZWdleCAgICAgICA9IG1vbnRoc1JlZ2V4O1xucHJvdG8kMS5tb250aHNTaG9ydFJlZ2V4ICA9IG1vbnRoc1Nob3J0UmVnZXg7XG5cbi8vIFdlZWtcbnByb3RvJDEud2VlayA9IGxvY2FsZVdlZWs7XG5wcm90byQxLmZpcnN0RGF5T2ZZZWFyID0gbG9jYWxlRmlyc3REYXlPZlllYXI7XG5wcm90byQxLmZpcnN0RGF5T2ZXZWVrID0gbG9jYWxlRmlyc3REYXlPZldlZWs7XG5cbi8vIERheSBvZiBXZWVrXG5wcm90byQxLndlZWtkYXlzICAgICAgID0gICAgICAgIGxvY2FsZVdlZWtkYXlzO1xucHJvdG8kMS53ZWVrZGF5c01pbiAgICA9ICAgICAgICBsb2NhbGVXZWVrZGF5c01pbjtcbnByb3RvJDEud2Vla2RheXNTaG9ydCAgPSAgICAgICAgbG9jYWxlV2Vla2RheXNTaG9ydDtcbnByb3RvJDEud2Vla2RheXNQYXJzZSAgPSAgICAgICAgbG9jYWxlV2Vla2RheXNQYXJzZTtcblxucHJvdG8kMS53ZWVrZGF5c1JlZ2V4ICAgICAgID0gICAgICAgIHdlZWtkYXlzUmVnZXg7XG5wcm90byQxLndlZWtkYXlzU2hvcnRSZWdleCAgPSAgICAgICAgd2Vla2RheXNTaG9ydFJlZ2V4O1xucHJvdG8kMS53ZWVrZGF5c01pblJlZ2V4ICAgID0gICAgICAgIHdlZWtkYXlzTWluUmVnZXg7XG5cbi8vIEhvdXJzXG5wcm90byQxLmlzUE0gPSBsb2NhbGVJc1BNO1xucHJvdG8kMS5tZXJpZGllbSA9IGxvY2FsZU1lcmlkaWVtO1xuXG5mdW5jdGlvbiBnZXQkMSAoZm9ybWF0LCBpbmRleCwgZmllbGQsIHNldHRlcikge1xuICAgIHZhciBsb2NhbGUgPSBnZXRMb2NhbGUoKTtcbiAgICB2YXIgdXRjID0gY3JlYXRlVVRDKCkuc2V0KHNldHRlciwgaW5kZXgpO1xuICAgIHJldHVybiBsb2NhbGVbZmllbGRdKHV0YywgZm9ybWF0KTtcbn1cblxuZnVuY3Rpb24gbGlzdE1vbnRoc0ltcGwgKGZvcm1hdCwgaW5kZXgsIGZpZWxkKSB7XG4gICAgaWYgKGlzTnVtYmVyKGZvcm1hdCkpIHtcbiAgICAgICAgaW5kZXggPSBmb3JtYXQ7XG4gICAgICAgIGZvcm1hdCA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBmb3JtYXQgPSBmb3JtYXQgfHwgJyc7XG5cbiAgICBpZiAoaW5kZXggIT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gZ2V0JDEoZm9ybWF0LCBpbmRleCwgZmllbGQsICdtb250aCcpO1xuICAgIH1cblxuICAgIHZhciBpO1xuICAgIHZhciBvdXQgPSBbXTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgMTI7IGkrKykge1xuICAgICAgICBvdXRbaV0gPSBnZXQkMShmb3JtYXQsIGksIGZpZWxkLCAnbW9udGgnKTtcbiAgICB9XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLy8gKClcbi8vICg1KVxuLy8gKGZtdCwgNSlcbi8vIChmbXQpXG4vLyAodHJ1ZSlcbi8vICh0cnVlLCA1KVxuLy8gKHRydWUsIGZtdCwgNSlcbi8vICh0cnVlLCBmbXQpXG5mdW5jdGlvbiBsaXN0V2Vla2RheXNJbXBsIChsb2NhbGVTb3J0ZWQsIGZvcm1hdCwgaW5kZXgsIGZpZWxkKSB7XG4gICAgaWYgKHR5cGVvZiBsb2NhbGVTb3J0ZWQgPT09ICdib29sZWFuJykge1xuICAgICAgICBpZiAoaXNOdW1iZXIoZm9ybWF0KSkge1xuICAgICAgICAgICAgaW5kZXggPSBmb3JtYXQ7XG4gICAgICAgICAgICBmb3JtYXQgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICBmb3JtYXQgPSBmb3JtYXQgfHwgJyc7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZm9ybWF0ID0gbG9jYWxlU29ydGVkO1xuICAgICAgICBpbmRleCA9IGZvcm1hdDtcbiAgICAgICAgbG9jYWxlU29ydGVkID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKGlzTnVtYmVyKGZvcm1hdCkpIHtcbiAgICAgICAgICAgIGluZGV4ID0gZm9ybWF0O1xuICAgICAgICAgICAgZm9ybWF0ID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9ybWF0ID0gZm9ybWF0IHx8ICcnO1xuICAgIH1cblxuICAgIHZhciBsb2NhbGUgPSBnZXRMb2NhbGUoKSxcbiAgICAgICAgc2hpZnQgPSBsb2NhbGVTb3J0ZWQgPyBsb2NhbGUuX3dlZWsuZG93IDogMDtcblxuICAgIGlmIChpbmRleCAhPSBudWxsKSB7XG4gICAgICAgIHJldHVybiBnZXQkMShmb3JtYXQsIChpbmRleCArIHNoaWZ0KSAlIDcsIGZpZWxkLCAnZGF5Jyk7XG4gICAgfVxuXG4gICAgdmFyIGk7XG4gICAgdmFyIG91dCA9IFtdO1xuICAgIGZvciAoaSA9IDA7IGkgPCA3OyBpKyspIHtcbiAgICAgICAgb3V0W2ldID0gZ2V0JDEoZm9ybWF0LCAoaSArIHNoaWZ0KSAlIDcsIGZpZWxkLCAnZGF5Jyk7XG4gICAgfVxuICAgIHJldHVybiBvdXQ7XG59XG5cbmZ1bmN0aW9uIGxpc3RNb250aHMgKGZvcm1hdCwgaW5kZXgpIHtcbiAgICByZXR1cm4gbGlzdE1vbnRoc0ltcGwoZm9ybWF0LCBpbmRleCwgJ21vbnRocycpO1xufVxuXG5mdW5jdGlvbiBsaXN0TW9udGhzU2hvcnQgKGZvcm1hdCwgaW5kZXgpIHtcbiAgICByZXR1cm4gbGlzdE1vbnRoc0ltcGwoZm9ybWF0LCBpbmRleCwgJ21vbnRoc1Nob3J0Jyk7XG59XG5cbmZ1bmN0aW9uIGxpc3RXZWVrZGF5cyAobG9jYWxlU29ydGVkLCBmb3JtYXQsIGluZGV4KSB7XG4gICAgcmV0dXJuIGxpc3RXZWVrZGF5c0ltcGwobG9jYWxlU29ydGVkLCBmb3JtYXQsIGluZGV4LCAnd2Vla2RheXMnKTtcbn1cblxuZnVuY3Rpb24gbGlzdFdlZWtkYXlzU2hvcnQgKGxvY2FsZVNvcnRlZCwgZm9ybWF0LCBpbmRleCkge1xuICAgIHJldHVybiBsaXN0V2Vla2RheXNJbXBsKGxvY2FsZVNvcnRlZCwgZm9ybWF0LCBpbmRleCwgJ3dlZWtkYXlzU2hvcnQnKTtcbn1cblxuZnVuY3Rpb24gbGlzdFdlZWtkYXlzTWluIChsb2NhbGVTb3J0ZWQsIGZvcm1hdCwgaW5kZXgpIHtcbiAgICByZXR1cm4gbGlzdFdlZWtkYXlzSW1wbChsb2NhbGVTb3J0ZWQsIGZvcm1hdCwgaW5kZXgsICd3ZWVrZGF5c01pbicpO1xufVxuXG5nZXRTZXRHbG9iYWxMb2NhbGUoJ2VuJywge1xuICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfSh0aHxzdHxuZHxyZCkvLFxuICAgIG9yZGluYWwgOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgIHZhciBiID0gbnVtYmVyICUgMTAsXG4gICAgICAgICAgICBvdXRwdXQgPSAodG9JbnQobnVtYmVyICUgMTAwIC8gMTApID09PSAxKSA/ICd0aCcgOlxuICAgICAgICAgICAgKGIgPT09IDEpID8gJ3N0JyA6XG4gICAgICAgICAgICAoYiA9PT0gMikgPyAnbmQnIDpcbiAgICAgICAgICAgIChiID09PSAzKSA/ICdyZCcgOiAndGgnO1xuICAgICAgICByZXR1cm4gbnVtYmVyICsgb3V0cHV0O1xuICAgIH1cbn0pO1xuXG4vLyBTaWRlIGVmZmVjdCBpbXBvcnRzXG5ob29rcy5sYW5nID0gZGVwcmVjYXRlKCdtb21lbnQubGFuZyBpcyBkZXByZWNhdGVkLiBVc2UgbW9tZW50LmxvY2FsZSBpbnN0ZWFkLicsIGdldFNldEdsb2JhbExvY2FsZSk7XG5ob29rcy5sYW5nRGF0YSA9IGRlcHJlY2F0ZSgnbW9tZW50LmxhbmdEYXRhIGlzIGRlcHJlY2F0ZWQuIFVzZSBtb21lbnQubG9jYWxlRGF0YSBpbnN0ZWFkLicsIGdldExvY2FsZSk7XG5cbnZhciBtYXRoQWJzID0gTWF0aC5hYnM7XG5cbmZ1bmN0aW9uIGFicyAoKSB7XG4gICAgdmFyIGRhdGEgICAgICAgICAgID0gdGhpcy5fZGF0YTtcblxuICAgIHRoaXMuX21pbGxpc2Vjb25kcyA9IG1hdGhBYnModGhpcy5fbWlsbGlzZWNvbmRzKTtcbiAgICB0aGlzLl9kYXlzICAgICAgICAgPSBtYXRoQWJzKHRoaXMuX2RheXMpO1xuICAgIHRoaXMuX21vbnRocyAgICAgICA9IG1hdGhBYnModGhpcy5fbW9udGhzKTtcblxuICAgIGRhdGEubWlsbGlzZWNvbmRzICA9IG1hdGhBYnMoZGF0YS5taWxsaXNlY29uZHMpO1xuICAgIGRhdGEuc2Vjb25kcyAgICAgICA9IG1hdGhBYnMoZGF0YS5zZWNvbmRzKTtcbiAgICBkYXRhLm1pbnV0ZXMgICAgICAgPSBtYXRoQWJzKGRhdGEubWludXRlcyk7XG4gICAgZGF0YS5ob3VycyAgICAgICAgID0gbWF0aEFicyhkYXRhLmhvdXJzKTtcbiAgICBkYXRhLm1vbnRocyAgICAgICAgPSBtYXRoQWJzKGRhdGEubW9udGhzKTtcbiAgICBkYXRhLnllYXJzICAgICAgICAgPSBtYXRoQWJzKGRhdGEueWVhcnMpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIGFkZFN1YnRyYWN0JDEgKGR1cmF0aW9uLCBpbnB1dCwgdmFsdWUsIGRpcmVjdGlvbikge1xuICAgIHZhciBvdGhlciA9IGNyZWF0ZUR1cmF0aW9uKGlucHV0LCB2YWx1ZSk7XG5cbiAgICBkdXJhdGlvbi5fbWlsbGlzZWNvbmRzICs9IGRpcmVjdGlvbiAqIG90aGVyLl9taWxsaXNlY29uZHM7XG4gICAgZHVyYXRpb24uX2RheXMgICAgICAgICArPSBkaXJlY3Rpb24gKiBvdGhlci5fZGF5cztcbiAgICBkdXJhdGlvbi5fbW9udGhzICAgICAgICs9IGRpcmVjdGlvbiAqIG90aGVyLl9tb250aHM7XG5cbiAgICByZXR1cm4gZHVyYXRpb24uX2J1YmJsZSgpO1xufVxuXG4vLyBzdXBwb3J0cyBvbmx5IDIuMC1zdHlsZSBhZGQoMSwgJ3MnKSBvciBhZGQoZHVyYXRpb24pXG5mdW5jdGlvbiBhZGQkMSAoaW5wdXQsIHZhbHVlKSB7XG4gICAgcmV0dXJuIGFkZFN1YnRyYWN0JDEodGhpcywgaW5wdXQsIHZhbHVlLCAxKTtcbn1cblxuLy8gc3VwcG9ydHMgb25seSAyLjAtc3R5bGUgc3VidHJhY3QoMSwgJ3MnKSBvciBzdWJ0cmFjdChkdXJhdGlvbilcbmZ1bmN0aW9uIHN1YnRyYWN0JDEgKGlucHV0LCB2YWx1ZSkge1xuICAgIHJldHVybiBhZGRTdWJ0cmFjdCQxKHRoaXMsIGlucHV0LCB2YWx1ZSwgLTEpO1xufVxuXG5mdW5jdGlvbiBhYnNDZWlsIChudW1iZXIpIHtcbiAgICBpZiAobnVtYmVyIDwgMCkge1xuICAgICAgICByZXR1cm4gTWF0aC5mbG9vcihudW1iZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBNYXRoLmNlaWwobnVtYmVyKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGJ1YmJsZSAoKSB7XG4gICAgdmFyIG1pbGxpc2Vjb25kcyA9IHRoaXMuX21pbGxpc2Vjb25kcztcbiAgICB2YXIgZGF5cyAgICAgICAgID0gdGhpcy5fZGF5cztcbiAgICB2YXIgbW9udGhzICAgICAgID0gdGhpcy5fbW9udGhzO1xuICAgIHZhciBkYXRhICAgICAgICAgPSB0aGlzLl9kYXRhO1xuICAgIHZhciBzZWNvbmRzLCBtaW51dGVzLCBob3VycywgeWVhcnMsIG1vbnRoc0Zyb21EYXlzO1xuXG4gICAgLy8gaWYgd2UgaGF2ZSBhIG1peCBvZiBwb3NpdGl2ZSBhbmQgbmVnYXRpdmUgdmFsdWVzLCBidWJibGUgZG93biBmaXJzdFxuICAgIC8vIGNoZWNrOiBodHRwczovL2dpdGh1Yi5jb20vbW9tZW50L21vbWVudC9pc3N1ZXMvMjE2NlxuICAgIGlmICghKChtaWxsaXNlY29uZHMgPj0gMCAmJiBkYXlzID49IDAgJiYgbW9udGhzID49IDApIHx8XG4gICAgICAgICAgICAobWlsbGlzZWNvbmRzIDw9IDAgJiYgZGF5cyA8PSAwICYmIG1vbnRocyA8PSAwKSkpIHtcbiAgICAgICAgbWlsbGlzZWNvbmRzICs9IGFic0NlaWwobW9udGhzVG9EYXlzKG1vbnRocykgKyBkYXlzKSAqIDg2NGU1O1xuICAgICAgICBkYXlzID0gMDtcbiAgICAgICAgbW9udGhzID0gMDtcbiAgICB9XG5cbiAgICAvLyBUaGUgZm9sbG93aW5nIGNvZGUgYnViYmxlcyB1cCB2YWx1ZXMsIHNlZSB0aGUgdGVzdHMgZm9yXG4gICAgLy8gZXhhbXBsZXMgb2Ygd2hhdCB0aGF0IG1lYW5zLlxuICAgIGRhdGEubWlsbGlzZWNvbmRzID0gbWlsbGlzZWNvbmRzICUgMTAwMDtcblxuICAgIHNlY29uZHMgICAgICAgICAgID0gYWJzRmxvb3IobWlsbGlzZWNvbmRzIC8gMTAwMCk7XG4gICAgZGF0YS5zZWNvbmRzICAgICAgPSBzZWNvbmRzICUgNjA7XG5cbiAgICBtaW51dGVzICAgICAgICAgICA9IGFic0Zsb29yKHNlY29uZHMgLyA2MCk7XG4gICAgZGF0YS5taW51dGVzICAgICAgPSBtaW51dGVzICUgNjA7XG5cbiAgICBob3VycyAgICAgICAgICAgICA9IGFic0Zsb29yKG1pbnV0ZXMgLyA2MCk7XG4gICAgZGF0YS5ob3VycyAgICAgICAgPSBob3VycyAlIDI0O1xuXG4gICAgZGF5cyArPSBhYnNGbG9vcihob3VycyAvIDI0KTtcblxuICAgIC8vIGNvbnZlcnQgZGF5cyB0byBtb250aHNcbiAgICBtb250aHNGcm9tRGF5cyA9IGFic0Zsb29yKGRheXNUb01vbnRocyhkYXlzKSk7XG4gICAgbW9udGhzICs9IG1vbnRoc0Zyb21EYXlzO1xuICAgIGRheXMgLT0gYWJzQ2VpbChtb250aHNUb0RheXMobW9udGhzRnJvbURheXMpKTtcblxuICAgIC8vIDEyIG1vbnRocyAtPiAxIHllYXJcbiAgICB5ZWFycyA9IGFic0Zsb29yKG1vbnRocyAvIDEyKTtcbiAgICBtb250aHMgJT0gMTI7XG5cbiAgICBkYXRhLmRheXMgICA9IGRheXM7XG4gICAgZGF0YS5tb250aHMgPSBtb250aHM7XG4gICAgZGF0YS55ZWFycyAgPSB5ZWFycztcblxuICAgIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiBkYXlzVG9Nb250aHMgKGRheXMpIHtcbiAgICAvLyA0MDAgeWVhcnMgaGF2ZSAxNDYwOTcgZGF5cyAodGFraW5nIGludG8gYWNjb3VudCBsZWFwIHllYXIgcnVsZXMpXG4gICAgLy8gNDAwIHllYXJzIGhhdmUgMTIgbW9udGhzID09PSA0ODAwXG4gICAgcmV0dXJuIGRheXMgKiA0ODAwIC8gMTQ2MDk3O1xufVxuXG5mdW5jdGlvbiBtb250aHNUb0RheXMgKG1vbnRocykge1xuICAgIC8vIHRoZSByZXZlcnNlIG9mIGRheXNUb01vbnRoc1xuICAgIHJldHVybiBtb250aHMgKiAxNDYwOTcgLyA0ODAwO1xufVxuXG5mdW5jdGlvbiBhcyAodW5pdHMpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgIHJldHVybiBOYU47XG4gICAgfVxuICAgIHZhciBkYXlzO1xuICAgIHZhciBtb250aHM7XG4gICAgdmFyIG1pbGxpc2Vjb25kcyA9IHRoaXMuX21pbGxpc2Vjb25kcztcblxuICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpO1xuXG4gICAgaWYgKHVuaXRzID09PSAnbW9udGgnIHx8IHVuaXRzID09PSAneWVhcicpIHtcbiAgICAgICAgZGF5cyAgID0gdGhpcy5fZGF5cyAgICsgbWlsbGlzZWNvbmRzIC8gODY0ZTU7XG4gICAgICAgIG1vbnRocyA9IHRoaXMuX21vbnRocyArIGRheXNUb01vbnRocyhkYXlzKTtcbiAgICAgICAgcmV0dXJuIHVuaXRzID09PSAnbW9udGgnID8gbW9udGhzIDogbW9udGhzIC8gMTI7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gaGFuZGxlIG1pbGxpc2Vjb25kcyBzZXBhcmF0ZWx5IGJlY2F1c2Ugb2YgZmxvYXRpbmcgcG9pbnQgbWF0aCBlcnJvcnMgKGlzc3VlICMxODY3KVxuICAgICAgICBkYXlzID0gdGhpcy5fZGF5cyArIE1hdGgucm91bmQobW9udGhzVG9EYXlzKHRoaXMuX21vbnRocykpO1xuICAgICAgICBzd2l0Y2ggKHVuaXRzKSB7XG4gICAgICAgICAgICBjYXNlICd3ZWVrJyAgIDogcmV0dXJuIGRheXMgLyA3ICAgICArIG1pbGxpc2Vjb25kcyAvIDYwNDhlNTtcbiAgICAgICAgICAgIGNhc2UgJ2RheScgICAgOiByZXR1cm4gZGF5cyAgICAgICAgICsgbWlsbGlzZWNvbmRzIC8gODY0ZTU7XG4gICAgICAgICAgICBjYXNlICdob3VyJyAgIDogcmV0dXJuIGRheXMgKiAyNCAgICArIG1pbGxpc2Vjb25kcyAvIDM2ZTU7XG4gICAgICAgICAgICBjYXNlICdtaW51dGUnIDogcmV0dXJuIGRheXMgKiAxNDQwICArIG1pbGxpc2Vjb25kcyAvIDZlNDtcbiAgICAgICAgICAgIGNhc2UgJ3NlY29uZCcgOiByZXR1cm4gZGF5cyAqIDg2NDAwICsgbWlsbGlzZWNvbmRzIC8gMTAwMDtcbiAgICAgICAgICAgIC8vIE1hdGguZmxvb3IgcHJldmVudHMgZmxvYXRpbmcgcG9pbnQgbWF0aCBlcnJvcnMgaGVyZVxuICAgICAgICAgICAgY2FzZSAnbWlsbGlzZWNvbmQnOiByZXR1cm4gTWF0aC5mbG9vcihkYXlzICogODY0ZTUpICsgbWlsbGlzZWNvbmRzO1xuICAgICAgICAgICAgZGVmYXVsdDogdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIHVuaXQgJyArIHVuaXRzKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuLy8gVE9ETzogVXNlIHRoaXMuYXMoJ21zJyk/XG5mdW5jdGlvbiB2YWx1ZU9mJDEgKCkge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgcmV0dXJuIE5hTjtcbiAgICB9XG4gICAgcmV0dXJuIChcbiAgICAgICAgdGhpcy5fbWlsbGlzZWNvbmRzICtcbiAgICAgICAgdGhpcy5fZGF5cyAqIDg2NGU1ICtcbiAgICAgICAgKHRoaXMuX21vbnRocyAlIDEyKSAqIDI1OTJlNiArXG4gICAgICAgIHRvSW50KHRoaXMuX21vbnRocyAvIDEyKSAqIDMxNTM2ZTZcbiAgICApO1xufVxuXG5mdW5jdGlvbiBtYWtlQXMgKGFsaWFzKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXMoYWxpYXMpO1xuICAgIH07XG59XG5cbnZhciBhc01pbGxpc2Vjb25kcyA9IG1ha2VBcygnbXMnKTtcbnZhciBhc1NlY29uZHMgICAgICA9IG1ha2VBcygncycpO1xudmFyIGFzTWludXRlcyAgICAgID0gbWFrZUFzKCdtJyk7XG52YXIgYXNIb3VycyAgICAgICAgPSBtYWtlQXMoJ2gnKTtcbnZhciBhc0RheXMgICAgICAgICA9IG1ha2VBcygnZCcpO1xudmFyIGFzV2Vla3MgICAgICAgID0gbWFrZUFzKCd3Jyk7XG52YXIgYXNNb250aHMgICAgICAgPSBtYWtlQXMoJ00nKTtcbnZhciBhc1llYXJzICAgICAgICA9IG1ha2VBcygneScpO1xuXG5mdW5jdGlvbiBjbG9uZSQxICgpIHtcbiAgICByZXR1cm4gY3JlYXRlRHVyYXRpb24odGhpcyk7XG59XG5cbmZ1bmN0aW9uIGdldCQyICh1bml0cykge1xuICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpO1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQoKSA/IHRoaXNbdW5pdHMgKyAncyddKCkgOiBOYU47XG59XG5cbmZ1bmN0aW9uIG1ha2VHZXR0ZXIobmFtZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQoKSA/IHRoaXMuX2RhdGFbbmFtZV0gOiBOYU47XG4gICAgfTtcbn1cblxudmFyIG1pbGxpc2Vjb25kcyA9IG1ha2VHZXR0ZXIoJ21pbGxpc2Vjb25kcycpO1xudmFyIHNlY29uZHMgICAgICA9IG1ha2VHZXR0ZXIoJ3NlY29uZHMnKTtcbnZhciBtaW51dGVzICAgICAgPSBtYWtlR2V0dGVyKCdtaW51dGVzJyk7XG52YXIgaG91cnMgICAgICAgID0gbWFrZUdldHRlcignaG91cnMnKTtcbnZhciBkYXlzICAgICAgICAgPSBtYWtlR2V0dGVyKCdkYXlzJyk7XG52YXIgbW9udGhzICAgICAgID0gbWFrZUdldHRlcignbW9udGhzJyk7XG52YXIgeWVhcnMgICAgICAgID0gbWFrZUdldHRlcigneWVhcnMnKTtcblxuZnVuY3Rpb24gd2Vla3MgKCkge1xuICAgIHJldHVybiBhYnNGbG9vcih0aGlzLmRheXMoKSAvIDcpO1xufVxuXG52YXIgcm91bmQgPSBNYXRoLnJvdW5kO1xudmFyIHRocmVzaG9sZHMgPSB7XG4gICAgc3M6IDQ0LCAgICAgICAgIC8vIGEgZmV3IHNlY29uZHMgdG8gc2Vjb25kc1xuICAgIHMgOiA0NSwgICAgICAgICAvLyBzZWNvbmRzIHRvIG1pbnV0ZVxuICAgIG0gOiA0NSwgICAgICAgICAvLyBtaW51dGVzIHRvIGhvdXJcbiAgICBoIDogMjIsICAgICAgICAgLy8gaG91cnMgdG8gZGF5XG4gICAgZCA6IDI2LCAgICAgICAgIC8vIGRheXMgdG8gbW9udGhcbiAgICBNIDogMTEgICAgICAgICAgLy8gbW9udGhzIHRvIHllYXJcbn07XG5cbi8vIGhlbHBlciBmdW5jdGlvbiBmb3IgbW9tZW50LmZuLmZyb20sIG1vbWVudC5mbi5mcm9tTm93LCBhbmQgbW9tZW50LmR1cmF0aW9uLmZuLmh1bWFuaXplXG5mdW5jdGlvbiBzdWJzdGl0dXRlVGltZUFnbyhzdHJpbmcsIG51bWJlciwgd2l0aG91dFN1ZmZpeCwgaXNGdXR1cmUsIGxvY2FsZSkge1xuICAgIHJldHVybiBsb2NhbGUucmVsYXRpdmVUaW1lKG51bWJlciB8fCAxLCAhIXdpdGhvdXRTdWZmaXgsIHN0cmluZywgaXNGdXR1cmUpO1xufVxuXG5mdW5jdGlvbiByZWxhdGl2ZVRpbWUkMSAocG9zTmVnRHVyYXRpb24sIHdpdGhvdXRTdWZmaXgsIGxvY2FsZSkge1xuICAgIHZhciBkdXJhdGlvbiA9IGNyZWF0ZUR1cmF0aW9uKHBvc05lZ0R1cmF0aW9uKS5hYnMoKTtcbiAgICB2YXIgc2Vjb25kcyAgPSByb3VuZChkdXJhdGlvbi5hcygncycpKTtcbiAgICB2YXIgbWludXRlcyAgPSByb3VuZChkdXJhdGlvbi5hcygnbScpKTtcbiAgICB2YXIgaG91cnMgICAgPSByb3VuZChkdXJhdGlvbi5hcygnaCcpKTtcbiAgICB2YXIgZGF5cyAgICAgPSByb3VuZChkdXJhdGlvbi5hcygnZCcpKTtcbiAgICB2YXIgbW9udGhzICAgPSByb3VuZChkdXJhdGlvbi5hcygnTScpKTtcbiAgICB2YXIgeWVhcnMgICAgPSByb3VuZChkdXJhdGlvbi5hcygneScpKTtcblxuICAgIHZhciBhID0gc2Vjb25kcyA8PSB0aHJlc2hvbGRzLnNzICYmIFsncycsIHNlY29uZHNdICB8fFxuICAgICAgICAgICAgc2Vjb25kcyA8IHRocmVzaG9sZHMucyAgICYmIFsnc3MnLCBzZWNvbmRzXSB8fFxuICAgICAgICAgICAgbWludXRlcyA8PSAxICAgICAgICAgICAgICYmIFsnbSddICAgICAgICAgICB8fFxuICAgICAgICAgICAgbWludXRlcyA8IHRocmVzaG9sZHMubSAgICYmIFsnbW0nLCBtaW51dGVzXSB8fFxuICAgICAgICAgICAgaG91cnMgICA8PSAxICAgICAgICAgICAgICYmIFsnaCddICAgICAgICAgICB8fFxuICAgICAgICAgICAgaG91cnMgICA8IHRocmVzaG9sZHMuaCAgICYmIFsnaGgnLCBob3Vyc10gICB8fFxuICAgICAgICAgICAgZGF5cyAgICA8PSAxICAgICAgICAgICAgICYmIFsnZCddICAgICAgICAgICB8fFxuICAgICAgICAgICAgZGF5cyAgICA8IHRocmVzaG9sZHMuZCAgICYmIFsnZGQnLCBkYXlzXSAgICB8fFxuICAgICAgICAgICAgbW9udGhzICA8PSAxICAgICAgICAgICAgICYmIFsnTSddICAgICAgICAgICB8fFxuICAgICAgICAgICAgbW9udGhzICA8IHRocmVzaG9sZHMuTSAgICYmIFsnTU0nLCBtb250aHNdICB8fFxuICAgICAgICAgICAgeWVhcnMgICA8PSAxICAgICAgICAgICAgICYmIFsneSddICAgICAgICAgICB8fCBbJ3l5JywgeWVhcnNdO1xuXG4gICAgYVsyXSA9IHdpdGhvdXRTdWZmaXg7XG4gICAgYVszXSA9ICtwb3NOZWdEdXJhdGlvbiA+IDA7XG4gICAgYVs0XSA9IGxvY2FsZTtcbiAgICByZXR1cm4gc3Vic3RpdHV0ZVRpbWVBZ28uYXBwbHkobnVsbCwgYSk7XG59XG5cbi8vIFRoaXMgZnVuY3Rpb24gYWxsb3dzIHlvdSB0byBzZXQgdGhlIHJvdW5kaW5nIGZ1bmN0aW9uIGZvciByZWxhdGl2ZSB0aW1lIHN0cmluZ3NcbmZ1bmN0aW9uIGdldFNldFJlbGF0aXZlVGltZVJvdW5kaW5nIChyb3VuZGluZ0Z1bmN0aW9uKSB7XG4gICAgaWYgKHJvdW5kaW5nRnVuY3Rpb24gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gcm91bmQ7XG4gICAgfVxuICAgIGlmICh0eXBlb2Yocm91bmRpbmdGdW5jdGlvbikgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcm91bmQgPSByb3VuZGluZ0Z1bmN0aW9uO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuXG4vLyBUaGlzIGZ1bmN0aW9uIGFsbG93cyB5b3UgdG8gc2V0IGEgdGhyZXNob2xkIGZvciByZWxhdGl2ZSB0aW1lIHN0cmluZ3NcbmZ1bmN0aW9uIGdldFNldFJlbGF0aXZlVGltZVRocmVzaG9sZCAodGhyZXNob2xkLCBsaW1pdCkge1xuICAgIGlmICh0aHJlc2hvbGRzW3RocmVzaG9sZF0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChsaW1pdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiB0aHJlc2hvbGRzW3RocmVzaG9sZF07XG4gICAgfVxuICAgIHRocmVzaG9sZHNbdGhyZXNob2xkXSA9IGxpbWl0O1xuICAgIGlmICh0aHJlc2hvbGQgPT09ICdzJykge1xuICAgICAgICB0aHJlc2hvbGRzLnNzID0gbGltaXQgLSAxO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gaHVtYW5pemUgKHdpdGhTdWZmaXgpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS5pbnZhbGlkRGF0ZSgpO1xuICAgIH1cblxuICAgIHZhciBsb2NhbGUgPSB0aGlzLmxvY2FsZURhdGEoKTtcbiAgICB2YXIgb3V0cHV0ID0gcmVsYXRpdmVUaW1lJDEodGhpcywgIXdpdGhTdWZmaXgsIGxvY2FsZSk7XG5cbiAgICBpZiAod2l0aFN1ZmZpeCkge1xuICAgICAgICBvdXRwdXQgPSBsb2NhbGUucGFzdEZ1dHVyZSgrdGhpcywgb3V0cHV0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbG9jYWxlLnBvc3Rmb3JtYXQob3V0cHV0KTtcbn1cblxudmFyIGFicyQxID0gTWF0aC5hYnM7XG5cbmZ1bmN0aW9uIHNpZ24oeCkge1xuICAgIHJldHVybiAoKHggPiAwKSAtICh4IDwgMCkpIHx8ICt4O1xufVxuXG5mdW5jdGlvbiB0b0lTT1N0cmluZyQxKCkge1xuICAgIC8vIGZvciBJU08gc3RyaW5ncyB3ZSBkbyBub3QgdXNlIHRoZSBub3JtYWwgYnViYmxpbmcgcnVsZXM6XG4gICAgLy8gICogbWlsbGlzZWNvbmRzIGJ1YmJsZSB1cCB1bnRpbCB0aGV5IGJlY29tZSBob3Vyc1xuICAgIC8vICAqIGRheXMgZG8gbm90IGJ1YmJsZSBhdCBhbGxcbiAgICAvLyAgKiBtb250aHMgYnViYmxlIHVwIHVudGlsIHRoZXkgYmVjb21lIHllYXJzXG4gICAgLy8gVGhpcyBpcyBiZWNhdXNlIHRoZXJlIGlzIG5vIGNvbnRleHQtZnJlZSBjb252ZXJzaW9uIGJldHdlZW4gaG91cnMgYW5kIGRheXNcbiAgICAvLyAodGhpbmsgb2YgY2xvY2sgY2hhbmdlcylcbiAgICAvLyBhbmQgYWxzbyBub3QgYmV0d2VlbiBkYXlzIGFuZCBtb250aHMgKDI4LTMxIGRheXMgcGVyIG1vbnRoKVxuICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLmludmFsaWREYXRlKCk7XG4gICAgfVxuXG4gICAgdmFyIHNlY29uZHMgPSBhYnMkMSh0aGlzLl9taWxsaXNlY29uZHMpIC8gMTAwMDtcbiAgICB2YXIgZGF5cyAgICAgICAgID0gYWJzJDEodGhpcy5fZGF5cyk7XG4gICAgdmFyIG1vbnRocyAgICAgICA9IGFicyQxKHRoaXMuX21vbnRocyk7XG4gICAgdmFyIG1pbnV0ZXMsIGhvdXJzLCB5ZWFycztcblxuICAgIC8vIDM2MDAgc2Vjb25kcyAtPiA2MCBtaW51dGVzIC0+IDEgaG91clxuICAgIG1pbnV0ZXMgICAgICAgICAgID0gYWJzRmxvb3Ioc2Vjb25kcyAvIDYwKTtcbiAgICBob3VycyAgICAgICAgICAgICA9IGFic0Zsb29yKG1pbnV0ZXMgLyA2MCk7XG4gICAgc2Vjb25kcyAlPSA2MDtcbiAgICBtaW51dGVzICU9IDYwO1xuXG4gICAgLy8gMTIgbW9udGhzIC0+IDEgeWVhclxuICAgIHllYXJzICA9IGFic0Zsb29yKG1vbnRocyAvIDEyKTtcbiAgICBtb250aHMgJT0gMTI7XG5cblxuICAgIC8vIGluc3BpcmVkIGJ5IGh0dHBzOi8vZ2l0aHViLmNvbS9kb3JkaWxsZS9tb21lbnQtaXNvZHVyYXRpb24vYmxvYi9tYXN0ZXIvbW9tZW50Lmlzb2R1cmF0aW9uLmpzXG4gICAgdmFyIFkgPSB5ZWFycztcbiAgICB2YXIgTSA9IG1vbnRocztcbiAgICB2YXIgRCA9IGRheXM7XG4gICAgdmFyIGggPSBob3VycztcbiAgICB2YXIgbSA9IG1pbnV0ZXM7XG4gICAgdmFyIHMgPSBzZWNvbmRzID8gc2Vjb25kcy50b0ZpeGVkKDMpLnJlcGxhY2UoL1xcLj8wKyQvLCAnJykgOiAnJztcbiAgICB2YXIgdG90YWwgPSB0aGlzLmFzU2Vjb25kcygpO1xuXG4gICAgaWYgKCF0b3RhbCkge1xuICAgICAgICAvLyB0aGlzIGlzIHRoZSBzYW1lIGFzIEMjJ3MgKE5vZGEpIGFuZCBweXRob24gKGlzb2RhdGUpLi4uXG4gICAgICAgIC8vIGJ1dCBub3Qgb3RoZXIgSlMgKGdvb2cuZGF0ZSlcbiAgICAgICAgcmV0dXJuICdQMEQnO1xuICAgIH1cblxuICAgIHZhciB0b3RhbFNpZ24gPSB0b3RhbCA8IDAgPyAnLScgOiAnJztcbiAgICB2YXIgeW1TaWduID0gc2lnbih0aGlzLl9tb250aHMpICE9PSBzaWduKHRvdGFsKSA/ICctJyA6ICcnO1xuICAgIHZhciBkYXlzU2lnbiA9IHNpZ24odGhpcy5fZGF5cykgIT09IHNpZ24odG90YWwpID8gJy0nIDogJyc7XG4gICAgdmFyIGhtc1NpZ24gPSBzaWduKHRoaXMuX21pbGxpc2Vjb25kcykgIT09IHNpZ24odG90YWwpID8gJy0nIDogJyc7XG5cbiAgICByZXR1cm4gdG90YWxTaWduICsgJ1AnICtcbiAgICAgICAgKFkgPyB5bVNpZ24gKyBZICsgJ1knIDogJycpICtcbiAgICAgICAgKE0gPyB5bVNpZ24gKyBNICsgJ00nIDogJycpICtcbiAgICAgICAgKEQgPyBkYXlzU2lnbiArIEQgKyAnRCcgOiAnJykgK1xuICAgICAgICAoKGggfHwgbSB8fCBzKSA/ICdUJyA6ICcnKSArXG4gICAgICAgIChoID8gaG1zU2lnbiArIGggKyAnSCcgOiAnJykgK1xuICAgICAgICAobSA/IGhtc1NpZ24gKyBtICsgJ00nIDogJycpICtcbiAgICAgICAgKHMgPyBobXNTaWduICsgcyArICdTJyA6ICcnKTtcbn1cblxudmFyIHByb3RvJDIgPSBEdXJhdGlvbi5wcm90b3R5cGU7XG5cbnByb3RvJDIuaXNWYWxpZCAgICAgICAgPSBpc1ZhbGlkJDE7XG5wcm90byQyLmFicyAgICAgICAgICAgID0gYWJzO1xucHJvdG8kMi5hZGQgICAgICAgICAgICA9IGFkZCQxO1xucHJvdG8kMi5zdWJ0cmFjdCAgICAgICA9IHN1YnRyYWN0JDE7XG5wcm90byQyLmFzICAgICAgICAgICAgID0gYXM7XG5wcm90byQyLmFzTWlsbGlzZWNvbmRzID0gYXNNaWxsaXNlY29uZHM7XG5wcm90byQyLmFzU2Vjb25kcyAgICAgID0gYXNTZWNvbmRzO1xucHJvdG8kMi5hc01pbnV0ZXMgICAgICA9IGFzTWludXRlcztcbnByb3RvJDIuYXNIb3VycyAgICAgICAgPSBhc0hvdXJzO1xucHJvdG8kMi5hc0RheXMgICAgICAgICA9IGFzRGF5cztcbnByb3RvJDIuYXNXZWVrcyAgICAgICAgPSBhc1dlZWtzO1xucHJvdG8kMi5hc01vbnRocyAgICAgICA9IGFzTW9udGhzO1xucHJvdG8kMi5hc1llYXJzICAgICAgICA9IGFzWWVhcnM7XG5wcm90byQyLnZhbHVlT2YgICAgICAgID0gdmFsdWVPZiQxO1xucHJvdG8kMi5fYnViYmxlICAgICAgICA9IGJ1YmJsZTtcbnByb3RvJDIuY2xvbmUgICAgICAgICAgPSBjbG9uZSQxO1xucHJvdG8kMi5nZXQgICAgICAgICAgICA9IGdldCQyO1xucHJvdG8kMi5taWxsaXNlY29uZHMgICA9IG1pbGxpc2Vjb25kcztcbnByb3RvJDIuc2Vjb25kcyAgICAgICAgPSBzZWNvbmRzO1xucHJvdG8kMi5taW51dGVzICAgICAgICA9IG1pbnV0ZXM7XG5wcm90byQyLmhvdXJzICAgICAgICAgID0gaG91cnM7XG5wcm90byQyLmRheXMgICAgICAgICAgID0gZGF5cztcbnByb3RvJDIud2Vla3MgICAgICAgICAgPSB3ZWVrcztcbnByb3RvJDIubW9udGhzICAgICAgICAgPSBtb250aHM7XG5wcm90byQyLnllYXJzICAgICAgICAgID0geWVhcnM7XG5wcm90byQyLmh1bWFuaXplICAgICAgID0gaHVtYW5pemU7XG5wcm90byQyLnRvSVNPU3RyaW5nICAgID0gdG9JU09TdHJpbmckMTtcbnByb3RvJDIudG9TdHJpbmcgICAgICAgPSB0b0lTT1N0cmluZyQxO1xucHJvdG8kMi50b0pTT04gICAgICAgICA9IHRvSVNPU3RyaW5nJDE7XG5wcm90byQyLmxvY2FsZSAgICAgICAgID0gbG9jYWxlO1xucHJvdG8kMi5sb2NhbGVEYXRhICAgICA9IGxvY2FsZURhdGE7XG5cbi8vIERlcHJlY2F0aW9uc1xucHJvdG8kMi50b0lzb1N0cmluZyA9IGRlcHJlY2F0ZSgndG9Jc29TdHJpbmcoKSBpcyBkZXByZWNhdGVkLiBQbGVhc2UgdXNlIHRvSVNPU3RyaW5nKCkgaW5zdGVhZCAobm90aWNlIHRoZSBjYXBpdGFscyknLCB0b0lTT1N0cmluZyQxKTtcbnByb3RvJDIubGFuZyA9IGxhbmc7XG5cbi8vIFNpZGUgZWZmZWN0IGltcG9ydHNcblxuLy8gRk9STUFUVElOR1xuXG5hZGRGb3JtYXRUb2tlbignWCcsIDAsIDAsICd1bml4Jyk7XG5hZGRGb3JtYXRUb2tlbigneCcsIDAsIDAsICd2YWx1ZU9mJyk7XG5cbi8vIFBBUlNJTkdcblxuYWRkUmVnZXhUb2tlbigneCcsIG1hdGNoU2lnbmVkKTtcbmFkZFJlZ2V4VG9rZW4oJ1gnLCBtYXRjaFRpbWVzdGFtcCk7XG5hZGRQYXJzZVRva2VuKCdYJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgY29uZmlnLl9kID0gbmV3IERhdGUocGFyc2VGbG9hdChpbnB1dCwgMTApICogMTAwMCk7XG59KTtcbmFkZFBhcnNlVG9rZW4oJ3gnLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICBjb25maWcuX2QgPSBuZXcgRGF0ZSh0b0ludChpbnB1dCkpO1xufSk7XG5cbi8vIFNpZGUgZWZmZWN0IGltcG9ydHNcblxuXG5ob29rcy52ZXJzaW9uID0gJzIuMTkuMyc7XG5cbnNldEhvb2tDYWxsYmFjayhjcmVhdGVMb2NhbCk7XG5cbmhvb2tzLmZuICAgICAgICAgICAgICAgICAgICA9IHByb3RvO1xuaG9va3MubWluICAgICAgICAgICAgICAgICAgID0gbWluO1xuaG9va3MubWF4ICAgICAgICAgICAgICAgICAgID0gbWF4O1xuaG9va3Mubm93ICAgICAgICAgICAgICAgICAgID0gbm93O1xuaG9va3MudXRjICAgICAgICAgICAgICAgICAgID0gY3JlYXRlVVRDO1xuaG9va3MudW5peCAgICAgICAgICAgICAgICAgID0gY3JlYXRlVW5peDtcbmhvb2tzLm1vbnRocyAgICAgICAgICAgICAgICA9IGxpc3RNb250aHM7XG5ob29rcy5pc0RhdGUgICAgICAgICAgICAgICAgPSBpc0RhdGU7XG5ob29rcy5sb2NhbGUgICAgICAgICAgICAgICAgPSBnZXRTZXRHbG9iYWxMb2NhbGU7XG5ob29rcy5pbnZhbGlkICAgICAgICAgICAgICAgPSBjcmVhdGVJbnZhbGlkO1xuaG9va3MuZHVyYXRpb24gICAgICAgICAgICAgID0gY3JlYXRlRHVyYXRpb247XG5ob29rcy5pc01vbWVudCAgICAgICAgICAgICAgPSBpc01vbWVudDtcbmhvb2tzLndlZWtkYXlzICAgICAgICAgICAgICA9IGxpc3RXZWVrZGF5cztcbmhvb2tzLnBhcnNlWm9uZSAgICAgICAgICAgICA9IGNyZWF0ZUluWm9uZTtcbmhvb2tzLmxvY2FsZURhdGEgICAgICAgICAgICA9IGdldExvY2FsZTtcbmhvb2tzLmlzRHVyYXRpb24gICAgICAgICAgICA9IGlzRHVyYXRpb247XG5ob29rcy5tb250aHNTaG9ydCAgICAgICAgICAgPSBsaXN0TW9udGhzU2hvcnQ7XG5ob29rcy53ZWVrZGF5c01pbiAgICAgICAgICAgPSBsaXN0V2Vla2RheXNNaW47XG5ob29rcy5kZWZpbmVMb2NhbGUgICAgICAgICAgPSBkZWZpbmVMb2NhbGU7XG5ob29rcy51cGRhdGVMb2NhbGUgICAgICAgICAgPSB1cGRhdGVMb2NhbGU7XG5ob29rcy5sb2NhbGVzICAgICAgICAgICAgICAgPSBsaXN0TG9jYWxlcztcbmhvb2tzLndlZWtkYXlzU2hvcnQgICAgICAgICA9IGxpc3RXZWVrZGF5c1Nob3J0O1xuaG9va3Mubm9ybWFsaXplVW5pdHMgICAgICAgID0gbm9ybWFsaXplVW5pdHM7XG5ob29rcy5yZWxhdGl2ZVRpbWVSb3VuZGluZyAgPSBnZXRTZXRSZWxhdGl2ZVRpbWVSb3VuZGluZztcbmhvb2tzLnJlbGF0aXZlVGltZVRocmVzaG9sZCA9IGdldFNldFJlbGF0aXZlVGltZVRocmVzaG9sZDtcbmhvb2tzLmNhbGVuZGFyRm9ybWF0ICAgICAgICA9IGdldENhbGVuZGFyRm9ybWF0O1xuaG9va3MucHJvdG90eXBlICAgICAgICAgICAgID0gcHJvdG87XG5cbnJldHVybiBob29rcztcblxufSkpKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9tb21lbnQvbW9tZW50LmpzIiwiLyohIGpRdWVyeSB2My4yLjEgfCAoYykgSlMgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzIHwganF1ZXJ5Lm9yZy9saWNlbnNlICovXG4hZnVuY3Rpb24oYSxiKXtcInVzZSBzdHJpY3RcIjtcIm9iamVjdFwiPT10eXBlb2YgbW9kdWxlJiZcIm9iamVjdFwiPT10eXBlb2YgbW9kdWxlLmV4cG9ydHM/bW9kdWxlLmV4cG9ydHM9YS5kb2N1bWVudD9iKGEsITApOmZ1bmN0aW9uKGEpe2lmKCFhLmRvY3VtZW50KXRocm93IG5ldyBFcnJvcihcImpRdWVyeSByZXF1aXJlcyBhIHdpbmRvdyB3aXRoIGEgZG9jdW1lbnRcIik7cmV0dXJuIGIoYSl9OmIoYSl9KFwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3c/d2luZG93OnRoaXMsZnVuY3Rpb24oYSxiKXtcInVzZSBzdHJpY3RcIjt2YXIgYz1bXSxkPWEuZG9jdW1lbnQsZT1PYmplY3QuZ2V0UHJvdG90eXBlT2YsZj1jLnNsaWNlLGc9Yy5jb25jYXQsaD1jLnB1c2gsaT1jLmluZGV4T2Ysaj17fSxrPWoudG9TdHJpbmcsbD1qLmhhc093blByb3BlcnR5LG09bC50b1N0cmluZyxuPW0uY2FsbChPYmplY3QpLG89e307ZnVuY3Rpb24gcChhLGIpe2I9Ynx8ZDt2YXIgYz1iLmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIik7Yy50ZXh0PWEsYi5oZWFkLmFwcGVuZENoaWxkKGMpLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoYyl9dmFyIHE9XCIzLjIuMVwiLHI9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gbmV3IHIuZm4uaW5pdChhLGIpfSxzPS9eW1xcc1xcdUZFRkZcXHhBMF0rfFtcXHNcXHVGRUZGXFx4QTBdKyQvZyx0PS9eLW1zLS8sdT0vLShbYS16XSkvZyx2PWZ1bmN0aW9uKGEsYil7cmV0dXJuIGIudG9VcHBlckNhc2UoKX07ci5mbj1yLnByb3RvdHlwZT17anF1ZXJ5OnEsY29uc3RydWN0b3I6cixsZW5ndGg6MCx0b0FycmF5OmZ1bmN0aW9uKCl7cmV0dXJuIGYuY2FsbCh0aGlzKX0sZ2V0OmZ1bmN0aW9uKGEpe3JldHVybiBudWxsPT1hP2YuY2FsbCh0aGlzKTphPDA/dGhpc1thK3RoaXMubGVuZ3RoXTp0aGlzW2FdfSxwdXNoU3RhY2s6ZnVuY3Rpb24oYSl7dmFyIGI9ci5tZXJnZSh0aGlzLmNvbnN0cnVjdG9yKCksYSk7cmV0dXJuIGIucHJldk9iamVjdD10aGlzLGJ9LGVhY2g6ZnVuY3Rpb24oYSl7cmV0dXJuIHIuZWFjaCh0aGlzLGEpfSxtYXA6ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMucHVzaFN0YWNrKHIubWFwKHRoaXMsZnVuY3Rpb24oYixjKXtyZXR1cm4gYS5jYWxsKGIsYyxiKX0pKX0sc2xpY2U6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5wdXNoU3RhY2soZi5hcHBseSh0aGlzLGFyZ3VtZW50cykpfSxmaXJzdDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmVxKDApfSxsYXN0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZXEoLTEpfSxlcTpmdW5jdGlvbihhKXt2YXIgYj10aGlzLmxlbmd0aCxjPSthKyhhPDA/YjowKTtyZXR1cm4gdGhpcy5wdXNoU3RhY2soYz49MCYmYzxiP1t0aGlzW2NdXTpbXSl9LGVuZDpmdW5jdGlvbigpe3JldHVybiB0aGlzLnByZXZPYmplY3R8fHRoaXMuY29uc3RydWN0b3IoKX0scHVzaDpoLHNvcnQ6Yy5zb3J0LHNwbGljZTpjLnNwbGljZX0sci5leHRlbmQ9ci5mbi5leHRlbmQ9ZnVuY3Rpb24oKXt2YXIgYSxiLGMsZCxlLGYsZz1hcmd1bWVudHNbMF18fHt9LGg9MSxpPWFyZ3VtZW50cy5sZW5ndGgsaj0hMTtmb3IoXCJib29sZWFuXCI9PXR5cGVvZiBnJiYoaj1nLGc9YXJndW1lbnRzW2hdfHx7fSxoKyspLFwib2JqZWN0XCI9PXR5cGVvZiBnfHxyLmlzRnVuY3Rpb24oZyl8fChnPXt9KSxoPT09aSYmKGc9dGhpcyxoLS0pO2g8aTtoKyspaWYobnVsbCE9KGE9YXJndW1lbnRzW2hdKSlmb3IoYiBpbiBhKWM9Z1tiXSxkPWFbYl0sZyE9PWQmJihqJiZkJiYoci5pc1BsYWluT2JqZWN0KGQpfHwoZT1BcnJheS5pc0FycmF5KGQpKSk/KGU/KGU9ITEsZj1jJiZBcnJheS5pc0FycmF5KGMpP2M6W10pOmY9YyYmci5pc1BsYWluT2JqZWN0KGMpP2M6e30sZ1tiXT1yLmV4dGVuZChqLGYsZCkpOnZvaWQgMCE9PWQmJihnW2JdPWQpKTtyZXR1cm4gZ30sci5leHRlbmQoe2V4cGFuZG86XCJqUXVlcnlcIisocStNYXRoLnJhbmRvbSgpKS5yZXBsYWNlKC9cXEQvZyxcIlwiKSxpc1JlYWR5OiEwLGVycm9yOmZ1bmN0aW9uKGEpe3Rocm93IG5ldyBFcnJvcihhKX0sbm9vcDpmdW5jdGlvbigpe30saXNGdW5jdGlvbjpmdW5jdGlvbihhKXtyZXR1cm5cImZ1bmN0aW9uXCI9PT1yLnR5cGUoYSl9LGlzV2luZG93OmZ1bmN0aW9uKGEpe3JldHVybiBudWxsIT1hJiZhPT09YS53aW5kb3d9LGlzTnVtZXJpYzpmdW5jdGlvbihhKXt2YXIgYj1yLnR5cGUoYSk7cmV0dXJuKFwibnVtYmVyXCI9PT1ifHxcInN0cmluZ1wiPT09YikmJiFpc05hTihhLXBhcnNlRmxvYXQoYSkpfSxpc1BsYWluT2JqZWN0OmZ1bmN0aW9uKGEpe3ZhciBiLGM7cmV0dXJuISghYXx8XCJbb2JqZWN0IE9iamVjdF1cIiE9PWsuY2FsbChhKSkmJighKGI9ZShhKSl8fChjPWwuY2FsbChiLFwiY29uc3RydWN0b3JcIikmJmIuY29uc3RydWN0b3IsXCJmdW5jdGlvblwiPT10eXBlb2YgYyYmbS5jYWxsKGMpPT09bikpfSxpc0VtcHR5T2JqZWN0OmZ1bmN0aW9uKGEpe3ZhciBiO2ZvcihiIGluIGEpcmV0dXJuITE7cmV0dXJuITB9LHR5cGU6ZnVuY3Rpb24oYSl7cmV0dXJuIG51bGw9PWE/YStcIlwiOlwib2JqZWN0XCI9PXR5cGVvZiBhfHxcImZ1bmN0aW9uXCI9PXR5cGVvZiBhP2pbay5jYWxsKGEpXXx8XCJvYmplY3RcIjp0eXBlb2YgYX0sZ2xvYmFsRXZhbDpmdW5jdGlvbihhKXtwKGEpfSxjYW1lbENhc2U6ZnVuY3Rpb24oYSl7cmV0dXJuIGEucmVwbGFjZSh0LFwibXMtXCIpLnJlcGxhY2UodSx2KX0sZWFjaDpmdW5jdGlvbihhLGIpe3ZhciBjLGQ9MDtpZih3KGEpKXtmb3IoYz1hLmxlbmd0aDtkPGM7ZCsrKWlmKGIuY2FsbChhW2RdLGQsYVtkXSk9PT0hMSlicmVha31lbHNlIGZvcihkIGluIGEpaWYoYi5jYWxsKGFbZF0sZCxhW2RdKT09PSExKWJyZWFrO3JldHVybiBhfSx0cmltOmZ1bmN0aW9uKGEpe3JldHVybiBudWxsPT1hP1wiXCI6KGErXCJcIikucmVwbGFjZShzLFwiXCIpfSxtYWtlQXJyYXk6ZnVuY3Rpb24oYSxiKXt2YXIgYz1ifHxbXTtyZXR1cm4gbnVsbCE9YSYmKHcoT2JqZWN0KGEpKT9yLm1lcmdlKGMsXCJzdHJpbmdcIj09dHlwZW9mIGE/W2FdOmEpOmguY2FsbChjLGEpKSxjfSxpbkFycmF5OmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gbnVsbD09Yj8tMTppLmNhbGwoYixhLGMpfSxtZXJnZTpmdW5jdGlvbihhLGIpe2Zvcih2YXIgYz0rYi5sZW5ndGgsZD0wLGU9YS5sZW5ndGg7ZDxjO2QrKylhW2UrK109YltkXTtyZXR1cm4gYS5sZW5ndGg9ZSxhfSxncmVwOmZ1bmN0aW9uKGEsYixjKXtmb3IodmFyIGQsZT1bXSxmPTAsZz1hLmxlbmd0aCxoPSFjO2Y8ZztmKyspZD0hYihhW2ZdLGYpLGQhPT1oJiZlLnB1c2goYVtmXSk7cmV0dXJuIGV9LG1hcDpmdW5jdGlvbihhLGIsYyl7dmFyIGQsZSxmPTAsaD1bXTtpZih3KGEpKWZvcihkPWEubGVuZ3RoO2Y8ZDtmKyspZT1iKGFbZl0sZixjKSxudWxsIT1lJiZoLnB1c2goZSk7ZWxzZSBmb3IoZiBpbiBhKWU9YihhW2ZdLGYsYyksbnVsbCE9ZSYmaC5wdXNoKGUpO3JldHVybiBnLmFwcGx5KFtdLGgpfSxndWlkOjEscHJveHk6ZnVuY3Rpb24oYSxiKXt2YXIgYyxkLGU7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGImJihjPWFbYl0sYj1hLGE9Yyksci5pc0Z1bmN0aW9uKGEpKXJldHVybiBkPWYuY2FsbChhcmd1bWVudHMsMiksZT1mdW5jdGlvbigpe3JldHVybiBhLmFwcGx5KGJ8fHRoaXMsZC5jb25jYXQoZi5jYWxsKGFyZ3VtZW50cykpKX0sZS5ndWlkPWEuZ3VpZD1hLmd1aWR8fHIuZ3VpZCsrLGV9LG5vdzpEYXRlLm5vdyxzdXBwb3J0Om99KSxcImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJihyLmZuW1N5bWJvbC5pdGVyYXRvcl09Y1tTeW1ib2wuaXRlcmF0b3JdKSxyLmVhY2goXCJCb29sZWFuIE51bWJlciBTdHJpbmcgRnVuY3Rpb24gQXJyYXkgRGF0ZSBSZWdFeHAgT2JqZWN0IEVycm9yIFN5bWJvbFwiLnNwbGl0KFwiIFwiKSxmdW5jdGlvbihhLGIpe2pbXCJbb2JqZWN0IFwiK2IrXCJdXCJdPWIudG9Mb3dlckNhc2UoKX0pO2Z1bmN0aW9uIHcoYSl7dmFyIGI9ISFhJiZcImxlbmd0aFwiaW4gYSYmYS5sZW5ndGgsYz1yLnR5cGUoYSk7cmV0dXJuXCJmdW5jdGlvblwiIT09YyYmIXIuaXNXaW5kb3coYSkmJihcImFycmF5XCI9PT1jfHwwPT09Ynx8XCJudW1iZXJcIj09dHlwZW9mIGImJmI+MCYmYi0xIGluIGEpfXZhciB4PWZ1bmN0aW9uKGEpe3ZhciBiLGMsZCxlLGYsZyxoLGksaixrLGwsbSxuLG8scCxxLHIscyx0LHU9XCJzaXp6bGVcIisxKm5ldyBEYXRlLHY9YS5kb2N1bWVudCx3PTAseD0wLHk9aGEoKSx6PWhhKCksQT1oYSgpLEI9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gYT09PWImJihsPSEwKSwwfSxDPXt9Lmhhc093blByb3BlcnR5LEQ9W10sRT1ELnBvcCxGPUQucHVzaCxHPUQucHVzaCxIPUQuc2xpY2UsST1mdW5jdGlvbihhLGIpe2Zvcih2YXIgYz0wLGQ9YS5sZW5ndGg7YzxkO2MrKylpZihhW2NdPT09YilyZXR1cm4gYztyZXR1cm4tMX0sSj1cImNoZWNrZWR8c2VsZWN0ZWR8YXN5bmN8YXV0b2ZvY3VzfGF1dG9wbGF5fGNvbnRyb2xzfGRlZmVyfGRpc2FibGVkfGhpZGRlbnxpc21hcHxsb29wfG11bHRpcGxlfG9wZW58cmVhZG9ubHl8cmVxdWlyZWR8c2NvcGVkXCIsSz1cIltcXFxceDIwXFxcXHRcXFxcclxcXFxuXFxcXGZdXCIsTD1cIig/OlxcXFxcXFxcLnxbXFxcXHctXXxbXlxcMC1cXFxceGEwXSkrXCIsTT1cIlxcXFxbXCIrSytcIiooXCIrTCtcIikoPzpcIitLK1wiKihbKl4kfCF+XT89KVwiK0srXCIqKD86JygoPzpcXFxcXFxcXC58W15cXFxcXFxcXCddKSopJ3xcXFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXFxcIl0pKilcXFwifChcIitMK1wiKSl8KVwiK0srXCIqXFxcXF1cIixOPVwiOihcIitMK1wiKSg/OlxcXFwoKCgnKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCIpfCgoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpW1xcXFxdXXxcIitNK1wiKSopfC4qKVxcXFwpfClcIixPPW5ldyBSZWdFeHAoSytcIitcIixcImdcIiksUD1uZXcgUmVnRXhwKFwiXlwiK0srXCIrfCgoPzpefFteXFxcXFxcXFxdKSg/OlxcXFxcXFxcLikqKVwiK0srXCIrJFwiLFwiZ1wiKSxRPW5ldyBSZWdFeHAoXCJeXCIrSytcIiosXCIrSytcIipcIiksUj1uZXcgUmVnRXhwKFwiXlwiK0srXCIqKFs+K35dfFwiK0srXCIpXCIrSytcIipcIiksUz1uZXcgUmVnRXhwKFwiPVwiK0srXCIqKFteXFxcXF0nXFxcIl0qPylcIitLK1wiKlxcXFxdXCIsXCJnXCIpLFQ9bmV3IFJlZ0V4cChOKSxVPW5ldyBSZWdFeHAoXCJeXCIrTCtcIiRcIiksVj17SUQ6bmV3IFJlZ0V4cChcIl4jKFwiK0wrXCIpXCIpLENMQVNTOm5ldyBSZWdFeHAoXCJeXFxcXC4oXCIrTCtcIilcIiksVEFHOm5ldyBSZWdFeHAoXCJeKFwiK0wrXCJ8WypdKVwiKSxBVFRSOm5ldyBSZWdFeHAoXCJeXCIrTSksUFNFVURPOm5ldyBSZWdFeHAoXCJeXCIrTiksQ0hJTEQ6bmV3IFJlZ0V4cChcIl46KG9ubHl8Zmlyc3R8bGFzdHxudGh8bnRoLWxhc3QpLShjaGlsZHxvZi10eXBlKSg/OlxcXFwoXCIrSytcIiooZXZlbnxvZGR8KChbKy1dfCkoXFxcXGQqKW58KVwiK0srXCIqKD86KFsrLV18KVwiK0srXCIqKFxcXFxkKyl8KSlcIitLK1wiKlxcXFwpfClcIixcImlcIiksYm9vbDpuZXcgUmVnRXhwKFwiXig/OlwiK0orXCIpJFwiLFwiaVwiKSxuZWVkc0NvbnRleHQ6bmV3IFJlZ0V4cChcIl5cIitLK1wiKls+K35dfDooZXZlbnxvZGR8ZXF8Z3R8bHR8bnRofGZpcnN0fGxhc3QpKD86XFxcXChcIitLK1wiKigoPzotXFxcXGQpP1xcXFxkKilcIitLK1wiKlxcXFwpfCkoPz1bXi1dfCQpXCIsXCJpXCIpfSxXPS9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2ksWD0vXmhcXGQkL2ksWT0vXltee10rXFx7XFxzKlxcW25hdGl2ZSBcXHcvLFo9L14oPzojKFtcXHctXSspfChcXHcrKXxcXC4oW1xcdy1dKykpJC8sJD0vWyt+XS8sXz1uZXcgUmVnRXhwKFwiXFxcXFxcXFwoW1xcXFxkYS1mXXsxLDZ9XCIrSytcIj98KFwiK0srXCIpfC4pXCIsXCJpZ1wiKSxhYT1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9XCIweFwiK2ItNjU1MzY7cmV0dXJuIGQhPT1kfHxjP2I6ZDwwP1N0cmluZy5mcm9tQ2hhckNvZGUoZCs2NTUzNik6U3RyaW5nLmZyb21DaGFyQ29kZShkPj4xMHw1NTI5NiwxMDIzJmR8NTYzMjApfSxiYT0vKFtcXDAtXFx4MWZcXHg3Zl18Xi0/XFxkKXxeLSR8W15cXDAtXFx4MWZcXHg3Zi1cXHVGRkZGXFx3LV0vZyxjYT1mdW5jdGlvbihhLGIpe3JldHVybiBiP1wiXFwwXCI9PT1hP1wiXFx1ZmZmZFwiOmEuc2xpY2UoMCwtMSkrXCJcXFxcXCIrYS5jaGFyQ29kZUF0KGEubGVuZ3RoLTEpLnRvU3RyaW5nKDE2KStcIiBcIjpcIlxcXFxcIithfSxkYT1mdW5jdGlvbigpe20oKX0sZWE9dGEoZnVuY3Rpb24oYSl7cmV0dXJuIGEuZGlzYWJsZWQ9PT0hMCYmKFwiZm9ybVwiaW4gYXx8XCJsYWJlbFwiaW4gYSl9LHtkaXI6XCJwYXJlbnROb2RlXCIsbmV4dDpcImxlZ2VuZFwifSk7dHJ5e0cuYXBwbHkoRD1ILmNhbGwodi5jaGlsZE5vZGVzKSx2LmNoaWxkTm9kZXMpLERbdi5jaGlsZE5vZGVzLmxlbmd0aF0ubm9kZVR5cGV9Y2F0Y2goZmEpe0c9e2FwcGx5OkQubGVuZ3RoP2Z1bmN0aW9uKGEsYil7Ri5hcHBseShhLEguY2FsbChiKSl9OmZ1bmN0aW9uKGEsYil7dmFyIGM9YS5sZW5ndGgsZD0wO3doaWxlKGFbYysrXT1iW2QrK10pO2EubGVuZ3RoPWMtMX19fWZ1bmN0aW9uIGdhKGEsYixkLGUpe3ZhciBmLGgsaixrLGwsbyxyLHM9YiYmYi5vd25lckRvY3VtZW50LHc9Yj9iLm5vZGVUeXBlOjk7aWYoZD1kfHxbXSxcInN0cmluZ1wiIT10eXBlb2YgYXx8IWF8fDEhPT13JiY5IT09dyYmMTEhPT13KXJldHVybiBkO2lmKCFlJiYoKGI/Yi5vd25lckRvY3VtZW50fHxiOnYpIT09biYmbShiKSxiPWJ8fG4scCkpe2lmKDExIT09dyYmKGw9Wi5leGVjKGEpKSlpZihmPWxbMV0pe2lmKDk9PT13KXtpZighKGo9Yi5nZXRFbGVtZW50QnlJZChmKSkpcmV0dXJuIGQ7aWYoai5pZD09PWYpcmV0dXJuIGQucHVzaChqKSxkfWVsc2UgaWYocyYmKGo9cy5nZXRFbGVtZW50QnlJZChmKSkmJnQoYixqKSYmai5pZD09PWYpcmV0dXJuIGQucHVzaChqKSxkfWVsc2V7aWYobFsyXSlyZXR1cm4gRy5hcHBseShkLGIuZ2V0RWxlbWVudHNCeVRhZ05hbWUoYSkpLGQ7aWYoKGY9bFszXSkmJmMuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSYmYi5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKXJldHVybiBHLmFwcGx5KGQsYi5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKGYpKSxkfWlmKGMucXNhJiYhQVthK1wiIFwiXSYmKCFxfHwhcS50ZXN0KGEpKSl7aWYoMSE9PXcpcz1iLHI9YTtlbHNlIGlmKFwib2JqZWN0XCIhPT1iLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkpeyhrPWIuZ2V0QXR0cmlidXRlKFwiaWRcIikpP2s9ay5yZXBsYWNlKGJhLGNhKTpiLnNldEF0dHJpYnV0ZShcImlkXCIsaz11KSxvPWcoYSksaD1vLmxlbmd0aDt3aGlsZShoLS0pb1toXT1cIiNcIitrK1wiIFwiK3NhKG9baF0pO3I9by5qb2luKFwiLFwiKSxzPSQudGVzdChhKSYmcWEoYi5wYXJlbnROb2RlKXx8Yn1pZihyKXRyeXtyZXR1cm4gRy5hcHBseShkLHMucXVlcnlTZWxlY3RvckFsbChyKSksZH1jYXRjaCh4KXt9ZmluYWxseXtrPT09dSYmYi5yZW1vdmVBdHRyaWJ1dGUoXCJpZFwiKX19fXJldHVybiBpKGEucmVwbGFjZShQLFwiJDFcIiksYixkLGUpfWZ1bmN0aW9uIGhhKCl7dmFyIGE9W107ZnVuY3Rpb24gYihjLGUpe3JldHVybiBhLnB1c2goYytcIiBcIik+ZC5jYWNoZUxlbmd0aCYmZGVsZXRlIGJbYS5zaGlmdCgpXSxiW2MrXCIgXCJdPWV9cmV0dXJuIGJ9ZnVuY3Rpb24gaWEoYSl7cmV0dXJuIGFbdV09ITAsYX1mdW5jdGlvbiBqYShhKXt2YXIgYj1uLmNyZWF0ZUVsZW1lbnQoXCJmaWVsZHNldFwiKTt0cnl7cmV0dXJuISFhKGIpfWNhdGNoKGMpe3JldHVybiExfWZpbmFsbHl7Yi5wYXJlbnROb2RlJiZiLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoYiksYj1udWxsfX1mdW5jdGlvbiBrYShhLGIpe3ZhciBjPWEuc3BsaXQoXCJ8XCIpLGU9Yy5sZW5ndGg7d2hpbGUoZS0tKWQuYXR0ckhhbmRsZVtjW2VdXT1ifWZ1bmN0aW9uIGxhKGEsYil7dmFyIGM9YiYmYSxkPWMmJjE9PT1hLm5vZGVUeXBlJiYxPT09Yi5ub2RlVHlwZSYmYS5zb3VyY2VJbmRleC1iLnNvdXJjZUluZGV4O2lmKGQpcmV0dXJuIGQ7aWYoYyl3aGlsZShjPWMubmV4dFNpYmxpbmcpaWYoYz09PWIpcmV0dXJuLTE7cmV0dXJuIGE/MTotMX1mdW5jdGlvbiBtYShhKXtyZXR1cm4gZnVuY3Rpb24oYil7dmFyIGM9Yi5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVyblwiaW5wdXRcIj09PWMmJmIudHlwZT09PWF9fWZ1bmN0aW9uIG5hKGEpe3JldHVybiBmdW5jdGlvbihiKXt2YXIgYz1iLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuKFwiaW5wdXRcIj09PWN8fFwiYnV0dG9uXCI9PT1jKSYmYi50eXBlPT09YX19ZnVuY3Rpb24gb2EoYSl7cmV0dXJuIGZ1bmN0aW9uKGIpe3JldHVyblwiZm9ybVwiaW4gYj9iLnBhcmVudE5vZGUmJmIuZGlzYWJsZWQ9PT0hMT9cImxhYmVsXCJpbiBiP1wibGFiZWxcImluIGIucGFyZW50Tm9kZT9iLnBhcmVudE5vZGUuZGlzYWJsZWQ9PT1hOmIuZGlzYWJsZWQ9PT1hOmIuaXNEaXNhYmxlZD09PWF8fGIuaXNEaXNhYmxlZCE9PSFhJiZlYShiKT09PWE6Yi5kaXNhYmxlZD09PWE6XCJsYWJlbFwiaW4gYiYmYi5kaXNhYmxlZD09PWF9fWZ1bmN0aW9uIHBhKGEpe3JldHVybiBpYShmdW5jdGlvbihiKXtyZXR1cm4gYj0rYixpYShmdW5jdGlvbihjLGQpe3ZhciBlLGY9YShbXSxjLmxlbmd0aCxiKSxnPWYubGVuZ3RoO3doaWxlKGctLSljW2U9ZltnXV0mJihjW2VdPSEoZFtlXT1jW2VdKSl9KX0pfWZ1bmN0aW9uIHFhKGEpe3JldHVybiBhJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgYS5nZXRFbGVtZW50c0J5VGFnTmFtZSYmYX1jPWdhLnN1cHBvcnQ9e30sZj1nYS5pc1hNTD1mdW5jdGlvbihhKXt2YXIgYj1hJiYoYS5vd25lckRvY3VtZW50fHxhKS5kb2N1bWVudEVsZW1lbnQ7cmV0dXJuISFiJiZcIkhUTUxcIiE9PWIubm9kZU5hbWV9LG09Z2Euc2V0RG9jdW1lbnQ9ZnVuY3Rpb24oYSl7dmFyIGIsZSxnPWE/YS5vd25lckRvY3VtZW50fHxhOnY7cmV0dXJuIGchPT1uJiY5PT09Zy5ub2RlVHlwZSYmZy5kb2N1bWVudEVsZW1lbnQ/KG49ZyxvPW4uZG9jdW1lbnRFbGVtZW50LHA9IWYobiksdiE9PW4mJihlPW4uZGVmYXVsdFZpZXcpJiZlLnRvcCE9PWUmJihlLmFkZEV2ZW50TGlzdGVuZXI/ZS5hZGRFdmVudExpc3RlbmVyKFwidW5sb2FkXCIsZGEsITEpOmUuYXR0YWNoRXZlbnQmJmUuYXR0YWNoRXZlbnQoXCJvbnVubG9hZFwiLGRhKSksYy5hdHRyaWJ1dGVzPWphKGZ1bmN0aW9uKGEpe3JldHVybiBhLmNsYXNzTmFtZT1cImlcIiwhYS5nZXRBdHRyaWJ1dGUoXCJjbGFzc05hbWVcIil9KSxjLmdldEVsZW1lbnRzQnlUYWdOYW1lPWphKGZ1bmN0aW9uKGEpe3JldHVybiBhLmFwcGVuZENoaWxkKG4uY3JlYXRlQ29tbWVudChcIlwiKSksIWEuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCIqXCIpLmxlbmd0aH0pLGMuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZT1ZLnRlc3Qobi5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKSxjLmdldEJ5SWQ9amEoZnVuY3Rpb24oYSl7cmV0dXJuIG8uYXBwZW5kQ2hpbGQoYSkuaWQ9dSwhbi5nZXRFbGVtZW50c0J5TmFtZXx8IW4uZ2V0RWxlbWVudHNCeU5hbWUodSkubGVuZ3RofSksYy5nZXRCeUlkPyhkLmZpbHRlci5JRD1mdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UoXyxhYSk7cmV0dXJuIGZ1bmN0aW9uKGEpe3JldHVybiBhLmdldEF0dHJpYnV0ZShcImlkXCIpPT09Yn19LGQuZmluZC5JRD1mdW5jdGlvbihhLGIpe2lmKFwidW5kZWZpbmVkXCIhPXR5cGVvZiBiLmdldEVsZW1lbnRCeUlkJiZwKXt2YXIgYz1iLmdldEVsZW1lbnRCeUlkKGEpO3JldHVybiBjP1tjXTpbXX19KTooZC5maWx0ZXIuSUQ9ZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKF8sYWEpO3JldHVybiBmdW5jdGlvbihhKXt2YXIgYz1cInVuZGVmaW5lZFwiIT10eXBlb2YgYS5nZXRBdHRyaWJ1dGVOb2RlJiZhLmdldEF0dHJpYnV0ZU5vZGUoXCJpZFwiKTtyZXR1cm4gYyYmYy52YWx1ZT09PWJ9fSxkLmZpbmQuSUQ9ZnVuY3Rpb24oYSxiKXtpZihcInVuZGVmaW5lZFwiIT10eXBlb2YgYi5nZXRFbGVtZW50QnlJZCYmcCl7dmFyIGMsZCxlLGY9Yi5nZXRFbGVtZW50QnlJZChhKTtpZihmKXtpZihjPWYuZ2V0QXR0cmlidXRlTm9kZShcImlkXCIpLGMmJmMudmFsdWU9PT1hKXJldHVybltmXTtlPWIuZ2V0RWxlbWVudHNCeU5hbWUoYSksZD0wO3doaWxlKGY9ZVtkKytdKWlmKGM9Zi5nZXRBdHRyaWJ1dGVOb2RlKFwiaWRcIiksYyYmYy52YWx1ZT09PWEpcmV0dXJuW2ZdfXJldHVybltdfX0pLGQuZmluZC5UQUc9Yy5nZXRFbGVtZW50c0J5VGFnTmFtZT9mdW5jdGlvbihhLGIpe3JldHVyblwidW5kZWZpbmVkXCIhPXR5cGVvZiBiLmdldEVsZW1lbnRzQnlUYWdOYW1lP2IuZ2V0RWxlbWVudHNCeVRhZ05hbWUoYSk6Yy5xc2E/Yi5xdWVyeVNlbGVjdG9yQWxsKGEpOnZvaWQgMH06ZnVuY3Rpb24oYSxiKXt2YXIgYyxkPVtdLGU9MCxmPWIuZ2V0RWxlbWVudHNCeVRhZ05hbWUoYSk7aWYoXCIqXCI9PT1hKXt3aGlsZShjPWZbZSsrXSkxPT09Yy5ub2RlVHlwZSYmZC5wdXNoKGMpO3JldHVybiBkfXJldHVybiBmfSxkLmZpbmQuQ0xBU1M9Yy5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lJiZmdW5jdGlvbihhLGIpe2lmKFwidW5kZWZpbmVkXCIhPXR5cGVvZiBiLmdldEVsZW1lbnRzQnlDbGFzc05hbWUmJnApcmV0dXJuIGIuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShhKX0scj1bXSxxPVtdLChjLnFzYT1ZLnRlc3Qobi5xdWVyeVNlbGVjdG9yQWxsKSkmJihqYShmdW5jdGlvbihhKXtvLmFwcGVuZENoaWxkKGEpLmlubmVySFRNTD1cIjxhIGlkPSdcIit1K1wiJz48L2E+PHNlbGVjdCBpZD0nXCIrdStcIi1cXHJcXFxcJyBtc2FsbG93Y2FwdHVyZT0nJz48b3B0aW9uIHNlbGVjdGVkPScnPjwvb3B0aW9uPjwvc2VsZWN0PlwiLGEucXVlcnlTZWxlY3RvckFsbChcIlttc2FsbG93Y2FwdHVyZV49JyddXCIpLmxlbmd0aCYmcS5wdXNoKFwiWypeJF09XCIrSytcIiooPzonJ3xcXFwiXFxcIilcIiksYS5xdWVyeVNlbGVjdG9yQWxsKFwiW3NlbGVjdGVkXVwiKS5sZW5ndGh8fHEucHVzaChcIlxcXFxbXCIrSytcIiooPzp2YWx1ZXxcIitKK1wiKVwiKSxhLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbaWR+PVwiK3UrXCItXVwiKS5sZW5ndGh8fHEucHVzaChcIn49XCIpLGEucXVlcnlTZWxlY3RvckFsbChcIjpjaGVja2VkXCIpLmxlbmd0aHx8cS5wdXNoKFwiOmNoZWNrZWRcIiksYS5xdWVyeVNlbGVjdG9yQWxsKFwiYSNcIit1K1wiKypcIikubGVuZ3RofHxxLnB1c2goXCIuIy4rWyt+XVwiKX0pLGphKGZ1bmN0aW9uKGEpe2EuaW5uZXJIVE1MPVwiPGEgaHJlZj0nJyBkaXNhYmxlZD0nZGlzYWJsZWQnPjwvYT48c2VsZWN0IGRpc2FibGVkPSdkaXNhYmxlZCc+PG9wdGlvbi8+PC9zZWxlY3Q+XCI7dmFyIGI9bi5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7Yi5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsXCJoaWRkZW5cIiksYS5hcHBlbmRDaGlsZChiKS5zZXRBdHRyaWJ1dGUoXCJuYW1lXCIsXCJEXCIpLGEucXVlcnlTZWxlY3RvckFsbChcIltuYW1lPWRdXCIpLmxlbmd0aCYmcS5wdXNoKFwibmFtZVwiK0srXCIqWypeJHwhfl0/PVwiKSwyIT09YS5xdWVyeVNlbGVjdG9yQWxsKFwiOmVuYWJsZWRcIikubGVuZ3RoJiZxLnB1c2goXCI6ZW5hYmxlZFwiLFwiOmRpc2FibGVkXCIpLG8uYXBwZW5kQ2hpbGQoYSkuZGlzYWJsZWQ9ITAsMiE9PWEucXVlcnlTZWxlY3RvckFsbChcIjpkaXNhYmxlZFwiKS5sZW5ndGgmJnEucHVzaChcIjplbmFibGVkXCIsXCI6ZGlzYWJsZWRcIiksYS5xdWVyeVNlbGVjdG9yQWxsKFwiKiw6eFwiKSxxLnB1c2goXCIsLio6XCIpfSkpLChjLm1hdGNoZXNTZWxlY3Rvcj1ZLnRlc3Qocz1vLm1hdGNoZXN8fG8ud2Via2l0TWF0Y2hlc1NlbGVjdG9yfHxvLm1vek1hdGNoZXNTZWxlY3Rvcnx8by5vTWF0Y2hlc1NlbGVjdG9yfHxvLm1zTWF0Y2hlc1NlbGVjdG9yKSkmJmphKGZ1bmN0aW9uKGEpe2MuZGlzY29ubmVjdGVkTWF0Y2g9cy5jYWxsKGEsXCIqXCIpLHMuY2FsbChhLFwiW3MhPScnXTp4XCIpLHIucHVzaChcIiE9XCIsTil9KSxxPXEubGVuZ3RoJiZuZXcgUmVnRXhwKHEuam9pbihcInxcIikpLHI9ci5sZW5ndGgmJm5ldyBSZWdFeHAoci5qb2luKFwifFwiKSksYj1ZLnRlc3Qoby5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiksdD1ifHxZLnRlc3Qoby5jb250YWlucyk/ZnVuY3Rpb24oYSxiKXt2YXIgYz05PT09YS5ub2RlVHlwZT9hLmRvY3VtZW50RWxlbWVudDphLGQ9YiYmYi5wYXJlbnROb2RlO3JldHVybiBhPT09ZHx8ISghZHx8MSE9PWQubm9kZVR5cGV8fCEoYy5jb250YWlucz9jLmNvbnRhaW5zKGQpOmEuY29tcGFyZURvY3VtZW50UG9zaXRpb24mJjE2JmEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oZCkpKX06ZnVuY3Rpb24oYSxiKXtpZihiKXdoaWxlKGI9Yi5wYXJlbnROb2RlKWlmKGI9PT1hKXJldHVybiEwO3JldHVybiExfSxCPWI/ZnVuY3Rpb24oYSxiKXtpZihhPT09YilyZXR1cm4gbD0hMCwwO3ZhciBkPSFhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uLSFiLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uO3JldHVybiBkP2Q6KGQ9KGEub3duZXJEb2N1bWVudHx8YSk9PT0oYi5vd25lckRvY3VtZW50fHxiKT9hLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGIpOjEsMSZkfHwhYy5zb3J0RGV0YWNoZWQmJmIuY29tcGFyZURvY3VtZW50UG9zaXRpb24oYSk9PT1kP2E9PT1ufHxhLm93bmVyRG9jdW1lbnQ9PT12JiZ0KHYsYSk/LTE6Yj09PW58fGIub3duZXJEb2N1bWVudD09PXYmJnQodixiKT8xOms/SShrLGEpLUkoayxiKTowOjQmZD8tMToxKX06ZnVuY3Rpb24oYSxiKXtpZihhPT09YilyZXR1cm4gbD0hMCwwO3ZhciBjLGQ9MCxlPWEucGFyZW50Tm9kZSxmPWIucGFyZW50Tm9kZSxnPVthXSxoPVtiXTtpZighZXx8IWYpcmV0dXJuIGE9PT1uPy0xOmI9PT1uPzE6ZT8tMTpmPzE6az9JKGssYSktSShrLGIpOjA7aWYoZT09PWYpcmV0dXJuIGxhKGEsYik7Yz1hO3doaWxlKGM9Yy5wYXJlbnROb2RlKWcudW5zaGlmdChjKTtjPWI7d2hpbGUoYz1jLnBhcmVudE5vZGUpaC51bnNoaWZ0KGMpO3doaWxlKGdbZF09PT1oW2RdKWQrKztyZXR1cm4gZD9sYShnW2RdLGhbZF0pOmdbZF09PT12Py0xOmhbZF09PT12PzE6MH0sbik6bn0sZ2EubWF0Y2hlcz1mdW5jdGlvbihhLGIpe3JldHVybiBnYShhLG51bGwsbnVsbCxiKX0sZ2EubWF0Y2hlc1NlbGVjdG9yPWZ1bmN0aW9uKGEsYil7aWYoKGEub3duZXJEb2N1bWVudHx8YSkhPT1uJiZtKGEpLGI9Yi5yZXBsYWNlKFMsXCI9JyQxJ11cIiksYy5tYXRjaGVzU2VsZWN0b3ImJnAmJiFBW2IrXCIgXCJdJiYoIXJ8fCFyLnRlc3QoYikpJiYoIXF8fCFxLnRlc3QoYikpKXRyeXt2YXIgZD1zLmNhbGwoYSxiKTtpZihkfHxjLmRpc2Nvbm5lY3RlZE1hdGNofHxhLmRvY3VtZW50JiYxMSE9PWEuZG9jdW1lbnQubm9kZVR5cGUpcmV0dXJuIGR9Y2F0Y2goZSl7fXJldHVybiBnYShiLG4sbnVsbCxbYV0pLmxlbmd0aD4wfSxnYS5jb250YWlucz1mdW5jdGlvbihhLGIpe3JldHVybihhLm93bmVyRG9jdW1lbnR8fGEpIT09biYmbShhKSx0KGEsYil9LGdhLmF0dHI9ZnVuY3Rpb24oYSxiKXsoYS5vd25lckRvY3VtZW50fHxhKSE9PW4mJm0oYSk7dmFyIGU9ZC5hdHRySGFuZGxlW2IudG9Mb3dlckNhc2UoKV0sZj1lJiZDLmNhbGwoZC5hdHRySGFuZGxlLGIudG9Mb3dlckNhc2UoKSk/ZShhLGIsIXApOnZvaWQgMDtyZXR1cm4gdm9pZCAwIT09Zj9mOmMuYXR0cmlidXRlc3x8IXA/YS5nZXRBdHRyaWJ1dGUoYik6KGY9YS5nZXRBdHRyaWJ1dGVOb2RlKGIpKSYmZi5zcGVjaWZpZWQ/Zi52YWx1ZTpudWxsfSxnYS5lc2NhcGU9ZnVuY3Rpb24oYSl7cmV0dXJuKGErXCJcIikucmVwbGFjZShiYSxjYSl9LGdhLmVycm9yPWZ1bmN0aW9uKGEpe3Rocm93IG5ldyBFcnJvcihcIlN5bnRheCBlcnJvciwgdW5yZWNvZ25pemVkIGV4cHJlc3Npb246IFwiK2EpfSxnYS51bmlxdWVTb3J0PWZ1bmN0aW9uKGEpe3ZhciBiLGQ9W10sZT0wLGY9MDtpZihsPSFjLmRldGVjdER1cGxpY2F0ZXMsaz0hYy5zb3J0U3RhYmxlJiZhLnNsaWNlKDApLGEuc29ydChCKSxsKXt3aGlsZShiPWFbZisrXSliPT09YVtmXSYmKGU9ZC5wdXNoKGYpKTt3aGlsZShlLS0pYS5zcGxpY2UoZFtlXSwxKX1yZXR1cm4gaz1udWxsLGF9LGU9Z2EuZ2V0VGV4dD1mdW5jdGlvbihhKXt2YXIgYixjPVwiXCIsZD0wLGY9YS5ub2RlVHlwZTtpZihmKXtpZigxPT09Znx8OT09PWZ8fDExPT09Zil7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGEudGV4dENvbnRlbnQpcmV0dXJuIGEudGV4dENvbnRlbnQ7Zm9yKGE9YS5maXJzdENoaWxkO2E7YT1hLm5leHRTaWJsaW5nKWMrPWUoYSl9ZWxzZSBpZigzPT09Znx8ND09PWYpcmV0dXJuIGEubm9kZVZhbHVlfWVsc2Ugd2hpbGUoYj1hW2QrK10pYys9ZShiKTtyZXR1cm4gY30sZD1nYS5zZWxlY3RvcnM9e2NhY2hlTGVuZ3RoOjUwLGNyZWF0ZVBzZXVkbzppYSxtYXRjaDpWLGF0dHJIYW5kbGU6e30sZmluZDp7fSxyZWxhdGl2ZTp7XCI+XCI6e2RpcjpcInBhcmVudE5vZGVcIixmaXJzdDohMH0sXCIgXCI6e2RpcjpcInBhcmVudE5vZGVcIn0sXCIrXCI6e2RpcjpcInByZXZpb3VzU2libGluZ1wiLGZpcnN0OiEwfSxcIn5cIjp7ZGlyOlwicHJldmlvdXNTaWJsaW5nXCJ9fSxwcmVGaWx0ZXI6e0FUVFI6ZnVuY3Rpb24oYSl7cmV0dXJuIGFbMV09YVsxXS5yZXBsYWNlKF8sYWEpLGFbM109KGFbM118fGFbNF18fGFbNV18fFwiXCIpLnJlcGxhY2UoXyxhYSksXCJ+PVwiPT09YVsyXSYmKGFbM109XCIgXCIrYVszXStcIiBcIiksYS5zbGljZSgwLDQpfSxDSElMRDpmdW5jdGlvbihhKXtyZXR1cm4gYVsxXT1hWzFdLnRvTG93ZXJDYXNlKCksXCJudGhcIj09PWFbMV0uc2xpY2UoMCwzKT8oYVszXXx8Z2EuZXJyb3IoYVswXSksYVs0XT0rKGFbNF0/YVs1XSsoYVs2XXx8MSk6MiooXCJldmVuXCI9PT1hWzNdfHxcIm9kZFwiPT09YVszXSkpLGFbNV09KyhhWzddK2FbOF18fFwib2RkXCI9PT1hWzNdKSk6YVszXSYmZ2EuZXJyb3IoYVswXSksYX0sUFNFVURPOmZ1bmN0aW9uKGEpe3ZhciBiLGM9IWFbNl0mJmFbMl07cmV0dXJuIFYuQ0hJTEQudGVzdChhWzBdKT9udWxsOihhWzNdP2FbMl09YVs0XXx8YVs1XXx8XCJcIjpjJiZULnRlc3QoYykmJihiPWcoYywhMCkpJiYoYj1jLmluZGV4T2YoXCIpXCIsYy5sZW5ndGgtYiktYy5sZW5ndGgpJiYoYVswXT1hWzBdLnNsaWNlKDAsYiksYVsyXT1jLnNsaWNlKDAsYikpLGEuc2xpY2UoMCwzKSl9fSxmaWx0ZXI6e1RBRzpmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UoXyxhYSkudG9Mb3dlckNhc2UoKTtyZXR1cm5cIipcIj09PWE/ZnVuY3Rpb24oKXtyZXR1cm4hMH06ZnVuY3Rpb24oYSl7cmV0dXJuIGEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKT09PWJ9fSxDTEFTUzpmdW5jdGlvbihhKXt2YXIgYj15W2ErXCIgXCJdO3JldHVybiBifHwoYj1uZXcgUmVnRXhwKFwiKF58XCIrSytcIilcIithK1wiKFwiK0srXCJ8JClcIikpJiZ5KGEsZnVuY3Rpb24oYSl7cmV0dXJuIGIudGVzdChcInN0cmluZ1wiPT10eXBlb2YgYS5jbGFzc05hbWUmJmEuY2xhc3NOYW1lfHxcInVuZGVmaW5lZFwiIT10eXBlb2YgYS5nZXRBdHRyaWJ1dGUmJmEuZ2V0QXR0cmlidXRlKFwiY2xhc3NcIil8fFwiXCIpfSl9LEFUVFI6ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBmdW5jdGlvbihkKXt2YXIgZT1nYS5hdHRyKGQsYSk7cmV0dXJuIG51bGw9PWU/XCIhPVwiPT09YjohYnx8KGUrPVwiXCIsXCI9XCI9PT1iP2U9PT1jOlwiIT1cIj09PWI/ZSE9PWM6XCJePVwiPT09Yj9jJiYwPT09ZS5pbmRleE9mKGMpOlwiKj1cIj09PWI/YyYmZS5pbmRleE9mKGMpPi0xOlwiJD1cIj09PWI/YyYmZS5zbGljZSgtYy5sZW5ndGgpPT09YzpcIn49XCI9PT1iPyhcIiBcIitlLnJlcGxhY2UoTyxcIiBcIikrXCIgXCIpLmluZGV4T2YoYyk+LTE6XCJ8PVwiPT09YiYmKGU9PT1jfHxlLnNsaWNlKDAsYy5sZW5ndGgrMSk9PT1jK1wiLVwiKSl9fSxDSElMRDpmdW5jdGlvbihhLGIsYyxkLGUpe3ZhciBmPVwibnRoXCIhPT1hLnNsaWNlKDAsMyksZz1cImxhc3RcIiE9PWEuc2xpY2UoLTQpLGg9XCJvZi10eXBlXCI9PT1iO3JldHVybiAxPT09ZCYmMD09PWU/ZnVuY3Rpb24oYSl7cmV0dXJuISFhLnBhcmVudE5vZGV9OmZ1bmN0aW9uKGIsYyxpKXt2YXIgaixrLGwsbSxuLG8scD1mIT09Zz9cIm5leHRTaWJsaW5nXCI6XCJwcmV2aW91c1NpYmxpbmdcIixxPWIucGFyZW50Tm9kZSxyPWgmJmIubm9kZU5hbWUudG9Mb3dlckNhc2UoKSxzPSFpJiYhaCx0PSExO2lmKHEpe2lmKGYpe3doaWxlKHApe209Yjt3aGlsZShtPW1bcF0paWYoaD9tLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk9PT1yOjE9PT1tLm5vZGVUeXBlKXJldHVybiExO289cD1cIm9ubHlcIj09PWEmJiFvJiZcIm5leHRTaWJsaW5nXCJ9cmV0dXJuITB9aWYobz1bZz9xLmZpcnN0Q2hpbGQ6cS5sYXN0Q2hpbGRdLGcmJnMpe209cSxsPW1bdV18fChtW3VdPXt9KSxrPWxbbS51bmlxdWVJRF18fChsW20udW5pcXVlSURdPXt9KSxqPWtbYV18fFtdLG49alswXT09PXcmJmpbMV0sdD1uJiZqWzJdLG09biYmcS5jaGlsZE5vZGVzW25dO3doaWxlKG09KytuJiZtJiZtW3BdfHwodD1uPTApfHxvLnBvcCgpKWlmKDE9PT1tLm5vZGVUeXBlJiYrK3QmJm09PT1iKXtrW2FdPVt3LG4sdF07YnJlYWt9fWVsc2UgaWYocyYmKG09YixsPW1bdV18fChtW3VdPXt9KSxrPWxbbS51bmlxdWVJRF18fChsW20udW5pcXVlSURdPXt9KSxqPWtbYV18fFtdLG49alswXT09PXcmJmpbMV0sdD1uKSx0PT09ITEpd2hpbGUobT0rK24mJm0mJm1bcF18fCh0PW49MCl8fG8ucG9wKCkpaWYoKGg/bS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpPT09cjoxPT09bS5ub2RlVHlwZSkmJisrdCYmKHMmJihsPW1bdV18fChtW3VdPXt9KSxrPWxbbS51bmlxdWVJRF18fChsW20udW5pcXVlSURdPXt9KSxrW2FdPVt3LHRdKSxtPT09YikpYnJlYWs7cmV0dXJuIHQtPWUsdD09PWR8fHQlZD09PTAmJnQvZD49MH19fSxQU0VVRE86ZnVuY3Rpb24oYSxiKXt2YXIgYyxlPWQucHNldWRvc1thXXx8ZC5zZXRGaWx0ZXJzW2EudG9Mb3dlckNhc2UoKV18fGdhLmVycm9yKFwidW5zdXBwb3J0ZWQgcHNldWRvOiBcIithKTtyZXR1cm4gZVt1XT9lKGIpOmUubGVuZ3RoPjE/KGM9W2EsYSxcIlwiLGJdLGQuc2V0RmlsdGVycy5oYXNPd25Qcm9wZXJ0eShhLnRvTG93ZXJDYXNlKCkpP2lhKGZ1bmN0aW9uKGEsYyl7dmFyIGQsZj1lKGEsYiksZz1mLmxlbmd0aDt3aGlsZShnLS0pZD1JKGEsZltnXSksYVtkXT0hKGNbZF09ZltnXSl9KTpmdW5jdGlvbihhKXtyZXR1cm4gZShhLDAsYyl9KTplfX0scHNldWRvczp7bm90OmlhKGZ1bmN0aW9uKGEpe3ZhciBiPVtdLGM9W10sZD1oKGEucmVwbGFjZShQLFwiJDFcIikpO3JldHVybiBkW3VdP2lhKGZ1bmN0aW9uKGEsYixjLGUpe3ZhciBmLGc9ZChhLG51bGwsZSxbXSksaD1hLmxlbmd0aDt3aGlsZShoLS0pKGY9Z1toXSkmJihhW2hdPSEoYltoXT1mKSl9KTpmdW5jdGlvbihhLGUsZil7cmV0dXJuIGJbMF09YSxkKGIsbnVsbCxmLGMpLGJbMF09bnVsbCwhYy5wb3AoKX19KSxoYXM6aWEoZnVuY3Rpb24oYSl7cmV0dXJuIGZ1bmN0aW9uKGIpe3JldHVybiBnYShhLGIpLmxlbmd0aD4wfX0pLGNvbnRhaW5zOmlhKGZ1bmN0aW9uKGEpe3JldHVybiBhPWEucmVwbGFjZShfLGFhKSxmdW5jdGlvbihiKXtyZXR1cm4oYi50ZXh0Q29udGVudHx8Yi5pbm5lclRleHR8fGUoYikpLmluZGV4T2YoYSk+LTF9fSksbGFuZzppYShmdW5jdGlvbihhKXtyZXR1cm4gVS50ZXN0KGF8fFwiXCIpfHxnYS5lcnJvcihcInVuc3VwcG9ydGVkIGxhbmc6IFwiK2EpLGE9YS5yZXBsYWNlKF8sYWEpLnRvTG93ZXJDYXNlKCksZnVuY3Rpb24oYil7dmFyIGM7ZG8gaWYoYz1wP2IubGFuZzpiLmdldEF0dHJpYnV0ZShcInhtbDpsYW5nXCIpfHxiLmdldEF0dHJpYnV0ZShcImxhbmdcIikpcmV0dXJuIGM9Yy50b0xvd2VyQ2FzZSgpLGM9PT1hfHwwPT09Yy5pbmRleE9mKGErXCItXCIpO3doaWxlKChiPWIucGFyZW50Tm9kZSkmJjE9PT1iLm5vZGVUeXBlKTtyZXR1cm4hMX19KSx0YXJnZXQ6ZnVuY3Rpb24oYil7dmFyIGM9YS5sb2NhdGlvbiYmYS5sb2NhdGlvbi5oYXNoO3JldHVybiBjJiZjLnNsaWNlKDEpPT09Yi5pZH0scm9vdDpmdW5jdGlvbihhKXtyZXR1cm4gYT09PW99LGZvY3VzOmZ1bmN0aW9uKGEpe3JldHVybiBhPT09bi5hY3RpdmVFbGVtZW50JiYoIW4uaGFzRm9jdXN8fG4uaGFzRm9jdXMoKSkmJiEhKGEudHlwZXx8YS5ocmVmfHx+YS50YWJJbmRleCl9LGVuYWJsZWQ6b2EoITEpLGRpc2FibGVkOm9hKCEwKSxjaGVja2VkOmZ1bmN0aW9uKGEpe3ZhciBiPWEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm5cImlucHV0XCI9PT1iJiYhIWEuY2hlY2tlZHx8XCJvcHRpb25cIj09PWImJiEhYS5zZWxlY3RlZH0sc2VsZWN0ZWQ6ZnVuY3Rpb24oYSl7cmV0dXJuIGEucGFyZW50Tm9kZSYmYS5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXgsYS5zZWxlY3RlZD09PSEwfSxlbXB0eTpmdW5jdGlvbihhKXtmb3IoYT1hLmZpcnN0Q2hpbGQ7YTthPWEubmV4dFNpYmxpbmcpaWYoYS5ub2RlVHlwZTw2KXJldHVybiExO3JldHVybiEwfSxwYXJlbnQ6ZnVuY3Rpb24oYSl7cmV0dXJuIWQucHNldWRvcy5lbXB0eShhKX0saGVhZGVyOmZ1bmN0aW9uKGEpe3JldHVybiBYLnRlc3QoYS5ub2RlTmFtZSl9LGlucHV0OmZ1bmN0aW9uKGEpe3JldHVybiBXLnRlc3QoYS5ub2RlTmFtZSl9LGJ1dHRvbjpmdW5jdGlvbihhKXt2YXIgYj1hLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuXCJpbnB1dFwiPT09YiYmXCJidXR0b25cIj09PWEudHlwZXx8XCJidXR0b25cIj09PWJ9LHRleHQ6ZnVuY3Rpb24oYSl7dmFyIGI7cmV0dXJuXCJpbnB1dFwiPT09YS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpJiZcInRleHRcIj09PWEudHlwZSYmKG51bGw9PShiPWEuZ2V0QXR0cmlidXRlKFwidHlwZVwiKSl8fFwidGV4dFwiPT09Yi50b0xvd2VyQ2FzZSgpKX0sZmlyc3Q6cGEoZnVuY3Rpb24oKXtyZXR1cm5bMF19KSxsYXN0OnBhKGZ1bmN0aW9uKGEsYil7cmV0dXJuW2ItMV19KSxlcTpwYShmdW5jdGlvbihhLGIsYyl7cmV0dXJuW2M8MD9jK2I6Y119KSxldmVuOnBhKGZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPTA7YzxiO2MrPTIpYS5wdXNoKGMpO3JldHVybiBhfSksb2RkOnBhKGZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPTE7YzxiO2MrPTIpYS5wdXNoKGMpO3JldHVybiBhfSksbHQ6cGEoZnVuY3Rpb24oYSxiLGMpe2Zvcih2YXIgZD1jPDA/YytiOmM7LS1kPj0wOylhLnB1c2goZCk7cmV0dXJuIGF9KSxndDpwYShmdW5jdGlvbihhLGIsYyl7Zm9yKHZhciBkPWM8MD9jK2I6YzsrK2Q8YjspYS5wdXNoKGQpO3JldHVybiBhfSl9fSxkLnBzZXVkb3MubnRoPWQucHNldWRvcy5lcTtmb3IoYiBpbntyYWRpbzohMCxjaGVja2JveDohMCxmaWxlOiEwLHBhc3N3b3JkOiEwLGltYWdlOiEwfSlkLnBzZXVkb3NbYl09bWEoYik7Zm9yKGIgaW57c3VibWl0OiEwLHJlc2V0OiEwfSlkLnBzZXVkb3NbYl09bmEoYik7ZnVuY3Rpb24gcmEoKXt9cmEucHJvdG90eXBlPWQuZmlsdGVycz1kLnBzZXVkb3MsZC5zZXRGaWx0ZXJzPW5ldyByYSxnPWdhLnRva2VuaXplPWZ1bmN0aW9uKGEsYil7dmFyIGMsZSxmLGcsaCxpLGosaz16W2ErXCIgXCJdO2lmKGspcmV0dXJuIGI/MDprLnNsaWNlKDApO2g9YSxpPVtdLGo9ZC5wcmVGaWx0ZXI7d2hpbGUoaCl7YyYmIShlPVEuZXhlYyhoKSl8fChlJiYoaD1oLnNsaWNlKGVbMF0ubGVuZ3RoKXx8aCksaS5wdXNoKGY9W10pKSxjPSExLChlPVIuZXhlYyhoKSkmJihjPWUuc2hpZnQoKSxmLnB1c2goe3ZhbHVlOmMsdHlwZTplWzBdLnJlcGxhY2UoUCxcIiBcIil9KSxoPWguc2xpY2UoYy5sZW5ndGgpKTtmb3IoZyBpbiBkLmZpbHRlcikhKGU9VltnXS5leGVjKGgpKXx8altnXSYmIShlPWpbZ10oZSkpfHwoYz1lLnNoaWZ0KCksZi5wdXNoKHt2YWx1ZTpjLHR5cGU6ZyxtYXRjaGVzOmV9KSxoPWguc2xpY2UoYy5sZW5ndGgpKTtpZighYylicmVha31yZXR1cm4gYj9oLmxlbmd0aDpoP2dhLmVycm9yKGEpOnooYSxpKS5zbGljZSgwKX07ZnVuY3Rpb24gc2EoYSl7Zm9yKHZhciBiPTAsYz1hLmxlbmd0aCxkPVwiXCI7YjxjO2IrKylkKz1hW2JdLnZhbHVlO3JldHVybiBkfWZ1bmN0aW9uIHRhKGEsYixjKXt2YXIgZD1iLmRpcixlPWIubmV4dCxmPWV8fGQsZz1jJiZcInBhcmVudE5vZGVcIj09PWYsaD14Kys7cmV0dXJuIGIuZmlyc3Q/ZnVuY3Rpb24oYixjLGUpe3doaWxlKGI9YltkXSlpZigxPT09Yi5ub2RlVHlwZXx8ZylyZXR1cm4gYShiLGMsZSk7cmV0dXJuITF9OmZ1bmN0aW9uKGIsYyxpKXt2YXIgaixrLGwsbT1bdyxoXTtpZihpKXt3aGlsZShiPWJbZF0paWYoKDE9PT1iLm5vZGVUeXBlfHxnKSYmYShiLGMsaSkpcmV0dXJuITB9ZWxzZSB3aGlsZShiPWJbZF0paWYoMT09PWIubm9kZVR5cGV8fGcpaWYobD1iW3VdfHwoYlt1XT17fSksaz1sW2IudW5pcXVlSURdfHwobFtiLnVuaXF1ZUlEXT17fSksZSYmZT09PWIubm9kZU5hbWUudG9Mb3dlckNhc2UoKSliPWJbZF18fGI7ZWxzZXtpZigoaj1rW2ZdKSYmalswXT09PXcmJmpbMV09PT1oKXJldHVybiBtWzJdPWpbMl07aWYoa1tmXT1tLG1bMl09YShiLGMsaSkpcmV0dXJuITB9cmV0dXJuITF9fWZ1bmN0aW9uIHVhKGEpe3JldHVybiBhLmxlbmd0aD4xP2Z1bmN0aW9uKGIsYyxkKXt2YXIgZT1hLmxlbmd0aDt3aGlsZShlLS0paWYoIWFbZV0oYixjLGQpKXJldHVybiExO3JldHVybiEwfTphWzBdfWZ1bmN0aW9uIHZhKGEsYixjKXtmb3IodmFyIGQ9MCxlPWIubGVuZ3RoO2Q8ZTtkKyspZ2EoYSxiW2RdLGMpO3JldHVybiBjfWZ1bmN0aW9uIHdhKGEsYixjLGQsZSl7Zm9yKHZhciBmLGc9W10saD0wLGk9YS5sZW5ndGgsaj1udWxsIT1iO2g8aTtoKyspKGY9YVtoXSkmJihjJiYhYyhmLGQsZSl8fChnLnB1c2goZiksaiYmYi5wdXNoKGgpKSk7cmV0dXJuIGd9ZnVuY3Rpb24geGEoYSxiLGMsZCxlLGYpe3JldHVybiBkJiYhZFt1XSYmKGQ9eGEoZCkpLGUmJiFlW3VdJiYoZT14YShlLGYpKSxpYShmdW5jdGlvbihmLGcsaCxpKXt2YXIgaixrLGwsbT1bXSxuPVtdLG89Zy5sZW5ndGgscD1mfHx2YShifHxcIipcIixoLm5vZGVUeXBlP1toXTpoLFtdKSxxPSFhfHwhZiYmYj9wOndhKHAsbSxhLGgsaSkscj1jP2V8fChmP2E6b3x8ZCk/W106ZzpxO2lmKGMmJmMocSxyLGgsaSksZCl7aj13YShyLG4pLGQoaixbXSxoLGkpLGs9ai5sZW5ndGg7d2hpbGUoay0tKShsPWpba10pJiYocltuW2tdXT0hKHFbbltrXV09bCkpfWlmKGYpe2lmKGV8fGEpe2lmKGUpe2o9W10saz1yLmxlbmd0aDt3aGlsZShrLS0pKGw9cltrXSkmJmoucHVzaChxW2tdPWwpO2UobnVsbCxyPVtdLGosaSl9az1yLmxlbmd0aDt3aGlsZShrLS0pKGw9cltrXSkmJihqPWU/SShmLGwpOm1ba10pPi0xJiYoZltqXT0hKGdbal09bCkpfX1lbHNlIHI9d2Eocj09PWc/ci5zcGxpY2UobyxyLmxlbmd0aCk6ciksZT9lKG51bGwsZyxyLGkpOkcuYXBwbHkoZyxyKX0pfWZ1bmN0aW9uIHlhKGEpe2Zvcih2YXIgYixjLGUsZj1hLmxlbmd0aCxnPWQucmVsYXRpdmVbYVswXS50eXBlXSxoPWd8fGQucmVsYXRpdmVbXCIgXCJdLGk9Zz8xOjAsaz10YShmdW5jdGlvbihhKXtyZXR1cm4gYT09PWJ9LGgsITApLGw9dGEoZnVuY3Rpb24oYSl7cmV0dXJuIEkoYixhKT4tMX0saCwhMCksbT1bZnVuY3Rpb24oYSxjLGQpe3ZhciBlPSFnJiYoZHx8YyE9PWopfHwoKGI9Yykubm9kZVR5cGU/ayhhLGMsZCk6bChhLGMsZCkpO3JldHVybiBiPW51bGwsZX1dO2k8ZjtpKyspaWYoYz1kLnJlbGF0aXZlW2FbaV0udHlwZV0pbT1bdGEodWEobSksYyldO2Vsc2V7aWYoYz1kLmZpbHRlclthW2ldLnR5cGVdLmFwcGx5KG51bGwsYVtpXS5tYXRjaGVzKSxjW3VdKXtmb3IoZT0rK2k7ZTxmO2UrKylpZihkLnJlbGF0aXZlW2FbZV0udHlwZV0pYnJlYWs7cmV0dXJuIHhhKGk+MSYmdWEobSksaT4xJiZzYShhLnNsaWNlKDAsaS0xKS5jb25jYXQoe3ZhbHVlOlwiIFwiPT09YVtpLTJdLnR5cGU/XCIqXCI6XCJcIn0pKS5yZXBsYWNlKFAsXCIkMVwiKSxjLGk8ZSYmeWEoYS5zbGljZShpLGUpKSxlPGYmJnlhKGE9YS5zbGljZShlKSksZTxmJiZzYShhKSl9bS5wdXNoKGMpfXJldHVybiB1YShtKX1mdW5jdGlvbiB6YShhLGIpe3ZhciBjPWIubGVuZ3RoPjAsZT1hLmxlbmd0aD4wLGY9ZnVuY3Rpb24oZixnLGgsaSxrKXt2YXIgbCxvLHEscj0wLHM9XCIwXCIsdD1mJiZbXSx1PVtdLHY9aix4PWZ8fGUmJmQuZmluZC5UQUcoXCIqXCIsaykseT13Kz1udWxsPT12PzE6TWF0aC5yYW5kb20oKXx8LjEsej14Lmxlbmd0aDtmb3IoayYmKGo9Zz09PW58fGd8fGspO3MhPT16JiZudWxsIT0obD14W3NdKTtzKyspe2lmKGUmJmwpe289MCxnfHxsLm93bmVyRG9jdW1lbnQ9PT1ufHwobShsKSxoPSFwKTt3aGlsZShxPWFbbysrXSlpZihxKGwsZ3x8bixoKSl7aS5wdXNoKGwpO2JyZWFrfWsmJih3PXkpfWMmJigobD0hcSYmbCkmJnItLSxmJiZ0LnB1c2gobCkpfWlmKHIrPXMsYyYmcyE9PXIpe289MDt3aGlsZShxPWJbbysrXSlxKHQsdSxnLGgpO2lmKGYpe2lmKHI+MCl3aGlsZShzLS0pdFtzXXx8dVtzXXx8KHVbc109RS5jYWxsKGkpKTt1PXdhKHUpfUcuYXBwbHkoaSx1KSxrJiYhZiYmdS5sZW5ndGg+MCYmcitiLmxlbmd0aD4xJiZnYS51bmlxdWVTb3J0KGkpfXJldHVybiBrJiYodz15LGo9diksdH07cmV0dXJuIGM/aWEoZik6Zn1yZXR1cm4gaD1nYS5jb21waWxlPWZ1bmN0aW9uKGEsYil7dmFyIGMsZD1bXSxlPVtdLGY9QVthK1wiIFwiXTtpZighZil7Ynx8KGI9ZyhhKSksYz1iLmxlbmd0aDt3aGlsZShjLS0pZj15YShiW2NdKSxmW3VdP2QucHVzaChmKTplLnB1c2goZik7Zj1BKGEsemEoZSxkKSksZi5zZWxlY3Rvcj1hfXJldHVybiBmfSxpPWdhLnNlbGVjdD1mdW5jdGlvbihhLGIsYyxlKXt2YXIgZixpLGosayxsLG09XCJmdW5jdGlvblwiPT10eXBlb2YgYSYmYSxuPSFlJiZnKGE9bS5zZWxlY3Rvcnx8YSk7aWYoYz1jfHxbXSwxPT09bi5sZW5ndGgpe2lmKGk9blswXT1uWzBdLnNsaWNlKDApLGkubGVuZ3RoPjImJlwiSURcIj09PShqPWlbMF0pLnR5cGUmJjk9PT1iLm5vZGVUeXBlJiZwJiZkLnJlbGF0aXZlW2lbMV0udHlwZV0pe2lmKGI9KGQuZmluZC5JRChqLm1hdGNoZXNbMF0ucmVwbGFjZShfLGFhKSxiKXx8W10pWzBdLCFiKXJldHVybiBjO20mJihiPWIucGFyZW50Tm9kZSksYT1hLnNsaWNlKGkuc2hpZnQoKS52YWx1ZS5sZW5ndGgpfWY9Vi5uZWVkc0NvbnRleHQudGVzdChhKT8wOmkubGVuZ3RoO3doaWxlKGYtLSl7aWYoaj1pW2ZdLGQucmVsYXRpdmVbaz1qLnR5cGVdKWJyZWFrO2lmKChsPWQuZmluZFtrXSkmJihlPWwoai5tYXRjaGVzWzBdLnJlcGxhY2UoXyxhYSksJC50ZXN0KGlbMF0udHlwZSkmJnFhKGIucGFyZW50Tm9kZSl8fGIpKSl7aWYoaS5zcGxpY2UoZiwxKSxhPWUubGVuZ3RoJiZzYShpKSwhYSlyZXR1cm4gRy5hcHBseShjLGUpLGM7YnJlYWt9fX1yZXR1cm4obXx8aChhLG4pKShlLGIsIXAsYywhYnx8JC50ZXN0KGEpJiZxYShiLnBhcmVudE5vZGUpfHxiKSxjfSxjLnNvcnRTdGFibGU9dS5zcGxpdChcIlwiKS5zb3J0KEIpLmpvaW4oXCJcIik9PT11LGMuZGV0ZWN0RHVwbGljYXRlcz0hIWwsbSgpLGMuc29ydERldGFjaGVkPWphKGZ1bmN0aW9uKGEpe3JldHVybiAxJmEuY29tcGFyZURvY3VtZW50UG9zaXRpb24obi5jcmVhdGVFbGVtZW50KFwiZmllbGRzZXRcIikpfSksamEoZnVuY3Rpb24oYSl7cmV0dXJuIGEuaW5uZXJIVE1MPVwiPGEgaHJlZj0nIyc+PC9hPlwiLFwiI1wiPT09YS5maXJzdENoaWxkLmdldEF0dHJpYnV0ZShcImhyZWZcIil9KXx8a2EoXCJ0eXBlfGhyZWZ8aGVpZ2h0fHdpZHRoXCIsZnVuY3Rpb24oYSxiLGMpe2lmKCFjKXJldHVybiBhLmdldEF0dHJpYnV0ZShiLFwidHlwZVwiPT09Yi50b0xvd2VyQ2FzZSgpPzE6Mil9KSxjLmF0dHJpYnV0ZXMmJmphKGZ1bmN0aW9uKGEpe3JldHVybiBhLmlubmVySFRNTD1cIjxpbnB1dC8+XCIsYS5maXJzdENoaWxkLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsXCJcIiksXCJcIj09PWEuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiKX0pfHxrYShcInZhbHVlXCIsZnVuY3Rpb24oYSxiLGMpe2lmKCFjJiZcImlucHV0XCI9PT1hLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkpcmV0dXJuIGEuZGVmYXVsdFZhbHVlfSksamEoZnVuY3Rpb24oYSl7cmV0dXJuIG51bGw9PWEuZ2V0QXR0cmlidXRlKFwiZGlzYWJsZWRcIil9KXx8a2EoSixmdW5jdGlvbihhLGIsYyl7dmFyIGQ7aWYoIWMpcmV0dXJuIGFbYl09PT0hMD9iLnRvTG93ZXJDYXNlKCk6KGQ9YS5nZXRBdHRyaWJ1dGVOb2RlKGIpKSYmZC5zcGVjaWZpZWQ/ZC52YWx1ZTpudWxsfSksZ2F9KGEpO3IuZmluZD14LHIuZXhwcj14LnNlbGVjdG9ycyxyLmV4cHJbXCI6XCJdPXIuZXhwci5wc2V1ZG9zLHIudW5pcXVlU29ydD1yLnVuaXF1ZT14LnVuaXF1ZVNvcnQsci50ZXh0PXguZ2V0VGV4dCxyLmlzWE1MRG9jPXguaXNYTUwsci5jb250YWlucz14LmNvbnRhaW5zLHIuZXNjYXBlU2VsZWN0b3I9eC5lc2NhcGU7dmFyIHk9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPVtdLGU9dm9pZCAwIT09Yzt3aGlsZSgoYT1hW2JdKSYmOSE9PWEubm9kZVR5cGUpaWYoMT09PWEubm9kZVR5cGUpe2lmKGUmJnIoYSkuaXMoYykpYnJlYWs7ZC5wdXNoKGEpfXJldHVybiBkfSx6PWZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPVtdO2E7YT1hLm5leHRTaWJsaW5nKTE9PT1hLm5vZGVUeXBlJiZhIT09YiYmYy5wdXNoKGEpO3JldHVybiBjfSxBPXIuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQ7ZnVuY3Rpb24gQihhLGIpe3JldHVybiBhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk9PT1iLnRvTG93ZXJDYXNlKCl9dmFyIEM9L148KFthLXpdW15cXC9cXDA+OlxceDIwXFx0XFxyXFxuXFxmXSopW1xceDIwXFx0XFxyXFxuXFxmXSpcXC8/Pig/OjxcXC9cXDE+fCkkL2ksRD0vXi5bXjojXFxbXFwuLF0qJC87ZnVuY3Rpb24gRShhLGIsYyl7cmV0dXJuIHIuaXNGdW5jdGlvbihiKT9yLmdyZXAoYSxmdW5jdGlvbihhLGQpe3JldHVybiEhYi5jYWxsKGEsZCxhKSE9PWN9KTpiLm5vZGVUeXBlP3IuZ3JlcChhLGZ1bmN0aW9uKGEpe3JldHVybiBhPT09YiE9PWN9KTpcInN0cmluZ1wiIT10eXBlb2YgYj9yLmdyZXAoYSxmdW5jdGlvbihhKXtyZXR1cm4gaS5jYWxsKGIsYSk+LTEhPT1jfSk6RC50ZXN0KGIpP3IuZmlsdGVyKGIsYSxjKTooYj1yLmZpbHRlcihiLGEpLHIuZ3JlcChhLGZ1bmN0aW9uKGEpe3JldHVybiBpLmNhbGwoYixhKT4tMSE9PWMmJjE9PT1hLm5vZGVUeXBlfSkpfXIuZmlsdGVyPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD1iWzBdO3JldHVybiBjJiYoYT1cIjpub3QoXCIrYStcIilcIiksMT09PWIubGVuZ3RoJiYxPT09ZC5ub2RlVHlwZT9yLmZpbmQubWF0Y2hlc1NlbGVjdG9yKGQsYSk/W2RdOltdOnIuZmluZC5tYXRjaGVzKGEsci5ncmVwKGIsZnVuY3Rpb24oYSl7cmV0dXJuIDE9PT1hLm5vZGVUeXBlfSkpfSxyLmZuLmV4dGVuZCh7ZmluZDpmdW5jdGlvbihhKXt2YXIgYixjLGQ9dGhpcy5sZW5ndGgsZT10aGlzO2lmKFwic3RyaW5nXCIhPXR5cGVvZiBhKXJldHVybiB0aGlzLnB1c2hTdGFjayhyKGEpLmZpbHRlcihmdW5jdGlvbigpe2ZvcihiPTA7YjxkO2IrKylpZihyLmNvbnRhaW5zKGVbYl0sdGhpcykpcmV0dXJuITB9KSk7Zm9yKGM9dGhpcy5wdXNoU3RhY2soW10pLGI9MDtiPGQ7YisrKXIuZmluZChhLGVbYl0sYyk7cmV0dXJuIGQ+MT9yLnVuaXF1ZVNvcnQoYyk6Y30sZmlsdGVyOmZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLnB1c2hTdGFjayhFKHRoaXMsYXx8W10sITEpKX0sbm90OmZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLnB1c2hTdGFjayhFKHRoaXMsYXx8W10sITApKX0saXM6ZnVuY3Rpb24oYSl7cmV0dXJuISFFKHRoaXMsXCJzdHJpbmdcIj09dHlwZW9mIGEmJkEudGVzdChhKT9yKGEpOmF8fFtdLCExKS5sZW5ndGh9fSk7dmFyIEYsRz0vXig/OlxccyooPFtcXHdcXFddKz4pW14+XSp8IyhbXFx3LV0rKSkkLyxIPXIuZm4uaW5pdD1mdW5jdGlvbihhLGIsYyl7dmFyIGUsZjtpZighYSlyZXR1cm4gdGhpcztpZihjPWN8fEYsXCJzdHJpbmdcIj09dHlwZW9mIGEpe2lmKGU9XCI8XCI9PT1hWzBdJiZcIj5cIj09PWFbYS5sZW5ndGgtMV0mJmEubGVuZ3RoPj0zP1tudWxsLGEsbnVsbF06Ry5leGVjKGEpLCFlfHwhZVsxXSYmYilyZXR1cm4hYnx8Yi5qcXVlcnk/KGJ8fGMpLmZpbmQoYSk6dGhpcy5jb25zdHJ1Y3RvcihiKS5maW5kKGEpO2lmKGVbMV0pe2lmKGI9YiBpbnN0YW5jZW9mIHI/YlswXTpiLHIubWVyZ2UodGhpcyxyLnBhcnNlSFRNTChlWzFdLGImJmIubm9kZVR5cGU/Yi5vd25lckRvY3VtZW50fHxiOmQsITApKSxDLnRlc3QoZVsxXSkmJnIuaXNQbGFpbk9iamVjdChiKSlmb3IoZSBpbiBiKXIuaXNGdW5jdGlvbih0aGlzW2VdKT90aGlzW2VdKGJbZV0pOnRoaXMuYXR0cihlLGJbZV0pO3JldHVybiB0aGlzfXJldHVybiBmPWQuZ2V0RWxlbWVudEJ5SWQoZVsyXSksZiYmKHRoaXNbMF09Zix0aGlzLmxlbmd0aD0xKSx0aGlzfXJldHVybiBhLm5vZGVUeXBlPyh0aGlzWzBdPWEsdGhpcy5sZW5ndGg9MSx0aGlzKTpyLmlzRnVuY3Rpb24oYSk/dm9pZCAwIT09Yy5yZWFkeT9jLnJlYWR5KGEpOmEocik6ci5tYWtlQXJyYXkoYSx0aGlzKX07SC5wcm90b3R5cGU9ci5mbixGPXIoZCk7dmFyIEk9L14oPzpwYXJlbnRzfHByZXYoPzpVbnRpbHxBbGwpKS8sSj17Y2hpbGRyZW46ITAsY29udGVudHM6ITAsbmV4dDohMCxwcmV2OiEwfTtyLmZuLmV4dGVuZCh7aGFzOmZ1bmN0aW9uKGEpe3ZhciBiPXIoYSx0aGlzKSxjPWIubGVuZ3RoO3JldHVybiB0aGlzLmZpbHRlcihmdW5jdGlvbigpe2Zvcih2YXIgYT0wO2E8YzthKyspaWYoci5jb250YWlucyh0aGlzLGJbYV0pKXJldHVybiEwfSl9LGNsb3Nlc3Q6ZnVuY3Rpb24oYSxiKXt2YXIgYyxkPTAsZT10aGlzLmxlbmd0aCxmPVtdLGc9XCJzdHJpbmdcIiE9dHlwZW9mIGEmJnIoYSk7aWYoIUEudGVzdChhKSlmb3IoO2Q8ZTtkKyspZm9yKGM9dGhpc1tkXTtjJiZjIT09YjtjPWMucGFyZW50Tm9kZSlpZihjLm5vZGVUeXBlPDExJiYoZz9nLmluZGV4KGMpPi0xOjE9PT1jLm5vZGVUeXBlJiZyLmZpbmQubWF0Y2hlc1NlbGVjdG9yKGMsYSkpKXtmLnB1c2goYyk7YnJlYWt9cmV0dXJuIHRoaXMucHVzaFN0YWNrKGYubGVuZ3RoPjE/ci51bmlxdWVTb3J0KGYpOmYpfSxpbmRleDpmdW5jdGlvbihhKXtyZXR1cm4gYT9cInN0cmluZ1wiPT10eXBlb2YgYT9pLmNhbGwocihhKSx0aGlzWzBdKTppLmNhbGwodGhpcyxhLmpxdWVyeT9hWzBdOmEpOnRoaXNbMF0mJnRoaXNbMF0ucGFyZW50Tm9kZT90aGlzLmZpcnN0KCkucHJldkFsbCgpLmxlbmd0aDotMX0sYWRkOmZ1bmN0aW9uKGEsYil7cmV0dXJuIHRoaXMucHVzaFN0YWNrKHIudW5pcXVlU29ydChyLm1lcmdlKHRoaXMuZ2V0KCkscihhLGIpKSkpfSxhZGRCYWNrOmZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLmFkZChudWxsPT1hP3RoaXMucHJldk9iamVjdDp0aGlzLnByZXZPYmplY3QuZmlsdGVyKGEpKX19KTtmdW5jdGlvbiBLKGEsYil7d2hpbGUoKGE9YVtiXSkmJjEhPT1hLm5vZGVUeXBlKTtyZXR1cm4gYX1yLmVhY2goe3BhcmVudDpmdW5jdGlvbihhKXt2YXIgYj1hLnBhcmVudE5vZGU7cmV0dXJuIGImJjExIT09Yi5ub2RlVHlwZT9iOm51bGx9LHBhcmVudHM6ZnVuY3Rpb24oYSl7cmV0dXJuIHkoYSxcInBhcmVudE5vZGVcIil9LHBhcmVudHNVbnRpbDpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIHkoYSxcInBhcmVudE5vZGVcIixjKX0sbmV4dDpmdW5jdGlvbihhKXtyZXR1cm4gSyhhLFwibmV4dFNpYmxpbmdcIil9LHByZXY6ZnVuY3Rpb24oYSl7cmV0dXJuIEsoYSxcInByZXZpb3VzU2libGluZ1wiKX0sbmV4dEFsbDpmdW5jdGlvbihhKXtyZXR1cm4geShhLFwibmV4dFNpYmxpbmdcIil9LHByZXZBbGw6ZnVuY3Rpb24oYSl7cmV0dXJuIHkoYSxcInByZXZpb3VzU2libGluZ1wiKX0sbmV4dFVudGlsOmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4geShhLFwibmV4dFNpYmxpbmdcIixjKX0scHJldlVudGlsOmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4geShhLFwicHJldmlvdXNTaWJsaW5nXCIsYyl9LHNpYmxpbmdzOmZ1bmN0aW9uKGEpe3JldHVybiB6KChhLnBhcmVudE5vZGV8fHt9KS5maXJzdENoaWxkLGEpfSxjaGlsZHJlbjpmdW5jdGlvbihhKXtyZXR1cm4geihhLmZpcnN0Q2hpbGQpfSxjb250ZW50czpmdW5jdGlvbihhKXtyZXR1cm4gQihhLFwiaWZyYW1lXCIpP2EuY29udGVudERvY3VtZW50OihCKGEsXCJ0ZW1wbGF0ZVwiKSYmKGE9YS5jb250ZW50fHxhKSxyLm1lcmdlKFtdLGEuY2hpbGROb2RlcykpfX0sZnVuY3Rpb24oYSxiKXtyLmZuW2FdPWZ1bmN0aW9uKGMsZCl7dmFyIGU9ci5tYXAodGhpcyxiLGMpO3JldHVyblwiVW50aWxcIiE9PWEuc2xpY2UoLTUpJiYoZD1jKSxkJiZcInN0cmluZ1wiPT10eXBlb2YgZCYmKGU9ci5maWx0ZXIoZCxlKSksdGhpcy5sZW5ndGg+MSYmKEpbYV18fHIudW5pcXVlU29ydChlKSxJLnRlc3QoYSkmJmUucmV2ZXJzZSgpKSx0aGlzLnB1c2hTdGFjayhlKX19KTt2YXIgTD0vW15cXHgyMFxcdFxcclxcblxcZl0rL2c7ZnVuY3Rpb24gTShhKXt2YXIgYj17fTtyZXR1cm4gci5lYWNoKGEubWF0Y2goTCl8fFtdLGZ1bmN0aW9uKGEsYyl7YltjXT0hMH0pLGJ9ci5DYWxsYmFja3M9ZnVuY3Rpb24oYSl7YT1cInN0cmluZ1wiPT10eXBlb2YgYT9NKGEpOnIuZXh0ZW5kKHt9LGEpO3ZhciBiLGMsZCxlLGY9W10sZz1bXSxoPS0xLGk9ZnVuY3Rpb24oKXtmb3IoZT1lfHxhLm9uY2UsZD1iPSEwO2cubGVuZ3RoO2g9LTEpe2M9Zy5zaGlmdCgpO3doaWxlKCsraDxmLmxlbmd0aClmW2hdLmFwcGx5KGNbMF0sY1sxXSk9PT0hMSYmYS5zdG9wT25GYWxzZSYmKGg9Zi5sZW5ndGgsYz0hMSl9YS5tZW1vcnl8fChjPSExKSxiPSExLGUmJihmPWM/W106XCJcIil9LGo9e2FkZDpmdW5jdGlvbigpe3JldHVybiBmJiYoYyYmIWImJihoPWYubGVuZ3RoLTEsZy5wdXNoKGMpKSxmdW5jdGlvbiBkKGIpe3IuZWFjaChiLGZ1bmN0aW9uKGIsYyl7ci5pc0Z1bmN0aW9uKGMpP2EudW5pcXVlJiZqLmhhcyhjKXx8Zi5wdXNoKGMpOmMmJmMubGVuZ3RoJiZcInN0cmluZ1wiIT09ci50eXBlKGMpJiZkKGMpfSl9KGFyZ3VtZW50cyksYyYmIWImJmkoKSksdGhpc30scmVtb3ZlOmZ1bmN0aW9uKCl7cmV0dXJuIHIuZWFjaChhcmd1bWVudHMsZnVuY3Rpb24oYSxiKXt2YXIgYzt3aGlsZSgoYz1yLmluQXJyYXkoYixmLGMpKT4tMSlmLnNwbGljZShjLDEpLGM8PWgmJmgtLX0pLHRoaXN9LGhhczpmdW5jdGlvbihhKXtyZXR1cm4gYT9yLmluQXJyYXkoYSxmKT4tMTpmLmxlbmd0aD4wfSxlbXB0eTpmdW5jdGlvbigpe3JldHVybiBmJiYoZj1bXSksdGhpc30sZGlzYWJsZTpmdW5jdGlvbigpe3JldHVybiBlPWc9W10sZj1jPVwiXCIsdGhpc30sZGlzYWJsZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hZn0sbG9jazpmdW5jdGlvbigpe3JldHVybiBlPWc9W10sY3x8Ynx8KGY9Yz1cIlwiKSx0aGlzfSxsb2NrZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hIWV9LGZpcmVXaXRoOmZ1bmN0aW9uKGEsYyl7cmV0dXJuIGV8fChjPWN8fFtdLGM9W2EsYy5zbGljZT9jLnNsaWNlKCk6Y10sZy5wdXNoKGMpLGJ8fGkoKSksdGhpc30sZmlyZTpmdW5jdGlvbigpe3JldHVybiBqLmZpcmVXaXRoKHRoaXMsYXJndW1lbnRzKSx0aGlzfSxmaXJlZDpmdW5jdGlvbigpe3JldHVybiEhZH19O3JldHVybiBqfTtmdW5jdGlvbiBOKGEpe3JldHVybiBhfWZ1bmN0aW9uIE8oYSl7dGhyb3cgYX1mdW5jdGlvbiBQKGEsYixjLGQpe3ZhciBlO3RyeXthJiZyLmlzRnVuY3Rpb24oZT1hLnByb21pc2UpP2UuY2FsbChhKS5kb25lKGIpLmZhaWwoYyk6YSYmci5pc0Z1bmN0aW9uKGU9YS50aGVuKT9lLmNhbGwoYSxiLGMpOmIuYXBwbHkodm9pZCAwLFthXS5zbGljZShkKSl9Y2F0Y2goYSl7Yy5hcHBseSh2b2lkIDAsW2FdKX19ci5leHRlbmQoe0RlZmVycmVkOmZ1bmN0aW9uKGIpe3ZhciBjPVtbXCJub3RpZnlcIixcInByb2dyZXNzXCIsci5DYWxsYmFja3MoXCJtZW1vcnlcIiksci5DYWxsYmFja3MoXCJtZW1vcnlcIiksMl0sW1wicmVzb2x2ZVwiLFwiZG9uZVwiLHIuQ2FsbGJhY2tzKFwib25jZSBtZW1vcnlcIiksci5DYWxsYmFja3MoXCJvbmNlIG1lbW9yeVwiKSwwLFwicmVzb2x2ZWRcIl0sW1wicmVqZWN0XCIsXCJmYWlsXCIsci5DYWxsYmFja3MoXCJvbmNlIG1lbW9yeVwiKSxyLkNhbGxiYWNrcyhcIm9uY2UgbWVtb3J5XCIpLDEsXCJyZWplY3RlZFwiXV0sZD1cInBlbmRpbmdcIixlPXtzdGF0ZTpmdW5jdGlvbigpe3JldHVybiBkfSxhbHdheXM6ZnVuY3Rpb24oKXtyZXR1cm4gZi5kb25lKGFyZ3VtZW50cykuZmFpbChhcmd1bWVudHMpLHRoaXN9LFwiY2F0Y2hcIjpmdW5jdGlvbihhKXtyZXR1cm4gZS50aGVuKG51bGwsYSl9LHBpcGU6ZnVuY3Rpb24oKXt2YXIgYT1hcmd1bWVudHM7cmV0dXJuIHIuRGVmZXJyZWQoZnVuY3Rpb24oYil7ci5lYWNoKGMsZnVuY3Rpb24oYyxkKXt2YXIgZT1yLmlzRnVuY3Rpb24oYVtkWzRdXSkmJmFbZFs0XV07ZltkWzFdXShmdW5jdGlvbigpe3ZhciBhPWUmJmUuYXBwbHkodGhpcyxhcmd1bWVudHMpO2EmJnIuaXNGdW5jdGlvbihhLnByb21pc2UpP2EucHJvbWlzZSgpLnByb2dyZXNzKGIubm90aWZ5KS5kb25lKGIucmVzb2x2ZSkuZmFpbChiLnJlamVjdCk6YltkWzBdK1wiV2l0aFwiXSh0aGlzLGU/W2FdOmFyZ3VtZW50cyl9KX0pLGE9bnVsbH0pLnByb21pc2UoKX0sdGhlbjpmdW5jdGlvbihiLGQsZSl7dmFyIGY9MDtmdW5jdGlvbiBnKGIsYyxkLGUpe3JldHVybiBmdW5jdGlvbigpe3ZhciBoPXRoaXMsaT1hcmd1bWVudHMsaj1mdW5jdGlvbigpe3ZhciBhLGo7aWYoIShiPGYpKXtpZihhPWQuYXBwbHkoaCxpKSxhPT09Yy5wcm9taXNlKCkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlRoZW5hYmxlIHNlbGYtcmVzb2x1dGlvblwiKTtqPWEmJihcIm9iamVjdFwiPT10eXBlb2YgYXx8XCJmdW5jdGlvblwiPT10eXBlb2YgYSkmJmEudGhlbixyLmlzRnVuY3Rpb24oaik/ZT9qLmNhbGwoYSxnKGYsYyxOLGUpLGcoZixjLE8sZSkpOihmKyssai5jYWxsKGEsZyhmLGMsTixlKSxnKGYsYyxPLGUpLGcoZixjLE4sYy5ub3RpZnlXaXRoKSkpOihkIT09TiYmKGg9dm9pZCAwLGk9W2FdKSwoZXx8Yy5yZXNvbHZlV2l0aCkoaCxpKSl9fSxrPWU/ajpmdW5jdGlvbigpe3RyeXtqKCl9Y2F0Y2goYSl7ci5EZWZlcnJlZC5leGNlcHRpb25Ib29rJiZyLkRlZmVycmVkLmV4Y2VwdGlvbkhvb2soYSxrLnN0YWNrVHJhY2UpLGIrMT49ZiYmKGQhPT1PJiYoaD12b2lkIDAsaT1bYV0pLGMucmVqZWN0V2l0aChoLGkpKX19O2I/aygpOihyLkRlZmVycmVkLmdldFN0YWNrSG9vayYmKGsuc3RhY2tUcmFjZT1yLkRlZmVycmVkLmdldFN0YWNrSG9vaygpKSxhLnNldFRpbWVvdXQoaykpfX1yZXR1cm4gci5EZWZlcnJlZChmdW5jdGlvbihhKXtjWzBdWzNdLmFkZChnKDAsYSxyLmlzRnVuY3Rpb24oZSk/ZTpOLGEubm90aWZ5V2l0aCkpLGNbMV1bM10uYWRkKGcoMCxhLHIuaXNGdW5jdGlvbihiKT9iOk4pKSxjWzJdWzNdLmFkZChnKDAsYSxyLmlzRnVuY3Rpb24oZCk/ZDpPKSl9KS5wcm9taXNlKCl9LHByb21pc2U6ZnVuY3Rpb24oYSl7cmV0dXJuIG51bGwhPWE/ci5leHRlbmQoYSxlKTplfX0sZj17fTtyZXR1cm4gci5lYWNoKGMsZnVuY3Rpb24oYSxiKXt2YXIgZz1iWzJdLGg9Yls1XTtlW2JbMV1dPWcuYWRkLGgmJmcuYWRkKGZ1bmN0aW9uKCl7ZD1ofSxjWzMtYV1bMl0uZGlzYWJsZSxjWzBdWzJdLmxvY2spLGcuYWRkKGJbM10uZmlyZSksZltiWzBdXT1mdW5jdGlvbigpe3JldHVybiBmW2JbMF0rXCJXaXRoXCJdKHRoaXM9PT1mP3ZvaWQgMDp0aGlzLGFyZ3VtZW50cyksdGhpc30sZltiWzBdK1wiV2l0aFwiXT1nLmZpcmVXaXRofSksZS5wcm9taXNlKGYpLGImJmIuY2FsbChmLGYpLGZ9LHdoZW46ZnVuY3Rpb24oYSl7dmFyIGI9YXJndW1lbnRzLmxlbmd0aCxjPWIsZD1BcnJheShjKSxlPWYuY2FsbChhcmd1bWVudHMpLGc9ci5EZWZlcnJlZCgpLGg9ZnVuY3Rpb24oYSl7cmV0dXJuIGZ1bmN0aW9uKGMpe2RbYV09dGhpcyxlW2FdPWFyZ3VtZW50cy5sZW5ndGg+MT9mLmNhbGwoYXJndW1lbnRzKTpjLC0tYnx8Zy5yZXNvbHZlV2l0aChkLGUpfX07aWYoYjw9MSYmKFAoYSxnLmRvbmUoaChjKSkucmVzb2x2ZSxnLnJlamVjdCwhYiksXCJwZW5kaW5nXCI9PT1nLnN0YXRlKCl8fHIuaXNGdW5jdGlvbihlW2NdJiZlW2NdLnRoZW4pKSlyZXR1cm4gZy50aGVuKCk7d2hpbGUoYy0tKVAoZVtjXSxoKGMpLGcucmVqZWN0KTtyZXR1cm4gZy5wcm9taXNlKCl9fSk7dmFyIFE9L14oRXZhbHxJbnRlcm5hbHxSYW5nZXxSZWZlcmVuY2V8U3ludGF4fFR5cGV8VVJJKUVycm9yJC87ci5EZWZlcnJlZC5leGNlcHRpb25Ib29rPWZ1bmN0aW9uKGIsYyl7YS5jb25zb2xlJiZhLmNvbnNvbGUud2FybiYmYiYmUS50ZXN0KGIubmFtZSkmJmEuY29uc29sZS53YXJuKFwialF1ZXJ5LkRlZmVycmVkIGV4Y2VwdGlvbjogXCIrYi5tZXNzYWdlLGIuc3RhY2ssYyl9LHIucmVhZHlFeGNlcHRpb249ZnVuY3Rpb24oYil7YS5zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dGhyb3cgYn0pfTt2YXIgUj1yLkRlZmVycmVkKCk7ci5mbi5yZWFkeT1mdW5jdGlvbihhKXtyZXR1cm4gUi50aGVuKGEpW1wiY2F0Y2hcIl0oZnVuY3Rpb24oYSl7ci5yZWFkeUV4Y2VwdGlvbihhKX0pLHRoaXN9LHIuZXh0ZW5kKHtpc1JlYWR5OiExLHJlYWR5V2FpdDoxLHJlYWR5OmZ1bmN0aW9uKGEpeyhhPT09ITA/LS1yLnJlYWR5V2FpdDpyLmlzUmVhZHkpfHwoci5pc1JlYWR5PSEwLGEhPT0hMCYmLS1yLnJlYWR5V2FpdD4wfHxSLnJlc29sdmVXaXRoKGQsW3JdKSl9fSksci5yZWFkeS50aGVuPVIudGhlbjtmdW5jdGlvbiBTKCl7ZC5yZW1vdmVFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLFMpLFxuYS5yZW1vdmVFdmVudExpc3RlbmVyKFwibG9hZFwiLFMpLHIucmVhZHkoKX1cImNvbXBsZXRlXCI9PT1kLnJlYWR5U3RhdGV8fFwibG9hZGluZ1wiIT09ZC5yZWFkeVN0YXRlJiYhZC5kb2N1bWVudEVsZW1lbnQuZG9TY3JvbGw/YS5zZXRUaW1lb3V0KHIucmVhZHkpOihkLmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsUyksYS5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLFMpKTt2YXIgVD1mdW5jdGlvbihhLGIsYyxkLGUsZixnKXt2YXIgaD0wLGk9YS5sZW5ndGgsaj1udWxsPT1jO2lmKFwib2JqZWN0XCI9PT1yLnR5cGUoYykpe2U9ITA7Zm9yKGggaW4gYylUKGEsYixoLGNbaF0sITAsZixnKX1lbHNlIGlmKHZvaWQgMCE9PWQmJihlPSEwLHIuaXNGdW5jdGlvbihkKXx8KGc9ITApLGomJihnPyhiLmNhbGwoYSxkKSxiPW51bGwpOihqPWIsYj1mdW5jdGlvbihhLGIsYyl7cmV0dXJuIGouY2FsbChyKGEpLGMpfSkpLGIpKWZvcig7aDxpO2grKyliKGFbaF0sYyxnP2Q6ZC5jYWxsKGFbaF0saCxiKGFbaF0sYykpKTtyZXR1cm4gZT9hOmo/Yi5jYWxsKGEpOmk/YihhWzBdLGMpOmZ9LFU9ZnVuY3Rpb24oYSl7cmV0dXJuIDE9PT1hLm5vZGVUeXBlfHw5PT09YS5ub2RlVHlwZXx8ISthLm5vZGVUeXBlfTtmdW5jdGlvbiBWKCl7dGhpcy5leHBhbmRvPXIuZXhwYW5kbytWLnVpZCsrfVYudWlkPTEsVi5wcm90b3R5cGU9e2NhY2hlOmZ1bmN0aW9uKGEpe3ZhciBiPWFbdGhpcy5leHBhbmRvXTtyZXR1cm4gYnx8KGI9e30sVShhKSYmKGEubm9kZVR5cGU/YVt0aGlzLmV4cGFuZG9dPWI6T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsdGhpcy5leHBhbmRvLHt2YWx1ZTpiLGNvbmZpZ3VyYWJsZTohMH0pKSksYn0sc2V0OmZ1bmN0aW9uKGEsYixjKXt2YXIgZCxlPXRoaXMuY2FjaGUoYSk7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGIpZVtyLmNhbWVsQ2FzZShiKV09YztlbHNlIGZvcihkIGluIGIpZVtyLmNhbWVsQ2FzZShkKV09YltkXTtyZXR1cm4gZX0sZ2V0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIHZvaWQgMD09PWI/dGhpcy5jYWNoZShhKTphW3RoaXMuZXhwYW5kb10mJmFbdGhpcy5leHBhbmRvXVtyLmNhbWVsQ2FzZShiKV19LGFjY2VzczpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIHZvaWQgMD09PWJ8fGImJlwic3RyaW5nXCI9PXR5cGVvZiBiJiZ2b2lkIDA9PT1jP3RoaXMuZ2V0KGEsYik6KHRoaXMuc2V0KGEsYixjKSx2b2lkIDAhPT1jP2M6Yil9LHJlbW92ZTpmdW5jdGlvbihhLGIpe3ZhciBjLGQ9YVt0aGlzLmV4cGFuZG9dO2lmKHZvaWQgMCE9PWQpe2lmKHZvaWQgMCE9PWIpe0FycmF5LmlzQXJyYXkoYik/Yj1iLm1hcChyLmNhbWVsQ2FzZSk6KGI9ci5jYW1lbENhc2UoYiksYj1iIGluIGQ/W2JdOmIubWF0Y2goTCl8fFtdKSxjPWIubGVuZ3RoO3doaWxlKGMtLSlkZWxldGUgZFtiW2NdXX0odm9pZCAwPT09Ynx8ci5pc0VtcHR5T2JqZWN0KGQpKSYmKGEubm9kZVR5cGU/YVt0aGlzLmV4cGFuZG9dPXZvaWQgMDpkZWxldGUgYVt0aGlzLmV4cGFuZG9dKX19LGhhc0RhdGE6ZnVuY3Rpb24oYSl7dmFyIGI9YVt0aGlzLmV4cGFuZG9dO3JldHVybiB2b2lkIDAhPT1iJiYhci5pc0VtcHR5T2JqZWN0KGIpfX07dmFyIFc9bmV3IFYsWD1uZXcgVixZPS9eKD86XFx7W1xcd1xcV10qXFx9fFxcW1tcXHdcXFddKlxcXSkkLyxaPS9bQS1aXS9nO2Z1bmN0aW9uICQoYSl7cmV0dXJuXCJ0cnVlXCI9PT1hfHxcImZhbHNlXCIhPT1hJiYoXCJudWxsXCI9PT1hP251bGw6YT09PSthK1wiXCI/K2E6WS50ZXN0KGEpP0pTT04ucGFyc2UoYSk6YSl9ZnVuY3Rpb24gXyhhLGIsYyl7dmFyIGQ7aWYodm9pZCAwPT09YyYmMT09PWEubm9kZVR5cGUpaWYoZD1cImRhdGEtXCIrYi5yZXBsYWNlKFosXCItJCZcIikudG9Mb3dlckNhc2UoKSxjPWEuZ2V0QXR0cmlidXRlKGQpLFwic3RyaW5nXCI9PXR5cGVvZiBjKXt0cnl7Yz0kKGMpfWNhdGNoKGUpe31YLnNldChhLGIsYyl9ZWxzZSBjPXZvaWQgMDtyZXR1cm4gY31yLmV4dGVuZCh7aGFzRGF0YTpmdW5jdGlvbihhKXtyZXR1cm4gWC5oYXNEYXRhKGEpfHxXLmhhc0RhdGEoYSl9LGRhdGE6ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBYLmFjY2VzcyhhLGIsYyl9LHJlbW92ZURhdGE6ZnVuY3Rpb24oYSxiKXtYLnJlbW92ZShhLGIpfSxfZGF0YTpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIFcuYWNjZXNzKGEsYixjKX0sX3JlbW92ZURhdGE6ZnVuY3Rpb24oYSxiKXtXLnJlbW92ZShhLGIpfX0pLHIuZm4uZXh0ZW5kKHtkYXRhOmZ1bmN0aW9uKGEsYil7dmFyIGMsZCxlLGY9dGhpc1swXSxnPWYmJmYuYXR0cmlidXRlcztpZih2b2lkIDA9PT1hKXtpZih0aGlzLmxlbmd0aCYmKGU9WC5nZXQoZiksMT09PWYubm9kZVR5cGUmJiFXLmdldChmLFwiaGFzRGF0YUF0dHJzXCIpKSl7Yz1nLmxlbmd0aDt3aGlsZShjLS0pZ1tjXSYmKGQ9Z1tjXS5uYW1lLDA9PT1kLmluZGV4T2YoXCJkYXRhLVwiKSYmKGQ9ci5jYW1lbENhc2UoZC5zbGljZSg1KSksXyhmLGQsZVtkXSkpKTtXLnNldChmLFwiaGFzRGF0YUF0dHJzXCIsITApfXJldHVybiBlfXJldHVyblwib2JqZWN0XCI9PXR5cGVvZiBhP3RoaXMuZWFjaChmdW5jdGlvbigpe1guc2V0KHRoaXMsYSl9KTpUKHRoaXMsZnVuY3Rpb24oYil7dmFyIGM7aWYoZiYmdm9pZCAwPT09Yil7aWYoYz1YLmdldChmLGEpLHZvaWQgMCE9PWMpcmV0dXJuIGM7aWYoYz1fKGYsYSksdm9pZCAwIT09YylyZXR1cm4gY31lbHNlIHRoaXMuZWFjaChmdW5jdGlvbigpe1guc2V0KHRoaXMsYSxiKX0pfSxudWxsLGIsYXJndW1lbnRzLmxlbmd0aD4xLG51bGwsITApfSxyZW1vdmVEYXRhOmZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXtYLnJlbW92ZSh0aGlzLGEpfSl9fSksci5leHRlbmQoe3F1ZXVlOmZ1bmN0aW9uKGEsYixjKXt2YXIgZDtpZihhKXJldHVybiBiPShifHxcImZ4XCIpK1wicXVldWVcIixkPVcuZ2V0KGEsYiksYyYmKCFkfHxBcnJheS5pc0FycmF5KGMpP2Q9Vy5hY2Nlc3MoYSxiLHIubWFrZUFycmF5KGMpKTpkLnB1c2goYykpLGR8fFtdfSxkZXF1ZXVlOmZ1bmN0aW9uKGEsYil7Yj1ifHxcImZ4XCI7dmFyIGM9ci5xdWV1ZShhLGIpLGQ9Yy5sZW5ndGgsZT1jLnNoaWZ0KCksZj1yLl9xdWV1ZUhvb2tzKGEsYiksZz1mdW5jdGlvbigpe3IuZGVxdWV1ZShhLGIpfTtcImlucHJvZ3Jlc3NcIj09PWUmJihlPWMuc2hpZnQoKSxkLS0pLGUmJihcImZ4XCI9PT1iJiZjLnVuc2hpZnQoXCJpbnByb2dyZXNzXCIpLGRlbGV0ZSBmLnN0b3AsZS5jYWxsKGEsZyxmKSksIWQmJmYmJmYuZW1wdHkuZmlyZSgpfSxfcXVldWVIb29rczpmdW5jdGlvbihhLGIpe3ZhciBjPWIrXCJxdWV1ZUhvb2tzXCI7cmV0dXJuIFcuZ2V0KGEsYyl8fFcuYWNjZXNzKGEsYyx7ZW1wdHk6ci5DYWxsYmFja3MoXCJvbmNlIG1lbW9yeVwiKS5hZGQoZnVuY3Rpb24oKXtXLnJlbW92ZShhLFtiK1wicXVldWVcIixjXSl9KX0pfX0pLHIuZm4uZXh0ZW5kKHtxdWV1ZTpmdW5jdGlvbihhLGIpe3ZhciBjPTI7cmV0dXJuXCJzdHJpbmdcIiE9dHlwZW9mIGEmJihiPWEsYT1cImZ4XCIsYy0tKSxhcmd1bWVudHMubGVuZ3RoPGM/ci5xdWV1ZSh0aGlzWzBdLGEpOnZvaWQgMD09PWI/dGhpczp0aGlzLmVhY2goZnVuY3Rpb24oKXt2YXIgYz1yLnF1ZXVlKHRoaXMsYSxiKTtyLl9xdWV1ZUhvb2tzKHRoaXMsYSksXCJmeFwiPT09YSYmXCJpbnByb2dyZXNzXCIhPT1jWzBdJiZyLmRlcXVldWUodGhpcyxhKX0pfSxkZXF1ZXVlOmZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXtyLmRlcXVldWUodGhpcyxhKX0pfSxjbGVhclF1ZXVlOmZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLnF1ZXVlKGF8fFwiZnhcIixbXSl9LHByb21pc2U6ZnVuY3Rpb24oYSxiKXt2YXIgYyxkPTEsZT1yLkRlZmVycmVkKCksZj10aGlzLGc9dGhpcy5sZW5ndGgsaD1mdW5jdGlvbigpey0tZHx8ZS5yZXNvbHZlV2l0aChmLFtmXSl9O1wic3RyaW5nXCIhPXR5cGVvZiBhJiYoYj1hLGE9dm9pZCAwKSxhPWF8fFwiZnhcIjt3aGlsZShnLS0pYz1XLmdldChmW2ddLGErXCJxdWV1ZUhvb2tzXCIpLGMmJmMuZW1wdHkmJihkKyssYy5lbXB0eS5hZGQoaCkpO3JldHVybiBoKCksZS5wcm9taXNlKGIpfX0pO3ZhciBhYT0vWystXT8oPzpcXGQqXFwufClcXGQrKD86W2VFXVsrLV0/XFxkK3wpLy5zb3VyY2UsYmE9bmV3IFJlZ0V4cChcIl4oPzooWystXSk9fCkoXCIrYWErXCIpKFthLXolXSopJFwiLFwiaVwiKSxjYT1bXCJUb3BcIixcIlJpZ2h0XCIsXCJCb3R0b21cIixcIkxlZnRcIl0sZGE9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gYT1ifHxhLFwibm9uZVwiPT09YS5zdHlsZS5kaXNwbGF5fHxcIlwiPT09YS5zdHlsZS5kaXNwbGF5JiZyLmNvbnRhaW5zKGEub3duZXJEb2N1bWVudCxhKSYmXCJub25lXCI9PT1yLmNzcyhhLFwiZGlzcGxheVwiKX0sZWE9ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGUsZixnPXt9O2ZvcihmIGluIGIpZ1tmXT1hLnN0eWxlW2ZdLGEuc3R5bGVbZl09YltmXTtlPWMuYXBwbHkoYSxkfHxbXSk7Zm9yKGYgaW4gYilhLnN0eWxlW2ZdPWdbZl07cmV0dXJuIGV9O2Z1bmN0aW9uIGZhKGEsYixjLGQpe3ZhciBlLGY9MSxnPTIwLGg9ZD9mdW5jdGlvbigpe3JldHVybiBkLmN1cigpfTpmdW5jdGlvbigpe3JldHVybiByLmNzcyhhLGIsXCJcIil9LGk9aCgpLGo9YyYmY1szXXx8KHIuY3NzTnVtYmVyW2JdP1wiXCI6XCJweFwiKSxrPShyLmNzc051bWJlcltiXXx8XCJweFwiIT09aiYmK2kpJiZiYS5leGVjKHIuY3NzKGEsYikpO2lmKGsmJmtbM10hPT1qKXtqPWp8fGtbM10sYz1jfHxbXSxrPStpfHwxO2RvIGY9Znx8XCIuNVwiLGsvPWYsci5zdHlsZShhLGIsaytqKTt3aGlsZShmIT09KGY9aCgpL2kpJiYxIT09ZiYmLS1nKX1yZXR1cm4gYyYmKGs9K2t8fCtpfHwwLGU9Y1sxXT9rKyhjWzFdKzEpKmNbMl06K2NbMl0sZCYmKGQudW5pdD1qLGQuc3RhcnQ9ayxkLmVuZD1lKSksZX12YXIgZ2E9e307ZnVuY3Rpb24gaGEoYSl7dmFyIGIsYz1hLm93bmVyRG9jdW1lbnQsZD1hLm5vZGVOYW1lLGU9Z2FbZF07cmV0dXJuIGU/ZTooYj1jLmJvZHkuYXBwZW5kQ2hpbGQoYy5jcmVhdGVFbGVtZW50KGQpKSxlPXIuY3NzKGIsXCJkaXNwbGF5XCIpLGIucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChiKSxcIm5vbmVcIj09PWUmJihlPVwiYmxvY2tcIiksZ2FbZF09ZSxlKX1mdW5jdGlvbiBpYShhLGIpe2Zvcih2YXIgYyxkLGU9W10sZj0wLGc9YS5sZW5ndGg7ZjxnO2YrKylkPWFbZl0sZC5zdHlsZSYmKGM9ZC5zdHlsZS5kaXNwbGF5LGI/KFwibm9uZVwiPT09YyYmKGVbZl09Vy5nZXQoZCxcImRpc3BsYXlcIil8fG51bGwsZVtmXXx8KGQuc3R5bGUuZGlzcGxheT1cIlwiKSksXCJcIj09PWQuc3R5bGUuZGlzcGxheSYmZGEoZCkmJihlW2ZdPWhhKGQpKSk6XCJub25lXCIhPT1jJiYoZVtmXT1cIm5vbmVcIixXLnNldChkLFwiZGlzcGxheVwiLGMpKSk7Zm9yKGY9MDtmPGc7ZisrKW51bGwhPWVbZl0mJihhW2ZdLnN0eWxlLmRpc3BsYXk9ZVtmXSk7cmV0dXJuIGF9ci5mbi5leHRlbmQoe3Nob3c6ZnVuY3Rpb24oKXtyZXR1cm4gaWEodGhpcywhMCl9LGhpZGU6ZnVuY3Rpb24oKXtyZXR1cm4gaWEodGhpcyl9LHRvZ2dsZTpmdW5jdGlvbihhKXtyZXR1cm5cImJvb2xlYW5cIj09dHlwZW9mIGE/YT90aGlzLnNob3coKTp0aGlzLmhpZGUoKTp0aGlzLmVhY2goZnVuY3Rpb24oKXtkYSh0aGlzKT9yKHRoaXMpLnNob3coKTpyKHRoaXMpLmhpZGUoKX0pfX0pO3ZhciBqYT0vXig/OmNoZWNrYm94fHJhZGlvKSQvaSxrYT0vPChbYS16XVteXFwvXFwwPlxceDIwXFx0XFxyXFxuXFxmXSspL2ksbGE9L14kfFxcLyg/OmphdmF8ZWNtYSlzY3JpcHQvaSxtYT17b3B0aW9uOlsxLFwiPHNlbGVjdCBtdWx0aXBsZT0nbXVsdGlwbGUnPlwiLFwiPC9zZWxlY3Q+XCJdLHRoZWFkOlsxLFwiPHRhYmxlPlwiLFwiPC90YWJsZT5cIl0sY29sOlsyLFwiPHRhYmxlPjxjb2xncm91cD5cIixcIjwvY29sZ3JvdXA+PC90YWJsZT5cIl0sdHI6WzIsXCI8dGFibGU+PHRib2R5PlwiLFwiPC90Ym9keT48L3RhYmxlPlwiXSx0ZDpbMyxcIjx0YWJsZT48dGJvZHk+PHRyPlwiLFwiPC90cj48L3Rib2R5PjwvdGFibGU+XCJdLF9kZWZhdWx0OlswLFwiXCIsXCJcIl19O21hLm9wdGdyb3VwPW1hLm9wdGlvbixtYS50Ym9keT1tYS50Zm9vdD1tYS5jb2xncm91cD1tYS5jYXB0aW9uPW1hLnRoZWFkLG1hLnRoPW1hLnRkO2Z1bmN0aW9uIG5hKGEsYil7dmFyIGM7cmV0dXJuIGM9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGEuZ2V0RWxlbWVudHNCeVRhZ05hbWU/YS5nZXRFbGVtZW50c0J5VGFnTmFtZShifHxcIipcIik6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGEucXVlcnlTZWxlY3RvckFsbD9hLnF1ZXJ5U2VsZWN0b3JBbGwoYnx8XCIqXCIpOltdLHZvaWQgMD09PWJ8fGImJkIoYSxiKT9yLm1lcmdlKFthXSxjKTpjfWZ1bmN0aW9uIG9hKGEsYil7Zm9yKHZhciBjPTAsZD1hLmxlbmd0aDtjPGQ7YysrKVcuc2V0KGFbY10sXCJnbG9iYWxFdmFsXCIsIWJ8fFcuZ2V0KGJbY10sXCJnbG9iYWxFdmFsXCIpKX12YXIgcGE9Lzx8JiM/XFx3KzsvO2Z1bmN0aW9uIHFhKGEsYixjLGQsZSl7Zm9yKHZhciBmLGcsaCxpLGosayxsPWIuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLG09W10sbj0wLG89YS5sZW5ndGg7bjxvO24rKylpZihmPWFbbl0sZnx8MD09PWYpaWYoXCJvYmplY3RcIj09PXIudHlwZShmKSlyLm1lcmdlKG0sZi5ub2RlVHlwZT9bZl06Zik7ZWxzZSBpZihwYS50ZXN0KGYpKXtnPWd8fGwuYXBwZW5kQ2hpbGQoYi5jcmVhdGVFbGVtZW50KFwiZGl2XCIpKSxoPShrYS5leGVjKGYpfHxbXCJcIixcIlwiXSlbMV0udG9Mb3dlckNhc2UoKSxpPW1hW2hdfHxtYS5fZGVmYXVsdCxnLmlubmVySFRNTD1pWzFdK3IuaHRtbFByZWZpbHRlcihmKStpWzJdLGs9aVswXTt3aGlsZShrLS0pZz1nLmxhc3RDaGlsZDtyLm1lcmdlKG0sZy5jaGlsZE5vZGVzKSxnPWwuZmlyc3RDaGlsZCxnLnRleHRDb250ZW50PVwiXCJ9ZWxzZSBtLnB1c2goYi5jcmVhdGVUZXh0Tm9kZShmKSk7bC50ZXh0Q29udGVudD1cIlwiLG49MDt3aGlsZShmPW1bbisrXSlpZihkJiZyLmluQXJyYXkoZixkKT4tMSllJiZlLnB1c2goZik7ZWxzZSBpZihqPXIuY29udGFpbnMoZi5vd25lckRvY3VtZW50LGYpLGc9bmEobC5hcHBlbmRDaGlsZChmKSxcInNjcmlwdFwiKSxqJiZvYShnKSxjKXtrPTA7d2hpbGUoZj1nW2srK10pbGEudGVzdChmLnR5cGV8fFwiXCIpJiZjLnB1c2goZil9cmV0dXJuIGx9IWZ1bmN0aW9uKCl7dmFyIGE9ZC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksYj1hLmFwcGVuZENoaWxkKGQuY3JlYXRlRWxlbWVudChcImRpdlwiKSksYz1kLmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtjLnNldEF0dHJpYnV0ZShcInR5cGVcIixcInJhZGlvXCIpLGMuc2V0QXR0cmlidXRlKFwiY2hlY2tlZFwiLFwiY2hlY2tlZFwiKSxjLnNldEF0dHJpYnV0ZShcIm5hbWVcIixcInRcIiksYi5hcHBlbmRDaGlsZChjKSxvLmNoZWNrQ2xvbmU9Yi5jbG9uZU5vZGUoITApLmNsb25lTm9kZSghMCkubGFzdENoaWxkLmNoZWNrZWQsYi5pbm5lckhUTUw9XCI8dGV4dGFyZWE+eDwvdGV4dGFyZWE+XCIsby5ub0Nsb25lQ2hlY2tlZD0hIWIuY2xvbmVOb2RlKCEwKS5sYXN0Q2hpbGQuZGVmYXVsdFZhbHVlfSgpO3ZhciByYT1kLmRvY3VtZW50RWxlbWVudCxzYT0vXmtleS8sdGE9L14oPzptb3VzZXxwb2ludGVyfGNvbnRleHRtZW51fGRyYWd8ZHJvcCl8Y2xpY2svLHVhPS9eKFteLl0qKSg/OlxcLiguKyl8KS87ZnVuY3Rpb24gdmEoKXtyZXR1cm4hMH1mdW5jdGlvbiB3YSgpe3JldHVybiExfWZ1bmN0aW9uIHhhKCl7dHJ5e3JldHVybiBkLmFjdGl2ZUVsZW1lbnR9Y2F0Y2goYSl7fX1mdW5jdGlvbiB5YShhLGIsYyxkLGUsZil7dmFyIGcsaDtpZihcIm9iamVjdFwiPT10eXBlb2YgYil7XCJzdHJpbmdcIiE9dHlwZW9mIGMmJihkPWR8fGMsYz12b2lkIDApO2ZvcihoIGluIGIpeWEoYSxoLGMsZCxiW2hdLGYpO3JldHVybiBhfWlmKG51bGw9PWQmJm51bGw9PWU/KGU9YyxkPWM9dm9pZCAwKTpudWxsPT1lJiYoXCJzdHJpbmdcIj09dHlwZW9mIGM/KGU9ZCxkPXZvaWQgMCk6KGU9ZCxkPWMsYz12b2lkIDApKSxlPT09ITEpZT13YTtlbHNlIGlmKCFlKXJldHVybiBhO3JldHVybiAxPT09ZiYmKGc9ZSxlPWZ1bmN0aW9uKGEpe3JldHVybiByKCkub2ZmKGEpLGcuYXBwbHkodGhpcyxhcmd1bWVudHMpfSxlLmd1aWQ9Zy5ndWlkfHwoZy5ndWlkPXIuZ3VpZCsrKSksYS5lYWNoKGZ1bmN0aW9uKCl7ci5ldmVudC5hZGQodGhpcyxiLGUsZCxjKX0pfXIuZXZlbnQ9e2dsb2JhbDp7fSxhZGQ6ZnVuY3Rpb24oYSxiLGMsZCxlKXt2YXIgZixnLGgsaSxqLGssbCxtLG4sbyxwLHE9Vy5nZXQoYSk7aWYocSl7Yy5oYW5kbGVyJiYoZj1jLGM9Zi5oYW5kbGVyLGU9Zi5zZWxlY3RvciksZSYmci5maW5kLm1hdGNoZXNTZWxlY3RvcihyYSxlKSxjLmd1aWR8fChjLmd1aWQ9ci5ndWlkKyspLChpPXEuZXZlbnRzKXx8KGk9cS5ldmVudHM9e30pLChnPXEuaGFuZGxlKXx8KGc9cS5oYW5kbGU9ZnVuY3Rpb24oYil7cmV0dXJuXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHImJnIuZXZlbnQudHJpZ2dlcmVkIT09Yi50eXBlP3IuZXZlbnQuZGlzcGF0Y2guYXBwbHkoYSxhcmd1bWVudHMpOnZvaWQgMH0pLGI9KGJ8fFwiXCIpLm1hdGNoKEwpfHxbXCJcIl0saj1iLmxlbmd0aDt3aGlsZShqLS0paD11YS5leGVjKGJbal0pfHxbXSxuPXA9aFsxXSxvPShoWzJdfHxcIlwiKS5zcGxpdChcIi5cIikuc29ydCgpLG4mJihsPXIuZXZlbnQuc3BlY2lhbFtuXXx8e30sbj0oZT9sLmRlbGVnYXRlVHlwZTpsLmJpbmRUeXBlKXx8bixsPXIuZXZlbnQuc3BlY2lhbFtuXXx8e30saz1yLmV4dGVuZCh7dHlwZTpuLG9yaWdUeXBlOnAsZGF0YTpkLGhhbmRsZXI6YyxndWlkOmMuZ3VpZCxzZWxlY3RvcjplLG5lZWRzQ29udGV4dDplJiZyLmV4cHIubWF0Y2gubmVlZHNDb250ZXh0LnRlc3QoZSksbmFtZXNwYWNlOm8uam9pbihcIi5cIil9LGYpLChtPWlbbl0pfHwobT1pW25dPVtdLG0uZGVsZWdhdGVDb3VudD0wLGwuc2V0dXAmJmwuc2V0dXAuY2FsbChhLGQsbyxnKSE9PSExfHxhLmFkZEV2ZW50TGlzdGVuZXImJmEuYWRkRXZlbnRMaXN0ZW5lcihuLGcpKSxsLmFkZCYmKGwuYWRkLmNhbGwoYSxrKSxrLmhhbmRsZXIuZ3VpZHx8KGsuaGFuZGxlci5ndWlkPWMuZ3VpZCkpLGU/bS5zcGxpY2UobS5kZWxlZ2F0ZUNvdW50KyssMCxrKTptLnB1c2goayksci5ldmVudC5nbG9iYWxbbl09ITApfX0scmVtb3ZlOmZ1bmN0aW9uKGEsYixjLGQsZSl7dmFyIGYsZyxoLGksaixrLGwsbSxuLG8scCxxPVcuaGFzRGF0YShhKSYmVy5nZXQoYSk7aWYocSYmKGk9cS5ldmVudHMpKXtiPShifHxcIlwiKS5tYXRjaChMKXx8W1wiXCJdLGo9Yi5sZW5ndGg7d2hpbGUoai0tKWlmKGg9dWEuZXhlYyhiW2pdKXx8W10sbj1wPWhbMV0sbz0oaFsyXXx8XCJcIikuc3BsaXQoXCIuXCIpLnNvcnQoKSxuKXtsPXIuZXZlbnQuc3BlY2lhbFtuXXx8e30sbj0oZD9sLmRlbGVnYXRlVHlwZTpsLmJpbmRUeXBlKXx8bixtPWlbbl18fFtdLGg9aFsyXSYmbmV3IFJlZ0V4cChcIihefFxcXFwuKVwiK28uam9pbihcIlxcXFwuKD86LipcXFxcLnwpXCIpK1wiKFxcXFwufCQpXCIpLGc9Zj1tLmxlbmd0aDt3aGlsZShmLS0paz1tW2ZdLCFlJiZwIT09ay5vcmlnVHlwZXx8YyYmYy5ndWlkIT09ay5ndWlkfHxoJiYhaC50ZXN0KGsubmFtZXNwYWNlKXx8ZCYmZCE9PWsuc2VsZWN0b3ImJihcIioqXCIhPT1kfHwhay5zZWxlY3Rvcil8fChtLnNwbGljZShmLDEpLGsuc2VsZWN0b3ImJm0uZGVsZWdhdGVDb3VudC0tLGwucmVtb3ZlJiZsLnJlbW92ZS5jYWxsKGEsaykpO2cmJiFtLmxlbmd0aCYmKGwudGVhcmRvd24mJmwudGVhcmRvd24uY2FsbChhLG8scS5oYW5kbGUpIT09ITF8fHIucmVtb3ZlRXZlbnQoYSxuLHEuaGFuZGxlKSxkZWxldGUgaVtuXSl9ZWxzZSBmb3IobiBpbiBpKXIuZXZlbnQucmVtb3ZlKGEsbitiW2pdLGMsZCwhMCk7ci5pc0VtcHR5T2JqZWN0KGkpJiZXLnJlbW92ZShhLFwiaGFuZGxlIGV2ZW50c1wiKX19LGRpc3BhdGNoOmZ1bmN0aW9uKGEpe3ZhciBiPXIuZXZlbnQuZml4KGEpLGMsZCxlLGYsZyxoLGk9bmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgpLGo9KFcuZ2V0KHRoaXMsXCJldmVudHNcIil8fHt9KVtiLnR5cGVdfHxbXSxrPXIuZXZlbnQuc3BlY2lhbFtiLnR5cGVdfHx7fTtmb3IoaVswXT1iLGM9MTtjPGFyZ3VtZW50cy5sZW5ndGg7YysrKWlbY109YXJndW1lbnRzW2NdO2lmKGIuZGVsZWdhdGVUYXJnZXQ9dGhpcywhay5wcmVEaXNwYXRjaHx8ay5wcmVEaXNwYXRjaC5jYWxsKHRoaXMsYikhPT0hMSl7aD1yLmV2ZW50LmhhbmRsZXJzLmNhbGwodGhpcyxiLGopLGM9MDt3aGlsZSgoZj1oW2MrK10pJiYhYi5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpKXtiLmN1cnJlbnRUYXJnZXQ9Zi5lbGVtLGQ9MDt3aGlsZSgoZz1mLmhhbmRsZXJzW2QrK10pJiYhYi5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCgpKWIucm5hbWVzcGFjZSYmIWIucm5hbWVzcGFjZS50ZXN0KGcubmFtZXNwYWNlKXx8KGIuaGFuZGxlT2JqPWcsYi5kYXRhPWcuZGF0YSxlPSgoci5ldmVudC5zcGVjaWFsW2cub3JpZ1R5cGVdfHx7fSkuaGFuZGxlfHxnLmhhbmRsZXIpLmFwcGx5KGYuZWxlbSxpKSx2b2lkIDAhPT1lJiYoYi5yZXN1bHQ9ZSk9PT0hMSYmKGIucHJldmVudERlZmF1bHQoKSxiLnN0b3BQcm9wYWdhdGlvbigpKSl9cmV0dXJuIGsucG9zdERpc3BhdGNoJiZrLnBvc3REaXNwYXRjaC5jYWxsKHRoaXMsYiksYi5yZXN1bHR9fSxoYW5kbGVyczpmdW5jdGlvbihhLGIpe3ZhciBjLGQsZSxmLGcsaD1bXSxpPWIuZGVsZWdhdGVDb3VudCxqPWEudGFyZ2V0O2lmKGkmJmoubm9kZVR5cGUmJiEoXCJjbGlja1wiPT09YS50eXBlJiZhLmJ1dHRvbj49MSkpZm9yKDtqIT09dGhpcztqPWoucGFyZW50Tm9kZXx8dGhpcylpZigxPT09ai5ub2RlVHlwZSYmKFwiY2xpY2tcIiE9PWEudHlwZXx8ai5kaXNhYmxlZCE9PSEwKSl7Zm9yKGY9W10sZz17fSxjPTA7YzxpO2MrKylkPWJbY10sZT1kLnNlbGVjdG9yK1wiIFwiLHZvaWQgMD09PWdbZV0mJihnW2VdPWQubmVlZHNDb250ZXh0P3IoZSx0aGlzKS5pbmRleChqKT4tMTpyLmZpbmQoZSx0aGlzLG51bGwsW2pdKS5sZW5ndGgpLGdbZV0mJmYucHVzaChkKTtmLmxlbmd0aCYmaC5wdXNoKHtlbGVtOmosaGFuZGxlcnM6Zn0pfXJldHVybiBqPXRoaXMsaTxiLmxlbmd0aCYmaC5wdXNoKHtlbGVtOmosaGFuZGxlcnM6Yi5zbGljZShpKX0pLGh9LGFkZFByb3A6ZnVuY3Rpb24oYSxiKXtPYmplY3QuZGVmaW5lUHJvcGVydHkoci5FdmVudC5wcm90b3R5cGUsYSx7ZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITAsZ2V0OnIuaXNGdW5jdGlvbihiKT9mdW5jdGlvbigpe2lmKHRoaXMub3JpZ2luYWxFdmVudClyZXR1cm4gYih0aGlzLm9yaWdpbmFsRXZlbnQpfTpmdW5jdGlvbigpe2lmKHRoaXMub3JpZ2luYWxFdmVudClyZXR1cm4gdGhpcy5vcmlnaW5hbEV2ZW50W2FdfSxzZXQ6ZnVuY3Rpb24oYil7T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsYSx7ZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITAsd3JpdGFibGU6ITAsdmFsdWU6Yn0pfX0pfSxmaXg6ZnVuY3Rpb24oYSl7cmV0dXJuIGFbci5leHBhbmRvXT9hOm5ldyByLkV2ZW50KGEpfSxzcGVjaWFsOntsb2FkOntub0J1YmJsZTohMH0sZm9jdXM6e3RyaWdnZXI6ZnVuY3Rpb24oKXtpZih0aGlzIT09eGEoKSYmdGhpcy5mb2N1cylyZXR1cm4gdGhpcy5mb2N1cygpLCExfSxkZWxlZ2F0ZVR5cGU6XCJmb2N1c2luXCJ9LGJsdXI6e3RyaWdnZXI6ZnVuY3Rpb24oKXtpZih0aGlzPT09eGEoKSYmdGhpcy5ibHVyKXJldHVybiB0aGlzLmJsdXIoKSwhMX0sZGVsZWdhdGVUeXBlOlwiZm9jdXNvdXRcIn0sY2xpY2s6e3RyaWdnZXI6ZnVuY3Rpb24oKXtpZihcImNoZWNrYm94XCI9PT10aGlzLnR5cGUmJnRoaXMuY2xpY2smJkIodGhpcyxcImlucHV0XCIpKXJldHVybiB0aGlzLmNsaWNrKCksITF9LF9kZWZhdWx0OmZ1bmN0aW9uKGEpe3JldHVybiBCKGEudGFyZ2V0LFwiYVwiKX19LGJlZm9yZXVubG9hZDp7cG9zdERpc3BhdGNoOmZ1bmN0aW9uKGEpe3ZvaWQgMCE9PWEucmVzdWx0JiZhLm9yaWdpbmFsRXZlbnQmJihhLm9yaWdpbmFsRXZlbnQucmV0dXJuVmFsdWU9YS5yZXN1bHQpfX19fSxyLnJlbW92ZUV2ZW50PWZ1bmN0aW9uKGEsYixjKXthLnJlbW92ZUV2ZW50TGlzdGVuZXImJmEucmVtb3ZlRXZlbnRMaXN0ZW5lcihiLGMpfSxyLkV2ZW50PWZ1bmN0aW9uKGEsYil7cmV0dXJuIHRoaXMgaW5zdGFuY2VvZiByLkV2ZW50PyhhJiZhLnR5cGU/KHRoaXMub3JpZ2luYWxFdmVudD1hLHRoaXMudHlwZT1hLnR5cGUsdGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9YS5kZWZhdWx0UHJldmVudGVkfHx2b2lkIDA9PT1hLmRlZmF1bHRQcmV2ZW50ZWQmJmEucmV0dXJuVmFsdWU9PT0hMT92YTp3YSx0aGlzLnRhcmdldD1hLnRhcmdldCYmMz09PWEudGFyZ2V0Lm5vZGVUeXBlP2EudGFyZ2V0LnBhcmVudE5vZGU6YS50YXJnZXQsdGhpcy5jdXJyZW50VGFyZ2V0PWEuY3VycmVudFRhcmdldCx0aGlzLnJlbGF0ZWRUYXJnZXQ9YS5yZWxhdGVkVGFyZ2V0KTp0aGlzLnR5cGU9YSxiJiZyLmV4dGVuZCh0aGlzLGIpLHRoaXMudGltZVN0YW1wPWEmJmEudGltZVN0YW1wfHxyLm5vdygpLHZvaWQodGhpc1tyLmV4cGFuZG9dPSEwKSk6bmV3IHIuRXZlbnQoYSxiKX0sci5FdmVudC5wcm90b3R5cGU9e2NvbnN0cnVjdG9yOnIuRXZlbnQsaXNEZWZhdWx0UHJldmVudGVkOndhLGlzUHJvcGFnYXRpb25TdG9wcGVkOndhLGlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkOndhLGlzU2ltdWxhdGVkOiExLHByZXZlbnREZWZhdWx0OmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5vcmlnaW5hbEV2ZW50O3RoaXMuaXNEZWZhdWx0UHJldmVudGVkPXZhLGEmJiF0aGlzLmlzU2ltdWxhdGVkJiZhLnByZXZlbnREZWZhdWx0KCl9LHN0b3BQcm9wYWdhdGlvbjpmdW5jdGlvbigpe3ZhciBhPXRoaXMub3JpZ2luYWxFdmVudDt0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPXZhLGEmJiF0aGlzLmlzU2ltdWxhdGVkJiZhLnN0b3BQcm9wYWdhdGlvbigpfSxzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb246ZnVuY3Rpb24oKXt2YXIgYT10aGlzLm9yaWdpbmFsRXZlbnQ7dGhpcy5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZD12YSxhJiYhdGhpcy5pc1NpbXVsYXRlZCYmYS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKSx0aGlzLnN0b3BQcm9wYWdhdGlvbigpfX0sci5lYWNoKHthbHRLZXk6ITAsYnViYmxlczohMCxjYW5jZWxhYmxlOiEwLGNoYW5nZWRUb3VjaGVzOiEwLGN0cmxLZXk6ITAsZGV0YWlsOiEwLGV2ZW50UGhhc2U6ITAsbWV0YUtleTohMCxwYWdlWDohMCxwYWdlWTohMCxzaGlmdEtleTohMCx2aWV3OiEwLFwiY2hhclwiOiEwLGNoYXJDb2RlOiEwLGtleTohMCxrZXlDb2RlOiEwLGJ1dHRvbjohMCxidXR0b25zOiEwLGNsaWVudFg6ITAsY2xpZW50WTohMCxvZmZzZXRYOiEwLG9mZnNldFk6ITAscG9pbnRlcklkOiEwLHBvaW50ZXJUeXBlOiEwLHNjcmVlblg6ITAsc2NyZWVuWTohMCx0YXJnZXRUb3VjaGVzOiEwLHRvRWxlbWVudDohMCx0b3VjaGVzOiEwLHdoaWNoOmZ1bmN0aW9uKGEpe3ZhciBiPWEuYnV0dG9uO3JldHVybiBudWxsPT1hLndoaWNoJiZzYS50ZXN0KGEudHlwZSk/bnVsbCE9YS5jaGFyQ29kZT9hLmNoYXJDb2RlOmEua2V5Q29kZTohYS53aGljaCYmdm9pZCAwIT09YiYmdGEudGVzdChhLnR5cGUpPzEmYj8xOjImYj8zOjQmYj8yOjA6YS53aGljaH19LHIuZXZlbnQuYWRkUHJvcCksci5lYWNoKHttb3VzZWVudGVyOlwibW91c2VvdmVyXCIsbW91c2VsZWF2ZTpcIm1vdXNlb3V0XCIscG9pbnRlcmVudGVyOlwicG9pbnRlcm92ZXJcIixwb2ludGVybGVhdmU6XCJwb2ludGVyb3V0XCJ9LGZ1bmN0aW9uKGEsYil7ci5ldmVudC5zcGVjaWFsW2FdPXtkZWxlZ2F0ZVR5cGU6YixiaW5kVHlwZTpiLGhhbmRsZTpmdW5jdGlvbihhKXt2YXIgYyxkPXRoaXMsZT1hLnJlbGF0ZWRUYXJnZXQsZj1hLmhhbmRsZU9iajtyZXR1cm4gZSYmKGU9PT1kfHxyLmNvbnRhaW5zKGQsZSkpfHwoYS50eXBlPWYub3JpZ1R5cGUsYz1mLmhhbmRsZXIuYXBwbHkodGhpcyxhcmd1bWVudHMpLGEudHlwZT1iKSxjfX19KSxyLmZuLmV4dGVuZCh7b246ZnVuY3Rpb24oYSxiLGMsZCl7cmV0dXJuIHlhKHRoaXMsYSxiLGMsZCl9LG9uZTpmdW5jdGlvbihhLGIsYyxkKXtyZXR1cm4geWEodGhpcyxhLGIsYyxkLDEpfSxvZmY6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkLGU7aWYoYSYmYS5wcmV2ZW50RGVmYXVsdCYmYS5oYW5kbGVPYmopcmV0dXJuIGQ9YS5oYW5kbGVPYmoscihhLmRlbGVnYXRlVGFyZ2V0KS5vZmYoZC5uYW1lc3BhY2U/ZC5vcmlnVHlwZStcIi5cIitkLm5hbWVzcGFjZTpkLm9yaWdUeXBlLGQuc2VsZWN0b3IsZC5oYW5kbGVyKSx0aGlzO2lmKFwib2JqZWN0XCI9PXR5cGVvZiBhKXtmb3IoZSBpbiBhKXRoaXMub2ZmKGUsYixhW2VdKTtyZXR1cm4gdGhpc31yZXR1cm4gYiE9PSExJiZcImZ1bmN0aW9uXCIhPXR5cGVvZiBifHwoYz1iLGI9dm9pZCAwKSxjPT09ITEmJihjPXdhKSx0aGlzLmVhY2goZnVuY3Rpb24oKXtyLmV2ZW50LnJlbW92ZSh0aGlzLGEsYyxiKX0pfX0pO3ZhciB6YT0vPCg/IWFyZWF8YnJ8Y29sfGVtYmVkfGhyfGltZ3xpbnB1dHxsaW5rfG1ldGF8cGFyYW0pKChbYS16XVteXFwvXFwwPlxceDIwXFx0XFxyXFxuXFxmXSopW14+XSopXFwvPi9naSxBYT0vPHNjcmlwdHw8c3R5bGV8PGxpbmsvaSxCYT0vY2hlY2tlZFxccyooPzpbXj1dfD1cXHMqLmNoZWNrZWQuKS9pLENhPS9edHJ1ZVxcLyguKikvLERhPS9eXFxzKjwhKD86XFxbQ0RBVEFcXFt8LS0pfCg/OlxcXVxcXXwtLSk+XFxzKiQvZztmdW5jdGlvbiBFYShhLGIpe3JldHVybiBCKGEsXCJ0YWJsZVwiKSYmQigxMSE9PWIubm9kZVR5cGU/YjpiLmZpcnN0Q2hpbGQsXCJ0clwiKT9yKFwiPnRib2R5XCIsYSlbMF18fGE6YX1mdW5jdGlvbiBGYShhKXtyZXR1cm4gYS50eXBlPShudWxsIT09YS5nZXRBdHRyaWJ1dGUoXCJ0eXBlXCIpKStcIi9cIithLnR5cGUsYX1mdW5jdGlvbiBHYShhKXt2YXIgYj1DYS5leGVjKGEudHlwZSk7cmV0dXJuIGI/YS50eXBlPWJbMV06YS5yZW1vdmVBdHRyaWJ1dGUoXCJ0eXBlXCIpLGF9ZnVuY3Rpb24gSGEoYSxiKXt2YXIgYyxkLGUsZixnLGgsaSxqO2lmKDE9PT1iLm5vZGVUeXBlKXtpZihXLmhhc0RhdGEoYSkmJihmPVcuYWNjZXNzKGEpLGc9Vy5zZXQoYixmKSxqPWYuZXZlbnRzKSl7ZGVsZXRlIGcuaGFuZGxlLGcuZXZlbnRzPXt9O2ZvcihlIGluIGopZm9yKGM9MCxkPWpbZV0ubGVuZ3RoO2M8ZDtjKyspci5ldmVudC5hZGQoYixlLGpbZV1bY10pfVguaGFzRGF0YShhKSYmKGg9WC5hY2Nlc3MoYSksaT1yLmV4dGVuZCh7fSxoKSxYLnNldChiLGkpKX19ZnVuY3Rpb24gSWEoYSxiKXt2YXIgYz1iLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XCJpbnB1dFwiPT09YyYmamEudGVzdChhLnR5cGUpP2IuY2hlY2tlZD1hLmNoZWNrZWQ6XCJpbnB1dFwiIT09YyYmXCJ0ZXh0YXJlYVwiIT09Y3x8KGIuZGVmYXVsdFZhbHVlPWEuZGVmYXVsdFZhbHVlKX1mdW5jdGlvbiBKYShhLGIsYyxkKXtiPWcuYXBwbHkoW10sYik7dmFyIGUsZixoLGksaixrLGw9MCxtPWEubGVuZ3RoLG49bS0xLHE9YlswXSxzPXIuaXNGdW5jdGlvbihxKTtpZihzfHxtPjEmJlwic3RyaW5nXCI9PXR5cGVvZiBxJiYhby5jaGVja0Nsb25lJiZCYS50ZXN0KHEpKXJldHVybiBhLmVhY2goZnVuY3Rpb24oZSl7dmFyIGY9YS5lcShlKTtzJiYoYlswXT1xLmNhbGwodGhpcyxlLGYuaHRtbCgpKSksSmEoZixiLGMsZCl9KTtpZihtJiYoZT1xYShiLGFbMF0ub3duZXJEb2N1bWVudCwhMSxhLGQpLGY9ZS5maXJzdENoaWxkLDE9PT1lLmNoaWxkTm9kZXMubGVuZ3RoJiYoZT1mKSxmfHxkKSl7Zm9yKGg9ci5tYXAobmEoZSxcInNjcmlwdFwiKSxGYSksaT1oLmxlbmd0aDtsPG07bCsrKWo9ZSxsIT09biYmKGo9ci5jbG9uZShqLCEwLCEwKSxpJiZyLm1lcmdlKGgsbmEoaixcInNjcmlwdFwiKSkpLGMuY2FsbChhW2xdLGosbCk7aWYoaSlmb3Ioaz1oW2gubGVuZ3RoLTFdLm93bmVyRG9jdW1lbnQsci5tYXAoaCxHYSksbD0wO2w8aTtsKyspaj1oW2xdLGxhLnRlc3Qoai50eXBlfHxcIlwiKSYmIVcuYWNjZXNzKGosXCJnbG9iYWxFdmFsXCIpJiZyLmNvbnRhaW5zKGssaikmJihqLnNyYz9yLl9ldmFsVXJsJiZyLl9ldmFsVXJsKGouc3JjKTpwKGoudGV4dENvbnRlbnQucmVwbGFjZShEYSxcIlwiKSxrKSl9cmV0dXJuIGF9ZnVuY3Rpb24gS2EoYSxiLGMpe2Zvcih2YXIgZCxlPWI/ci5maWx0ZXIoYixhKTphLGY9MDtudWxsIT0oZD1lW2ZdKTtmKyspY3x8MSE9PWQubm9kZVR5cGV8fHIuY2xlYW5EYXRhKG5hKGQpKSxkLnBhcmVudE5vZGUmJihjJiZyLmNvbnRhaW5zKGQub3duZXJEb2N1bWVudCxkKSYmb2EobmEoZCxcInNjcmlwdFwiKSksZC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGQpKTtyZXR1cm4gYX1yLmV4dGVuZCh7aHRtbFByZWZpbHRlcjpmdW5jdGlvbihhKXtyZXR1cm4gYS5yZXBsYWNlKHphLFwiPCQxPjwvJDI+XCIpfSxjbG9uZTpmdW5jdGlvbihhLGIsYyl7dmFyIGQsZSxmLGcsaD1hLmNsb25lTm9kZSghMCksaT1yLmNvbnRhaW5zKGEub3duZXJEb2N1bWVudCxhKTtpZighKG8ubm9DbG9uZUNoZWNrZWR8fDEhPT1hLm5vZGVUeXBlJiYxMSE9PWEubm9kZVR5cGV8fHIuaXNYTUxEb2MoYSkpKWZvcihnPW5hKGgpLGY9bmEoYSksZD0wLGU9Zi5sZW5ndGg7ZDxlO2QrKylJYShmW2RdLGdbZF0pO2lmKGIpaWYoYylmb3IoZj1mfHxuYShhKSxnPWd8fG5hKGgpLGQ9MCxlPWYubGVuZ3RoO2Q8ZTtkKyspSGEoZltkXSxnW2RdKTtlbHNlIEhhKGEsaCk7cmV0dXJuIGc9bmEoaCxcInNjcmlwdFwiKSxnLmxlbmd0aD4wJiZvYShnLCFpJiZuYShhLFwic2NyaXB0XCIpKSxofSxjbGVhbkRhdGE6ZnVuY3Rpb24oYSl7Zm9yKHZhciBiLGMsZCxlPXIuZXZlbnQuc3BlY2lhbCxmPTA7dm9pZCAwIT09KGM9YVtmXSk7ZisrKWlmKFUoYykpe2lmKGI9Y1tXLmV4cGFuZG9dKXtpZihiLmV2ZW50cylmb3IoZCBpbiBiLmV2ZW50cyllW2RdP3IuZXZlbnQucmVtb3ZlKGMsZCk6ci5yZW1vdmVFdmVudChjLGQsYi5oYW5kbGUpO2NbVy5leHBhbmRvXT12b2lkIDB9Y1tYLmV4cGFuZG9dJiYoY1tYLmV4cGFuZG9dPXZvaWQgMCl9fX0pLHIuZm4uZXh0ZW5kKHtkZXRhY2g6ZnVuY3Rpb24oYSl7cmV0dXJuIEthKHRoaXMsYSwhMCl9LHJlbW92ZTpmdW5jdGlvbihhKXtyZXR1cm4gS2EodGhpcyxhKX0sdGV4dDpmdW5jdGlvbihhKXtyZXR1cm4gVCh0aGlzLGZ1bmN0aW9uKGEpe3JldHVybiB2b2lkIDA9PT1hP3IudGV4dCh0aGlzKTp0aGlzLmVtcHR5KCkuZWFjaChmdW5jdGlvbigpezEhPT10aGlzLm5vZGVUeXBlJiYxMSE9PXRoaXMubm9kZVR5cGUmJjkhPT10aGlzLm5vZGVUeXBlfHwodGhpcy50ZXh0Q29udGVudD1hKX0pfSxudWxsLGEsYXJndW1lbnRzLmxlbmd0aCl9LGFwcGVuZDpmdW5jdGlvbigpe3JldHVybiBKYSh0aGlzLGFyZ3VtZW50cyxmdW5jdGlvbihhKXtpZigxPT09dGhpcy5ub2RlVHlwZXx8MTE9PT10aGlzLm5vZGVUeXBlfHw5PT09dGhpcy5ub2RlVHlwZSl7dmFyIGI9RWEodGhpcyxhKTtiLmFwcGVuZENoaWxkKGEpfX0pfSxwcmVwZW5kOmZ1bmN0aW9uKCl7cmV0dXJuIEphKHRoaXMsYXJndW1lbnRzLGZ1bmN0aW9uKGEpe2lmKDE9PT10aGlzLm5vZGVUeXBlfHwxMT09PXRoaXMubm9kZVR5cGV8fDk9PT10aGlzLm5vZGVUeXBlKXt2YXIgYj1FYSh0aGlzLGEpO2IuaW5zZXJ0QmVmb3JlKGEsYi5maXJzdENoaWxkKX19KX0sYmVmb3JlOmZ1bmN0aW9uKCl7cmV0dXJuIEphKHRoaXMsYXJndW1lbnRzLGZ1bmN0aW9uKGEpe3RoaXMucGFyZW50Tm9kZSYmdGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZShhLHRoaXMpfSl9LGFmdGVyOmZ1bmN0aW9uKCl7cmV0dXJuIEphKHRoaXMsYXJndW1lbnRzLGZ1bmN0aW9uKGEpe3RoaXMucGFyZW50Tm9kZSYmdGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZShhLHRoaXMubmV4dFNpYmxpbmcpfSl9LGVtcHR5OmZ1bmN0aW9uKCl7Zm9yKHZhciBhLGI9MDtudWxsIT0oYT10aGlzW2JdKTtiKyspMT09PWEubm9kZVR5cGUmJihyLmNsZWFuRGF0YShuYShhLCExKSksYS50ZXh0Q29udGVudD1cIlwiKTtyZXR1cm4gdGhpc30sY2xvbmU6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gYT1udWxsIT1hJiZhLGI9bnVsbD09Yj9hOmIsdGhpcy5tYXAoZnVuY3Rpb24oKXtyZXR1cm4gci5jbG9uZSh0aGlzLGEsYil9KX0saHRtbDpmdW5jdGlvbihhKXtyZXR1cm4gVCh0aGlzLGZ1bmN0aW9uKGEpe3ZhciBiPXRoaXNbMF18fHt9LGM9MCxkPXRoaXMubGVuZ3RoO2lmKHZvaWQgMD09PWEmJjE9PT1iLm5vZGVUeXBlKXJldHVybiBiLmlubmVySFRNTDtpZihcInN0cmluZ1wiPT10eXBlb2YgYSYmIUFhLnRlc3QoYSkmJiFtYVsoa2EuZXhlYyhhKXx8W1wiXCIsXCJcIl0pWzFdLnRvTG93ZXJDYXNlKCldKXthPXIuaHRtbFByZWZpbHRlcihhKTt0cnl7Zm9yKDtjPGQ7YysrKWI9dGhpc1tjXXx8e30sMT09PWIubm9kZVR5cGUmJihyLmNsZWFuRGF0YShuYShiLCExKSksYi5pbm5lckhUTUw9YSk7Yj0wfWNhdGNoKGUpe319YiYmdGhpcy5lbXB0eSgpLmFwcGVuZChhKX0sbnVsbCxhLGFyZ3VtZW50cy5sZW5ndGgpfSxyZXBsYWNlV2l0aDpmdW5jdGlvbigpe3ZhciBhPVtdO3JldHVybiBKYSh0aGlzLGFyZ3VtZW50cyxmdW5jdGlvbihiKXt2YXIgYz10aGlzLnBhcmVudE5vZGU7ci5pbkFycmF5KHRoaXMsYSk8MCYmKHIuY2xlYW5EYXRhKG5hKHRoaXMpKSxjJiZjLnJlcGxhY2VDaGlsZChiLHRoaXMpKX0sYSl9fSksci5lYWNoKHthcHBlbmRUbzpcImFwcGVuZFwiLHByZXBlbmRUbzpcInByZXBlbmRcIixpbnNlcnRCZWZvcmU6XCJiZWZvcmVcIixpbnNlcnRBZnRlcjpcImFmdGVyXCIscmVwbGFjZUFsbDpcInJlcGxhY2VXaXRoXCJ9LGZ1bmN0aW9uKGEsYil7ci5mblthXT1mdW5jdGlvbihhKXtmb3IodmFyIGMsZD1bXSxlPXIoYSksZj1lLmxlbmd0aC0xLGc9MDtnPD1mO2crKyljPWc9PT1mP3RoaXM6dGhpcy5jbG9uZSghMCkscihlW2ddKVtiXShjKSxoLmFwcGx5KGQsYy5nZXQoKSk7cmV0dXJuIHRoaXMucHVzaFN0YWNrKGQpfX0pO3ZhciBMYT0vXm1hcmdpbi8sTWE9bmV3IFJlZ0V4cChcIl4oXCIrYWErXCIpKD8hcHgpW2EteiVdKyRcIixcImlcIiksTmE9ZnVuY3Rpb24oYil7dmFyIGM9Yi5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O3JldHVybiBjJiZjLm9wZW5lcnx8KGM9YSksYy5nZXRDb21wdXRlZFN0eWxlKGIpfTshZnVuY3Rpb24oKXtmdW5jdGlvbiBiKCl7aWYoaSl7aS5zdHlsZS5jc3NUZXh0PVwiYm94LXNpemluZzpib3JkZXItYm94O3Bvc2l0aW9uOnJlbGF0aXZlO2Rpc3BsYXk6YmxvY2s7bWFyZ2luOmF1dG87Ym9yZGVyOjFweDtwYWRkaW5nOjFweDt0b3A6MSU7d2lkdGg6NTAlXCIsaS5pbm5lckhUTUw9XCJcIixyYS5hcHBlbmRDaGlsZChoKTt2YXIgYj1hLmdldENvbXB1dGVkU3R5bGUoaSk7Yz1cIjElXCIhPT1iLnRvcCxnPVwiMnB4XCI9PT1iLm1hcmdpbkxlZnQsZT1cIjRweFwiPT09Yi53aWR0aCxpLnN0eWxlLm1hcmdpblJpZ2h0PVwiNTAlXCIsZj1cIjRweFwiPT09Yi5tYXJnaW5SaWdodCxyYS5yZW1vdmVDaGlsZChoKSxpPW51bGx9fXZhciBjLGUsZixnLGg9ZC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGk9ZC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO2kuc3R5bGUmJihpLnN0eWxlLmJhY2tncm91bmRDbGlwPVwiY29udGVudC1ib3hcIixpLmNsb25lTm9kZSghMCkuc3R5bGUuYmFja2dyb3VuZENsaXA9XCJcIixvLmNsZWFyQ2xvbmVTdHlsZT1cImNvbnRlbnQtYm94XCI9PT1pLnN0eWxlLmJhY2tncm91bmRDbGlwLGguc3R5bGUuY3NzVGV4dD1cImJvcmRlcjowO3dpZHRoOjhweDtoZWlnaHQ6MDt0b3A6MDtsZWZ0Oi05OTk5cHg7cGFkZGluZzowO21hcmdpbi10b3A6MXB4O3Bvc2l0aW9uOmFic29sdXRlXCIsaC5hcHBlbmRDaGlsZChpKSxyLmV4dGVuZChvLHtwaXhlbFBvc2l0aW9uOmZ1bmN0aW9uKCl7cmV0dXJuIGIoKSxjfSxib3hTaXppbmdSZWxpYWJsZTpmdW5jdGlvbigpe3JldHVybiBiKCksZX0scGl4ZWxNYXJnaW5SaWdodDpmdW5jdGlvbigpe3JldHVybiBiKCksZn0scmVsaWFibGVNYXJnaW5MZWZ0OmZ1bmN0aW9uKCl7cmV0dXJuIGIoKSxnfX0pKX0oKTtmdW5jdGlvbiBPYShhLGIsYyl7dmFyIGQsZSxmLGcsaD1hLnN0eWxlO3JldHVybiBjPWN8fE5hKGEpLGMmJihnPWMuZ2V0UHJvcGVydHlWYWx1ZShiKXx8Y1tiXSxcIlwiIT09Z3x8ci5jb250YWlucyhhLm93bmVyRG9jdW1lbnQsYSl8fChnPXIuc3R5bGUoYSxiKSksIW8ucGl4ZWxNYXJnaW5SaWdodCgpJiZNYS50ZXN0KGcpJiZMYS50ZXN0KGIpJiYoZD1oLndpZHRoLGU9aC5taW5XaWR0aCxmPWgubWF4V2lkdGgsaC5taW5XaWR0aD1oLm1heFdpZHRoPWgud2lkdGg9ZyxnPWMud2lkdGgsaC53aWR0aD1kLGgubWluV2lkdGg9ZSxoLm1heFdpZHRoPWYpKSx2b2lkIDAhPT1nP2crXCJcIjpnfWZ1bmN0aW9uIFBhKGEsYil7cmV0dXJue2dldDpmdW5jdGlvbigpe3JldHVybiBhKCk/dm9pZCBkZWxldGUgdGhpcy5nZXQ6KHRoaXMuZ2V0PWIpLmFwcGx5KHRoaXMsYXJndW1lbnRzKX19fXZhciBRYT0vXihub25lfHRhYmxlKD8hLWNbZWFdKS4rKS8sUmE9L14tLS8sU2E9e3Bvc2l0aW9uOlwiYWJzb2x1dGVcIix2aXNpYmlsaXR5OlwiaGlkZGVuXCIsZGlzcGxheTpcImJsb2NrXCJ9LFRhPXtsZXR0ZXJTcGFjaW5nOlwiMFwiLGZvbnRXZWlnaHQ6XCI0MDBcIn0sVWE9W1wiV2Via2l0XCIsXCJNb3pcIixcIm1zXCJdLFZhPWQuY3JlYXRlRWxlbWVudChcImRpdlwiKS5zdHlsZTtmdW5jdGlvbiBXYShhKXtpZihhIGluIFZhKXJldHVybiBhO3ZhciBiPWFbMF0udG9VcHBlckNhc2UoKSthLnNsaWNlKDEpLGM9VWEubGVuZ3RoO3doaWxlKGMtLSlpZihhPVVhW2NdK2IsYSBpbiBWYSlyZXR1cm4gYX1mdW5jdGlvbiBYYShhKXt2YXIgYj1yLmNzc1Byb3BzW2FdO3JldHVybiBifHwoYj1yLmNzc1Byb3BzW2FdPVdhKGEpfHxhKSxifWZ1bmN0aW9uIFlhKGEsYixjKXt2YXIgZD1iYS5leGVjKGIpO3JldHVybiBkP01hdGgubWF4KDAsZFsyXS0oY3x8MCkpKyhkWzNdfHxcInB4XCIpOmJ9ZnVuY3Rpb24gWmEoYSxiLGMsZCxlKXt2YXIgZixnPTA7Zm9yKGY9Yz09PShkP1wiYm9yZGVyXCI6XCJjb250ZW50XCIpPzQ6XCJ3aWR0aFwiPT09Yj8xOjA7Zjw0O2YrPTIpXCJtYXJnaW5cIj09PWMmJihnKz1yLmNzcyhhLGMrY2FbZl0sITAsZSkpLGQ/KFwiY29udGVudFwiPT09YyYmKGctPXIuY3NzKGEsXCJwYWRkaW5nXCIrY2FbZl0sITAsZSkpLFwibWFyZ2luXCIhPT1jJiYoZy09ci5jc3MoYSxcImJvcmRlclwiK2NhW2ZdK1wiV2lkdGhcIiwhMCxlKSkpOihnKz1yLmNzcyhhLFwicGFkZGluZ1wiK2NhW2ZdLCEwLGUpLFwicGFkZGluZ1wiIT09YyYmKGcrPXIuY3NzKGEsXCJib3JkZXJcIitjYVtmXStcIldpZHRoXCIsITAsZSkpKTtyZXR1cm4gZ31mdW5jdGlvbiAkYShhLGIsYyl7dmFyIGQsZT1OYShhKSxmPU9hKGEsYixlKSxnPVwiYm9yZGVyLWJveFwiPT09ci5jc3MoYSxcImJveFNpemluZ1wiLCExLGUpO3JldHVybiBNYS50ZXN0KGYpP2Y6KGQ9ZyYmKG8uYm94U2l6aW5nUmVsaWFibGUoKXx8Zj09PWEuc3R5bGVbYl0pLFwiYXV0b1wiPT09ZiYmKGY9YVtcIm9mZnNldFwiK2JbMF0udG9VcHBlckNhc2UoKStiLnNsaWNlKDEpXSksZj1wYXJzZUZsb2F0KGYpfHwwLGYrWmEoYSxiLGN8fChnP1wiYm9yZGVyXCI6XCJjb250ZW50XCIpLGQsZSkrXCJweFwiKX1yLmV4dGVuZCh7Y3NzSG9va3M6e29wYWNpdHk6e2dldDpmdW5jdGlvbihhLGIpe2lmKGIpe3ZhciBjPU9hKGEsXCJvcGFjaXR5XCIpO3JldHVyblwiXCI9PT1jP1wiMVwiOmN9fX19LGNzc051bWJlcjp7YW5pbWF0aW9uSXRlcmF0aW9uQ291bnQ6ITAsY29sdW1uQ291bnQ6ITAsZmlsbE9wYWNpdHk6ITAsZmxleEdyb3c6ITAsZmxleFNocmluazohMCxmb250V2VpZ2h0OiEwLGxpbmVIZWlnaHQ6ITAsb3BhY2l0eTohMCxvcmRlcjohMCxvcnBoYW5zOiEwLHdpZG93czohMCx6SW5kZXg6ITAsem9vbTohMH0sY3NzUHJvcHM6e1wiZmxvYXRcIjpcImNzc0Zsb2F0XCJ9LHN0eWxlOmZ1bmN0aW9uKGEsYixjLGQpe2lmKGEmJjMhPT1hLm5vZGVUeXBlJiY4IT09YS5ub2RlVHlwZSYmYS5zdHlsZSl7dmFyIGUsZixnLGg9ci5jYW1lbENhc2UoYiksaT1SYS50ZXN0KGIpLGo9YS5zdHlsZTtyZXR1cm4gaXx8KGI9WGEoaCkpLGc9ci5jc3NIb29rc1tiXXx8ci5jc3NIb29rc1toXSx2b2lkIDA9PT1jP2cmJlwiZ2V0XCJpbiBnJiZ2b2lkIDAhPT0oZT1nLmdldChhLCExLGQpKT9lOmpbYl06KGY9dHlwZW9mIGMsXCJzdHJpbmdcIj09PWYmJihlPWJhLmV4ZWMoYykpJiZlWzFdJiYoYz1mYShhLGIsZSksZj1cIm51bWJlclwiKSxudWxsIT1jJiZjPT09YyYmKFwibnVtYmVyXCI9PT1mJiYoYys9ZSYmZVszXXx8KHIuY3NzTnVtYmVyW2hdP1wiXCI6XCJweFwiKSksby5jbGVhckNsb25lU3R5bGV8fFwiXCIhPT1jfHwwIT09Yi5pbmRleE9mKFwiYmFja2dyb3VuZFwiKXx8KGpbYl09XCJpbmhlcml0XCIpLGcmJlwic2V0XCJpbiBnJiZ2b2lkIDA9PT0oYz1nLnNldChhLGMsZCkpfHwoaT9qLnNldFByb3BlcnR5KGIsYyk6altiXT1jKSksdm9pZCAwKX19LGNzczpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZSxmLGcsaD1yLmNhbWVsQ2FzZShiKSxpPVJhLnRlc3QoYik7cmV0dXJuIGl8fChiPVhhKGgpKSxnPXIuY3NzSG9va3NbYl18fHIuY3NzSG9va3NbaF0sZyYmXCJnZXRcImluIGcmJihlPWcuZ2V0KGEsITAsYykpLHZvaWQgMD09PWUmJihlPU9hKGEsYixkKSksXCJub3JtYWxcIj09PWUmJmIgaW4gVGEmJihlPVRhW2JdKSxcIlwiPT09Y3x8Yz8oZj1wYXJzZUZsb2F0KGUpLGM9PT0hMHx8aXNGaW5pdGUoZik/Znx8MDplKTplfX0pLHIuZWFjaChbXCJoZWlnaHRcIixcIndpZHRoXCJdLGZ1bmN0aW9uKGEsYil7ci5jc3NIb29rc1tiXT17Z2V0OmZ1bmN0aW9uKGEsYyxkKXtpZihjKXJldHVybiFRYS50ZXN0KHIuY3NzKGEsXCJkaXNwbGF5XCIpKXx8YS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCYmYS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aD8kYShhLGIsZCk6ZWEoYSxTYSxmdW5jdGlvbigpe3JldHVybiAkYShhLGIsZCl9KX0sc2V0OmZ1bmN0aW9uKGEsYyxkKXt2YXIgZSxmPWQmJk5hKGEpLGc9ZCYmWmEoYSxiLGQsXCJib3JkZXItYm94XCI9PT1yLmNzcyhhLFwiYm94U2l6aW5nXCIsITEsZiksZik7cmV0dXJuIGcmJihlPWJhLmV4ZWMoYykpJiZcInB4XCIhPT0oZVszXXx8XCJweFwiKSYmKGEuc3R5bGVbYl09YyxjPXIuY3NzKGEsYikpLFlhKGEsYyxnKX19fSksci5jc3NIb29rcy5tYXJnaW5MZWZ0PVBhKG8ucmVsaWFibGVNYXJnaW5MZWZ0LGZ1bmN0aW9uKGEsYil7aWYoYilyZXR1cm4ocGFyc2VGbG9hdChPYShhLFwibWFyZ2luTGVmdFwiKSl8fGEuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdC1lYShhLHttYXJnaW5MZWZ0OjB9LGZ1bmN0aW9uKCl7cmV0dXJuIGEuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdH0pKStcInB4XCJ9KSxyLmVhY2goe21hcmdpbjpcIlwiLHBhZGRpbmc6XCJcIixib3JkZXI6XCJXaWR0aFwifSxmdW5jdGlvbihhLGIpe3IuY3NzSG9va3NbYStiXT17ZXhwYW5kOmZ1bmN0aW9uKGMpe2Zvcih2YXIgZD0wLGU9e30sZj1cInN0cmluZ1wiPT10eXBlb2YgYz9jLnNwbGl0KFwiIFwiKTpbY107ZDw0O2QrKyllW2ErY2FbZF0rYl09ZltkXXx8ZltkLTJdfHxmWzBdO3JldHVybiBlfX0sTGEudGVzdChhKXx8KHIuY3NzSG9va3NbYStiXS5zZXQ9WWEpfSksci5mbi5leHRlbmQoe2NzczpmdW5jdGlvbihhLGIpe3JldHVybiBUKHRoaXMsZnVuY3Rpb24oYSxiLGMpe3ZhciBkLGUsZj17fSxnPTA7aWYoQXJyYXkuaXNBcnJheShiKSl7Zm9yKGQ9TmEoYSksZT1iLmxlbmd0aDtnPGU7ZysrKWZbYltnXV09ci5jc3MoYSxiW2ddLCExLGQpO3JldHVybiBmfXJldHVybiB2b2lkIDAhPT1jP3Iuc3R5bGUoYSxiLGMpOnIuY3NzKGEsYil9LGEsYixhcmd1bWVudHMubGVuZ3RoPjEpfX0pO2Z1bmN0aW9uIF9hKGEsYixjLGQsZSl7cmV0dXJuIG5ldyBfYS5wcm90b3R5cGUuaW5pdChhLGIsYyxkLGUpfXIuVHdlZW49X2EsX2EucHJvdG90eXBlPXtjb25zdHJ1Y3RvcjpfYSxpbml0OmZ1bmN0aW9uKGEsYixjLGQsZSxmKXt0aGlzLmVsZW09YSx0aGlzLnByb3A9Yyx0aGlzLmVhc2luZz1lfHxyLmVhc2luZy5fZGVmYXVsdCx0aGlzLm9wdGlvbnM9Yix0aGlzLnN0YXJ0PXRoaXMubm93PXRoaXMuY3VyKCksdGhpcy5lbmQ9ZCx0aGlzLnVuaXQ9Znx8KHIuY3NzTnVtYmVyW2NdP1wiXCI6XCJweFwiKX0sY3VyOmZ1bmN0aW9uKCl7dmFyIGE9X2EucHJvcEhvb2tzW3RoaXMucHJvcF07cmV0dXJuIGEmJmEuZ2V0P2EuZ2V0KHRoaXMpOl9hLnByb3BIb29rcy5fZGVmYXVsdC5nZXQodGhpcyl9LHJ1bjpmdW5jdGlvbihhKXt2YXIgYixjPV9hLnByb3BIb29rc1t0aGlzLnByb3BdO3JldHVybiB0aGlzLm9wdGlvbnMuZHVyYXRpb24/dGhpcy5wb3M9Yj1yLmVhc2luZ1t0aGlzLmVhc2luZ10oYSx0aGlzLm9wdGlvbnMuZHVyYXRpb24qYSwwLDEsdGhpcy5vcHRpb25zLmR1cmF0aW9uKTp0aGlzLnBvcz1iPWEsdGhpcy5ub3c9KHRoaXMuZW5kLXRoaXMuc3RhcnQpKmIrdGhpcy5zdGFydCx0aGlzLm9wdGlvbnMuc3RlcCYmdGhpcy5vcHRpb25zLnN0ZXAuY2FsbCh0aGlzLmVsZW0sdGhpcy5ub3csdGhpcyksYyYmYy5zZXQ/Yy5zZXQodGhpcyk6X2EucHJvcEhvb2tzLl9kZWZhdWx0LnNldCh0aGlzKSx0aGlzfX0sX2EucHJvdG90eXBlLmluaXQucHJvdG90eXBlPV9hLnByb3RvdHlwZSxfYS5wcm9wSG9va3M9e19kZWZhdWx0OntnZXQ6ZnVuY3Rpb24oYSl7dmFyIGI7cmV0dXJuIDEhPT1hLmVsZW0ubm9kZVR5cGV8fG51bGwhPWEuZWxlbVthLnByb3BdJiZudWxsPT1hLmVsZW0uc3R5bGVbYS5wcm9wXT9hLmVsZW1bYS5wcm9wXTooYj1yLmNzcyhhLmVsZW0sYS5wcm9wLFwiXCIpLGImJlwiYXV0b1wiIT09Yj9iOjApfSxzZXQ6ZnVuY3Rpb24oYSl7ci5meC5zdGVwW2EucHJvcF0/ci5meC5zdGVwW2EucHJvcF0oYSk6MSE9PWEuZWxlbS5ub2RlVHlwZXx8bnVsbD09YS5lbGVtLnN0eWxlW3IuY3NzUHJvcHNbYS5wcm9wXV0mJiFyLmNzc0hvb2tzW2EucHJvcF0/YS5lbGVtW2EucHJvcF09YS5ub3c6ci5zdHlsZShhLmVsZW0sYS5wcm9wLGEubm93K2EudW5pdCl9fX0sX2EucHJvcEhvb2tzLnNjcm9sbFRvcD1fYS5wcm9wSG9va3Muc2Nyb2xsTGVmdD17c2V0OmZ1bmN0aW9uKGEpe2EuZWxlbS5ub2RlVHlwZSYmYS5lbGVtLnBhcmVudE5vZGUmJihhLmVsZW1bYS5wcm9wXT1hLm5vdyl9fSxyLmVhc2luZz17bGluZWFyOmZ1bmN0aW9uKGEpe3JldHVybiBhfSxzd2luZzpmdW5jdGlvbihhKXtyZXR1cm4uNS1NYXRoLmNvcyhhKk1hdGguUEkpLzJ9LF9kZWZhdWx0Olwic3dpbmdcIn0sci5meD1fYS5wcm90b3R5cGUuaW5pdCxyLmZ4LnN0ZXA9e307dmFyIGFiLGJiLGNiPS9eKD86dG9nZ2xlfHNob3d8aGlkZSkkLyxkYj0vcXVldWVIb29rcyQvO2Z1bmN0aW9uIGViKCl7YmImJihkLmhpZGRlbj09PSExJiZhLnJlcXVlc3RBbmltYXRpb25GcmFtZT9hLnJlcXVlc3RBbmltYXRpb25GcmFtZShlYik6YS5zZXRUaW1lb3V0KGViLHIuZnguaW50ZXJ2YWwpLHIuZngudGljaygpKX1mdW5jdGlvbiBmYigpe3JldHVybiBhLnNldFRpbWVvdXQoZnVuY3Rpb24oKXthYj12b2lkIDB9KSxhYj1yLm5vdygpfWZ1bmN0aW9uIGdiKGEsYil7dmFyIGMsZD0wLGU9e2hlaWdodDphfTtmb3IoYj1iPzE6MDtkPDQ7ZCs9Mi1iKWM9Y2FbZF0sZVtcIm1hcmdpblwiK2NdPWVbXCJwYWRkaW5nXCIrY109YTtyZXR1cm4gYiYmKGUub3BhY2l0eT1lLndpZHRoPWEpLGV9ZnVuY3Rpb24gaGIoYSxiLGMpe2Zvcih2YXIgZCxlPShrYi50d2VlbmVyc1tiXXx8W10pLmNvbmNhdChrYi50d2VlbmVyc1tcIipcIl0pLGY9MCxnPWUubGVuZ3RoO2Y8ZztmKyspaWYoZD1lW2ZdLmNhbGwoYyxiLGEpKXJldHVybiBkfWZ1bmN0aW9uIGliKGEsYixjKXt2YXIgZCxlLGYsZyxoLGksaixrLGw9XCJ3aWR0aFwiaW4gYnx8XCJoZWlnaHRcImluIGIsbT10aGlzLG49e30sbz1hLnN0eWxlLHA9YS5ub2RlVHlwZSYmZGEoYSkscT1XLmdldChhLFwiZnhzaG93XCIpO2MucXVldWV8fChnPXIuX3F1ZXVlSG9va3MoYSxcImZ4XCIpLG51bGw9PWcudW5xdWV1ZWQmJihnLnVucXVldWVkPTAsaD1nLmVtcHR5LmZpcmUsZy5lbXB0eS5maXJlPWZ1bmN0aW9uKCl7Zy51bnF1ZXVlZHx8aCgpfSksZy51bnF1ZXVlZCsrLG0uYWx3YXlzKGZ1bmN0aW9uKCl7bS5hbHdheXMoZnVuY3Rpb24oKXtnLnVucXVldWVkLS0sci5xdWV1ZShhLFwiZnhcIikubGVuZ3RofHxnLmVtcHR5LmZpcmUoKX0pfSkpO2ZvcihkIGluIGIpaWYoZT1iW2RdLGNiLnRlc3QoZSkpe2lmKGRlbGV0ZSBiW2RdLGY9Znx8XCJ0b2dnbGVcIj09PWUsZT09PShwP1wiaGlkZVwiOlwic2hvd1wiKSl7aWYoXCJzaG93XCIhPT1lfHwhcXx8dm9pZCAwPT09cVtkXSljb250aW51ZTtwPSEwfW5bZF09cSYmcVtkXXx8ci5zdHlsZShhLGQpfWlmKGk9IXIuaXNFbXB0eU9iamVjdChiKSxpfHwhci5pc0VtcHR5T2JqZWN0KG4pKXtsJiYxPT09YS5ub2RlVHlwZSYmKGMub3ZlcmZsb3c9W28ub3ZlcmZsb3csby5vdmVyZmxvd1gsby5vdmVyZmxvd1ldLGo9cSYmcS5kaXNwbGF5LG51bGw9PWomJihqPVcuZ2V0KGEsXCJkaXNwbGF5XCIpKSxrPXIuY3NzKGEsXCJkaXNwbGF5XCIpLFwibm9uZVwiPT09ayYmKGo/az1qOihpYShbYV0sITApLGo9YS5zdHlsZS5kaXNwbGF5fHxqLGs9ci5jc3MoYSxcImRpc3BsYXlcIiksaWEoW2FdKSkpLChcImlubGluZVwiPT09a3x8XCJpbmxpbmUtYmxvY2tcIj09PWsmJm51bGwhPWopJiZcIm5vbmVcIj09PXIuY3NzKGEsXCJmbG9hdFwiKSYmKGl8fChtLmRvbmUoZnVuY3Rpb24oKXtvLmRpc3BsYXk9an0pLG51bGw9PWomJihrPW8uZGlzcGxheSxqPVwibm9uZVwiPT09az9cIlwiOmspKSxvLmRpc3BsYXk9XCJpbmxpbmUtYmxvY2tcIikpLGMub3ZlcmZsb3cmJihvLm92ZXJmbG93PVwiaGlkZGVuXCIsbS5hbHdheXMoZnVuY3Rpb24oKXtvLm92ZXJmbG93PWMub3ZlcmZsb3dbMF0sby5vdmVyZmxvd1g9Yy5vdmVyZmxvd1sxXSxvLm92ZXJmbG93WT1jLm92ZXJmbG93WzJdfSkpLGk9ITE7Zm9yKGQgaW4gbilpfHwocT9cImhpZGRlblwiaW4gcSYmKHA9cS5oaWRkZW4pOnE9Vy5hY2Nlc3MoYSxcImZ4c2hvd1wiLHtkaXNwbGF5Omp9KSxmJiYocS5oaWRkZW49IXApLHAmJmlhKFthXSwhMCksbS5kb25lKGZ1bmN0aW9uKCl7cHx8aWEoW2FdKSxXLnJlbW92ZShhLFwiZnhzaG93XCIpO2ZvcihkIGluIG4pci5zdHlsZShhLGQsbltkXSl9KSksaT1oYihwP3FbZF06MCxkLG0pLGQgaW4gcXx8KHFbZF09aS5zdGFydCxwJiYoaS5lbmQ9aS5zdGFydCxpLnN0YXJ0PTApKX19ZnVuY3Rpb24gamIoYSxiKXt2YXIgYyxkLGUsZixnO2ZvcihjIGluIGEpaWYoZD1yLmNhbWVsQ2FzZShjKSxlPWJbZF0sZj1hW2NdLEFycmF5LmlzQXJyYXkoZikmJihlPWZbMV0sZj1hW2NdPWZbMF0pLGMhPT1kJiYoYVtkXT1mLGRlbGV0ZSBhW2NdKSxnPXIuY3NzSG9va3NbZF0sZyYmXCJleHBhbmRcImluIGcpe2Y9Zy5leHBhbmQoZiksZGVsZXRlIGFbZF07Zm9yKGMgaW4gZiljIGluIGF8fChhW2NdPWZbY10sYltjXT1lKX1lbHNlIGJbZF09ZX1mdW5jdGlvbiBrYihhLGIsYyl7dmFyIGQsZSxmPTAsZz1rYi5wcmVmaWx0ZXJzLmxlbmd0aCxoPXIuRGVmZXJyZWQoKS5hbHdheXMoZnVuY3Rpb24oKXtkZWxldGUgaS5lbGVtfSksaT1mdW5jdGlvbigpe2lmKGUpcmV0dXJuITE7Zm9yKHZhciBiPWFifHxmYigpLGM9TWF0aC5tYXgoMCxqLnN0YXJ0VGltZStqLmR1cmF0aW9uLWIpLGQ9Yy9qLmR1cmF0aW9ufHwwLGY9MS1kLGc9MCxpPWoudHdlZW5zLmxlbmd0aDtnPGk7ZysrKWoudHdlZW5zW2ddLnJ1bihmKTtyZXR1cm4gaC5ub3RpZnlXaXRoKGEsW2osZixjXSksZjwxJiZpP2M6KGl8fGgubm90aWZ5V2l0aChhLFtqLDEsMF0pLGgucmVzb2x2ZVdpdGgoYSxbal0pLCExKX0saj1oLnByb21pc2Uoe2VsZW06YSxwcm9wczpyLmV4dGVuZCh7fSxiKSxvcHRzOnIuZXh0ZW5kKCEwLHtzcGVjaWFsRWFzaW5nOnt9LGVhc2luZzpyLmVhc2luZy5fZGVmYXVsdH0sYyksb3JpZ2luYWxQcm9wZXJ0aWVzOmIsb3JpZ2luYWxPcHRpb25zOmMsc3RhcnRUaW1lOmFifHxmYigpLGR1cmF0aW9uOmMuZHVyYXRpb24sdHdlZW5zOltdLGNyZWF0ZVR3ZWVuOmZ1bmN0aW9uKGIsYyl7dmFyIGQ9ci5Ud2VlbihhLGoub3B0cyxiLGMsai5vcHRzLnNwZWNpYWxFYXNpbmdbYl18fGoub3B0cy5lYXNpbmcpO3JldHVybiBqLnR3ZWVucy5wdXNoKGQpLGR9LHN0b3A6ZnVuY3Rpb24oYil7dmFyIGM9MCxkPWI/ai50d2VlbnMubGVuZ3RoOjA7aWYoZSlyZXR1cm4gdGhpcztmb3IoZT0hMDtjPGQ7YysrKWoudHdlZW5zW2NdLnJ1bigxKTtyZXR1cm4gYj8oaC5ub3RpZnlXaXRoKGEsW2osMSwwXSksaC5yZXNvbHZlV2l0aChhLFtqLGJdKSk6aC5yZWplY3RXaXRoKGEsW2osYl0pLHRoaXN9fSksaz1qLnByb3BzO2ZvcihqYihrLGoub3B0cy5zcGVjaWFsRWFzaW5nKTtmPGc7ZisrKWlmKGQ9a2IucHJlZmlsdGVyc1tmXS5jYWxsKGosYSxrLGoub3B0cykpcmV0dXJuIHIuaXNGdW5jdGlvbihkLnN0b3ApJiYoci5fcXVldWVIb29rcyhqLmVsZW0sai5vcHRzLnF1ZXVlKS5zdG9wPXIucHJveHkoZC5zdG9wLGQpKSxkO3JldHVybiByLm1hcChrLGhiLGopLHIuaXNGdW5jdGlvbihqLm9wdHMuc3RhcnQpJiZqLm9wdHMuc3RhcnQuY2FsbChhLGopLGoucHJvZ3Jlc3Moai5vcHRzLnByb2dyZXNzKS5kb25lKGoub3B0cy5kb25lLGoub3B0cy5jb21wbGV0ZSkuZmFpbChqLm9wdHMuZmFpbCkuYWx3YXlzKGoub3B0cy5hbHdheXMpLHIuZngudGltZXIoci5leHRlbmQoaSx7ZWxlbTphLGFuaW06aixxdWV1ZTpqLm9wdHMucXVldWV9KSksan1yLkFuaW1hdGlvbj1yLmV4dGVuZChrYix7dHdlZW5lcnM6e1wiKlwiOltmdW5jdGlvbihhLGIpe3ZhciBjPXRoaXMuY3JlYXRlVHdlZW4oYSxiKTtyZXR1cm4gZmEoYy5lbGVtLGEsYmEuZXhlYyhiKSxjKSxjfV19LHR3ZWVuZXI6ZnVuY3Rpb24oYSxiKXtyLmlzRnVuY3Rpb24oYSk/KGI9YSxhPVtcIipcIl0pOmE9YS5tYXRjaChMKTtmb3IodmFyIGMsZD0wLGU9YS5sZW5ndGg7ZDxlO2QrKyljPWFbZF0sa2IudHdlZW5lcnNbY109a2IudHdlZW5lcnNbY118fFtdLGtiLnR3ZWVuZXJzW2NdLnVuc2hpZnQoYil9LHByZWZpbHRlcnM6W2liXSxwcmVmaWx0ZXI6ZnVuY3Rpb24oYSxiKXtiP2tiLnByZWZpbHRlcnMudW5zaGlmdChhKTprYi5wcmVmaWx0ZXJzLnB1c2goYSl9fSksci5zcGVlZD1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9YSYmXCJvYmplY3RcIj09dHlwZW9mIGE/ci5leHRlbmQoe30sYSk6e2NvbXBsZXRlOmN8fCFjJiZifHxyLmlzRnVuY3Rpb24oYSkmJmEsZHVyYXRpb246YSxlYXNpbmc6YyYmYnx8YiYmIXIuaXNGdW5jdGlvbihiKSYmYn07cmV0dXJuIHIuZngub2ZmP2QuZHVyYXRpb249MDpcIm51bWJlclwiIT10eXBlb2YgZC5kdXJhdGlvbiYmKGQuZHVyYXRpb24gaW4gci5meC5zcGVlZHM/ZC5kdXJhdGlvbj1yLmZ4LnNwZWVkc1tkLmR1cmF0aW9uXTpkLmR1cmF0aW9uPXIuZnguc3BlZWRzLl9kZWZhdWx0KSxudWxsIT1kLnF1ZXVlJiZkLnF1ZXVlIT09ITB8fChkLnF1ZXVlPVwiZnhcIiksZC5vbGQ9ZC5jb21wbGV0ZSxkLmNvbXBsZXRlPWZ1bmN0aW9uKCl7ci5pc0Z1bmN0aW9uKGQub2xkKSYmZC5vbGQuY2FsbCh0aGlzKSxkLnF1ZXVlJiZyLmRlcXVldWUodGhpcyxkLnF1ZXVlKX0sZH0sci5mbi5leHRlbmQoe2ZhZGVUbzpmdW5jdGlvbihhLGIsYyxkKXtyZXR1cm4gdGhpcy5maWx0ZXIoZGEpLmNzcyhcIm9wYWNpdHlcIiwwKS5zaG93KCkuZW5kKCkuYW5pbWF0ZSh7b3BhY2l0eTpifSxhLGMsZCl9LGFuaW1hdGU6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9ci5pc0VtcHR5T2JqZWN0KGEpLGY9ci5zcGVlZChiLGMsZCksZz1mdW5jdGlvbigpe3ZhciBiPWtiKHRoaXMsci5leHRlbmQoe30sYSksZik7KGV8fFcuZ2V0KHRoaXMsXCJmaW5pc2hcIikpJiZiLnN0b3AoITApfTtyZXR1cm4gZy5maW5pc2g9ZyxlfHxmLnF1ZXVlPT09ITE/dGhpcy5lYWNoKGcpOnRoaXMucXVldWUoZi5xdWV1ZSxnKX0sc3RvcDpmdW5jdGlvbihhLGIsYyl7dmFyIGQ9ZnVuY3Rpb24oYSl7dmFyIGI9YS5zdG9wO2RlbGV0ZSBhLnN0b3AsYihjKX07cmV0dXJuXCJzdHJpbmdcIiE9dHlwZW9mIGEmJihjPWIsYj1hLGE9dm9pZCAwKSxiJiZhIT09ITEmJnRoaXMucXVldWUoYXx8XCJmeFwiLFtdKSx0aGlzLmVhY2goZnVuY3Rpb24oKXt2YXIgYj0hMCxlPW51bGwhPWEmJmErXCJxdWV1ZUhvb2tzXCIsZj1yLnRpbWVycyxnPVcuZ2V0KHRoaXMpO2lmKGUpZ1tlXSYmZ1tlXS5zdG9wJiZkKGdbZV0pO2Vsc2UgZm9yKGUgaW4gZylnW2VdJiZnW2VdLnN0b3AmJmRiLnRlc3QoZSkmJmQoZ1tlXSk7Zm9yKGU9Zi5sZW5ndGg7ZS0tOylmW2VdLmVsZW0hPT10aGlzfHxudWxsIT1hJiZmW2VdLnF1ZXVlIT09YXx8KGZbZV0uYW5pbS5zdG9wKGMpLGI9ITEsZi5zcGxpY2UoZSwxKSk7IWImJmN8fHIuZGVxdWV1ZSh0aGlzLGEpfSl9LGZpbmlzaDpmdW5jdGlvbihhKXtyZXR1cm4gYSE9PSExJiYoYT1hfHxcImZ4XCIpLHRoaXMuZWFjaChmdW5jdGlvbigpe3ZhciBiLGM9Vy5nZXQodGhpcyksZD1jW2ErXCJxdWV1ZVwiXSxlPWNbYStcInF1ZXVlSG9va3NcIl0sZj1yLnRpbWVycyxnPWQ/ZC5sZW5ndGg6MDtmb3IoYy5maW5pc2g9ITAsci5xdWV1ZSh0aGlzLGEsW10pLGUmJmUuc3RvcCYmZS5zdG9wLmNhbGwodGhpcywhMCksYj1mLmxlbmd0aDtiLS07KWZbYl0uZWxlbT09PXRoaXMmJmZbYl0ucXVldWU9PT1hJiYoZltiXS5hbmltLnN0b3AoITApLGYuc3BsaWNlKGIsMSkpO2ZvcihiPTA7YjxnO2IrKylkW2JdJiZkW2JdLmZpbmlzaCYmZFtiXS5maW5pc2guY2FsbCh0aGlzKTtkZWxldGUgYy5maW5pc2h9KX19KSxyLmVhY2goW1widG9nZ2xlXCIsXCJzaG93XCIsXCJoaWRlXCJdLGZ1bmN0aW9uKGEsYil7dmFyIGM9ci5mbltiXTtyLmZuW2JdPWZ1bmN0aW9uKGEsZCxlKXtyZXR1cm4gbnVsbD09YXx8XCJib29sZWFuXCI9PXR5cGVvZiBhP2MuYXBwbHkodGhpcyxhcmd1bWVudHMpOnRoaXMuYW5pbWF0ZShnYihiLCEwKSxhLGQsZSl9fSksci5lYWNoKHtzbGlkZURvd246Z2IoXCJzaG93XCIpLHNsaWRlVXA6Z2IoXCJoaWRlXCIpLHNsaWRlVG9nZ2xlOmdiKFwidG9nZ2xlXCIpLGZhZGVJbjp7b3BhY2l0eTpcInNob3dcIn0sZmFkZU91dDp7b3BhY2l0eTpcImhpZGVcIn0sZmFkZVRvZ2dsZTp7b3BhY2l0eTpcInRvZ2dsZVwifX0sZnVuY3Rpb24oYSxiKXtyLmZuW2FdPWZ1bmN0aW9uKGEsYyxkKXtyZXR1cm4gdGhpcy5hbmltYXRlKGIsYSxjLGQpfX0pLHIudGltZXJzPVtdLHIuZngudGljaz1mdW5jdGlvbigpe3ZhciBhLGI9MCxjPXIudGltZXJzO2ZvcihhYj1yLm5vdygpO2I8Yy5sZW5ndGg7YisrKWE9Y1tiXSxhKCl8fGNbYl0hPT1hfHxjLnNwbGljZShiLS0sMSk7Yy5sZW5ndGh8fHIuZnguc3RvcCgpLGFiPXZvaWQgMH0sci5meC50aW1lcj1mdW5jdGlvbihhKXtyLnRpbWVycy5wdXNoKGEpLHIuZnguc3RhcnQoKX0sci5meC5pbnRlcnZhbD0xMyxyLmZ4LnN0YXJ0PWZ1bmN0aW9uKCl7YmJ8fChiYj0hMCxlYigpKX0sci5meC5zdG9wPWZ1bmN0aW9uKCl7YmI9bnVsbH0sci5meC5zcGVlZHM9e3Nsb3c6NjAwLGZhc3Q6MjAwLF9kZWZhdWx0OjQwMH0sci5mbi5kZWxheT1mdW5jdGlvbihiLGMpe3JldHVybiBiPXIuZng/ci5meC5zcGVlZHNbYl18fGI6YixjPWN8fFwiZnhcIix0aGlzLnF1ZXVlKGMsZnVuY3Rpb24oYyxkKXt2YXIgZT1hLnNldFRpbWVvdXQoYyxiKTtkLnN0b3A9ZnVuY3Rpb24oKXthLmNsZWFyVGltZW91dChlKX19KX0sZnVuY3Rpb24oKXt2YXIgYT1kLmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKSxiPWQuY3JlYXRlRWxlbWVudChcInNlbGVjdFwiKSxjPWIuYXBwZW5kQ2hpbGQoZC5jcmVhdGVFbGVtZW50KFwib3B0aW9uXCIpKTthLnR5cGU9XCJjaGVja2JveFwiLG8uY2hlY2tPbj1cIlwiIT09YS52YWx1ZSxvLm9wdFNlbGVjdGVkPWMuc2VsZWN0ZWQsYT1kLmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKSxhLnZhbHVlPVwidFwiLGEudHlwZT1cInJhZGlvXCIsby5yYWRpb1ZhbHVlPVwidFwiPT09YS52YWx1ZX0oKTt2YXIgbGIsbWI9ci5leHByLmF0dHJIYW5kbGU7ci5mbi5leHRlbmQoe2F0dHI6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVCh0aGlzLHIuYXR0cixhLGIsYXJndW1lbnRzLmxlbmd0aD4xKX0scmVtb3ZlQXR0cjpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7ci5yZW1vdmVBdHRyKHRoaXMsYSl9KX19KSxyLmV4dGVuZCh7YXR0cjpmdW5jdGlvbihhLGIsYyl7dmFyIGQsZSxmPWEubm9kZVR5cGU7aWYoMyE9PWYmJjghPT1mJiYyIT09ZilyZXR1cm5cInVuZGVmaW5lZFwiPT10eXBlb2YgYS5nZXRBdHRyaWJ1dGU/ci5wcm9wKGEsYixjKTooMT09PWYmJnIuaXNYTUxEb2MoYSl8fChlPXIuYXR0ckhvb2tzW2IudG9Mb3dlckNhc2UoKV18fChyLmV4cHIubWF0Y2guYm9vbC50ZXN0KGIpP2xiOnZvaWQgMCkpLHZvaWQgMCE9PWM/bnVsbD09PWM/dm9pZCByLnJlbW92ZUF0dHIoYSxiKTplJiZcInNldFwiaW4gZSYmdm9pZCAwIT09KGQ9ZS5zZXQoYSxjLGIpKT9kOihhLnNldEF0dHJpYnV0ZShiLGMrXCJcIiksYyk6ZSYmXCJnZXRcImluIGUmJm51bGwhPT0oZD1lLmdldChhLGIpKT9kOihkPXIuZmluZC5hdHRyKGEsYiksXG5udWxsPT1kP3ZvaWQgMDpkKSl9LGF0dHJIb29rczp7dHlwZTp7c2V0OmZ1bmN0aW9uKGEsYil7aWYoIW8ucmFkaW9WYWx1ZSYmXCJyYWRpb1wiPT09YiYmQihhLFwiaW5wdXRcIikpe3ZhciBjPWEudmFsdWU7cmV0dXJuIGEuc2V0QXR0cmlidXRlKFwidHlwZVwiLGIpLGMmJihhLnZhbHVlPWMpLGJ9fX19LHJlbW92ZUF0dHI6ZnVuY3Rpb24oYSxiKXt2YXIgYyxkPTAsZT1iJiZiLm1hdGNoKEwpO2lmKGUmJjE9PT1hLm5vZGVUeXBlKXdoaWxlKGM9ZVtkKytdKWEucmVtb3ZlQXR0cmlidXRlKGMpfX0pLGxiPXtzZXQ6ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBiPT09ITE/ci5yZW1vdmVBdHRyKGEsYyk6YS5zZXRBdHRyaWJ1dGUoYyxjKSxjfX0sci5lYWNoKHIuZXhwci5tYXRjaC5ib29sLnNvdXJjZS5tYXRjaCgvXFx3Ky9nKSxmdW5jdGlvbihhLGIpe3ZhciBjPW1iW2JdfHxyLmZpbmQuYXR0cjttYltiXT1mdW5jdGlvbihhLGIsZCl7dmFyIGUsZixnPWIudG9Mb3dlckNhc2UoKTtyZXR1cm4gZHx8KGY9bWJbZ10sbWJbZ109ZSxlPW51bGwhPWMoYSxiLGQpP2c6bnVsbCxtYltnXT1mKSxlfX0pO3ZhciBuYj0vXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pLG9iPS9eKD86YXxhcmVhKSQvaTtyLmZuLmV4dGVuZCh7cHJvcDpmdW5jdGlvbihhLGIpe3JldHVybiBUKHRoaXMsci5wcm9wLGEsYixhcmd1bWVudHMubGVuZ3RoPjEpfSxyZW1vdmVQcm9wOmZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXtkZWxldGUgdGhpc1tyLnByb3BGaXhbYV18fGFdfSl9fSksci5leHRlbmQoe3Byb3A6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkLGUsZj1hLm5vZGVUeXBlO2lmKDMhPT1mJiY4IT09ZiYmMiE9PWYpcmV0dXJuIDE9PT1mJiZyLmlzWE1MRG9jKGEpfHwoYj1yLnByb3BGaXhbYl18fGIsZT1yLnByb3BIb29rc1tiXSksdm9pZCAwIT09Yz9lJiZcInNldFwiaW4gZSYmdm9pZCAwIT09KGQ9ZS5zZXQoYSxjLGIpKT9kOmFbYl09YzplJiZcImdldFwiaW4gZSYmbnVsbCE9PShkPWUuZ2V0KGEsYikpP2Q6YVtiXX0scHJvcEhvb2tzOnt0YWJJbmRleDp7Z2V0OmZ1bmN0aW9uKGEpe3ZhciBiPXIuZmluZC5hdHRyKGEsXCJ0YWJpbmRleFwiKTtyZXR1cm4gYj9wYXJzZUludChiLDEwKTpuYi50ZXN0KGEubm9kZU5hbWUpfHxvYi50ZXN0KGEubm9kZU5hbWUpJiZhLmhyZWY/MDotMX19fSxwcm9wRml4OntcImZvclwiOlwiaHRtbEZvclwiLFwiY2xhc3NcIjpcImNsYXNzTmFtZVwifX0pLG8ub3B0U2VsZWN0ZWR8fChyLnByb3BIb29rcy5zZWxlY3RlZD17Z2V0OmZ1bmN0aW9uKGEpe3ZhciBiPWEucGFyZW50Tm9kZTtyZXR1cm4gYiYmYi5wYXJlbnROb2RlJiZiLnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleCxudWxsfSxzZXQ6ZnVuY3Rpb24oYSl7dmFyIGI9YS5wYXJlbnROb2RlO2ImJihiLnNlbGVjdGVkSW5kZXgsYi5wYXJlbnROb2RlJiZiLnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleCl9fSksci5lYWNoKFtcInRhYkluZGV4XCIsXCJyZWFkT25seVwiLFwibWF4TGVuZ3RoXCIsXCJjZWxsU3BhY2luZ1wiLFwiY2VsbFBhZGRpbmdcIixcInJvd1NwYW5cIixcImNvbFNwYW5cIixcInVzZU1hcFwiLFwiZnJhbWVCb3JkZXJcIixcImNvbnRlbnRFZGl0YWJsZVwiXSxmdW5jdGlvbigpe3IucHJvcEZpeFt0aGlzLnRvTG93ZXJDYXNlKCldPXRoaXN9KTtmdW5jdGlvbiBwYihhKXt2YXIgYj1hLm1hdGNoKEwpfHxbXTtyZXR1cm4gYi5qb2luKFwiIFwiKX1mdW5jdGlvbiBxYihhKXtyZXR1cm4gYS5nZXRBdHRyaWJ1dGUmJmEuZ2V0QXR0cmlidXRlKFwiY2xhc3NcIil8fFwiXCJ9ci5mbi5leHRlbmQoe2FkZENsYXNzOmZ1bmN0aW9uKGEpe3ZhciBiLGMsZCxlLGYsZyxoLGk9MDtpZihyLmlzRnVuY3Rpb24oYSkpcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbihiKXtyKHRoaXMpLmFkZENsYXNzKGEuY2FsbCh0aGlzLGIscWIodGhpcykpKX0pO2lmKFwic3RyaW5nXCI9PXR5cGVvZiBhJiZhKXtiPWEubWF0Y2goTCl8fFtdO3doaWxlKGM9dGhpc1tpKytdKWlmKGU9cWIoYyksZD0xPT09Yy5ub2RlVHlwZSYmXCIgXCIrcGIoZSkrXCIgXCIpe2c9MDt3aGlsZShmPWJbZysrXSlkLmluZGV4T2YoXCIgXCIrZitcIiBcIik8MCYmKGQrPWYrXCIgXCIpO2g9cGIoZCksZSE9PWgmJmMuc2V0QXR0cmlidXRlKFwiY2xhc3NcIixoKX19cmV0dXJuIHRoaXN9LHJlbW92ZUNsYXNzOmZ1bmN0aW9uKGEpe3ZhciBiLGMsZCxlLGYsZyxoLGk9MDtpZihyLmlzRnVuY3Rpb24oYSkpcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbihiKXtyKHRoaXMpLnJlbW92ZUNsYXNzKGEuY2FsbCh0aGlzLGIscWIodGhpcykpKX0pO2lmKCFhcmd1bWVudHMubGVuZ3RoKXJldHVybiB0aGlzLmF0dHIoXCJjbGFzc1wiLFwiXCIpO2lmKFwic3RyaW5nXCI9PXR5cGVvZiBhJiZhKXtiPWEubWF0Y2goTCl8fFtdO3doaWxlKGM9dGhpc1tpKytdKWlmKGU9cWIoYyksZD0xPT09Yy5ub2RlVHlwZSYmXCIgXCIrcGIoZSkrXCIgXCIpe2c9MDt3aGlsZShmPWJbZysrXSl3aGlsZShkLmluZGV4T2YoXCIgXCIrZitcIiBcIik+LTEpZD1kLnJlcGxhY2UoXCIgXCIrZitcIiBcIixcIiBcIik7aD1wYihkKSxlIT09aCYmYy5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLGgpfX1yZXR1cm4gdGhpc30sdG9nZ2xlQ2xhc3M6ZnVuY3Rpb24oYSxiKXt2YXIgYz10eXBlb2YgYTtyZXR1cm5cImJvb2xlYW5cIj09dHlwZW9mIGImJlwic3RyaW5nXCI9PT1jP2I/dGhpcy5hZGRDbGFzcyhhKTp0aGlzLnJlbW92ZUNsYXNzKGEpOnIuaXNGdW5jdGlvbihhKT90aGlzLmVhY2goZnVuY3Rpb24oYyl7cih0aGlzKS50b2dnbGVDbGFzcyhhLmNhbGwodGhpcyxjLHFiKHRoaXMpLGIpLGIpfSk6dGhpcy5lYWNoKGZ1bmN0aW9uKCl7dmFyIGIsZCxlLGY7aWYoXCJzdHJpbmdcIj09PWMpe2Q9MCxlPXIodGhpcyksZj1hLm1hdGNoKEwpfHxbXTt3aGlsZShiPWZbZCsrXSllLmhhc0NsYXNzKGIpP2UucmVtb3ZlQ2xhc3MoYik6ZS5hZGRDbGFzcyhiKX1lbHNlIHZvaWQgMCE9PWEmJlwiYm9vbGVhblwiIT09Y3x8KGI9cWIodGhpcyksYiYmVy5zZXQodGhpcyxcIl9fY2xhc3NOYW1lX19cIixiKSx0aGlzLnNldEF0dHJpYnV0ZSYmdGhpcy5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLGJ8fGE9PT0hMT9cIlwiOlcuZ2V0KHRoaXMsXCJfX2NsYXNzTmFtZV9fXCIpfHxcIlwiKSl9KX0saGFzQ2xhc3M6ZnVuY3Rpb24oYSl7dmFyIGIsYyxkPTA7Yj1cIiBcIithK1wiIFwiO3doaWxlKGM9dGhpc1tkKytdKWlmKDE9PT1jLm5vZGVUeXBlJiYoXCIgXCIrcGIocWIoYykpK1wiIFwiKS5pbmRleE9mKGIpPi0xKXJldHVybiEwO3JldHVybiExfX0pO3ZhciByYj0vXFxyL2c7ci5mbi5leHRlbmQoe3ZhbDpmdW5jdGlvbihhKXt2YXIgYixjLGQsZT10aGlzWzBdO3tpZihhcmd1bWVudHMubGVuZ3RoKXJldHVybiBkPXIuaXNGdW5jdGlvbihhKSx0aGlzLmVhY2goZnVuY3Rpb24oYyl7dmFyIGU7MT09PXRoaXMubm9kZVR5cGUmJihlPWQ/YS5jYWxsKHRoaXMsYyxyKHRoaXMpLnZhbCgpKTphLG51bGw9PWU/ZT1cIlwiOlwibnVtYmVyXCI9PXR5cGVvZiBlP2UrPVwiXCI6QXJyYXkuaXNBcnJheShlKSYmKGU9ci5tYXAoZSxmdW5jdGlvbihhKXtyZXR1cm4gbnVsbD09YT9cIlwiOmErXCJcIn0pKSxiPXIudmFsSG9va3NbdGhpcy50eXBlXXx8ci52YWxIb29rc1t0aGlzLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCldLGImJlwic2V0XCJpbiBiJiZ2b2lkIDAhPT1iLnNldCh0aGlzLGUsXCJ2YWx1ZVwiKXx8KHRoaXMudmFsdWU9ZSkpfSk7aWYoZSlyZXR1cm4gYj1yLnZhbEhvb2tzW2UudHlwZV18fHIudmFsSG9va3NbZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpXSxiJiZcImdldFwiaW4gYiYmdm9pZCAwIT09KGM9Yi5nZXQoZSxcInZhbHVlXCIpKT9jOihjPWUudmFsdWUsXCJzdHJpbmdcIj09dHlwZW9mIGM/Yy5yZXBsYWNlKHJiLFwiXCIpOm51bGw9PWM/XCJcIjpjKX19fSksci5leHRlbmQoe3ZhbEhvb2tzOntvcHRpb246e2dldDpmdW5jdGlvbihhKXt2YXIgYj1yLmZpbmQuYXR0cihhLFwidmFsdWVcIik7cmV0dXJuIG51bGwhPWI/YjpwYihyLnRleHQoYSkpfX0sc2VsZWN0OntnZXQ6ZnVuY3Rpb24oYSl7dmFyIGIsYyxkLGU9YS5vcHRpb25zLGY9YS5zZWxlY3RlZEluZGV4LGc9XCJzZWxlY3Qtb25lXCI9PT1hLnR5cGUsaD1nP251bGw6W10saT1nP2YrMTplLmxlbmd0aDtmb3IoZD1mPDA/aTpnP2Y6MDtkPGk7ZCsrKWlmKGM9ZVtkXSwoYy5zZWxlY3RlZHx8ZD09PWYpJiYhYy5kaXNhYmxlZCYmKCFjLnBhcmVudE5vZGUuZGlzYWJsZWR8fCFCKGMucGFyZW50Tm9kZSxcIm9wdGdyb3VwXCIpKSl7aWYoYj1yKGMpLnZhbCgpLGcpcmV0dXJuIGI7aC5wdXNoKGIpfXJldHVybiBofSxzZXQ6ZnVuY3Rpb24oYSxiKXt2YXIgYyxkLGU9YS5vcHRpb25zLGY9ci5tYWtlQXJyYXkoYiksZz1lLmxlbmd0aDt3aGlsZShnLS0pZD1lW2ddLChkLnNlbGVjdGVkPXIuaW5BcnJheShyLnZhbEhvb2tzLm9wdGlvbi5nZXQoZCksZik+LTEpJiYoYz0hMCk7cmV0dXJuIGN8fChhLnNlbGVjdGVkSW5kZXg9LTEpLGZ9fX19KSxyLmVhY2goW1wicmFkaW9cIixcImNoZWNrYm94XCJdLGZ1bmN0aW9uKCl7ci52YWxIb29rc1t0aGlzXT17c2V0OmZ1bmN0aW9uKGEsYil7aWYoQXJyYXkuaXNBcnJheShiKSlyZXR1cm4gYS5jaGVja2VkPXIuaW5BcnJheShyKGEpLnZhbCgpLGIpPi0xfX0sby5jaGVja09ufHwoci52YWxIb29rc1t0aGlzXS5nZXQ9ZnVuY3Rpb24oYSl7cmV0dXJuIG51bGw9PT1hLmdldEF0dHJpYnV0ZShcInZhbHVlXCIpP1wib25cIjphLnZhbHVlfSl9KTt2YXIgc2I9L14oPzpmb2N1c2luZm9jdXN8Zm9jdXNvdXRibHVyKSQvO3IuZXh0ZW5kKHIuZXZlbnQse3RyaWdnZXI6ZnVuY3Rpb24oYixjLGUsZil7dmFyIGcsaCxpLGosayxtLG4sbz1bZXx8ZF0scD1sLmNhbGwoYixcInR5cGVcIik/Yi50eXBlOmIscT1sLmNhbGwoYixcIm5hbWVzcGFjZVwiKT9iLm5hbWVzcGFjZS5zcGxpdChcIi5cIik6W107aWYoaD1pPWU9ZXx8ZCwzIT09ZS5ub2RlVHlwZSYmOCE9PWUubm9kZVR5cGUmJiFzYi50ZXN0KHArci5ldmVudC50cmlnZ2VyZWQpJiYocC5pbmRleE9mKFwiLlwiKT4tMSYmKHE9cC5zcGxpdChcIi5cIikscD1xLnNoaWZ0KCkscS5zb3J0KCkpLGs9cC5pbmRleE9mKFwiOlwiKTwwJiZcIm9uXCIrcCxiPWJbci5leHBhbmRvXT9iOm5ldyByLkV2ZW50KHAsXCJvYmplY3RcIj09dHlwZW9mIGImJmIpLGIuaXNUcmlnZ2VyPWY/MjozLGIubmFtZXNwYWNlPXEuam9pbihcIi5cIiksYi5ybmFtZXNwYWNlPWIubmFtZXNwYWNlP25ldyBSZWdFeHAoXCIoXnxcXFxcLilcIitxLmpvaW4oXCJcXFxcLig/Oi4qXFxcXC58KVwiKStcIihcXFxcLnwkKVwiKTpudWxsLGIucmVzdWx0PXZvaWQgMCxiLnRhcmdldHx8KGIudGFyZ2V0PWUpLGM9bnVsbD09Yz9bYl06ci5tYWtlQXJyYXkoYyxbYl0pLG49ci5ldmVudC5zcGVjaWFsW3BdfHx7fSxmfHwhbi50cmlnZ2VyfHxuLnRyaWdnZXIuYXBwbHkoZSxjKSE9PSExKSl7aWYoIWYmJiFuLm5vQnViYmxlJiYhci5pc1dpbmRvdyhlKSl7Zm9yKGo9bi5kZWxlZ2F0ZVR5cGV8fHAsc2IudGVzdChqK3ApfHwoaD1oLnBhcmVudE5vZGUpO2g7aD1oLnBhcmVudE5vZGUpby5wdXNoKGgpLGk9aDtpPT09KGUub3duZXJEb2N1bWVudHx8ZCkmJm8ucHVzaChpLmRlZmF1bHRWaWV3fHxpLnBhcmVudFdpbmRvd3x8YSl9Zz0wO3doaWxlKChoPW9bZysrXSkmJiFiLmlzUHJvcGFnYXRpb25TdG9wcGVkKCkpYi50eXBlPWc+MT9qOm4uYmluZFR5cGV8fHAsbT0oVy5nZXQoaCxcImV2ZW50c1wiKXx8e30pW2IudHlwZV0mJlcuZ2V0KGgsXCJoYW5kbGVcIiksbSYmbS5hcHBseShoLGMpLG09ayYmaFtrXSxtJiZtLmFwcGx5JiZVKGgpJiYoYi5yZXN1bHQ9bS5hcHBseShoLGMpLGIucmVzdWx0PT09ITEmJmIucHJldmVudERlZmF1bHQoKSk7cmV0dXJuIGIudHlwZT1wLGZ8fGIuaXNEZWZhdWx0UHJldmVudGVkKCl8fG4uX2RlZmF1bHQmJm4uX2RlZmF1bHQuYXBwbHkoby5wb3AoKSxjKSE9PSExfHwhVShlKXx8ayYmci5pc0Z1bmN0aW9uKGVbcF0pJiYhci5pc1dpbmRvdyhlKSYmKGk9ZVtrXSxpJiYoZVtrXT1udWxsKSxyLmV2ZW50LnRyaWdnZXJlZD1wLGVbcF0oKSxyLmV2ZW50LnRyaWdnZXJlZD12b2lkIDAsaSYmKGVba109aSkpLGIucmVzdWx0fX0sc2ltdWxhdGU6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPXIuZXh0ZW5kKG5ldyByLkV2ZW50LGMse3R5cGU6YSxpc1NpbXVsYXRlZDohMH0pO3IuZXZlbnQudHJpZ2dlcihkLG51bGwsYil9fSksci5mbi5leHRlbmQoe3RyaWdnZXI6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7ci5ldmVudC50cmlnZ2VyKGEsYix0aGlzKX0pfSx0cmlnZ2VySGFuZGxlcjpmdW5jdGlvbihhLGIpe3ZhciBjPXRoaXNbMF07aWYoYylyZXR1cm4gci5ldmVudC50cmlnZ2VyKGEsYixjLCEwKX19KSxyLmVhY2goXCJibHVyIGZvY3VzIGZvY3VzaW4gZm9jdXNvdXQgcmVzaXplIHNjcm9sbCBjbGljayBkYmxjbGljayBtb3VzZWRvd24gbW91c2V1cCBtb3VzZW1vdmUgbW91c2VvdmVyIG1vdXNlb3V0IG1vdXNlZW50ZXIgbW91c2VsZWF2ZSBjaGFuZ2Ugc2VsZWN0IHN1Ym1pdCBrZXlkb3duIGtleXByZXNzIGtleXVwIGNvbnRleHRtZW51XCIuc3BsaXQoXCIgXCIpLGZ1bmN0aW9uKGEsYil7ci5mbltiXT1mdW5jdGlvbihhLGMpe3JldHVybiBhcmd1bWVudHMubGVuZ3RoPjA/dGhpcy5vbihiLG51bGwsYSxjKTp0aGlzLnRyaWdnZXIoYil9fSksci5mbi5leHRlbmQoe2hvdmVyOmZ1bmN0aW9uKGEsYil7cmV0dXJuIHRoaXMubW91c2VlbnRlcihhKS5tb3VzZWxlYXZlKGJ8fGEpfX0pLG8uZm9jdXNpbj1cIm9uZm9jdXNpblwiaW4gYSxvLmZvY3VzaW58fHIuZWFjaCh7Zm9jdXM6XCJmb2N1c2luXCIsYmx1cjpcImZvY3Vzb3V0XCJ9LGZ1bmN0aW9uKGEsYil7dmFyIGM9ZnVuY3Rpb24oYSl7ci5ldmVudC5zaW11bGF0ZShiLGEudGFyZ2V0LHIuZXZlbnQuZml4KGEpKX07ci5ldmVudC5zcGVjaWFsW2JdPXtzZXR1cDpmdW5jdGlvbigpe3ZhciBkPXRoaXMub3duZXJEb2N1bWVudHx8dGhpcyxlPVcuYWNjZXNzKGQsYik7ZXx8ZC5hZGRFdmVudExpc3RlbmVyKGEsYywhMCksVy5hY2Nlc3MoZCxiLChlfHwwKSsxKX0sdGVhcmRvd246ZnVuY3Rpb24oKXt2YXIgZD10aGlzLm93bmVyRG9jdW1lbnR8fHRoaXMsZT1XLmFjY2VzcyhkLGIpLTE7ZT9XLmFjY2VzcyhkLGIsZSk6KGQucmVtb3ZlRXZlbnRMaXN0ZW5lcihhLGMsITApLFcucmVtb3ZlKGQsYikpfX19KTt2YXIgdGI9YS5sb2NhdGlvbix1Yj1yLm5vdygpLHZiPS9cXD8vO3IucGFyc2VYTUw9ZnVuY3Rpb24oYil7dmFyIGM7aWYoIWJ8fFwic3RyaW5nXCIhPXR5cGVvZiBiKXJldHVybiBudWxsO3RyeXtjPShuZXcgYS5ET01QYXJzZXIpLnBhcnNlRnJvbVN0cmluZyhiLFwidGV4dC94bWxcIil9Y2F0Y2goZCl7Yz12b2lkIDB9cmV0dXJuIGMmJiFjLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwicGFyc2VyZXJyb3JcIikubGVuZ3RofHxyLmVycm9yKFwiSW52YWxpZCBYTUw6IFwiK2IpLGN9O3ZhciB3Yj0vXFxbXFxdJC8seGI9L1xccj9cXG4vZyx5Yj0vXig/OnN1Ym1pdHxidXR0b258aW1hZ2V8cmVzZXR8ZmlsZSkkL2ksemI9L14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8a2V5Z2VuKS9pO2Z1bmN0aW9uIEFiKGEsYixjLGQpe3ZhciBlO2lmKEFycmF5LmlzQXJyYXkoYikpci5lYWNoKGIsZnVuY3Rpb24oYixlKXtjfHx3Yi50ZXN0KGEpP2QoYSxlKTpBYihhK1wiW1wiKyhcIm9iamVjdFwiPT10eXBlb2YgZSYmbnVsbCE9ZT9iOlwiXCIpK1wiXVwiLGUsYyxkKX0pO2Vsc2UgaWYoY3x8XCJvYmplY3RcIiE9PXIudHlwZShiKSlkKGEsYik7ZWxzZSBmb3IoZSBpbiBiKUFiKGErXCJbXCIrZStcIl1cIixiW2VdLGMsZCl9ci5wYXJhbT1mdW5jdGlvbihhLGIpe3ZhciBjLGQ9W10sZT1mdW5jdGlvbihhLGIpe3ZhciBjPXIuaXNGdW5jdGlvbihiKT9iKCk6YjtkW2QubGVuZ3RoXT1lbmNvZGVVUklDb21wb25lbnQoYSkrXCI9XCIrZW5jb2RlVVJJQ29tcG9uZW50KG51bGw9PWM/XCJcIjpjKX07aWYoQXJyYXkuaXNBcnJheShhKXx8YS5qcXVlcnkmJiFyLmlzUGxhaW5PYmplY3QoYSkpci5lYWNoKGEsZnVuY3Rpb24oKXtlKHRoaXMubmFtZSx0aGlzLnZhbHVlKX0pO2Vsc2UgZm9yKGMgaW4gYSlBYihjLGFbY10sYixlKTtyZXR1cm4gZC5qb2luKFwiJlwiKX0sci5mbi5leHRlbmQoe3NlcmlhbGl6ZTpmdW5jdGlvbigpe3JldHVybiByLnBhcmFtKHRoaXMuc2VyaWFsaXplQXJyYXkoKSl9LHNlcmlhbGl6ZUFycmF5OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uKCl7dmFyIGE9ci5wcm9wKHRoaXMsXCJlbGVtZW50c1wiKTtyZXR1cm4gYT9yLm1ha2VBcnJheShhKTp0aGlzfSkuZmlsdGVyKGZ1bmN0aW9uKCl7dmFyIGE9dGhpcy50eXBlO3JldHVybiB0aGlzLm5hbWUmJiFyKHRoaXMpLmlzKFwiOmRpc2FibGVkXCIpJiZ6Yi50ZXN0KHRoaXMubm9kZU5hbWUpJiYheWIudGVzdChhKSYmKHRoaXMuY2hlY2tlZHx8IWphLnRlc3QoYSkpfSkubWFwKGZ1bmN0aW9uKGEsYil7dmFyIGM9cih0aGlzKS52YWwoKTtyZXR1cm4gbnVsbD09Yz9udWxsOkFycmF5LmlzQXJyYXkoYyk/ci5tYXAoYyxmdW5jdGlvbihhKXtyZXR1cm57bmFtZTpiLm5hbWUsdmFsdWU6YS5yZXBsYWNlKHhiLFwiXFxyXFxuXCIpfX0pOntuYW1lOmIubmFtZSx2YWx1ZTpjLnJlcGxhY2UoeGIsXCJcXHJcXG5cIil9fSkuZ2V0KCl9fSk7dmFyIEJiPS8lMjAvZyxDYj0vIy4qJC8sRGI9LyhbPyZdKV89W14mXSovLEViPS9eKC4qPyk6WyBcXHRdKihbXlxcclxcbl0qKSQvZ20sRmI9L14oPzphYm91dHxhcHB8YXBwLXN0b3JhZ2V8ListZXh0ZW5zaW9ufGZpbGV8cmVzfHdpZGdldCk6JC8sR2I9L14oPzpHRVR8SEVBRCkkLyxIYj0vXlxcL1xcLy8sSWI9e30sSmI9e30sS2I9XCIqL1wiLmNvbmNhdChcIipcIiksTGI9ZC5jcmVhdGVFbGVtZW50KFwiYVwiKTtMYi5ocmVmPXRiLmhyZWY7ZnVuY3Rpb24gTWIoYSl7cmV0dXJuIGZ1bmN0aW9uKGIsYyl7XCJzdHJpbmdcIiE9dHlwZW9mIGImJihjPWIsYj1cIipcIik7dmFyIGQsZT0wLGY9Yi50b0xvd2VyQ2FzZSgpLm1hdGNoKEwpfHxbXTtpZihyLmlzRnVuY3Rpb24oYykpd2hpbGUoZD1mW2UrK10pXCIrXCI9PT1kWzBdPyhkPWQuc2xpY2UoMSl8fFwiKlwiLChhW2RdPWFbZF18fFtdKS51bnNoaWZ0KGMpKTooYVtkXT1hW2RdfHxbXSkucHVzaChjKX19ZnVuY3Rpb24gTmIoYSxiLGMsZCl7dmFyIGU9e30sZj1hPT09SmI7ZnVuY3Rpb24gZyhoKXt2YXIgaTtyZXR1cm4gZVtoXT0hMCxyLmVhY2goYVtoXXx8W10sZnVuY3Rpb24oYSxoKXt2YXIgaj1oKGIsYyxkKTtyZXR1cm5cInN0cmluZ1wiIT10eXBlb2Yganx8Znx8ZVtqXT9mPyEoaT1qKTp2b2lkIDA6KGIuZGF0YVR5cGVzLnVuc2hpZnQoaiksZyhqKSwhMSl9KSxpfXJldHVybiBnKGIuZGF0YVR5cGVzWzBdKXx8IWVbXCIqXCJdJiZnKFwiKlwiKX1mdW5jdGlvbiBPYihhLGIpe3ZhciBjLGQsZT1yLmFqYXhTZXR0aW5ncy5mbGF0T3B0aW9uc3x8e307Zm9yKGMgaW4gYil2b2lkIDAhPT1iW2NdJiYoKGVbY10/YTpkfHwoZD17fSkpW2NdPWJbY10pO3JldHVybiBkJiZyLmV4dGVuZCghMCxhLGQpLGF9ZnVuY3Rpb24gUGIoYSxiLGMpe3ZhciBkLGUsZixnLGg9YS5jb250ZW50cyxpPWEuZGF0YVR5cGVzO3doaWxlKFwiKlwiPT09aVswXSlpLnNoaWZ0KCksdm9pZCAwPT09ZCYmKGQ9YS5taW1lVHlwZXx8Yi5nZXRSZXNwb25zZUhlYWRlcihcIkNvbnRlbnQtVHlwZVwiKSk7aWYoZClmb3IoZSBpbiBoKWlmKGhbZV0mJmhbZV0udGVzdChkKSl7aS51bnNoaWZ0KGUpO2JyZWFrfWlmKGlbMF1pbiBjKWY9aVswXTtlbHNle2ZvcihlIGluIGMpe2lmKCFpWzBdfHxhLmNvbnZlcnRlcnNbZStcIiBcIitpWzBdXSl7Zj1lO2JyZWFrfWd8fChnPWUpfWY9Znx8Z31pZihmKXJldHVybiBmIT09aVswXSYmaS51bnNoaWZ0KGYpLGNbZl19ZnVuY3Rpb24gUWIoYSxiLGMsZCl7dmFyIGUsZixnLGgsaSxqPXt9LGs9YS5kYXRhVHlwZXMuc2xpY2UoKTtpZihrWzFdKWZvcihnIGluIGEuY29udmVydGVycylqW2cudG9Mb3dlckNhc2UoKV09YS5jb252ZXJ0ZXJzW2ddO2Y9ay5zaGlmdCgpO3doaWxlKGYpaWYoYS5yZXNwb25zZUZpZWxkc1tmXSYmKGNbYS5yZXNwb25zZUZpZWxkc1tmXV09YiksIWkmJmQmJmEuZGF0YUZpbHRlciYmKGI9YS5kYXRhRmlsdGVyKGIsYS5kYXRhVHlwZSkpLGk9ZixmPWsuc2hpZnQoKSlpZihcIipcIj09PWYpZj1pO2Vsc2UgaWYoXCIqXCIhPT1pJiZpIT09Zil7aWYoZz1qW2krXCIgXCIrZl18fGpbXCIqIFwiK2ZdLCFnKWZvcihlIGluIGopaWYoaD1lLnNwbGl0KFwiIFwiKSxoWzFdPT09ZiYmKGc9altpK1wiIFwiK2hbMF1dfHxqW1wiKiBcIitoWzBdXSkpe2c9PT0hMD9nPWpbZV06altlXSE9PSEwJiYoZj1oWzBdLGsudW5zaGlmdChoWzFdKSk7YnJlYWt9aWYoZyE9PSEwKWlmKGcmJmFbXCJ0aHJvd3NcIl0pYj1nKGIpO2Vsc2UgdHJ5e2I9ZyhiKX1jYXRjaChsKXtyZXR1cm57c3RhdGU6XCJwYXJzZXJlcnJvclwiLGVycm9yOmc/bDpcIk5vIGNvbnZlcnNpb24gZnJvbSBcIitpK1wiIHRvIFwiK2Z9fX1yZXR1cm57c3RhdGU6XCJzdWNjZXNzXCIsZGF0YTpifX1yLmV4dGVuZCh7YWN0aXZlOjAsbGFzdE1vZGlmaWVkOnt9LGV0YWc6e30sYWpheFNldHRpbmdzOnt1cmw6dGIuaHJlZix0eXBlOlwiR0VUXCIsaXNMb2NhbDpGYi50ZXN0KHRiLnByb3RvY29sKSxnbG9iYWw6ITAscHJvY2Vzc0RhdGE6ITAsYXN5bmM6ITAsY29udGVudFR5cGU6XCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7IGNoYXJzZXQ9VVRGLThcIixhY2NlcHRzOntcIipcIjpLYix0ZXh0OlwidGV4dC9wbGFpblwiLGh0bWw6XCJ0ZXh0L2h0bWxcIix4bWw6XCJhcHBsaWNhdGlvbi94bWwsIHRleHQveG1sXCIsanNvbjpcImFwcGxpY2F0aW9uL2pzb24sIHRleHQvamF2YXNjcmlwdFwifSxjb250ZW50czp7eG1sOi9cXGJ4bWxcXGIvLGh0bWw6L1xcYmh0bWwvLGpzb246L1xcYmpzb25cXGIvfSxyZXNwb25zZUZpZWxkczp7eG1sOlwicmVzcG9uc2VYTUxcIix0ZXh0OlwicmVzcG9uc2VUZXh0XCIsanNvbjpcInJlc3BvbnNlSlNPTlwifSxjb252ZXJ0ZXJzOntcIiogdGV4dFwiOlN0cmluZyxcInRleHQgaHRtbFwiOiEwLFwidGV4dCBqc29uXCI6SlNPTi5wYXJzZSxcInRleHQgeG1sXCI6ci5wYXJzZVhNTH0sZmxhdE9wdGlvbnM6e3VybDohMCxjb250ZXh0OiEwfX0sYWpheFNldHVwOmZ1bmN0aW9uKGEsYil7cmV0dXJuIGI/T2IoT2IoYSxyLmFqYXhTZXR0aW5ncyksYik6T2Ioci5hamF4U2V0dGluZ3MsYSl9LGFqYXhQcmVmaWx0ZXI6TWIoSWIpLGFqYXhUcmFuc3BvcnQ6TWIoSmIpLGFqYXg6ZnVuY3Rpb24oYixjKXtcIm9iamVjdFwiPT10eXBlb2YgYiYmKGM9YixiPXZvaWQgMCksYz1jfHx7fTt2YXIgZSxmLGcsaCxpLGosayxsLG0sbixvPXIuYWpheFNldHVwKHt9LGMpLHA9by5jb250ZXh0fHxvLHE9by5jb250ZXh0JiYocC5ub2RlVHlwZXx8cC5qcXVlcnkpP3IocCk6ci5ldmVudCxzPXIuRGVmZXJyZWQoKSx0PXIuQ2FsbGJhY2tzKFwib25jZSBtZW1vcnlcIiksdT1vLnN0YXR1c0NvZGV8fHt9LHY9e30sdz17fSx4PVwiY2FuY2VsZWRcIix5PXtyZWFkeVN0YXRlOjAsZ2V0UmVzcG9uc2VIZWFkZXI6ZnVuY3Rpb24oYSl7dmFyIGI7aWYoayl7aWYoIWgpe2g9e307d2hpbGUoYj1FYi5leGVjKGcpKWhbYlsxXS50b0xvd2VyQ2FzZSgpXT1iWzJdfWI9aFthLnRvTG93ZXJDYXNlKCldfXJldHVybiBudWxsPT1iP251bGw6Yn0sZ2V0QWxsUmVzcG9uc2VIZWFkZXJzOmZ1bmN0aW9uKCl7cmV0dXJuIGs/ZzpudWxsfSxzZXRSZXF1ZXN0SGVhZGVyOmZ1bmN0aW9uKGEsYil7cmV0dXJuIG51bGw9PWsmJihhPXdbYS50b0xvd2VyQ2FzZSgpXT13W2EudG9Mb3dlckNhc2UoKV18fGEsdlthXT1iKSx0aGlzfSxvdmVycmlkZU1pbWVUeXBlOmZ1bmN0aW9uKGEpe3JldHVybiBudWxsPT1rJiYoby5taW1lVHlwZT1hKSx0aGlzfSxzdGF0dXNDb2RlOmZ1bmN0aW9uKGEpe3ZhciBiO2lmKGEpaWYoayl5LmFsd2F5cyhhW3kuc3RhdHVzXSk7ZWxzZSBmb3IoYiBpbiBhKXVbYl09W3VbYl0sYVtiXV07cmV0dXJuIHRoaXN9LGFib3J0OmZ1bmN0aW9uKGEpe3ZhciBiPWF8fHg7cmV0dXJuIGUmJmUuYWJvcnQoYiksQSgwLGIpLHRoaXN9fTtpZihzLnByb21pc2UoeSksby51cmw9KChifHxvLnVybHx8dGIuaHJlZikrXCJcIikucmVwbGFjZShIYix0Yi5wcm90b2NvbCtcIi8vXCIpLG8udHlwZT1jLm1ldGhvZHx8Yy50eXBlfHxvLm1ldGhvZHx8by50eXBlLG8uZGF0YVR5cGVzPShvLmRhdGFUeXBlfHxcIipcIikudG9Mb3dlckNhc2UoKS5tYXRjaChMKXx8W1wiXCJdLG51bGw9PW8uY3Jvc3NEb21haW4pe2o9ZC5jcmVhdGVFbGVtZW50KFwiYVwiKTt0cnl7ai5ocmVmPW8udXJsLGouaHJlZj1qLmhyZWYsby5jcm9zc0RvbWFpbj1MYi5wcm90b2NvbCtcIi8vXCIrTGIuaG9zdCE9ai5wcm90b2NvbCtcIi8vXCIrai5ob3N0fWNhdGNoKHope28uY3Jvc3NEb21haW49ITB9fWlmKG8uZGF0YSYmby5wcm9jZXNzRGF0YSYmXCJzdHJpbmdcIiE9dHlwZW9mIG8uZGF0YSYmKG8uZGF0YT1yLnBhcmFtKG8uZGF0YSxvLnRyYWRpdGlvbmFsKSksTmIoSWIsbyxjLHkpLGspcmV0dXJuIHk7bD1yLmV2ZW50JiZvLmdsb2JhbCxsJiYwPT09ci5hY3RpdmUrKyYmci5ldmVudC50cmlnZ2VyKFwiYWpheFN0YXJ0XCIpLG8udHlwZT1vLnR5cGUudG9VcHBlckNhc2UoKSxvLmhhc0NvbnRlbnQ9IUdiLnRlc3Qoby50eXBlKSxmPW8udXJsLnJlcGxhY2UoQ2IsXCJcIiksby5oYXNDb250ZW50P28uZGF0YSYmby5wcm9jZXNzRGF0YSYmMD09PShvLmNvbnRlbnRUeXBlfHxcIlwiKS5pbmRleE9mKFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIpJiYoby5kYXRhPW8uZGF0YS5yZXBsYWNlKEJiLFwiK1wiKSk6KG49by51cmwuc2xpY2UoZi5sZW5ndGgpLG8uZGF0YSYmKGYrPSh2Yi50ZXN0KGYpP1wiJlwiOlwiP1wiKStvLmRhdGEsZGVsZXRlIG8uZGF0YSksby5jYWNoZT09PSExJiYoZj1mLnJlcGxhY2UoRGIsXCIkMVwiKSxuPSh2Yi50ZXN0KGYpP1wiJlwiOlwiP1wiKStcIl89XCIrdWIrKyArbiksby51cmw9ZituKSxvLmlmTW9kaWZpZWQmJihyLmxhc3RNb2RpZmllZFtmXSYmeS5zZXRSZXF1ZXN0SGVhZGVyKFwiSWYtTW9kaWZpZWQtU2luY2VcIixyLmxhc3RNb2RpZmllZFtmXSksci5ldGFnW2ZdJiZ5LnNldFJlcXVlc3RIZWFkZXIoXCJJZi1Ob25lLU1hdGNoXCIsci5ldGFnW2ZdKSksKG8uZGF0YSYmby5oYXNDb250ZW50JiZvLmNvbnRlbnRUeXBlIT09ITF8fGMuY29udGVudFR5cGUpJiZ5LnNldFJlcXVlc3RIZWFkZXIoXCJDb250ZW50LVR5cGVcIixvLmNvbnRlbnRUeXBlKSx5LnNldFJlcXVlc3RIZWFkZXIoXCJBY2NlcHRcIixvLmRhdGFUeXBlc1swXSYmby5hY2NlcHRzW28uZGF0YVR5cGVzWzBdXT9vLmFjY2VwdHNbby5kYXRhVHlwZXNbMF1dKyhcIipcIiE9PW8uZGF0YVR5cGVzWzBdP1wiLCBcIitLYitcIjsgcT0wLjAxXCI6XCJcIik6by5hY2NlcHRzW1wiKlwiXSk7Zm9yKG0gaW4gby5oZWFkZXJzKXkuc2V0UmVxdWVzdEhlYWRlcihtLG8uaGVhZGVyc1ttXSk7aWYoby5iZWZvcmVTZW5kJiYoby5iZWZvcmVTZW5kLmNhbGwocCx5LG8pPT09ITF8fGspKXJldHVybiB5LmFib3J0KCk7aWYoeD1cImFib3J0XCIsdC5hZGQoby5jb21wbGV0ZSkseS5kb25lKG8uc3VjY2VzcykseS5mYWlsKG8uZXJyb3IpLGU9TmIoSmIsbyxjLHkpKXtpZih5LnJlYWR5U3RhdGU9MSxsJiZxLnRyaWdnZXIoXCJhamF4U2VuZFwiLFt5LG9dKSxrKXJldHVybiB5O28uYXN5bmMmJm8udGltZW91dD4wJiYoaT1hLnNldFRpbWVvdXQoZnVuY3Rpb24oKXt5LmFib3J0KFwidGltZW91dFwiKX0sby50aW1lb3V0KSk7dHJ5e2s9ITEsZS5zZW5kKHYsQSl9Y2F0Y2goeil7aWYoayl0aHJvdyB6O0EoLTEseil9fWVsc2UgQSgtMSxcIk5vIFRyYW5zcG9ydFwiKTtmdW5jdGlvbiBBKGIsYyxkLGgpe3ZhciBqLG0sbix2LHcseD1jO2t8fChrPSEwLGkmJmEuY2xlYXJUaW1lb3V0KGkpLGU9dm9pZCAwLGc9aHx8XCJcIix5LnJlYWR5U3RhdGU9Yj4wPzQ6MCxqPWI+PTIwMCYmYjwzMDB8fDMwND09PWIsZCYmKHY9UGIobyx5LGQpKSx2PVFiKG8sdix5LGopLGo/KG8uaWZNb2RpZmllZCYmKHc9eS5nZXRSZXNwb25zZUhlYWRlcihcIkxhc3QtTW9kaWZpZWRcIiksdyYmKHIubGFzdE1vZGlmaWVkW2ZdPXcpLHc9eS5nZXRSZXNwb25zZUhlYWRlcihcImV0YWdcIiksdyYmKHIuZXRhZ1tmXT13KSksMjA0PT09Ynx8XCJIRUFEXCI9PT1vLnR5cGU/eD1cIm5vY29udGVudFwiOjMwND09PWI/eD1cIm5vdG1vZGlmaWVkXCI6KHg9di5zdGF0ZSxtPXYuZGF0YSxuPXYuZXJyb3Isaj0hbikpOihuPXgsIWImJnh8fCh4PVwiZXJyb3JcIixiPDAmJihiPTApKSkseS5zdGF0dXM9Yix5LnN0YXR1c1RleHQ9KGN8fHgpK1wiXCIsaj9zLnJlc29sdmVXaXRoKHAsW20seCx5XSk6cy5yZWplY3RXaXRoKHAsW3kseCxuXSkseS5zdGF0dXNDb2RlKHUpLHU9dm9pZCAwLGwmJnEudHJpZ2dlcihqP1wiYWpheFN1Y2Nlc3NcIjpcImFqYXhFcnJvclwiLFt5LG8saj9tOm5dKSx0LmZpcmVXaXRoKHAsW3kseF0pLGwmJihxLnRyaWdnZXIoXCJhamF4Q29tcGxldGVcIixbeSxvXSksLS1yLmFjdGl2ZXx8ci5ldmVudC50cmlnZ2VyKFwiYWpheFN0b3BcIikpKX1yZXR1cm4geX0sZ2V0SlNPTjpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIHIuZ2V0KGEsYixjLFwianNvblwiKX0sZ2V0U2NyaXB0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIHIuZ2V0KGEsdm9pZCAwLGIsXCJzY3JpcHRcIil9fSksci5lYWNoKFtcImdldFwiLFwicG9zdFwiXSxmdW5jdGlvbihhLGIpe3JbYl09ZnVuY3Rpb24oYSxjLGQsZSl7cmV0dXJuIHIuaXNGdW5jdGlvbihjKSYmKGU9ZXx8ZCxkPWMsYz12b2lkIDApLHIuYWpheChyLmV4dGVuZCh7dXJsOmEsdHlwZTpiLGRhdGFUeXBlOmUsZGF0YTpjLHN1Y2Nlc3M6ZH0sci5pc1BsYWluT2JqZWN0KGEpJiZhKSl9fSksci5fZXZhbFVybD1mdW5jdGlvbihhKXtyZXR1cm4gci5hamF4KHt1cmw6YSx0eXBlOlwiR0VUXCIsZGF0YVR5cGU6XCJzY3JpcHRcIixjYWNoZTohMCxhc3luYzohMSxnbG9iYWw6ITEsXCJ0aHJvd3NcIjohMH0pfSxyLmZuLmV4dGVuZCh7d3JhcEFsbDpmdW5jdGlvbihhKXt2YXIgYjtyZXR1cm4gdGhpc1swXSYmKHIuaXNGdW5jdGlvbihhKSYmKGE9YS5jYWxsKHRoaXNbMF0pKSxiPXIoYSx0aGlzWzBdLm93bmVyRG9jdW1lbnQpLmVxKDApLmNsb25lKCEwKSx0aGlzWzBdLnBhcmVudE5vZGUmJmIuaW5zZXJ0QmVmb3JlKHRoaXNbMF0pLGIubWFwKGZ1bmN0aW9uKCl7dmFyIGE9dGhpczt3aGlsZShhLmZpcnN0RWxlbWVudENoaWxkKWE9YS5maXJzdEVsZW1lbnRDaGlsZDtyZXR1cm4gYX0pLmFwcGVuZCh0aGlzKSksdGhpc30sd3JhcElubmVyOmZ1bmN0aW9uKGEpe3JldHVybiByLmlzRnVuY3Rpb24oYSk/dGhpcy5lYWNoKGZ1bmN0aW9uKGIpe3IodGhpcykud3JhcElubmVyKGEuY2FsbCh0aGlzLGIpKX0pOnRoaXMuZWFjaChmdW5jdGlvbigpe3ZhciBiPXIodGhpcyksYz1iLmNvbnRlbnRzKCk7Yy5sZW5ndGg/Yy53cmFwQWxsKGEpOmIuYXBwZW5kKGEpfSl9LHdyYXA6ZnVuY3Rpb24oYSl7dmFyIGI9ci5pc0Z1bmN0aW9uKGEpO3JldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oYyl7cih0aGlzKS53cmFwQWxsKGI/YS5jYWxsKHRoaXMsYyk6YSl9KX0sdW53cmFwOmZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLnBhcmVudChhKS5ub3QoXCJib2R5XCIpLmVhY2goZnVuY3Rpb24oKXtyKHRoaXMpLnJlcGxhY2VXaXRoKHRoaXMuY2hpbGROb2Rlcyl9KSx0aGlzfX0pLHIuZXhwci5wc2V1ZG9zLmhpZGRlbj1mdW5jdGlvbihhKXtyZXR1cm4hci5leHByLnBzZXVkb3MudmlzaWJsZShhKX0sci5leHByLnBzZXVkb3MudmlzaWJsZT1mdW5jdGlvbihhKXtyZXR1cm4hIShhLm9mZnNldFdpZHRofHxhLm9mZnNldEhlaWdodHx8YS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCl9LHIuYWpheFNldHRpbmdzLnhocj1mdW5jdGlvbigpe3RyeXtyZXR1cm4gbmV3IGEuWE1MSHR0cFJlcXVlc3R9Y2F0Y2goYil7fX07dmFyIFJiPXswOjIwMCwxMjIzOjIwNH0sU2I9ci5hamF4U2V0dGluZ3MueGhyKCk7by5jb3JzPSEhU2ImJlwid2l0aENyZWRlbnRpYWxzXCJpbiBTYixvLmFqYXg9U2I9ISFTYixyLmFqYXhUcmFuc3BvcnQoZnVuY3Rpb24oYil7dmFyIGMsZDtpZihvLmNvcnN8fFNiJiYhYi5jcm9zc0RvbWFpbilyZXR1cm57c2VuZDpmdW5jdGlvbihlLGYpe3ZhciBnLGg9Yi54aHIoKTtpZihoLm9wZW4oYi50eXBlLGIudXJsLGIuYXN5bmMsYi51c2VybmFtZSxiLnBhc3N3b3JkKSxiLnhockZpZWxkcylmb3IoZyBpbiBiLnhockZpZWxkcyloW2ddPWIueGhyRmllbGRzW2ddO2IubWltZVR5cGUmJmgub3ZlcnJpZGVNaW1lVHlwZSYmaC5vdmVycmlkZU1pbWVUeXBlKGIubWltZVR5cGUpLGIuY3Jvc3NEb21haW58fGVbXCJYLVJlcXVlc3RlZC1XaXRoXCJdfHwoZVtcIlgtUmVxdWVzdGVkLVdpdGhcIl09XCJYTUxIdHRwUmVxdWVzdFwiKTtmb3IoZyBpbiBlKWguc2V0UmVxdWVzdEhlYWRlcihnLGVbZ10pO2M9ZnVuY3Rpb24oYSl7cmV0dXJuIGZ1bmN0aW9uKCl7YyYmKGM9ZD1oLm9ubG9hZD1oLm9uZXJyb3I9aC5vbmFib3J0PWgub25yZWFkeXN0YXRlY2hhbmdlPW51bGwsXCJhYm9ydFwiPT09YT9oLmFib3J0KCk6XCJlcnJvclwiPT09YT9cIm51bWJlclwiIT10eXBlb2YgaC5zdGF0dXM/ZigwLFwiZXJyb3JcIik6ZihoLnN0YXR1cyxoLnN0YXR1c1RleHQpOmYoUmJbaC5zdGF0dXNdfHxoLnN0YXR1cyxoLnN0YXR1c1RleHQsXCJ0ZXh0XCIhPT0oaC5yZXNwb25zZVR5cGV8fFwidGV4dFwiKXx8XCJzdHJpbmdcIiE9dHlwZW9mIGgucmVzcG9uc2VUZXh0P3tiaW5hcnk6aC5yZXNwb25zZX06e3RleHQ6aC5yZXNwb25zZVRleHR9LGguZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkpKX19LGgub25sb2FkPWMoKSxkPWgub25lcnJvcj1jKFwiZXJyb3JcIiksdm9pZCAwIT09aC5vbmFib3J0P2gub25hYm9ydD1kOmgub25yZWFkeXN0YXRlY2hhbmdlPWZ1bmN0aW9uKCl7ND09PWgucmVhZHlTdGF0ZSYmYS5zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7YyYmZCgpfSl9LGM9YyhcImFib3J0XCIpO3RyeXtoLnNlbmQoYi5oYXNDb250ZW50JiZiLmRhdGF8fG51bGwpfWNhdGNoKGkpe2lmKGMpdGhyb3cgaX19LGFib3J0OmZ1bmN0aW9uKCl7YyYmYygpfX19KSxyLmFqYXhQcmVmaWx0ZXIoZnVuY3Rpb24oYSl7YS5jcm9zc0RvbWFpbiYmKGEuY29udGVudHMuc2NyaXB0PSExKX0pLHIuYWpheFNldHVwKHthY2NlcHRzOntzY3JpcHQ6XCJ0ZXh0L2phdmFzY3JpcHQsIGFwcGxpY2F0aW9uL2phdmFzY3JpcHQsIGFwcGxpY2F0aW9uL2VjbWFzY3JpcHQsIGFwcGxpY2F0aW9uL3gtZWNtYXNjcmlwdFwifSxjb250ZW50czp7c2NyaXB0Oi9cXGIoPzpqYXZhfGVjbWEpc2NyaXB0XFxiL30sY29udmVydGVyczp7XCJ0ZXh0IHNjcmlwdFwiOmZ1bmN0aW9uKGEpe3JldHVybiByLmdsb2JhbEV2YWwoYSksYX19fSksci5hamF4UHJlZmlsdGVyKFwic2NyaXB0XCIsZnVuY3Rpb24oYSl7dm9pZCAwPT09YS5jYWNoZSYmKGEuY2FjaGU9ITEpLGEuY3Jvc3NEb21haW4mJihhLnR5cGU9XCJHRVRcIil9KSxyLmFqYXhUcmFuc3BvcnQoXCJzY3JpcHRcIixmdW5jdGlvbihhKXtpZihhLmNyb3NzRG9tYWluKXt2YXIgYixjO3JldHVybntzZW5kOmZ1bmN0aW9uKGUsZil7Yj1yKFwiPHNjcmlwdD5cIikucHJvcCh7Y2hhcnNldDphLnNjcmlwdENoYXJzZXQsc3JjOmEudXJsfSkub24oXCJsb2FkIGVycm9yXCIsYz1mdW5jdGlvbihhKXtiLnJlbW92ZSgpLGM9bnVsbCxhJiZmKFwiZXJyb3JcIj09PWEudHlwZT80MDQ6MjAwLGEudHlwZSl9KSxkLmhlYWQuYXBwZW5kQ2hpbGQoYlswXSl9LGFib3J0OmZ1bmN0aW9uKCl7YyYmYygpfX19fSk7dmFyIFRiPVtdLFViPS8oPSlcXD8oPz0mfCQpfFxcP1xcPy87ci5hamF4U2V0dXAoe2pzb25wOlwiY2FsbGJhY2tcIixqc29ucENhbGxiYWNrOmZ1bmN0aW9uKCl7dmFyIGE9VGIucG9wKCl8fHIuZXhwYW5kbytcIl9cIit1YisrO3JldHVybiB0aGlzW2FdPSEwLGF9fSksci5hamF4UHJlZmlsdGVyKFwianNvbiBqc29ucFwiLGZ1bmN0aW9uKGIsYyxkKXt2YXIgZSxmLGcsaD1iLmpzb25wIT09ITEmJihVYi50ZXN0KGIudXJsKT9cInVybFwiOlwic3RyaW5nXCI9PXR5cGVvZiBiLmRhdGEmJjA9PT0oYi5jb250ZW50VHlwZXx8XCJcIikuaW5kZXhPZihcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiKSYmVWIudGVzdChiLmRhdGEpJiZcImRhdGFcIik7aWYoaHx8XCJqc29ucFwiPT09Yi5kYXRhVHlwZXNbMF0pcmV0dXJuIGU9Yi5qc29ucENhbGxiYWNrPXIuaXNGdW5jdGlvbihiLmpzb25wQ2FsbGJhY2spP2IuanNvbnBDYWxsYmFjaygpOmIuanNvbnBDYWxsYmFjayxoP2JbaF09YltoXS5yZXBsYWNlKFViLFwiJDFcIitlKTpiLmpzb25wIT09ITEmJihiLnVybCs9KHZiLnRlc3QoYi51cmwpP1wiJlwiOlwiP1wiKStiLmpzb25wK1wiPVwiK2UpLGIuY29udmVydGVyc1tcInNjcmlwdCBqc29uXCJdPWZ1bmN0aW9uKCl7cmV0dXJuIGd8fHIuZXJyb3IoZStcIiB3YXMgbm90IGNhbGxlZFwiKSxnWzBdfSxiLmRhdGFUeXBlc1swXT1cImpzb25cIixmPWFbZV0sYVtlXT1mdW5jdGlvbigpe2c9YXJndW1lbnRzfSxkLmFsd2F5cyhmdW5jdGlvbigpe3ZvaWQgMD09PWY/cihhKS5yZW1vdmVQcm9wKGUpOmFbZV09ZixiW2VdJiYoYi5qc29ucENhbGxiYWNrPWMuanNvbnBDYWxsYmFjayxUYi5wdXNoKGUpKSxnJiZyLmlzRnVuY3Rpb24oZikmJmYoZ1swXSksZz1mPXZvaWQgMH0pLFwic2NyaXB0XCJ9KSxvLmNyZWF0ZUhUTUxEb2N1bWVudD1mdW5jdGlvbigpe3ZhciBhPWQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KFwiXCIpLmJvZHk7cmV0dXJuIGEuaW5uZXJIVE1MPVwiPGZvcm0+PC9mb3JtPjxmb3JtPjwvZm9ybT5cIiwyPT09YS5jaGlsZE5vZGVzLmxlbmd0aH0oKSxyLnBhcnNlSFRNTD1mdW5jdGlvbihhLGIsYyl7aWYoXCJzdHJpbmdcIiE9dHlwZW9mIGEpcmV0dXJuW107XCJib29sZWFuXCI9PXR5cGVvZiBiJiYoYz1iLGI9ITEpO3ZhciBlLGYsZztyZXR1cm4gYnx8KG8uY3JlYXRlSFRNTERvY3VtZW50PyhiPWQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KFwiXCIpLGU9Yi5jcmVhdGVFbGVtZW50KFwiYmFzZVwiKSxlLmhyZWY9ZC5sb2NhdGlvbi5ocmVmLGIuaGVhZC5hcHBlbmRDaGlsZChlKSk6Yj1kKSxmPUMuZXhlYyhhKSxnPSFjJiZbXSxmP1tiLmNyZWF0ZUVsZW1lbnQoZlsxXSldOihmPXFhKFthXSxiLGcpLGcmJmcubGVuZ3RoJiZyKGcpLnJlbW92ZSgpLHIubWVyZ2UoW10sZi5jaGlsZE5vZGVzKSl9LHIuZm4ubG9hZD1mdW5jdGlvbihhLGIsYyl7dmFyIGQsZSxmLGc9dGhpcyxoPWEuaW5kZXhPZihcIiBcIik7cmV0dXJuIGg+LTEmJihkPXBiKGEuc2xpY2UoaCkpLGE9YS5zbGljZSgwLGgpKSxyLmlzRnVuY3Rpb24oYik/KGM9YixiPXZvaWQgMCk6YiYmXCJvYmplY3RcIj09dHlwZW9mIGImJihlPVwiUE9TVFwiKSxnLmxlbmd0aD4wJiZyLmFqYXgoe3VybDphLHR5cGU6ZXx8XCJHRVRcIixkYXRhVHlwZTpcImh0bWxcIixkYXRhOmJ9KS5kb25lKGZ1bmN0aW9uKGEpe2Y9YXJndW1lbnRzLGcuaHRtbChkP3IoXCI8ZGl2PlwiKS5hcHBlbmQoci5wYXJzZUhUTUwoYSkpLmZpbmQoZCk6YSl9KS5hbHdheXMoYyYmZnVuY3Rpb24oYSxiKXtnLmVhY2goZnVuY3Rpb24oKXtjLmFwcGx5KHRoaXMsZnx8W2EucmVzcG9uc2VUZXh0LGIsYV0pfSl9KSx0aGlzfSxyLmVhY2goW1wiYWpheFN0YXJ0XCIsXCJhamF4U3RvcFwiLFwiYWpheENvbXBsZXRlXCIsXCJhamF4RXJyb3JcIixcImFqYXhTdWNjZXNzXCIsXCJhamF4U2VuZFwiXSxmdW5jdGlvbihhLGIpe3IuZm5bYl09ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMub24oYixhKX19KSxyLmV4cHIucHNldWRvcy5hbmltYXRlZD1mdW5jdGlvbihhKXtyZXR1cm4gci5ncmVwKHIudGltZXJzLGZ1bmN0aW9uKGIpe3JldHVybiBhPT09Yi5lbGVtfSkubGVuZ3RofSxyLm9mZnNldD17c2V0T2Zmc2V0OmZ1bmN0aW9uKGEsYixjKXt2YXIgZCxlLGYsZyxoLGksaixrPXIuY3NzKGEsXCJwb3NpdGlvblwiKSxsPXIoYSksbT17fTtcInN0YXRpY1wiPT09ayYmKGEuc3R5bGUucG9zaXRpb249XCJyZWxhdGl2ZVwiKSxoPWwub2Zmc2V0KCksZj1yLmNzcyhhLFwidG9wXCIpLGk9ci5jc3MoYSxcImxlZnRcIiksaj0oXCJhYnNvbHV0ZVwiPT09a3x8XCJmaXhlZFwiPT09aykmJihmK2kpLmluZGV4T2YoXCJhdXRvXCIpPi0xLGo/KGQ9bC5wb3NpdGlvbigpLGc9ZC50b3AsZT1kLmxlZnQpOihnPXBhcnNlRmxvYXQoZil8fDAsZT1wYXJzZUZsb2F0KGkpfHwwKSxyLmlzRnVuY3Rpb24oYikmJihiPWIuY2FsbChhLGMsci5leHRlbmQoe30saCkpKSxudWxsIT1iLnRvcCYmKG0udG9wPWIudG9wLWgudG9wK2cpLG51bGwhPWIubGVmdCYmKG0ubGVmdD1iLmxlZnQtaC5sZWZ0K2UpLFwidXNpbmdcImluIGI/Yi51c2luZy5jYWxsKGEsbSk6bC5jc3MobSl9fSxyLmZuLmV4dGVuZCh7b2Zmc2V0OmZ1bmN0aW9uKGEpe2lmKGFyZ3VtZW50cy5sZW5ndGgpcmV0dXJuIHZvaWQgMD09PWE/dGhpczp0aGlzLmVhY2goZnVuY3Rpb24oYil7ci5vZmZzZXQuc2V0T2Zmc2V0KHRoaXMsYSxiKX0pO3ZhciBiLGMsZCxlLGY9dGhpc1swXTtpZihmKXJldHVybiBmLmdldENsaWVudFJlY3RzKCkubGVuZ3RoPyhkPWYuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksYj1mLm93bmVyRG9jdW1lbnQsYz1iLmRvY3VtZW50RWxlbWVudCxlPWIuZGVmYXVsdFZpZXcse3RvcDpkLnRvcCtlLnBhZ2VZT2Zmc2V0LWMuY2xpZW50VG9wLGxlZnQ6ZC5sZWZ0K2UucGFnZVhPZmZzZXQtYy5jbGllbnRMZWZ0fSk6e3RvcDowLGxlZnQ6MH19LHBvc2l0aW9uOmZ1bmN0aW9uKCl7aWYodGhpc1swXSl7dmFyIGEsYixjPXRoaXNbMF0sZD17dG9wOjAsbGVmdDowfTtyZXR1cm5cImZpeGVkXCI9PT1yLmNzcyhjLFwicG9zaXRpb25cIik/Yj1jLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpOihhPXRoaXMub2Zmc2V0UGFyZW50KCksYj10aGlzLm9mZnNldCgpLEIoYVswXSxcImh0bWxcIil8fChkPWEub2Zmc2V0KCkpLGQ9e3RvcDpkLnRvcCtyLmNzcyhhWzBdLFwiYm9yZGVyVG9wV2lkdGhcIiwhMCksbGVmdDpkLmxlZnQrci5jc3MoYVswXSxcImJvcmRlckxlZnRXaWR0aFwiLCEwKX0pLHt0b3A6Yi50b3AtZC50b3Atci5jc3MoYyxcIm1hcmdpblRvcFwiLCEwKSxsZWZ0OmIubGVmdC1kLmxlZnQtci5jc3MoYyxcIm1hcmdpbkxlZnRcIiwhMCl9fX0sb2Zmc2V0UGFyZW50OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5vZmZzZXRQYXJlbnQ7d2hpbGUoYSYmXCJzdGF0aWNcIj09PXIuY3NzKGEsXCJwb3NpdGlvblwiKSlhPWEub2Zmc2V0UGFyZW50O3JldHVybiBhfHxyYX0pfX0pLHIuZWFjaCh7c2Nyb2xsTGVmdDpcInBhZ2VYT2Zmc2V0XCIsc2Nyb2xsVG9wOlwicGFnZVlPZmZzZXRcIn0sZnVuY3Rpb24oYSxiKXt2YXIgYz1cInBhZ2VZT2Zmc2V0XCI9PT1iO3IuZm5bYV09ZnVuY3Rpb24oZCl7cmV0dXJuIFQodGhpcyxmdW5jdGlvbihhLGQsZSl7dmFyIGY7cmV0dXJuIHIuaXNXaW5kb3coYSk/Zj1hOjk9PT1hLm5vZGVUeXBlJiYoZj1hLmRlZmF1bHRWaWV3KSx2b2lkIDA9PT1lP2Y/ZltiXTphW2RdOnZvaWQoZj9mLnNjcm9sbFRvKGM/Zi5wYWdlWE9mZnNldDplLGM/ZTpmLnBhZ2VZT2Zmc2V0KTphW2RdPWUpfSxhLGQsYXJndW1lbnRzLmxlbmd0aCl9fSksci5lYWNoKFtcInRvcFwiLFwibGVmdFwiXSxmdW5jdGlvbihhLGIpe3IuY3NzSG9va3NbYl09UGEoby5waXhlbFBvc2l0aW9uLGZ1bmN0aW9uKGEsYyl7aWYoYylyZXR1cm4gYz1PYShhLGIpLE1hLnRlc3QoYyk/cihhKS5wb3NpdGlvbigpW2JdK1wicHhcIjpjfSl9KSxyLmVhY2goe0hlaWdodDpcImhlaWdodFwiLFdpZHRoOlwid2lkdGhcIn0sZnVuY3Rpb24oYSxiKXtyLmVhY2goe3BhZGRpbmc6XCJpbm5lclwiK2EsY29udGVudDpiLFwiXCI6XCJvdXRlclwiK2F9LGZ1bmN0aW9uKGMsZCl7ci5mbltkXT1mdW5jdGlvbihlLGYpe3ZhciBnPWFyZ3VtZW50cy5sZW5ndGgmJihjfHxcImJvb2xlYW5cIiE9dHlwZW9mIGUpLGg9Y3x8KGU9PT0hMHx8Zj09PSEwP1wibWFyZ2luXCI6XCJib3JkZXJcIik7cmV0dXJuIFQodGhpcyxmdW5jdGlvbihiLGMsZSl7dmFyIGY7cmV0dXJuIHIuaXNXaW5kb3coYik/MD09PWQuaW5kZXhPZihcIm91dGVyXCIpP2JbXCJpbm5lclwiK2FdOmIuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50W1wiY2xpZW50XCIrYV06OT09PWIubm9kZVR5cGU/KGY9Yi5kb2N1bWVudEVsZW1lbnQsTWF0aC5tYXgoYi5ib2R5W1wic2Nyb2xsXCIrYV0sZltcInNjcm9sbFwiK2FdLGIuYm9keVtcIm9mZnNldFwiK2FdLGZbXCJvZmZzZXRcIithXSxmW1wiY2xpZW50XCIrYV0pKTp2b2lkIDA9PT1lP3IuY3NzKGIsYyxoKTpyLnN0eWxlKGIsYyxlLGgpfSxiLGc/ZTp2b2lkIDAsZyl9fSl9KSxyLmZuLmV4dGVuZCh7YmluZDpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIHRoaXMub24oYSxudWxsLGIsYyl9LHVuYmluZDpmdW5jdGlvbihhLGIpe3JldHVybiB0aGlzLm9mZihhLG51bGwsYil9LGRlbGVnYXRlOmZ1bmN0aW9uKGEsYixjLGQpe3JldHVybiB0aGlzLm9uKGIsYSxjLGQpfSx1bmRlbGVnYXRlOmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gMT09PWFyZ3VtZW50cy5sZW5ndGg/dGhpcy5vZmYoYSxcIioqXCIpOnRoaXMub2ZmKGIsYXx8XCIqKlwiLGMpfX0pLHIuaG9sZFJlYWR5PWZ1bmN0aW9uKGEpe2E/ci5yZWFkeVdhaXQrKzpyLnJlYWR5KCEwKX0sci5pc0FycmF5PUFycmF5LmlzQXJyYXksci5wYXJzZUpTT049SlNPTi5wYXJzZSxyLm5vZGVOYW1lPUIsXCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kJiZkZWZpbmUoXCJqcXVlcnlcIixbXSxmdW5jdGlvbigpe3JldHVybiByfSk7dmFyIFZiPWEualF1ZXJ5LFdiPWEuJDtyZXR1cm4gci5ub0NvbmZsaWN0PWZ1bmN0aW9uKGIpe3JldHVybiBhLiQ9PT1yJiYoYS4kPVdiKSxiJiZhLmpRdWVyeT09PXImJihhLmpRdWVyeT1WYikscn0sYnx8KGEualF1ZXJ5PWEuJD1yKSxyfSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9qcy92ZW5kb3IvanF1ZXJ5LTMuMi4xLm1pbi5qcyIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBBZnJpa2FhbnMgW2FmXVxuLy8hIGF1dGhvciA6IFdlcm5lciBNb2xsZW50emUgOiBodHRwczovL2dpdGh1Yi5jb20vd2VybmVybVxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciBhZiA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2FmJywge1xuICAgIG1vbnRocyA6ICdKYW51YXJpZV9GZWJydWFyaWVfTWFhcnRfQXByaWxfTWVpX0p1bmllX0p1bGllX0F1Z3VzdHVzX1NlcHRlbWJlcl9Pa3RvYmVyX05vdmVtYmVyX0Rlc2VtYmVyJy5zcGxpdCgnXycpLFxuICAgIG1vbnRoc1Nob3J0IDogJ0phbl9GZWJfTXJ0X0Fwcl9NZWlfSnVuX0p1bF9BdWdfU2VwX09rdF9Ob3ZfRGVzJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzIDogJ1NvbmRhZ19NYWFuZGFnX0RpbnNkYWdfV29lbnNkYWdfRG9uZGVyZGFnX1ZyeWRhZ19TYXRlcmRhZycuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1Nob3J0IDogJ1Nvbl9NYWFfRGluX1dvZV9Eb25fVnJ5X1NhdCcuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c01pbiA6ICdTb19NYV9EaV9Xb19Eb19Wcl9TYScuc3BsaXQoJ18nKSxcbiAgICBtZXJpZGllbVBhcnNlOiAvdm18bm0vaSxcbiAgICBpc1BNIDogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgIHJldHVybiAvXm5tJC9pLnRlc3QoaW5wdXQpO1xuICAgIH0sXG4gICAgbWVyaWRpZW0gOiBmdW5jdGlvbiAoaG91cnMsIG1pbnV0ZXMsIGlzTG93ZXIpIHtcbiAgICAgICAgaWYgKGhvdXJzIDwgMTIpIHtcbiAgICAgICAgICAgIHJldHVybiBpc0xvd2VyID8gJ3ZtJyA6ICdWTSc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gaXNMb3dlciA/ICdubScgOiAnTk0nO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgIExMTEwgOiAnZGRkZCwgRCBNTU1NIFlZWVkgSEg6bW0nXG4gICAgfSxcbiAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgc2FtZURheSA6ICdbVmFuZGFnIG9tXSBMVCcsXG4gICAgICAgIG5leHREYXkgOiAnW03DtHJlIG9tXSBMVCcsXG4gICAgICAgIG5leHRXZWVrIDogJ2RkZGQgW29tXSBMVCcsXG4gICAgICAgIGxhc3REYXkgOiAnW0dpc3RlciBvbV0gTFQnLFxuICAgICAgICBsYXN0V2VlayA6ICdbTGFhc10gZGRkZCBbb21dIExUJyxcbiAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICB9LFxuICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgZnV0dXJlIDogJ29vciAlcycsXG4gICAgICAgIHBhc3QgOiAnJXMgZ2VsZWRlJyxcbiAgICAgICAgcyA6ICdcXCduIHBhYXIgc2Vrb25kZXMnLFxuICAgICAgICBtIDogJ1xcJ24gbWludXV0JyxcbiAgICAgICAgbW0gOiAnJWQgbWludXRlJyxcbiAgICAgICAgaCA6ICdcXCduIHV1cicsXG4gICAgICAgIGhoIDogJyVkIHVyZScsXG4gICAgICAgIGQgOiAnXFwnbiBkYWcnLFxuICAgICAgICBkZCA6ICclZCBkYWUnLFxuICAgICAgICBNIDogJ1xcJ24gbWFhbmQnLFxuICAgICAgICBNTSA6ICclZCBtYWFuZGUnLFxuICAgICAgICB5IDogJ1xcJ24gamFhcicsXG4gICAgICAgIHl5IDogJyVkIGphYXInXG4gICAgfSxcbiAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0oc3RlfGRlKS8sXG4gICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgcmV0dXJuIG51bWJlciArICgobnVtYmVyID09PSAxIHx8IG51bWJlciA9PT0gOCB8fCBudW1iZXIgPj0gMjApID8gJ3N0ZScgOiAnZGUnKTsgLy8gVGhhbmtzIHRvIEpvcmlzIFLDtmxpbmcgOiBodHRwczovL2dpdGh1Yi5jb20vamp1cGl0ZXJcbiAgICB9LFxuICAgIHdlZWsgOiB7XG4gICAgICAgIGRvdyA6IDEsIC8vIE1hYW5kYWcgaXMgZGllIGVlcnN0ZSBkYWcgdmFuIGRpZSB3ZWVrLlxuICAgICAgICBkb3kgOiA0ICAvLyBEaWUgd2VlayB3YXQgZGllIDRkZSBKYW51YXJpZSBiZXZhdCBpcyBkaWUgZWVyc3RlIHdlZWsgdmFuIGRpZSBqYWFyLlxuICAgIH1cbn0pO1xuXG5yZXR1cm4gYWY7XG5cbn0pKSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9hZi5qcyIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBBcmFiaWMgW2FyXVxuLy8hIGF1dGhvciA6IEFiZGVsIFNhaWQ6IGh0dHBzOi8vZ2l0aHViLmNvbS9hYmRlbHNhaWRcbi8vISBhdXRob3IgOiBBaG1lZCBFbGtoYXRpYlxuLy8hIGF1dGhvciA6IGZvcmFiaSBodHRwczovL2dpdGh1Yi5jb20vZm9yYWJpXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxudmFyIHN5bWJvbE1hcCA9IHtcbiAgICAnMSc6ICfZoScsXG4gICAgJzInOiAn2aInLFxuICAgICczJzogJ9mjJyxcbiAgICAnNCc6ICfZpCcsXG4gICAgJzUnOiAn2aUnLFxuICAgICc2JzogJ9mmJyxcbiAgICAnNyc6ICfZpycsXG4gICAgJzgnOiAn2agnLFxuICAgICc5JzogJ9mpJyxcbiAgICAnMCc6ICfZoCdcbn07XG52YXIgbnVtYmVyTWFwID0ge1xuICAgICfZoSc6ICcxJyxcbiAgICAn2aInOiAnMicsXG4gICAgJ9mjJzogJzMnLFxuICAgICfZpCc6ICc0JyxcbiAgICAn2aUnOiAnNScsXG4gICAgJ9mmJzogJzYnLFxuICAgICfZpyc6ICc3JyxcbiAgICAn2agnOiAnOCcsXG4gICAgJ9mpJzogJzknLFxuICAgICfZoCc6ICcwJ1xufTtcbnZhciBwbHVyYWxGb3JtID0gZnVuY3Rpb24gKG4pIHtcbiAgICByZXR1cm4gbiA9PT0gMCA/IDAgOiBuID09PSAxID8gMSA6IG4gPT09IDIgPyAyIDogbiAlIDEwMCA+PSAzICYmIG4gJSAxMDAgPD0gMTAgPyAzIDogbiAlIDEwMCA+PSAxMSA/IDQgOiA1O1xufTtcbnZhciBwbHVyYWxzID0ge1xuICAgIHMgOiBbJ9ij2YLZhCDZhdmGINir2KfZhtmK2KknLCAn2KvYp9mG2YrYqSDZiNin2K3Yr9ipJywgWyfYq9in2YbZitiq2KfZhicsICfYq9in2YbZitiq2YrZhiddLCAnJWQg2KvZiNin2YYnLCAnJWQg2KvYp9mG2YrYqScsICclZCDYq9in2YbZitipJ10sXG4gICAgbSA6IFsn2KPZgtmEINmF2YYg2K/ZgtmK2YLYqScsICfYr9mC2YrZgtipINmI2KfYrdiv2KknLCBbJ9iv2YLZitmC2KrYp9mGJywgJ9iv2YLZitmC2KrZitmGJ10sICclZCDYr9mC2KfYptmCJywgJyVkINiv2YLZitmC2KknLCAnJWQg2K/ZgtmK2YLYqSddLFxuICAgIGggOiBbJ9ij2YLZhCDZhdmGINiz2KfYudipJywgJ9iz2KfYudipINmI2KfYrdiv2KknLCBbJ9iz2KfYudiq2KfZhicsICfYs9in2LnYqtmK2YYnXSwgJyVkINiz2KfYudin2KonLCAnJWQg2LPYp9i52KknLCAnJWQg2LPYp9i52KknXSxcbiAgICBkIDogWyfYo9mC2YQg2YXZhiDZitmI2YUnLCAn2YrZiNmFINmI2KfYrdivJywgWyfZitmI2YXYp9mGJywgJ9mK2YjZhdmK2YYnXSwgJyVkINij2YrYp9mFJywgJyVkINmK2YjZhdmL2KcnLCAnJWQg2YrZiNmFJ10sXG4gICAgTSA6IFsn2KPZgtmEINmF2YYg2LTZh9ixJywgJ9i02YfYsSDZiNin2K3YrycsIFsn2LTZh9ix2KfZhicsICfYtNmH2LHZitmGJ10sICclZCDYo9i02YfYsScsICclZCDYtNmH2LHYpycsICclZCDYtNmH2LEnXSxcbiAgICB5IDogWyfYo9mC2YQg2YXZhiDYudin2YUnLCAn2LnYp9mFINmI2KfYrdivJywgWyfYudin2YXYp9mGJywgJ9i52KfZhdmK2YYnXSwgJyVkINij2LnZiNin2YUnLCAnJWQg2LnYp9mF2YvYpycsICclZCDYudin2YUnXVxufTtcbnZhciBwbHVyYWxpemUgPSBmdW5jdGlvbiAodSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAobnVtYmVyLCB3aXRob3V0U3VmZml4LCBzdHJpbmcsIGlzRnV0dXJlKSB7XG4gICAgICAgIHZhciBmID0gcGx1cmFsRm9ybShudW1iZXIpLFxuICAgICAgICAgICAgc3RyID0gcGx1cmFsc1t1XVtwbHVyYWxGb3JtKG51bWJlcildO1xuICAgICAgICBpZiAoZiA9PT0gMikge1xuICAgICAgICAgICAgc3RyID0gc3RyW3dpdGhvdXRTdWZmaXggPyAwIDogMV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN0ci5yZXBsYWNlKC8lZC9pLCBudW1iZXIpO1xuICAgIH07XG59O1xudmFyIG1vbnRocyA9IFtcbiAgICAn2YPYp9mG2YjZhiDYp9mE2KvYp9mG2Yog2YrZhtin2YrYsScsXG4gICAgJ9i02KjYp9i3INmB2KjYsdin2YrYsScsXG4gICAgJ9ii2LDYp9ixINmF2KfYsdizJyxcbiAgICAn2YbZitiz2KfZhiDYo9io2LHZitmEJyxcbiAgICAn2KPZitin2LEg2YXYp9mK2YgnLFxuICAgICfYrdiy2YrYsdin2YYg2YrZiNmG2YrZiCcsXG4gICAgJ9iq2YXZiNiyINmK2YjZhNmK2YgnLFxuICAgICfYotioINij2LrYs9i32LMnLFxuICAgICfYo9mK2YTZiNmEINiz2KjYqtmF2KjYsScsXG4gICAgJ9iq2LTYsdmK2YYg2KfZhNij2YjZhCDYo9mD2KrZiNio2LEnLFxuICAgICfYqti02LHZitmGINin2YTYq9in2YbZiiDZhtmI2YHZhdio2LEnLFxuICAgICfZg9in2YbZiNmGINin2YTYo9mI2YQg2K/Zitiz2YXYqNixJ1xuXTtcblxudmFyIGFyID0gbW9tZW50LmRlZmluZUxvY2FsZSgnYXInLCB7XG4gICAgbW9udGhzIDogbW9udGhzLFxuICAgIG1vbnRoc1Nob3J0IDogbW9udGhzLFxuICAgIHdlZWtkYXlzIDogJ9in2YTYo9it2K9f2KfZhNil2KvZhtmK2YZf2KfZhNir2YTYp9ir2KfYoV/Yp9mE2KPYsdio2LnYp9ihX9in2YTYrtmF2YrYs1/Yp9mE2KzZhdi52Klf2KfZhNiz2KjYqicuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1Nob3J0IDogJ9ij2K3Yr1/Ypdir2YbZitmGX9ir2YTYp9ir2KfYoV/Yo9ix2KjYudin2KFf2K7ZhdmK2LNf2KzZhdi52Klf2LPYqNiqJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzTWluIDogJ9itX9mGX9irX9ixX9iuX9isX9izJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgTCA6ICdEL1xcdTIwMEZNL1xcdTIwMEZZWVlZJyxcbiAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICBMTExMIDogJ2RkZGQgRCBNTU1NIFlZWVkgSEg6bW0nXG4gICAgfSxcbiAgICBtZXJpZGllbVBhcnNlOiAv2LV82YUvLFxuICAgIGlzUE0gOiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuICfZhScgPT09IGlucHV0O1xuICAgIH0sXG4gICAgbWVyaWRpZW0gOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgIGlmIChob3VyIDwgMTIpIHtcbiAgICAgICAgICAgIHJldHVybiAn2LUnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuICfZhSc7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIGNhbGVuZGFyIDoge1xuICAgICAgICBzYW1lRGF5OiAnW9in2YTZitmI2YUg2LnZhtivINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICBuZXh0RGF5OiAnW9i62K/Zi9inINi52YbYryDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFvYudmG2K8g2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgIGxhc3REYXk6ICdb2KPZhdizINi52YbYryDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgbGFzdFdlZWs6ICdkZGRkIFvYudmG2K8g2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgIHNhbWVFbHNlOiAnTCdcbiAgICB9LFxuICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgZnV0dXJlIDogJ9io2LnYryAlcycsXG4gICAgICAgIHBhc3QgOiAn2YXZhtiwICVzJyxcbiAgICAgICAgcyA6IHBsdXJhbGl6ZSgncycpLFxuICAgICAgICBtIDogcGx1cmFsaXplKCdtJyksXG4gICAgICAgIG1tIDogcGx1cmFsaXplKCdtJyksXG4gICAgICAgIGggOiBwbHVyYWxpemUoJ2gnKSxcbiAgICAgICAgaGggOiBwbHVyYWxpemUoJ2gnKSxcbiAgICAgICAgZCA6IHBsdXJhbGl6ZSgnZCcpLFxuICAgICAgICBkZCA6IHBsdXJhbGl6ZSgnZCcpLFxuICAgICAgICBNIDogcGx1cmFsaXplKCdNJyksXG4gICAgICAgIE1NIDogcGx1cmFsaXplKCdNJyksXG4gICAgICAgIHkgOiBwbHVyYWxpemUoJ3knKSxcbiAgICAgICAgeXkgOiBwbHVyYWxpemUoJ3knKVxuICAgIH0sXG4gICAgcHJlcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9b2aHZotmj2aTZpdmm2afZqNmp2aBdL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlck1hcFttYXRjaF07XG4gICAgICAgIH0pLnJlcGxhY2UoL9iML2csICcsJyk7XG4gICAgfSxcbiAgICBwb3N0Zm9ybWF0OiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvXFxkL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgcmV0dXJuIHN5bWJvbE1hcFttYXRjaF07XG4gICAgICAgIH0pLnJlcGxhY2UoLywvZywgJ9iMJyk7XG4gICAgfSxcbiAgICB3ZWVrIDoge1xuICAgICAgICBkb3cgOiA2LCAvLyBTYXR1cmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICBkb3kgOiAxMiAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gMXN0IGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgIH1cbn0pO1xuXG5yZXR1cm4gYXI7XG5cbn0pKSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9hci5qcyIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBBcmFiaWMgKEFsZ2VyaWEpIFthci1kel1cbi8vISBhdXRob3IgOiBOb3VyZWRkaW5lIExPVUFIRURKIDogaHR0cHM6Ly9naXRodWIuY29tL25vdXJlZGRpbmVtZVxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciBhckR6ID0gbW9tZW50LmRlZmluZUxvY2FsZSgnYXItZHonLCB7XG4gICAgbW9udGhzIDogJ9is2KfZhtmB2Ypf2YHZitmB2LHZil/Zhdin2LHYs1/Yo9mB2LHZitmEX9mF2KfZil/YrNmI2KfZhl/YrNmI2YrZhNmK2Klf2KPZiNiqX9iz2KjYqtmF2KjYsV/Yo9mD2KrZiNio2LFf2YbZiNmB2YXYqNixX9iv2YrYs9mF2KjYsScuc3BsaXQoJ18nKSxcbiAgICBtb250aHNTaG9ydCA6ICfYrNin2YbZgdmKX9mB2YrZgdix2Ypf2YXYp9ix2LNf2KPZgdix2YrZhF/Zhdin2Ypf2KzZiNin2YZf2KzZiNmK2YTZitipX9ij2YjYql/Ys9io2KrZhdio2LFf2KPZg9iq2YjYqNixX9mG2YjZgdmF2KjYsV/Yr9mK2LPZhdio2LEnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXMgOiAn2KfZhNij2K3Yr1/Yp9mE2KXYq9mG2YrZhl/Yp9mE2KvZhNin2KvYp9ihX9in2YTYo9ix2KjYudin2KFf2KfZhNiu2YXZitizX9in2YTYrNmF2LnYqV/Yp9mE2LPYqNiqJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzU2hvcnQgOiAn2KfYrdivX9in2KvZhtmK2YZf2KvZhNin2KvYp9ihX9in2LHYqNi52KfYoV/YrtmF2YrYs1/YrNmF2LnYqV/Ys9io2KonLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNNaW4gOiAn2KPYrV/YpdirX9ir2YTYp1/Yo9ixX9iu2YVf2KzZhV/Ys9ioJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICBMTExMIDogJ2RkZGQgRCBNTU1NIFlZWVkgSEg6bW0nXG4gICAgfSxcbiAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgc2FtZURheTogJ1vYp9mE2YrZiNmFINi52YTZiSDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgbmV4dERheTogJ1vYutiv2Kcg2LnZhNmJINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICBuZXh0V2VlazogJ2RkZGQgW9i52YTZiSDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgbGFzdERheTogJ1vYo9mF2LMg2LnZhNmJINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICBsYXN0V2VlazogJ2RkZGQgW9i52YTZiSDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgc2FtZUVsc2U6ICdMJ1xuICAgIH0sXG4gICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICBmdXR1cmUgOiAn2YHZiiAlcycsXG4gICAgICAgIHBhc3QgOiAn2YXZhtiwICVzJyxcbiAgICAgICAgcyA6ICfYq9mI2KfZhicsXG4gICAgICAgIG0gOiAn2K/ZgtmK2YLYqScsXG4gICAgICAgIG1tIDogJyVkINiv2YLYp9im2YInLFxuICAgICAgICBoIDogJ9iz2KfYudipJyxcbiAgICAgICAgaGggOiAnJWQg2LPYp9i52KfYqicsXG4gICAgICAgIGQgOiAn2YrZiNmFJyxcbiAgICAgICAgZGQgOiAnJWQg2KPZitin2YUnLFxuICAgICAgICBNIDogJ9i02YfYsScsXG4gICAgICAgIE1NIDogJyVkINij2LTZh9ixJyxcbiAgICAgICAgeSA6ICfYs9mG2KknLFxuICAgICAgICB5eSA6ICclZCDYs9mG2YjYp9iqJ1xuICAgIH0sXG4gICAgd2VlayA6IHtcbiAgICAgICAgZG93IDogMCwgLy8gU3VuZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDFzdCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICB9XG59KTtcblxucmV0dXJuIGFyRHo7XG5cbn0pKSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9hci1kei5qcyIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBBcmFiaWMgKEt1d2FpdCkgW2FyLWt3XVxuLy8hIGF1dGhvciA6IE51c3JldCBQYXJsYWs6IGh0dHBzOi8vZ2l0aHViLmNvbS9udXNyZXRwYXJsYWtcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG52YXIgYXJLdyA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2FyLWt3Jywge1xuICAgIG1vbnRocyA6ICfZitmG2KfZitixX9mB2KjYsdin2YrYsV/Zhdin2LHYs1/Yo9io2LHZitmEX9mF2KfZil/ZitmI2YbZitmIX9mK2YjZhNmK2YjYsl/Yuti02Kpf2LTYqtmG2KjYsV/Yo9mD2KrZiNio2LFf2YbZiNmG2KjYsV/Yr9is2YbYqNixJy5zcGxpdCgnXycpLFxuICAgIG1vbnRoc1Nob3J0IDogJ9mK2YbYp9mK2LFf2YHYqNix2KfZitixX9mF2KfYsdizX9ij2KjYsdmK2YRf2YXYp9mKX9mK2YjZhtmK2Yhf2YrZiNmE2YrZiNiyX9i62LTYql/YtNiq2YbYqNixX9ij2YPYqtmI2KjYsV/ZhtmI2YbYqNixX9iv2KzZhtio2LEnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXMgOiAn2KfZhNij2K3Yr1/Yp9mE2KXYqtmG2YrZhl/Yp9mE2KvZhNin2KvYp9ihX9in2YTYo9ix2KjYudin2KFf2KfZhNiu2YXZitizX9in2YTYrNmF2LnYqV/Yp9mE2LPYqNiqJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzU2hvcnQgOiAn2KfYrdivX9in2KrZhtmK2YZf2KvZhNin2KvYp9ihX9in2LHYqNi52KfYoV/YrtmF2YrYs1/YrNmF2LnYqV/Ys9io2KonLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNNaW4gOiAn2K1f2YZf2Ktf2LFf2K5f2Kxf2LMnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgIExMTEwgOiAnZGRkZCBEIE1NTU0gWVlZWSBISDptbSdcbiAgICB9LFxuICAgIGNhbGVuZGFyIDoge1xuICAgICAgICBzYW1lRGF5OiAnW9in2YTZitmI2YUg2LnZhNmJINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICBuZXh0RGF5OiAnW9i62K/YpyDYudmE2Ykg2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgIG5leHRXZWVrOiAnZGRkZCBb2LnZhNmJINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICBsYXN0RGF5OiAnW9ij2YXYsyDYudmE2Ykg2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgIGxhc3RXZWVrOiAnZGRkZCBb2LnZhNmJINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICBzYW1lRWxzZTogJ0wnXG4gICAgfSxcbiAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgIGZ1dHVyZSA6ICfZgdmKICVzJyxcbiAgICAgICAgcGFzdCA6ICfZhdmG2LAgJXMnLFxuICAgICAgICBzIDogJ9ir2YjYp9mGJyxcbiAgICAgICAgbSA6ICfYr9mC2YrZgtipJyxcbiAgICAgICAgbW0gOiAnJWQg2K/Zgtin2KbZgicsXG4gICAgICAgIGggOiAn2LPYp9i52KknLFxuICAgICAgICBoaCA6ICclZCDYs9in2LnYp9iqJyxcbiAgICAgICAgZCA6ICfZitmI2YUnLFxuICAgICAgICBkZCA6ICclZCDYo9mK2KfZhScsXG4gICAgICAgIE0gOiAn2LTZh9ixJyxcbiAgICAgICAgTU0gOiAnJWQg2KPYtNmH2LEnLFxuICAgICAgICB5IDogJ9iz2YbYqScsXG4gICAgICAgIHl5IDogJyVkINiz2YbZiNin2KonXG4gICAgfSxcbiAgICB3ZWVrIDoge1xuICAgICAgICBkb3cgOiAwLCAvLyBTdW5kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgZG95IDogMTIgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDFzdCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICB9XG59KTtcblxucmV0dXJuIGFyS3c7XG5cbn0pKSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9hci1rdy5qcyIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBBcmFiaWMgKEx5YmlhKSBbYXItbHldXG4vLyEgYXV0aG9yIDogQWxpIEhtZXI6IGh0dHBzOi8vZ2l0aHViLmNvbS9raWtvYW5pc1xuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciBzeW1ib2xNYXAgPSB7XG4gICAgJzEnOiAnMScsXG4gICAgJzInOiAnMicsXG4gICAgJzMnOiAnMycsXG4gICAgJzQnOiAnNCcsXG4gICAgJzUnOiAnNScsXG4gICAgJzYnOiAnNicsXG4gICAgJzcnOiAnNycsXG4gICAgJzgnOiAnOCcsXG4gICAgJzknOiAnOScsXG4gICAgJzAnOiAnMCdcbn07XG52YXIgcGx1cmFsRm9ybSA9IGZ1bmN0aW9uIChuKSB7XG4gICAgcmV0dXJuIG4gPT09IDAgPyAwIDogbiA9PT0gMSA/IDEgOiBuID09PSAyID8gMiA6IG4gJSAxMDAgPj0gMyAmJiBuICUgMTAwIDw9IDEwID8gMyA6IG4gJSAxMDAgPj0gMTEgPyA0IDogNTtcbn07XG52YXIgcGx1cmFscyA9IHtcbiAgICBzIDogWyfYo9mC2YQg2YXZhiDYq9in2YbZitipJywgJ9ir2KfZhtmK2Kkg2YjYp9it2K/YqScsIFsn2KvYp9mG2YrYqtin2YYnLCAn2KvYp9mG2YrYqtmK2YYnXSwgJyVkINir2YjYp9mGJywgJyVkINir2KfZhtmK2KknLCAnJWQg2KvYp9mG2YrYqSddLFxuICAgIG0gOiBbJ9ij2YLZhCDZhdmGINiv2YLZitmC2KknLCAn2K/ZgtmK2YLYqSDZiNin2K3Yr9ipJywgWyfYr9mC2YrZgtiq2KfZhicsICfYr9mC2YrZgtiq2YrZhiddLCAnJWQg2K/Zgtin2KbZgicsICclZCDYr9mC2YrZgtipJywgJyVkINiv2YLZitmC2KknXSxcbiAgICBoIDogWyfYo9mC2YQg2YXZhiDYs9in2LnYqScsICfYs9in2LnYqSDZiNin2K3Yr9ipJywgWyfYs9in2LnYqtin2YYnLCAn2LPYp9i52KrZitmGJ10sICclZCDYs9in2LnYp9iqJywgJyVkINiz2KfYudipJywgJyVkINiz2KfYudipJ10sXG4gICAgZCA6IFsn2KPZgtmEINmF2YYg2YrZiNmFJywgJ9mK2YjZhSDZiNin2K3YrycsIFsn2YrZiNmF2KfZhicsICfZitmI2YXZitmGJ10sICclZCDYo9mK2KfZhScsICclZCDZitmI2YXZi9inJywgJyVkINmK2YjZhSddLFxuICAgIE0gOiBbJ9ij2YLZhCDZhdmGINi02YfYsScsICfYtNmH2LEg2YjYp9it2K8nLCBbJ9i02YfYsdin2YYnLCAn2LTZh9ix2YrZhiddLCAnJWQg2KPYtNmH2LEnLCAnJWQg2LTZh9ix2KcnLCAnJWQg2LTZh9ixJ10sXG4gICAgeSA6IFsn2KPZgtmEINmF2YYg2LnYp9mFJywgJ9i52KfZhSDZiNin2K3YrycsIFsn2LnYp9mF2KfZhicsICfYudin2YXZitmGJ10sICclZCDYo9i52YjYp9mFJywgJyVkINi52KfZhdmL2KcnLCAnJWQg2LnYp9mFJ11cbn07XG52YXIgcGx1cmFsaXplID0gZnVuY3Rpb24gKHUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKG51bWJlciwgd2l0aG91dFN1ZmZpeCwgc3RyaW5nLCBpc0Z1dHVyZSkge1xuICAgICAgICB2YXIgZiA9IHBsdXJhbEZvcm0obnVtYmVyKSxcbiAgICAgICAgICAgIHN0ciA9IHBsdXJhbHNbdV1bcGx1cmFsRm9ybShudW1iZXIpXTtcbiAgICAgICAgaWYgKGYgPT09IDIpIHtcbiAgICAgICAgICAgIHN0ciA9IHN0clt3aXRob3V0U3VmZml4ID8gMCA6IDFdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdHIucmVwbGFjZSgvJWQvaSwgbnVtYmVyKTtcbiAgICB9O1xufTtcbnZhciBtb250aHMgPSBbXG4gICAgJ9mK2YbYp9mK2LEnLFxuICAgICfZgdio2LHYp9mK2LEnLFxuICAgICfZhdin2LHYsycsXG4gICAgJ9ij2KjYsdmK2YQnLFxuICAgICfZhdin2YrZiCcsXG4gICAgJ9mK2YjZhtmK2YgnLFxuICAgICfZitmI2YTZitmIJyxcbiAgICAn2KPYutiz2LfYsycsXG4gICAgJ9iz2KjYqtmF2KjYsScsXG4gICAgJ9ij2YPYqtmI2KjYsScsXG4gICAgJ9mG2YjZgdmF2KjYsScsXG4gICAgJ9iv2YrYs9mF2KjYsSdcbl07XG5cbnZhciBhckx5ID0gbW9tZW50LmRlZmluZUxvY2FsZSgnYXItbHknLCB7XG4gICAgbW9udGhzIDogbW9udGhzLFxuICAgIG1vbnRoc1Nob3J0IDogbW9udGhzLFxuICAgIHdlZWtkYXlzIDogJ9in2YTYo9it2K9f2KfZhNil2KvZhtmK2YZf2KfZhNir2YTYp9ir2KfYoV/Yp9mE2KPYsdio2LnYp9ihX9in2YTYrtmF2YrYs1/Yp9mE2KzZhdi52Klf2KfZhNiz2KjYqicuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1Nob3J0IDogJ9ij2K3Yr1/Ypdir2YbZitmGX9ir2YTYp9ir2KfYoV/Yo9ix2KjYudin2KFf2K7ZhdmK2LNf2KzZhdi52Klf2LPYqNiqJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzTWluIDogJ9itX9mGX9irX9ixX9iuX9isX9izJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgTCA6ICdEL1xcdTIwMEZNL1xcdTIwMEZZWVlZJyxcbiAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICBMTExMIDogJ2RkZGQgRCBNTU1NIFlZWVkgSEg6bW0nXG4gICAgfSxcbiAgICBtZXJpZGllbVBhcnNlOiAv2LV82YUvLFxuICAgIGlzUE0gOiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuICfZhScgPT09IGlucHV0O1xuICAgIH0sXG4gICAgbWVyaWRpZW0gOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgIGlmIChob3VyIDwgMTIpIHtcbiAgICAgICAgICAgIHJldHVybiAn2LUnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuICfZhSc7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIGNhbGVuZGFyIDoge1xuICAgICAgICBzYW1lRGF5OiAnW9in2YTZitmI2YUg2LnZhtivINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICBuZXh0RGF5OiAnW9i62K/Zi9inINi52YbYryDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFvYudmG2K8g2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgIGxhc3REYXk6ICdb2KPZhdizINi52YbYryDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgbGFzdFdlZWs6ICdkZGRkIFvYudmG2K8g2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgIHNhbWVFbHNlOiAnTCdcbiAgICB9LFxuICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgZnV0dXJlIDogJ9io2LnYryAlcycsXG4gICAgICAgIHBhc3QgOiAn2YXZhtiwICVzJyxcbiAgICAgICAgcyA6IHBsdXJhbGl6ZSgncycpLFxuICAgICAgICBtIDogcGx1cmFsaXplKCdtJyksXG4gICAgICAgIG1tIDogcGx1cmFsaXplKCdtJyksXG4gICAgICAgIGggOiBwbHVyYWxpemUoJ2gnKSxcbiAgICAgICAgaGggOiBwbHVyYWxpemUoJ2gnKSxcbiAgICAgICAgZCA6IHBsdXJhbGl6ZSgnZCcpLFxuICAgICAgICBkZCA6IHBsdXJhbGl6ZSgnZCcpLFxuICAgICAgICBNIDogcGx1cmFsaXplKCdNJyksXG4gICAgICAgIE1NIDogcGx1cmFsaXplKCdNJyksXG4gICAgICAgIHkgOiBwbHVyYWxpemUoJ3knKSxcbiAgICAgICAgeXkgOiBwbHVyYWxpemUoJ3knKVxuICAgIH0sXG4gICAgcHJlcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC/YjC9nLCAnLCcpO1xuICAgIH0sXG4gICAgcG9zdGZvcm1hdDogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1xcZC9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgIHJldHVybiBzeW1ib2xNYXBbbWF0Y2hdO1xuICAgICAgICB9KS5yZXBsYWNlKC8sL2csICfYjCcpO1xuICAgIH0sXG4gICAgd2VlayA6IHtcbiAgICAgICAgZG93IDogNiwgLy8gU2F0dXJkYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgZG95IDogMTIgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDFzdCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICB9XG59KTtcblxucmV0dXJuIGFyTHk7XG5cbn0pKSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9hci1seS5qcyIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBBcmFiaWMgKE1vcm9jY28pIFthci1tYV1cbi8vISBhdXRob3IgOiBFbEZhZGlsaSBZYXNzaW5lIDogaHR0cHM6Ly9naXRodWIuY29tL0VsRmFkaWxpWVxuLy8hIGF1dGhvciA6IEFiZGVsIFNhaWQgOiBodHRwczovL2dpdGh1Yi5jb20vYWJkZWxzYWlkXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxudmFyIGFyTWEgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdhci1tYScsIHtcbiAgICBtb250aHMgOiAn2YrZhtin2YrYsV/Zgdio2LHYp9mK2LFf2YXYp9ix2LNf2KPYqNix2YrZhF/Zhdin2Ypf2YrZiNmG2YrZiF/ZitmI2YTZitmI2LJf2LrYtNiqX9i02KrZhtio2LFf2KPZg9iq2YjYqNixX9mG2YjZhtio2LFf2K/YrNmG2KjYsScuc3BsaXQoJ18nKSxcbiAgICBtb250aHNTaG9ydCA6ICfZitmG2KfZitixX9mB2KjYsdin2YrYsV/Zhdin2LHYs1/Yo9io2LHZitmEX9mF2KfZil/ZitmI2YbZitmIX9mK2YjZhNmK2YjYsl/Yuti02Kpf2LTYqtmG2KjYsV/Yo9mD2KrZiNio2LFf2YbZiNmG2KjYsV/Yr9is2YbYqNixJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzIDogJ9in2YTYo9it2K9f2KfZhNil2KrZhtmK2YZf2KfZhNir2YTYp9ir2KfYoV/Yp9mE2KPYsdio2LnYp9ihX9in2YTYrtmF2YrYs1/Yp9mE2KzZhdi52Klf2KfZhNiz2KjYqicuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1Nob3J0IDogJ9in2K3Yr1/Yp9iq2YbZitmGX9ir2YTYp9ir2KfYoV/Yp9ix2KjYudin2KFf2K7ZhdmK2LNf2KzZhdi52Klf2LPYqNiqJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzTWluIDogJ9itX9mGX9irX9ixX9iuX9isX9izJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICBMTExMIDogJ2RkZGQgRCBNTU1NIFlZWVkgSEg6bW0nXG4gICAgfSxcbiAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgc2FtZURheTogJ1vYp9mE2YrZiNmFINi52YTZiSDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgbmV4dERheTogJ1vYutiv2Kcg2LnZhNmJINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICBuZXh0V2VlazogJ2RkZGQgW9i52YTZiSDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgbGFzdERheTogJ1vYo9mF2LMg2LnZhNmJINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICBsYXN0V2VlazogJ2RkZGQgW9i52YTZiSDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgc2FtZUVsc2U6ICdMJ1xuICAgIH0sXG4gICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICBmdXR1cmUgOiAn2YHZiiAlcycsXG4gICAgICAgIHBhc3QgOiAn2YXZhtiwICVzJyxcbiAgICAgICAgcyA6ICfYq9mI2KfZhicsXG4gICAgICAgIG0gOiAn2K/ZgtmK2YLYqScsXG4gICAgICAgIG1tIDogJyVkINiv2YLYp9im2YInLFxuICAgICAgICBoIDogJ9iz2KfYudipJyxcbiAgICAgICAgaGggOiAnJWQg2LPYp9i52KfYqicsXG4gICAgICAgIGQgOiAn2YrZiNmFJyxcbiAgICAgICAgZGQgOiAnJWQg2KPZitin2YUnLFxuICAgICAgICBNIDogJ9i02YfYsScsXG4gICAgICAgIE1NIDogJyVkINij2LTZh9ixJyxcbiAgICAgICAgeSA6ICfYs9mG2KknLFxuICAgICAgICB5eSA6ICclZCDYs9mG2YjYp9iqJ1xuICAgIH0sXG4gICAgd2VlayA6IHtcbiAgICAgICAgZG93IDogNiwgLy8gU2F0dXJkYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgZG95IDogMTIgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDFzdCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICB9XG59KTtcblxucmV0dXJuIGFyTWE7XG5cbn0pKSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9hci1tYS5qcyIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBBcmFiaWMgKFNhdWRpIEFyYWJpYSkgW2FyLXNhXVxuLy8hIGF1dGhvciA6IFN1aGFpbCBBbGtvd2FpbGVldCA6IGh0dHBzOi8vZ2l0aHViLmNvbS94c29oXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxudmFyIHN5bWJvbE1hcCA9IHtcbiAgICAnMSc6ICfZoScsXG4gICAgJzInOiAn2aInLFxuICAgICczJzogJ9mjJyxcbiAgICAnNCc6ICfZpCcsXG4gICAgJzUnOiAn2aUnLFxuICAgICc2JzogJ9mmJyxcbiAgICAnNyc6ICfZpycsXG4gICAgJzgnOiAn2agnLFxuICAgICc5JzogJ9mpJyxcbiAgICAnMCc6ICfZoCdcbn07XG52YXIgbnVtYmVyTWFwID0ge1xuICAgICfZoSc6ICcxJyxcbiAgICAn2aInOiAnMicsXG4gICAgJ9mjJzogJzMnLFxuICAgICfZpCc6ICc0JyxcbiAgICAn2aUnOiAnNScsXG4gICAgJ9mmJzogJzYnLFxuICAgICfZpyc6ICc3JyxcbiAgICAn2agnOiAnOCcsXG4gICAgJ9mpJzogJzknLFxuICAgICfZoCc6ICcwJ1xufTtcblxudmFyIGFyU2EgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdhci1zYScsIHtcbiAgICBtb250aHMgOiAn2YrZhtin2YrYsV/Zgdio2LHYp9mK2LFf2YXYp9ix2LNf2KPYqNix2YrZhF/Zhdin2YrZiF/ZitmI2YbZitmIX9mK2YjZhNmK2Yhf2KPYutiz2LfYs1/Ys9io2KrZhdio2LFf2KPZg9iq2YjYqNixX9mG2YjZgdmF2KjYsV/Yr9mK2LPZhdio2LEnLnNwbGl0KCdfJyksXG4gICAgbW9udGhzU2hvcnQgOiAn2YrZhtin2YrYsV/Zgdio2LHYp9mK2LFf2YXYp9ix2LNf2KPYqNix2YrZhF/Zhdin2YrZiF/ZitmI2YbZitmIX9mK2YjZhNmK2Yhf2KPYutiz2LfYs1/Ys9io2KrZhdio2LFf2KPZg9iq2YjYqNixX9mG2YjZgdmF2KjYsV/Yr9mK2LPZhdio2LEnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXMgOiAn2KfZhNij2K3Yr1/Yp9mE2KXYq9mG2YrZhl/Yp9mE2KvZhNin2KvYp9ihX9in2YTYo9ix2KjYudin2KFf2KfZhNiu2YXZitizX9in2YTYrNmF2LnYqV/Yp9mE2LPYqNiqJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzU2hvcnQgOiAn2KPYrdivX9il2KvZhtmK2YZf2KvZhNin2KvYp9ihX9ij2LHYqNi52KfYoV/YrtmF2YrYs1/YrNmF2LnYqV/Ys9io2KonLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNNaW4gOiAn2K1f2YZf2Ktf2LFf2K5f2Kxf2LMnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgIExMTEwgOiAnZGRkZCBEIE1NTU0gWVlZWSBISDptbSdcbiAgICB9LFxuICAgIG1lcmlkaWVtUGFyc2U6IC/YtXzZhS8sXG4gICAgaXNQTSA6IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICByZXR1cm4gJ9mFJyA9PT0gaW5wdXQ7XG4gICAgfSxcbiAgICBtZXJpZGllbSA6IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgaWYgKGhvdXIgPCAxMikge1xuICAgICAgICAgICAgcmV0dXJuICfYtSc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gJ9mFJztcbiAgICAgICAgfVxuICAgIH0sXG4gICAgY2FsZW5kYXIgOiB7XG4gICAgICAgIHNhbWVEYXk6ICdb2KfZhNmK2YjZhSDYudmE2Ykg2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgIG5leHREYXk6ICdb2LrYr9inINi52YTZiSDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFvYudmE2Ykg2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgIGxhc3REYXk6ICdb2KPZhdizINi52YTZiSDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgbGFzdFdlZWs6ICdkZGRkIFvYudmE2Ykg2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgIHNhbWVFbHNlOiAnTCdcbiAgICB9LFxuICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgZnV0dXJlIDogJ9mB2YogJXMnLFxuICAgICAgICBwYXN0IDogJ9mF2YbYsCAlcycsXG4gICAgICAgIHMgOiAn2KvZiNin2YYnLFxuICAgICAgICBtIDogJ9iv2YLZitmC2KknLFxuICAgICAgICBtbSA6ICclZCDYr9mC2KfYptmCJyxcbiAgICAgICAgaCA6ICfYs9in2LnYqScsXG4gICAgICAgIGhoIDogJyVkINiz2KfYudin2KonLFxuICAgICAgICBkIDogJ9mK2YjZhScsXG4gICAgICAgIGRkIDogJyVkINij2YrYp9mFJyxcbiAgICAgICAgTSA6ICfYtNmH2LEnLFxuICAgICAgICBNTSA6ICclZCDYo9i02YfYsScsXG4gICAgICAgIHkgOiAn2LPZhtipJyxcbiAgICAgICAgeXkgOiAnJWQg2LPZhtmI2KfYqidcbiAgICB9LFxuICAgIHByZXBhcnNlOiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvW9mh2aLZo9mk2aXZptmn2ajZqdmgXS9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgIHJldHVybiBudW1iZXJNYXBbbWF0Y2hdO1xuICAgICAgICB9KS5yZXBsYWNlKC/YjC9nLCAnLCcpO1xuICAgIH0sXG4gICAgcG9zdGZvcm1hdDogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1xcZC9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgIHJldHVybiBzeW1ib2xNYXBbbWF0Y2hdO1xuICAgICAgICB9KS5yZXBsYWNlKC8sL2csICfYjCcpO1xuICAgIH0sXG4gICAgd2VlayA6IHtcbiAgICAgICAgZG93IDogMCwgLy8gU3VuZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgIGRveSA6IDYgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDFzdCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICB9XG59KTtcblxucmV0dXJuIGFyU2E7XG5cbn0pKSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9hci1zYS5qcyIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgIDogIEFyYWJpYyAoVHVuaXNpYSkgW2FyLXRuXVxuLy8hIGF1dGhvciA6IE5hZGVyIFRvdWthYnJpIDogaHR0cHM6Ly9naXRodWIuY29tL25hZGVyaW9cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG52YXIgYXJUbiA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2FyLXRuJywge1xuICAgIG1vbnRoczogJ9is2KfZhtmB2Ypf2YHZitmB2LHZil/Zhdin2LHYs1/Yo9mB2LHZitmEX9mF2KfZil/YrNmI2KfZhl/YrNmI2YrZhNmK2Klf2KPZiNiqX9iz2KjYqtmF2KjYsV/Yo9mD2KrZiNio2LFf2YbZiNmB2YXYqNixX9iv2YrYs9mF2KjYsScuc3BsaXQoJ18nKSxcbiAgICBtb250aHNTaG9ydDogJ9is2KfZhtmB2Ypf2YHZitmB2LHZil/Zhdin2LHYs1/Yo9mB2LHZitmEX9mF2KfZil/YrNmI2KfZhl/YrNmI2YrZhNmK2Klf2KPZiNiqX9iz2KjYqtmF2KjYsV/Yo9mD2KrZiNio2LFf2YbZiNmB2YXYqNixX9iv2YrYs9mF2KjYsScuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5czogJ9in2YTYo9it2K9f2KfZhNil2KvZhtmK2YZf2KfZhNir2YTYp9ir2KfYoV/Yp9mE2KPYsdio2LnYp9ihX9in2YTYrtmF2YrYs1/Yp9mE2KzZhdi52Klf2KfZhNiz2KjYqicuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1Nob3J0OiAn2KPYrdivX9il2KvZhtmK2YZf2KvZhNin2KvYp9ihX9ij2LHYqNi52KfYoV/YrtmF2YrYs1/YrNmF2LnYqV/Ys9io2KonLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNNaW46ICfYrV/Zhl/Yq1/YsV/Yrl/YrF/Ysycuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgIEw6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgIExMTDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgTExMTDogJ2RkZGQgRCBNTU1NIFlZWVkgSEg6bW0nXG4gICAgfSxcbiAgICBjYWxlbmRhcjoge1xuICAgICAgICBzYW1lRGF5OiAnW9in2YTZitmI2YUg2LnZhNmJINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICBuZXh0RGF5OiAnW9i62K/YpyDYudmE2Ykg2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgIG5leHRXZWVrOiAnZGRkZCBb2LnZhNmJINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICBsYXN0RGF5OiAnW9ij2YXYsyDYudmE2Ykg2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgIGxhc3RXZWVrOiAnZGRkZCBb2LnZhNmJINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICBzYW1lRWxzZTogJ0wnXG4gICAgfSxcbiAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgZnV0dXJlOiAn2YHZiiAlcycsXG4gICAgICAgIHBhc3Q6ICfZhdmG2LAgJXMnLFxuICAgICAgICBzOiAn2KvZiNin2YYnLFxuICAgICAgICBtOiAn2K/ZgtmK2YLYqScsXG4gICAgICAgIG1tOiAnJWQg2K/Zgtin2KbZgicsXG4gICAgICAgIGg6ICfYs9in2LnYqScsXG4gICAgICAgIGhoOiAnJWQg2LPYp9i52KfYqicsXG4gICAgICAgIGQ6ICfZitmI2YUnLFxuICAgICAgICBkZDogJyVkINij2YrYp9mFJyxcbiAgICAgICAgTTogJ9i02YfYsScsXG4gICAgICAgIE1NOiAnJWQg2KPYtNmH2LEnLFxuICAgICAgICB5OiAn2LPZhtipJyxcbiAgICAgICAgeXk6ICclZCDYs9mG2YjYp9iqJ1xuICAgIH0sXG4gICAgd2Vlazoge1xuICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICBkb3k6IDQgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgIH1cbn0pO1xuXG5yZXR1cm4gYXJUbjtcblxufSkpKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2FyLXRuLmpzIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEF6ZXJiYWlqYW5pIFthel1cbi8vISBhdXRob3IgOiB0b3BjaGl5ZXYgOiBodHRwczovL2dpdGh1Yi5jb20vdG9wY2hpeWV2XG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxudmFyIHN1ZmZpeGVzID0ge1xuICAgIDE6ICctaW5jaScsXG4gICAgNTogJy1pbmNpJyxcbiAgICA4OiAnLWluY2knLFxuICAgIDcwOiAnLWluY2knLFxuICAgIDgwOiAnLWluY2knLFxuICAgIDI6ICctbmNpJyxcbiAgICA3OiAnLW5jaScsXG4gICAgMjA6ICctbmNpJyxcbiAgICA1MDogJy1uY2knLFxuICAgIDM6ICctw7xuY8O8JyxcbiAgICA0OiAnLcO8bmPDvCcsXG4gICAgMTAwOiAnLcO8bmPDvCcsXG4gICAgNjogJy1uY8SxJyxcbiAgICA5OiAnLXVuY3UnLFxuICAgIDEwOiAnLXVuY3UnLFxuICAgIDMwOiAnLXVuY3UnLFxuICAgIDYwOiAnLcSxbmPEsScsXG4gICAgOTA6ICctxLFuY8SxJ1xufTtcblxudmFyIGF6ID0gbW9tZW50LmRlZmluZUxvY2FsZSgnYXonLCB7XG4gICAgbW9udGhzIDogJ3lhbnZhcl9mZXZyYWxfbWFydF9hcHJlbF9tYXlfaXl1bl9peXVsX2F2cXVzdF9zZW50eWFicl9va3R5YWJyX25veWFicl9kZWthYnInLnNwbGl0KCdfJyksXG4gICAgbW9udGhzU2hvcnQgOiAneWFuX2Zldl9tYXJfYXByX21heV9peW5faXlsX2F2cV9zZW5fb2t0X25veV9kZWsnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXMgOiAnQmF6YXJfQmF6YXIgZXJ0yZlzaV/Dh8mZcsWfyZluYsmZIGF4xZ9hbcSxX8OHyZlyxZ/JmW5iyZlfQ8O8bcmZIGF4xZ9hbcSxX0PDvG3JmV/FnsmZbmLJmScuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1Nob3J0IDogJ0Jhel9CekVfw4dBeF/Dh8mZcl9DQXhfQ8O8bV/FnsmZbicuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c01pbiA6ICdCel9CRV/Dh0Ffw4fJmV9DQV9Dw7xfxZ7JmScuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgIEwgOiAnREQuTU0uWVlZWScsXG4gICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgTExMTCA6ICdkZGRkLCBEIE1NTU0gWVlZWSBISDptbSdcbiAgICB9LFxuICAgIGNhbGVuZGFyIDoge1xuICAgICAgICBzYW1lRGF5IDogJ1tidWfDvG4gc2FhdF0gTFQnLFxuICAgICAgICBuZXh0RGF5IDogJ1tzYWJhaCBzYWF0XSBMVCcsXG4gICAgICAgIG5leHRXZWVrIDogJ1tnyZlsyZluIGjJmWZ0yZldIGRkZGQgW3NhYXRdIExUJyxcbiAgICAgICAgbGFzdERheSA6ICdbZMO8bsmZbl0gTFQnLFxuICAgICAgICBsYXN0V2VlayA6ICdba2XDp8mZbiBoyZlmdMmZXSBkZGRkIFtzYWF0XSBMVCcsXG4gICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgfSxcbiAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgIGZ1dHVyZSA6ICclcyBzb25yYScsXG4gICAgICAgIHBhc3QgOiAnJXMgyZl2dsmZbCcsXG4gICAgICAgIHMgOiAnYmlybmXDp8mZIHNhbml5ecmZJyxcbiAgICAgICAgbSA6ICdiaXIgZMmZcWlxyZknLFxuICAgICAgICBtbSA6ICclZCBkyZlxaXHJmScsXG4gICAgICAgIGggOiAnYmlyIHNhYXQnLFxuICAgICAgICBoaCA6ICclZCBzYWF0JyxcbiAgICAgICAgZCA6ICdiaXIgZ8O8bicsXG4gICAgICAgIGRkIDogJyVkIGfDvG4nLFxuICAgICAgICBNIDogJ2JpciBheScsXG4gICAgICAgIE1NIDogJyVkIGF5JyxcbiAgICAgICAgeSA6ICdiaXIgaWwnLFxuICAgICAgICB5eSA6ICclZCBpbCdcbiAgICB9LFxuICAgIG1lcmlkaWVtUGFyc2U6IC9nZWPJmXxzyZloyZlyfGfDvG5kw7x6fGF4xZ9hbS8sXG4gICAgaXNQTSA6IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICByZXR1cm4gL14oZ8O8bmTDvHp8YXjFn2FtKSQvLnRlc3QoaW5wdXQpO1xuICAgIH0sXG4gICAgbWVyaWRpZW0gOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgIGlmIChob3VyIDwgNCkge1xuICAgICAgICAgICAgcmV0dXJuICdnZWPJmSc7XG4gICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDEyKSB7XG4gICAgICAgICAgICByZXR1cm4gJ3PJmWjJmXInO1xuICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxNykge1xuICAgICAgICAgICAgcmV0dXJuICdnw7xuZMO8eic7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gJ2F4xZ9hbSc7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfS0oxLFuY8SxfGluY2l8bmNpfMO8bmPDvHxuY8SxfHVuY3UpLyxcbiAgICBvcmRpbmFsIDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICBpZiAobnVtYmVyID09PSAwKSB7ICAvLyBzcGVjaWFsIGNhc2UgZm9yIHplcm9cbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnLcSxbmPEsSc7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGEgPSBudW1iZXIgJSAxMCxcbiAgICAgICAgICAgIGIgPSBudW1iZXIgJSAxMDAgLSBhLFxuICAgICAgICAgICAgYyA9IG51bWJlciA+PSAxMDAgPyAxMDAgOiBudWxsO1xuICAgICAgICByZXR1cm4gbnVtYmVyICsgKHN1ZmZpeGVzW2FdIHx8IHN1ZmZpeGVzW2JdIHx8IHN1ZmZpeGVzW2NdKTtcbiAgICB9LFxuICAgIHdlZWsgOiB7XG4gICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICBkb3kgOiA3ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiAxc3QgaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgfVxufSk7XG5cbnJldHVybiBhejtcblxufSkpKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2F6LmpzIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEJlbGFydXNpYW4gW2JlXVxuLy8hIGF1dGhvciA6IERtaXRyeSBEZW1pZG92IDogaHR0cHM6Ly9naXRodWIuY29tL2RlbWlkb3Y5MVxuLy8hIGF1dGhvcjogUHJhbGVza2E6IGh0dHA6Ly9wcmFsZXNrYS5wcm8vXG4vLyEgQXV0aG9yIDogTWVuZWxpb24gRWxlbnPDumxlIDogaHR0cHM6Ly9naXRodWIuY29tL09pcmVcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG5mdW5jdGlvbiBwbHVyYWwod29yZCwgbnVtKSB7XG4gICAgdmFyIGZvcm1zID0gd29yZC5zcGxpdCgnXycpO1xuICAgIHJldHVybiBudW0gJSAxMCA9PT0gMSAmJiBudW0gJSAxMDAgIT09IDExID8gZm9ybXNbMF0gOiAobnVtICUgMTAgPj0gMiAmJiBudW0gJSAxMCA8PSA0ICYmIChudW0gJSAxMDAgPCAxMCB8fCBudW0gJSAxMDAgPj0gMjApID8gZm9ybXNbMV0gOiBmb3Jtc1syXSk7XG59XG5mdW5jdGlvbiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5KSB7XG4gICAgdmFyIGZvcm1hdCA9IHtcbiAgICAgICAgJ21tJzogd2l0aG91dFN1ZmZpeCA/ICfRhdCy0ZbQu9GW0L3QsF/RhdCy0ZbQu9GW0L3Ri1/RhdCy0ZbQu9GW0L0nIDogJ9GF0LLRltC70ZbQvdGDX9GF0LLRltC70ZbQvdGLX9GF0LLRltC70ZbQvScsXG4gICAgICAgICdoaCc6IHdpdGhvdXRTdWZmaXggPyAn0LPQsNC00LfRltC90LBf0LPQsNC00LfRltC90Ytf0LPQsNC00LfRltC9JyA6ICfQs9Cw0LTQt9GW0L3Rg1/Qs9Cw0LTQt9GW0L3Ri1/Qs9Cw0LTQt9GW0L0nLFxuICAgICAgICAnZGQnOiAn0LTQt9C10L3RjF/QtNC90ZZf0LTQt9GR0L0nLFxuICAgICAgICAnTU0nOiAn0LzQtdGB0Y/Rhl/QvNC10YHRj9GG0Ytf0LzQtdGB0Y/RhtCw0Z4nLFxuICAgICAgICAneXknOiAn0LPQvtC0X9Cz0LDQtNGLX9Cz0LDQtNC+0Z4nXG4gICAgfTtcbiAgICBpZiAoa2V5ID09PSAnbScpIHtcbiAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggPyAn0YXQstGW0LvRltC90LAnIDogJ9GF0LLRltC70ZbQvdGDJztcbiAgICB9XG4gICAgZWxzZSBpZiAoa2V5ID09PSAnaCcpIHtcbiAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggPyAn0LPQsNC00LfRltC90LAnIDogJ9Cz0LDQtNC30ZbQvdGDJztcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBudW1iZXIgKyAnICcgKyBwbHVyYWwoZm9ybWF0W2tleV0sICtudW1iZXIpO1xuICAgIH1cbn1cblxudmFyIGJlID0gbW9tZW50LmRlZmluZUxvY2FsZSgnYmUnLCB7XG4gICAgbW9udGhzIDoge1xuICAgICAgICBmb3JtYXQ6ICfRgdGC0YPQtNC30LXQvdGPX9C70Y7RgtCw0LPQsF/RgdCw0LrQsNCy0ZbQutCwX9C60YDQsNGB0LDQstGW0LrQsF/RgtGA0LDRntC90Y9f0YfRjdGA0LLQtdC90Y9f0LvRltC/0LXQvdGPX9C20L3RltGe0L3Rj1/QstC10YDQsNGB0L3Rj1/QutCw0YHRgtGA0YvRh9C90ZbQutCwX9C70ZbRgdGC0LDQv9Cw0LTQsF/RgdC90LXQttC90Y8nLnNwbGl0KCdfJyksXG4gICAgICAgIHN0YW5kYWxvbmU6ICfRgdGC0YPQtNC30LXQvdGMX9C70Y7RgtGLX9GB0LDQutCw0LLRltC6X9C60YDQsNGB0LDQstGW0Lpf0YLRgNCw0LLQtdC90Yxf0YfRjdGA0LLQtdC90Yxf0LvRltC/0LXQvdGMX9C20L3RltCy0LXQvdGMX9Cy0LXRgNCw0YHQtdC90Yxf0LrQsNGB0YLRgNGL0YfQvdGW0Lpf0LvRltGB0YLQsNC/0LDQtF/RgdC90LXQttCw0L3RjCcuc3BsaXQoJ18nKVxuICAgIH0sXG4gICAgbW9udGhzU2hvcnQgOiAn0YHRgtGD0LRf0LvRjtGCX9GB0LDQul/QutGA0LDRgV/RgtGA0LDQsl/Rh9GN0YDQsl/Qu9GW0L9f0LbQvdGW0LJf0LLQtdGAX9C60LDRgdGCX9C70ZbRgdGCX9GB0L3QtdC2Jy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzIDoge1xuICAgICAgICBmb3JtYXQ6ICfQvdGP0LTQt9C10LvRjl/Qv9Cw0L3Rj9C00LfQtdC70LDQul/QsNGe0YLQvtGA0LDQul/RgdC10YDQsNC00YNf0YfQsNGG0LLQtdGAX9C/0Y/RgtC90ZbRhtGDX9GB0YPQsdC+0YLRgycuc3BsaXQoJ18nKSxcbiAgICAgICAgc3RhbmRhbG9uZTogJ9C90Y/QtNC30LXQu9GPX9C/0LDQvdGP0LTQt9C10LvQsNC6X9Cw0Z7RgtC+0YDQsNC6X9GB0LXRgNCw0LTQsF/Rh9Cw0YbQstC10YBf0L/Rj9GC0L3RltGG0LBf0YHRg9Cx0L7RgtCwJy5zcGxpdCgnXycpLFxuICAgICAgICBpc0Zvcm1hdDogL1xcWyA/W9CS0LJdID8oPzrQvNGW0L3Rg9C70YPRjnzQvdCw0YHRgtGD0L/QvdGD0Y4pPyA/XFxdID9kZGRkL1xuICAgIH0sXG4gICAgd2Vla2RheXNTaG9ydCA6ICfQvdC0X9C/0L1f0LDRgl/RgdGAX9GH0YZf0L/Rgl/RgdCxJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzTWluIDogJ9C90LRf0L/QvV/QsNGCX9GB0YBf0YfRhl/Qv9GCX9GB0LEnLnNwbGl0KCdfJyksXG4gICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgTCA6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVkg0LMuJyxcbiAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZINCzLiwgSEg6bW0nLFxuICAgICAgICBMTExMIDogJ2RkZGQsIEQgTU1NTSBZWVlZINCzLiwgSEg6bW0nXG4gICAgfSxcbiAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgc2FtZURheTogJ1vQodGR0L3QvdGPINGeXSBMVCcsXG4gICAgICAgIG5leHREYXk6ICdb0JfQsNGe0YLRgNCwINGeXSBMVCcsXG4gICAgICAgIGxhc3REYXk6ICdb0KPRh9C+0YDQsCDRnl0gTFQnLFxuICAgICAgICBuZXh0V2VlazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuICdb0KNdIGRkZGQgW9GeXSBMVCc7XG4gICAgICAgIH0sXG4gICAgICAgIGxhc3RXZWVrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHRoaXMuZGF5KCkpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnW9CjINC80ZbQvdGD0LvRg9GOXSBkZGRkIFvRnl0gTFQnO1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1vQoyDQvNGW0L3Rg9C70YtdIGRkZGQgW9GeXSBMVCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHNhbWVFbHNlOiAnTCdcbiAgICB9LFxuICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgZnV0dXJlIDogJ9C/0YDQsNC3ICVzJyxcbiAgICAgICAgcGFzdCA6ICclcyDRgtCw0LzRgycsXG4gICAgICAgIHMgOiAn0L3QtdC60LDQu9GM0LrRliDRgdC10LrRg9C90LQnLFxuICAgICAgICBtIDogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgbW0gOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICBoIDogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgaGggOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICBkIDogJ9C00LfQtdC90YwnLFxuICAgICAgICBkZCA6IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgIE0gOiAn0LzQtdGB0Y/RhicsXG4gICAgICAgIE1NIDogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgeSA6ICfQs9C+0LQnLFxuICAgICAgICB5eSA6IHJlbGF0aXZlVGltZVdpdGhQbHVyYWxcbiAgICB9LFxuICAgIG1lcmlkaWVtUGFyc2U6IC/QvdC+0YfRi3zRgNCw0L3RltGG0Yt80LTQvdGPfNCy0LXRh9Cw0YDQsC8sXG4gICAgaXNQTSA6IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICByZXR1cm4gL14o0LTQvdGPfNCy0LXRh9Cw0YDQsCkkLy50ZXN0KGlucHV0KTtcbiAgICB9LFxuICAgIG1lcmlkaWVtIDogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICBpZiAoaG91ciA8IDQpIHtcbiAgICAgICAgICAgIHJldHVybiAn0L3QvtGH0YsnO1xuICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxMikge1xuICAgICAgICAgICAgcmV0dXJuICfRgNCw0L3RltGG0YsnO1xuICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxNykge1xuICAgICAgICAgICAgcmV0dXJuICfQtNC90Y8nO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuICfQstC10YfQsNGA0LAnO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0tKNGWfNGLfNCz0LApLyxcbiAgICBvcmRpbmFsOiBmdW5jdGlvbiAobnVtYmVyLCBwZXJpb2QpIHtcbiAgICAgICAgc3dpdGNoIChwZXJpb2QpIHtcbiAgICAgICAgICAgIGNhc2UgJ00nOlxuICAgICAgICAgICAgY2FzZSAnZCc6XG4gICAgICAgICAgICBjYXNlICdEREQnOlxuICAgICAgICAgICAgY2FzZSAndyc6XG4gICAgICAgICAgICBjYXNlICdXJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gKG51bWJlciAlIDEwID09PSAyIHx8IG51bWJlciAlIDEwID09PSAzKSAmJiAobnVtYmVyICUgMTAwICE9PSAxMiAmJiBudW1iZXIgJSAxMDAgIT09IDEzKSA/IG51bWJlciArICct0ZYnIDogbnVtYmVyICsgJy3Riyc7XG4gICAgICAgICAgICBjYXNlICdEJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJy3Qs9CwJztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgd2VlayA6IHtcbiAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgIGRveSA6IDcgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDFzdCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICB9XG59KTtcblxucmV0dXJuIGJlO1xuXG59KSkpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvYmUuanMiLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogQnVsZ2FyaWFuIFtiZ11cbi8vISBhdXRob3IgOiBLcmFzZW4gQm9yaXNvdiA6IGh0dHBzOi8vZ2l0aHViLmNvbS9rcmF6XG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxudmFyIGJnID0gbW9tZW50LmRlZmluZUxvY2FsZSgnYmcnLCB7XG4gICAgbW9udGhzIDogJ9GP0L3Rg9Cw0YDQuF/RhNC10LLRgNGD0LDRgNC4X9C80LDRgNGCX9Cw0L/RgNC40Ltf0LzQsNC5X9GO0L3QuF/RjtC70Lhf0LDQstCz0YPRgdGCX9GB0LXQv9GC0LXQvNCy0YDQuF/QvtC60YLQvtC80LLRgNC4X9C90L7QtdC80LLRgNC4X9C00LXQutC10LzQstGA0LgnLnNwbGl0KCdfJyksXG4gICAgbW9udGhzU2hvcnQgOiAn0Y/QvdGAX9GE0LXQsl/QvNCw0YBf0LDQv9GAX9C80LDQuV/RjtC90Lhf0Y7Qu9C4X9Cw0LLQs1/RgdC10L9f0L7QutGCX9C90L7QtV/QtNC10LonLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXMgOiAn0L3QtdC00LXQu9GPX9C/0L7QvdC10LTQtdC70L3QuNC6X9Cy0YLQvtGA0L3QuNC6X9GB0YDRj9C00LBf0YfQtdGC0LLRitGA0YLRitC6X9C/0LXRgtGK0Lpf0YHRitCx0L7RgtCwJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzU2hvcnQgOiAn0L3QtdC0X9C/0L7QvV/QstGC0L5f0YHRgNGPX9GH0LXRgl/Qv9C10YJf0YHRitCxJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzTWluIDogJ9C90LRf0L/QvV/QstGCX9GB0YBf0YfRgl/Qv9GCX9GB0LEnLnNwbGl0KCdfJyksXG4gICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgIExUIDogJ0g6bW0nLFxuICAgICAgICBMVFMgOiAnSDptbTpzcycsXG4gICAgICAgIEwgOiAnRC5NTS5ZWVlZJyxcbiAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgSDptbScsXG4gICAgICAgIExMTEwgOiAnZGRkZCwgRCBNTU1NIFlZWVkgSDptbSdcbiAgICB9LFxuICAgIGNhbGVuZGFyIDoge1xuICAgICAgICBzYW1lRGF5IDogJ1vQlNC90LXRgSDQsl0gTFQnLFxuICAgICAgICBuZXh0RGF5IDogJ1vQo9GC0YDQtSDQsl0gTFQnLFxuICAgICAgICBuZXh0V2VlayA6ICdkZGRkIFvQsl0gTFQnLFxuICAgICAgICBsYXN0RGF5IDogJ1vQktGH0LXRgNCwINCyXSBMVCcsXG4gICAgICAgIGxhc3RXZWVrIDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgc3dpdGNoICh0aGlzLmRheSgpKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnW9CSINC40LfQvNC40L3QsNC70LDRgtCwXSBkZGRkIFvQsl0gTFQnO1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdb0JIg0LjQt9C80LjQvdCw0LvQuNGPXSBkZGRkIFvQsl0gTFQnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgIH0sXG4gICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICBmdXR1cmUgOiAn0YHQu9C10LQgJXMnLFxuICAgICAgICBwYXN0IDogJ9C/0YDQtdC00LggJXMnLFxuICAgICAgICBzIDogJ9C90Y/QutC+0LvQutC+INGB0LXQutGD0L3QtNC4JyxcbiAgICAgICAgbSA6ICfQvNC40L3Rg9GC0LAnLFxuICAgICAgICBtbSA6ICclZCDQvNC40L3Rg9GC0LgnLFxuICAgICAgICBoIDogJ9GH0LDRgScsXG4gICAgICAgIGhoIDogJyVkINGH0LDRgdCwJyxcbiAgICAgICAgZCA6ICfQtNC10L0nLFxuICAgICAgICBkZCA6ICclZCDQtNC90LgnLFxuICAgICAgICBNIDogJ9C80LXRgdC10YYnLFxuICAgICAgICBNTSA6ICclZCDQvNC10YHQtdGG0LAnLFxuICAgICAgICB5IDogJ9Cz0L7QtNC40L3QsCcsXG4gICAgICAgIHl5IDogJyVkINCz0L7QtNC40L3QuCdcbiAgICB9LFxuICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfS0o0LXQsnzQtdC9fNGC0Lh80LLQuHzRgNC4fNC80LgpLyxcbiAgICBvcmRpbmFsIDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICB2YXIgbGFzdERpZ2l0ID0gbnVtYmVyICUgMTAsXG4gICAgICAgICAgICBsYXN0MkRpZ2l0cyA9IG51bWJlciAlIDEwMDtcbiAgICAgICAgaWYgKG51bWJlciA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICct0LXQsic7XG4gICAgICAgIH0gZWxzZSBpZiAobGFzdDJEaWdpdHMgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnLdC10L0nO1xuICAgICAgICB9IGVsc2UgaWYgKGxhc3QyRGlnaXRzID4gMTAgJiYgbGFzdDJEaWdpdHMgPCAyMCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICct0YLQuCc7XG4gICAgICAgIH0gZWxzZSBpZiAobGFzdERpZ2l0ID09PSAxKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJy3QstC4JztcbiAgICAgICAgfSBlbHNlIGlmIChsYXN0RGlnaXQgPT09IDIpIHtcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnLdGA0LgnO1xuICAgICAgICB9IGVsc2UgaWYgKGxhc3REaWdpdCA9PT0gNyB8fCBsYXN0RGlnaXQgPT09IDgpIHtcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnLdC80LgnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICct0YLQuCc7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIHdlZWsgOiB7XG4gICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICBkb3kgOiA3ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiAxc3QgaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgfVxufSk7XG5cbnJldHVybiBiZztcblxufSkpKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2JnLmpzIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEJhbWJhcmEgW2JtXVxuLy8hIGF1dGhvciA6IEVzdGVsbGUgQ29tbWVudCA6IGh0dHBzOi8vZ2l0aHViLmNvbS9lc3RlbGxlY29tbWVudFxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4vLyBMYW5ndWFnZSBjb250YWN0IHBlcnNvbiA6IEFiZG91ZmF0YSBLYW5lIDogaHR0cHM6Ly9naXRodWIuY29tL2FiZG91ZmF0YVxuXG52YXIgYm0gPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdibScsIHtcbiAgICBtb250aHMgOiAnWmFud3V5ZWthbG9fRmV3dXJ1eWVrYWxvX01hcmlzaWthbG9fQXdpcmlsaWthbG9fTcmba2Fsb19adXfJm25rYWxvX1p1bHV5ZWthbG9fVXRpa2Fsb19TyZt0YW5idXJ1a2Fsb1/JlGt1dMmUYnVydWthbG9fTm93YW5idXJ1a2Fsb19EZXNhbmJ1cnVrYWxvJy5zcGxpdCgnXycpLFxuICAgIG1vbnRoc1Nob3J0IDogJ1phbl9GZXdfTWFyX0F3aV9NyZtfWnV3X1p1bF9VdGlfU8mbdF/JlGt1X05vd19EZXMnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXMgOiAnS2FyaV9OdMmbbsmbbl9UYXJhdGFfQXJhYmFfQWxhbWlzYV9KdW1hX1NpYmlyaScuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1Nob3J0IDogJ0thcl9OdMmbX1Rhcl9BcmFfQWxhX0p1bV9TaWInLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNNaW4gOiAnS2FfTnRfVGFfQXJfQWxfSnVfU2knLnNwbGl0KCdfJyksXG4gICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgTEwgOiAnTU1NTSBbdGlsZV0gRCBbc2FuXSBZWVlZJyxcbiAgICAgICAgTExMIDogJ01NTU0gW3RpbGVdIEQgW3Nhbl0gWVlZWSBbbMmbcsmbXSBISDptbScsXG4gICAgICAgIExMTEwgOiAnZGRkZCBNTU1NIFt0aWxlXSBEIFtzYW5dIFlZWVkgW2zJm3LJm10gSEg6bW0nXG4gICAgfSxcbiAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgc2FtZURheSA6ICdbQmkgbMmbcsmbXSBMVCcsXG4gICAgICAgIG5leHREYXkgOiAnW1NpbmkgbMmbcsmbXSBMVCcsXG4gICAgICAgIG5leHRXZWVrIDogJ2RkZGQgW2RvbiBsyZtyyZtdIExUJyxcbiAgICAgICAgbGFzdERheSA6ICdbS3VudSBsyZtyyZtdIExUJyxcbiAgICAgICAgbGFzdFdlZWsgOiAnZGRkZCBbdMmbbcmbbmVuIGzJm3LJm10gTFQnLFxuICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgIH0sXG4gICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICBmdXR1cmUgOiAnJXMga8mUbsmUJyxcbiAgICAgICAgcGFzdCA6ICdhIGLJmyAlcyBiyZQnLFxuICAgICAgICBzIDogJ3NhbmdhIGRhbWEgZGFtYScsXG4gICAgICAgIG0gOiAnbWluaXRpIGtlbGVuJyxcbiAgICAgICAgbW0gOiAnbWluaXRpICVkJyxcbiAgICAgICAgaCA6ICdsyZtyyZsga2VsZW4nLFxuICAgICAgICBoaCA6ICdsyZtyyZsgJWQnLFxuICAgICAgICBkIDogJ3RpbGUga2VsZW4nLFxuICAgICAgICBkZCA6ICd0aWxlICVkJyxcbiAgICAgICAgTSA6ICdrYWxvIGtlbGVuJyxcbiAgICAgICAgTU0gOiAna2FsbyAlZCcsXG4gICAgICAgIHkgOiAnc2FuIGtlbGVuJyxcbiAgICAgICAgeXkgOiAnc2FuICVkJ1xuICAgIH0sXG4gICAgd2VlayA6IHtcbiAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICB9XG59KTtcblxucmV0dXJuIGJtO1xuXG59KSkpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvYm0uanMiLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogQmVuZ2FsaSBbYm5dXG4vLyEgYXV0aG9yIDogS2F1c2hpayBHYW5kaGkgOiBodHRwczovL2dpdGh1Yi5jb20va2F1c2hpa2dhbmRoaVxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciBzeW1ib2xNYXAgPSB7XG4gICAgJzEnOiAn4KenJyxcbiAgICAnMic6ICfgp6gnLFxuICAgICczJzogJ+CnqScsXG4gICAgJzQnOiAn4KeqJyxcbiAgICAnNSc6ICfgp6snLFxuICAgICc2JzogJ+CnrCcsXG4gICAgJzcnOiAn4KetJyxcbiAgICAnOCc6ICfgp64nLFxuICAgICc5JzogJ+CnrycsXG4gICAgJzAnOiAn4KemJ1xufTtcbnZhciBudW1iZXJNYXAgPSB7XG4gICAgJ+Cnpyc6ICcxJyxcbiAgICAn4KeoJzogJzInLFxuICAgICfgp6knOiAnMycsXG4gICAgJ+Cnqic6ICc0JyxcbiAgICAn4KerJzogJzUnLFxuICAgICfgp6wnOiAnNicsXG4gICAgJ+CnrSc6ICc3JyxcbiAgICAn4KeuJzogJzgnLFxuICAgICfgp68nOiAnOScsXG4gICAgJ+Cnpic6ICcwJ1xufTtcblxudmFyIGJuID0gbW9tZW50LmRlZmluZUxvY2FsZSgnYm4nLCB7XG4gICAgbW9udGhzIDogJ+CmnOCmvuCmqOCngeCnn+CmvuCmsOCngF/gpqvgp4fgpqzgp43gprDgp4Hgp5/gpr7gprDgpr9f4Kau4Ka+4Kaw4KeN4KaaX+Cmj+CmquCnjeCmsOCmv+Cmsl/gpq7gp4df4Kac4KeB4KaoX+CmnOCngeCmsuCmvuCmh1/gpobgppfgprjgp43gpp9f4Ka44KeH4Kaq4KeN4Kaf4KeH4Kau4KeN4Kas4KawX+CmheCmleCnjeCmn+Cni+CmrOCmsF/gpqjgpq3gp4fgpq7gp43gpqzgprBf4Kah4Ka/4Ka44KeH4Kau4KeN4Kas4KawJy5zcGxpdCgnXycpLFxuICAgIG1vbnRoc1Nob3J0IDogJ+CmnOCmvuCmqOCngV/gpqvgp4fgpqxf4Kau4Ka+4Kaw4KeN4KaaX+Cmj+CmquCnjeCmsF/gpq7gp4df4Kac4KeB4KaoX+CmnOCngeCmsl/gpobgppdf4Ka44KeH4Kaq4KeN4KafX+CmheCmleCnjeCmn+Cni1/gpqjgpq3gp4df4Kah4Ka/4Ka44KeHJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzIDogJ+CmsOCmrOCmv+CmrOCmvuCmsF/gprjgp4vgpq7gpqzgpr7gprBf4Kau4KaZ4KeN4KaX4Kay4Kas4Ka+4KawX+CmrOCngeCmp+CmrOCmvuCmsF/gpqzgp4Pgprngprjgp43gpqrgpqTgpr/gpqzgpr7gprBf4Ka24KeB4KaV4KeN4Kaw4Kas4Ka+4KawX+CmtuCmqOCmv+CmrOCmvuCmsCcuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1Nob3J0IDogJ+CmsOCmrOCmv1/gprjgp4vgpq5f4Kau4KaZ4KeN4KaX4KayX+CmrOCngeCmp1/gpqzgp4Pgprngprjgp43gpqrgpqTgpr9f4Ka24KeB4KaV4KeN4KawX+CmtuCmqOCmvycuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c01pbiA6ICfgprDgpqzgpr9f4Ka44KeL4KauX+CmruCmmeCnjeCml1/gpqzgp4Hgpqdf4Kas4KeD4Ka54KaDX+CmtuCngeCmleCnjeCmsF/gprbgpqjgpr8nLnNwbGl0KCdfJyksXG4gICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgIExUIDogJ0EgaDptbSDgprjgpq7gp58nLFxuICAgICAgICBMVFMgOiAnQSBoOm1tOnNzIOCmuOCmruCnnycsXG4gICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZLCBBIGg6bW0g4Ka44Kau4KefJyxcbiAgICAgICAgTExMTCA6ICdkZGRkLCBEIE1NTU0gWVlZWSwgQSBoOm1tIOCmuOCmruCnnydcbiAgICB9LFxuICAgIGNhbGVuZGFyIDoge1xuICAgICAgICBzYW1lRGF5IDogJ1vgpobgppxdIExUJyxcbiAgICAgICAgbmV4dERheSA6ICdb4KaG4KaX4Ka+4Kau4KeA4KaV4Ka+4KayXSBMVCcsXG4gICAgICAgIG5leHRXZWVrIDogJ2RkZGQsIExUJyxcbiAgICAgICAgbGFzdERheSA6ICdb4KaX4Kak4KaV4Ka+4KayXSBMVCcsXG4gICAgICAgIGxhc3RXZWVrIDogJ1vgppfgpqRdIGRkZGQsIExUJyxcbiAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICB9LFxuICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgZnV0dXJlIDogJyVzIOCmquCmsOCnhycsXG4gICAgICAgIHBhc3QgOiAnJXMg4KaG4KaX4KeHJyxcbiAgICAgICAgcyA6ICfgppXgp5/gp4fgppUg4Ka44KeH4KaV4KeH4Kao4KeN4KahJyxcbiAgICAgICAgbSA6ICfgpo/gppUg4Kau4Ka/4Kao4Ka/4KafJyxcbiAgICAgICAgbW0gOiAnJWQg4Kau4Ka/4Kao4Ka/4KafJyxcbiAgICAgICAgaCA6ICfgpo/gppUg4KaY4Kao4KeN4Kaf4Ka+JyxcbiAgICAgICAgaGggOiAnJWQg4KaY4Kao4KeN4Kaf4Ka+JyxcbiAgICAgICAgZCA6ICfgpo/gppUg4Kam4Ka/4KaoJyxcbiAgICAgICAgZGQgOiAnJWQg4Kam4Ka/4KaoJyxcbiAgICAgICAgTSA6ICfgpo/gppUg4Kau4Ka+4Ka4JyxcbiAgICAgICAgTU0gOiAnJWQg4Kau4Ka+4Ka4JyxcbiAgICAgICAgeSA6ICfgpo/gppUg4Kas4Kab4KawJyxcbiAgICAgICAgeXkgOiAnJWQg4Kas4Kab4KawJ1xuICAgIH0sXG4gICAgcHJlcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9b4Ken4Keo4Kep4Keq4Ker4Kes4Ket4Keu4Kev4KemXS9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgIHJldHVybiBudW1iZXJNYXBbbWF0Y2hdO1xuICAgICAgICB9KTtcbiAgICB9LFxuICAgIHBvc3Rmb3JtYXQ6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9cXGQvZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICByZXR1cm4gc3ltYm9sTWFwW21hdGNoXTtcbiAgICAgICAgfSk7XG4gICAgfSxcbiAgICBtZXJpZGllbVBhcnNlOiAv4Kaw4Ka+4KakfOCmuOCmleCmvuCmsnzgpqbgp4Hgpqrgp4HgprB84Kas4Ka/4KaV4Ka+4KayfOCmsOCmvuCmpC8sXG4gICAgbWVyaWRpZW1Ib3VyIDogZnVuY3Rpb24gKGhvdXIsIG1lcmlkaWVtKSB7XG4gICAgICAgIGlmIChob3VyID09PSAxMikge1xuICAgICAgICAgICAgaG91ciA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKChtZXJpZGllbSA9PT0gJ+CmsOCmvuCmpCcgJiYgaG91ciA+PSA0KSB8fFxuICAgICAgICAgICAgICAgIChtZXJpZGllbSA9PT0gJ+CmpuCngeCmquCngeCmsCcgJiYgaG91ciA8IDUpIHx8XG4gICAgICAgICAgICAgICAgbWVyaWRpZW0gPT09ICfgpqzgpr/gppXgpr7gprInKSB7XG4gICAgICAgICAgICByZXR1cm4gaG91ciArIDEyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIG1lcmlkaWVtIDogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICBpZiAoaG91ciA8IDQpIHtcbiAgICAgICAgICAgIHJldHVybiAn4Kaw4Ka+4KakJztcbiAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTApIHtcbiAgICAgICAgICAgIHJldHVybiAn4Ka44KaV4Ka+4KayJztcbiAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTcpIHtcbiAgICAgICAgICAgIHJldHVybiAn4Kam4KeB4Kaq4KeB4KawJztcbiAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMjApIHtcbiAgICAgICAgICAgIHJldHVybiAn4Kas4Ka/4KaV4Ka+4KayJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAn4Kaw4Ka+4KakJztcbiAgICAgICAgfVxuICAgIH0sXG4gICAgd2VlayA6IHtcbiAgICAgICAgZG93IDogMCwgLy8gU3VuZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgIGRveSA6IDYgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDFzdCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICB9XG59KTtcblxucmV0dXJuIGJuO1xuXG59KSkpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvYm4uanMiLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogVGliZXRhbiBbYm9dXG4vLyEgYXV0aG9yIDogVGh1cHRlbiBOLiBDaGFrcmlzaGFyIDogaHR0cHM6Ly9naXRodWIuY29tL3ZhanJhZG9nXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxudmFyIHN5bWJvbE1hcCA9IHtcbiAgICAnMSc6ICfgvKEnLFxuICAgICcyJzogJ+C8oicsXG4gICAgJzMnOiAn4LyjJyxcbiAgICAnNCc6ICfgvKQnLFxuICAgICc1JzogJ+C8pScsXG4gICAgJzYnOiAn4LymJyxcbiAgICAnNyc6ICfgvKcnLFxuICAgICc4JzogJ+C8qCcsXG4gICAgJzknOiAn4LypJyxcbiAgICAnMCc6ICfgvKAnXG59O1xudmFyIG51bWJlck1hcCA9IHtcbiAgICAn4LyhJzogJzEnLFxuICAgICfgvKInOiAnMicsXG4gICAgJ+C8oyc6ICczJyxcbiAgICAn4LykJzogJzQnLFxuICAgICfgvKUnOiAnNScsXG4gICAgJ+C8pic6ICc2JyxcbiAgICAn4LynJzogJzcnLFxuICAgICfgvKgnOiAnOCcsXG4gICAgJ+C8qSc6ICc5JyxcbiAgICAn4LygJzogJzAnXG59O1xuXG52YXIgYm8gPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdibycsIHtcbiAgICBtb250aHMgOiAn4L2f4L6z4LyL4L2W4LyL4L2R4L2E4LyL4L2U4L28X+C9n+C+s+C8i+C9luC8i+C9guC9ieC9suC9puC8i+C9lF/gvZ/gvrPgvIvgvZbgvIvgvYLgvabgvbTgvZjgvIvgvZRf4L2f4L6z4LyL4L2W4LyL4L2W4L2e4L2y4LyL4L2UX+C9n+C+s+C8i+C9luC8i+C9o+C+lOC8i+C9lF/gvZ/gvrPgvIvgvZbgvIvgvZHgvrLgvbTgvYLgvIvgvZRf4L2f4L6z4LyL4L2W4LyL4L2W4L2R4L204L2T4LyL4L2UX+C9n+C+s+C8i+C9luC8i+C9luC9ouC+kuC+seC9keC8i+C9lF/gvZ/gvrPgvIvgvZbgvIvgvZHgvYLgvbTgvIvgvZRf4L2f4L6z4LyL4L2W4LyL4L2W4L2F4L204LyL4L2UX+C9n+C+s+C8i+C9luC8i+C9luC9heC9tOC8i+C9guC9heC9suC9guC8i+C9lF/gvZ/gvrPgvIvgvZbgvIvgvZbgvYXgvbTgvIvgvYLgvYngvbLgvabgvIvgvZQnLnNwbGl0KCdfJyksXG4gICAgbW9udGhzU2hvcnQgOiAn4L2f4L6z4LyL4L2W4LyL4L2R4L2E4LyL4L2U4L28X+C9n+C+s+C8i+C9luC8i+C9guC9ieC9suC9puC8i+C9lF/gvZ/gvrPgvIvgvZbgvIvgvYLgvabgvbTgvZjgvIvgvZRf4L2f4L6z4LyL4L2W4LyL4L2W4L2e4L2y4LyL4L2UX+C9n+C+s+C8i+C9luC8i+C9o+C+lOC8i+C9lF/gvZ/gvrPgvIvgvZbgvIvgvZHgvrLgvbTgvYLgvIvgvZRf4L2f4L6z4LyL4L2W4LyL4L2W4L2R4L204L2T4LyL4L2UX+C9n+C+s+C8i+C9luC8i+C9luC9ouC+kuC+seC9keC8i+C9lF/gvZ/gvrPgvIvgvZbgvIvgvZHgvYLgvbTgvIvgvZRf4L2f4L6z4LyL4L2W4LyL4L2W4L2F4L204LyL4L2UX+C9n+C+s+C8i+C9luC8i+C9luC9heC9tOC8i+C9guC9heC9suC9guC8i+C9lF/gvZ/gvrPgvIvgvZbgvIvgvZbgvYXgvbTgvIvgvYLgvYngvbLgvabgvIvgvZQnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXMgOiAn4L2C4L2f4L2g4LyL4L2J4L2y4LyL4L2Y4LyLX+C9guC9n+C9oOC8i+C9n+C+s+C8i+C9luC8i1/gvYLgvZ/gvaDgvIvgvZjgvbLgvYLgvIvgvZHgvZjgvaLgvItf4L2C4L2f4L2g4LyL4L2j4L634L2C4LyL4L2U4LyLX+C9guC9n+C9oOC8i+C9leC9tOC9ouC8i+C9luC9tF/gvYLgvZ/gvaDgvIvgvZTgvIvgvabgvYTgvabgvItf4L2C4L2f4L2g4LyL4L2m4L6k4L264L2T4LyL4L2U4LyLJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzU2hvcnQgOiAn4L2J4L2y4LyL4L2Y4LyLX+C9n+C+s+C8i+C9luC8i1/gvZjgvbLgvYLgvIvgvZHgvZjgvaLgvItf4L2j4L634L2C4LyL4L2U4LyLX+C9leC9tOC9ouC8i+C9luC9tF/gvZTgvIvgvabgvYTgvabgvItf4L2m4L6k4L264L2T4LyL4L2U4LyLJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzTWluIDogJ+C9ieC9suC8i+C9mOC8i1/gvZ/gvrPgvIvgvZbgvItf4L2Y4L2y4L2C4LyL4L2R4L2Y4L2i4LyLX+C9o+C+t+C9guC8i+C9lOC8i1/gvZXgvbTgvaLgvIvgvZbgvbRf4L2U4LyL4L2m4L2E4L2m4LyLX+C9puC+pOC9uuC9k+C8i+C9lOC8iycuc3BsaXQoJ18nKSxcbiAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgTFQgOiAnQSBoOm1tJyxcbiAgICAgICAgTFRTIDogJ0EgaDptbTpzcycsXG4gICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZLCBBIGg6bW0nLFxuICAgICAgICBMTExMIDogJ2RkZGQsIEQgTU1NTSBZWVlZLCBBIGg6bW0nXG4gICAgfSxcbiAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgc2FtZURheSA6ICdb4L2R4L2y4LyL4L2i4L2y4L2EXSBMVCcsXG4gICAgICAgIG5leHREYXkgOiAnW+C9puC9hOC8i+C9ieC9suC9k10gTFQnLFxuICAgICAgICBuZXh0V2VlayA6ICdb4L2W4L2R4L204L2T4LyL4L2V4L6y4L2C4LyL4L2i4L6X4L264L2m4LyL4L2YXSwgTFQnLFxuICAgICAgICBsYXN0RGF5IDogJ1vgvYHgvIvgvabgvYRdIExUJyxcbiAgICAgICAgbGFzdFdlZWsgOiAnW+C9luC9keC9tOC9k+C8i+C9leC+suC9guC8i+C9mOC9kOC9oOC8i+C9mF0gZGRkZCwgTFQnLFxuICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgIH0sXG4gICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICBmdXR1cmUgOiAnJXMg4L2j4LyLJyxcbiAgICAgICAgcGFzdCA6ICclcyDgvabgvpTgvZPgvIvgvaMnLFxuICAgICAgICBzIDogJ+C9o+C9mOC8i+C9puC9hCcsXG4gICAgICAgIG0gOiAn4L2m4L6Q4L2i4LyL4L2Y4LyL4L2C4L2F4L2y4L2CJyxcbiAgICAgICAgbW0gOiAnJWQg4L2m4L6Q4L2i4LyL4L2YJyxcbiAgICAgICAgaCA6ICfgvYbgvbTgvIvgvZrgvbzgvZHgvIvgvYLgvYXgvbLgvYInLFxuICAgICAgICBoaCA6ICclZCDgvYbgvbTgvIvgvZrgvbzgvZEnLFxuICAgICAgICBkIDogJ+C9ieC9suC9k+C8i+C9guC9heC9suC9gicsXG4gICAgICAgIGRkIDogJyVkIOC9ieC9suC9k+C8iycsXG4gICAgICAgIE0gOiAn4L2f4L6z4LyL4L2W4LyL4L2C4L2F4L2y4L2CJyxcbiAgICAgICAgTU0gOiAnJWQg4L2f4L6z4LyL4L2WJyxcbiAgICAgICAgeSA6ICfgvaPgvbzgvIvgvYLgvYXgvbLgvYInLFxuICAgICAgICB5eSA6ICclZCDgvaPgvbwnXG4gICAgfSxcbiAgICBwcmVwYXJzZTogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1vgvKHgvKLgvKPgvKTgvKXgvKbgvKfgvKjgvKngvKBdL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlck1hcFttYXRjaF07XG4gICAgICAgIH0pO1xuICAgIH0sXG4gICAgcG9zdGZvcm1hdDogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1xcZC9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgIHJldHVybiBzeW1ib2xNYXBbbWF0Y2hdO1xuICAgICAgICB9KTtcbiAgICB9LFxuICAgIG1lcmlkaWVtUGFyc2U6IC/gvZjgvZrgvZPgvIvgvZjgvbx84L2e4L284L2C4L2m4LyL4L2A4L2mfOC9ieC9suC9k+C8i+C9guC9tOC9hHzgvZHgvYLgvbzgvYTgvIvgvZHgvYJ84L2Y4L2a4L2T4LyL4L2Y4L28LyxcbiAgICBtZXJpZGllbUhvdXIgOiBmdW5jdGlvbiAoaG91ciwgbWVyaWRpZW0pIHtcbiAgICAgICAgaWYgKGhvdXIgPT09IDEyKSB7XG4gICAgICAgICAgICBob3VyID0gMDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKG1lcmlkaWVtID09PSAn4L2Y4L2a4L2T4LyL4L2Y4L28JyAmJiBob3VyID49IDQpIHx8XG4gICAgICAgICAgICAgICAgKG1lcmlkaWVtID09PSAn4L2J4L2y4L2T4LyL4L2C4L204L2EJyAmJiBob3VyIDwgNSkgfHxcbiAgICAgICAgICAgICAgICBtZXJpZGllbSA9PT0gJ+C9keC9guC9vOC9hOC8i+C9keC9gicpIHtcbiAgICAgICAgICAgIHJldHVybiBob3VyICsgMTI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gaG91cjtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgbWVyaWRpZW0gOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgIGlmIChob3VyIDwgNCkge1xuICAgICAgICAgICAgcmV0dXJuICfgvZjgvZrgvZPgvIvgvZjgvbwnO1xuICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxMCkge1xuICAgICAgICAgICAgcmV0dXJuICfgvZ7gvbzgvYLgvabgvIvgvYDgvaYnO1xuICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxNykge1xuICAgICAgICAgICAgcmV0dXJuICfgvYngvbLgvZPgvIvgvYLgvbTgvYQnO1xuICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAyMCkge1xuICAgICAgICAgICAgcmV0dXJuICfgvZHgvYLgvbzgvYTgvIvgvZHgvYInO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuICfgvZjgvZrgvZPgvIvgvZjgvbwnO1xuICAgICAgICB9XG4gICAgfSxcbiAgICB3ZWVrIDoge1xuICAgICAgICBkb3cgOiAwLCAvLyBTdW5kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgZG95IDogNiAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gMXN0IGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgIH1cbn0pO1xuXG5yZXR1cm4gYm87XG5cbn0pKSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9iby5qcyIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBCcmV0b24gW2JyXVxuLy8hIGF1dGhvciA6IEplYW4tQmFwdGlzdGUgTGUgRHVpZ291IDogaHR0cHM6Ly9naXRodWIuY29tL2pibGVkdWlnb3VcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG5mdW5jdGlvbiByZWxhdGl2ZVRpbWVXaXRoTXV0YXRpb24obnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXkpIHtcbiAgICB2YXIgZm9ybWF0ID0ge1xuICAgICAgICAnbW0nOiAnbXVudXRlbm4nLFxuICAgICAgICAnTU0nOiAnbWl6JyxcbiAgICAgICAgJ2RkJzogJ2RldmV6aCdcbiAgICB9O1xuICAgIHJldHVybiBudW1iZXIgKyAnICcgKyBtdXRhdGlvbihmb3JtYXRba2V5XSwgbnVtYmVyKTtcbn1cbmZ1bmN0aW9uIHNwZWNpYWxNdXRhdGlvbkZvclllYXJzKG51bWJlcikge1xuICAgIHN3aXRjaCAobGFzdE51bWJlcihudW1iZXIpKSB7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgY2FzZSAzOlxuICAgICAgICBjYXNlIDQ6XG4gICAgICAgIGNhc2UgNTpcbiAgICAgICAgY2FzZSA5OlxuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICcgYmxvYXonO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICcgdmxvYXonO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGxhc3ROdW1iZXIobnVtYmVyKSB7XG4gICAgaWYgKG51bWJlciA+IDkpIHtcbiAgICAgICAgcmV0dXJuIGxhc3ROdW1iZXIobnVtYmVyICUgMTApO1xuICAgIH1cbiAgICByZXR1cm4gbnVtYmVyO1xufVxuZnVuY3Rpb24gbXV0YXRpb24odGV4dCwgbnVtYmVyKSB7XG4gICAgaWYgKG51bWJlciA9PT0gMikge1xuICAgICAgICByZXR1cm4gc29mdE11dGF0aW9uKHRleHQpO1xuICAgIH1cbiAgICByZXR1cm4gdGV4dDtcbn1cbmZ1bmN0aW9uIHNvZnRNdXRhdGlvbih0ZXh0KSB7XG4gICAgdmFyIG11dGF0aW9uVGFibGUgPSB7XG4gICAgICAgICdtJzogJ3YnLFxuICAgICAgICAnYic6ICd2JyxcbiAgICAgICAgJ2QnOiAneidcbiAgICB9O1xuICAgIGlmIChtdXRhdGlvblRhYmxlW3RleHQuY2hhckF0KDApXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiB0ZXh0O1xuICAgIH1cbiAgICByZXR1cm4gbXV0YXRpb25UYWJsZVt0ZXh0LmNoYXJBdCgwKV0gKyB0ZXh0LnN1YnN0cmluZygxKTtcbn1cblxudmFyIGJyID0gbW9tZW50LmRlZmluZUxvY2FsZSgnYnInLCB7XG4gICAgbW9udGhzIDogJ0dlbnZlcl9DXFwnaHdldnJlcl9NZXVyemhfRWJyZWxfTWFlX01lemhldmVuX0dvdWVyZV9Fb3N0X0d3ZW5nb2xvX0hlcmVfRHVfS2VyenUnLnNwbGl0KCdfJyksXG4gICAgbW9udGhzU2hvcnQgOiAnR2VuX0NcXCdod2VfTWV1X0Vicl9NYWVfRXZlX0dvdV9Fb3NfR3dlX0hlcl9EdV9LZXInLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXMgOiAnU3VsX0x1bl9NZXVyemhfTWVyY1xcJ2hlcl9ZYW91X0d3ZW5lcl9TYWRvcm4nLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNTaG9ydCA6ICdTdWxfTHVuX01ldV9NZXJfWWFvX0d3ZV9TYWQnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNNaW4gOiAnU3VfTHVfTWVfTWVyX1lhX0d3X1NhJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgIExUIDogJ2hbZV1tbSBBJyxcbiAgICAgICAgTFRTIDogJ2hbZV1tbTpzcyBBJyxcbiAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgTEwgOiAnRCBbYSB2aXpdIE1NTU0gWVlZWScsXG4gICAgICAgIExMTCA6ICdEIFthIHZpel0gTU1NTSBZWVlZIGhbZV1tbSBBJyxcbiAgICAgICAgTExMTCA6ICdkZGRkLCBEIFthIHZpel0gTU1NTSBZWVlZIGhbZV1tbSBBJ1xuICAgIH0sXG4gICAgY2FsZW5kYXIgOiB7XG4gICAgICAgIHNhbWVEYXkgOiAnW0hpeml2IGRhXSBMVCcsXG4gICAgICAgIG5leHREYXkgOiAnW1dhcmNcXCdob2F6aCBkYV0gTFQnLFxuICAgICAgICBuZXh0V2VlayA6ICdkZGRkIFtkYV0gTFQnLFxuICAgICAgICBsYXN0RGF5IDogJ1tEZWNcXCdoIGRhXSBMVCcsXG4gICAgICAgIGxhc3RXZWVrIDogJ2RkZGQgW3Bhc2V0IGRhXSBMVCcsXG4gICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgfSxcbiAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgIGZ1dHVyZSA6ICdhLWJlbm4gJXMnLFxuICAgICAgICBwYXN0IDogJyVzIFxcJ3pvJyxcbiAgICAgICAgcyA6ICd1biBuZWJldWQgc2Vnb25kZW5ub8O5JyxcbiAgICAgICAgbSA6ICd1ciB2dW51dGVubicsXG4gICAgICAgIG1tIDogcmVsYXRpdmVUaW1lV2l0aE11dGF0aW9uLFxuICAgICAgICBoIDogJ3VuIGV1cicsXG4gICAgICAgIGhoIDogJyVkIGV1cicsXG4gICAgICAgIGQgOiAndW4gZGV2ZXpoJyxcbiAgICAgICAgZGQgOiByZWxhdGl2ZVRpbWVXaXRoTXV0YXRpb24sXG4gICAgICAgIE0gOiAndXIgbWl6JyxcbiAgICAgICAgTU0gOiByZWxhdGl2ZVRpbWVXaXRoTXV0YXRpb24sXG4gICAgICAgIHkgOiAndXIgYmxvYXonLFxuICAgICAgICB5eSA6IHNwZWNpYWxNdXRhdGlvbkZvclllYXJzXG4gICAgfSxcbiAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0oYcOxfHZldCkvLFxuICAgIG9yZGluYWwgOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgIHZhciBvdXRwdXQgPSAobnVtYmVyID09PSAxKSA/ICdhw7EnIDogJ3ZldCc7XG4gICAgICAgIHJldHVybiBudW1iZXIgKyBvdXRwdXQ7XG4gICAgfSxcbiAgICB3ZWVrIDoge1xuICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgZG95IDogNCAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgIH1cbn0pO1xuXG5yZXR1cm4gYnI7XG5cbn0pKSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9ici5qcyIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBCb3NuaWFuIFtic11cbi8vISBhdXRob3IgOiBOZWRpbSBDaG9saWNoIDogaHR0cHM6Ly9naXRodWIuY29tL2Zyb250eWFyZFxuLy8hIGJhc2VkIG9uIChocikgdHJhbnNsYXRpb24gYnkgQm9qYW4gTWFya292acSHXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuZnVuY3Rpb24gdHJhbnNsYXRlKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5KSB7XG4gICAgdmFyIHJlc3VsdCA9IG51bWJlciArICcgJztcbiAgICBzd2l0Y2ggKGtleSkge1xuICAgICAgICBjYXNlICdtJzpcbiAgICAgICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4ID8gJ2plZG5hIG1pbnV0YScgOiAnamVkbmUgbWludXRlJztcbiAgICAgICAgY2FzZSAnbW0nOlxuICAgICAgICAgICAgaWYgKG51bWJlciA9PT0gMSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnbWludXRhJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobnVtYmVyID09PSAyIHx8IG51bWJlciA9PT0gMyB8fCBudW1iZXIgPT09IDQpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ21pbnV0ZSc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnbWludXRhJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIGNhc2UgJ2gnOlxuICAgICAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggPyAnamVkYW4gc2F0JyA6ICdqZWRub2cgc2F0YSc7XG4gICAgICAgIGNhc2UgJ2hoJzpcbiAgICAgICAgICAgIGlmIChudW1iZXIgPT09IDEpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ3NhdCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG51bWJlciA9PT0gMiB8fCBudW1iZXIgPT09IDMgfHwgbnVtYmVyID09PSA0KSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdzYXRhJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdzYXRpJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIGNhc2UgJ2RkJzpcbiAgICAgICAgICAgIGlmIChudW1iZXIgPT09IDEpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ2Rhbic7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnZGFuYSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICBjYXNlICdNTSc6XG4gICAgICAgICAgICBpZiAobnVtYmVyID09PSAxKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdtamVzZWMnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChudW1iZXIgPT09IDIgfHwgbnVtYmVyID09PSAzIHx8IG51bWJlciA9PT0gNCkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnbWplc2VjYSc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnbWplc2VjaSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICBjYXNlICd5eSc6XG4gICAgICAgICAgICBpZiAobnVtYmVyID09PSAxKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdnb2RpbmEnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChudW1iZXIgPT09IDIgfHwgbnVtYmVyID09PSAzIHx8IG51bWJlciA9PT0gNCkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnZ29kaW5lJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdnb2RpbmEnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59XG5cbnZhciBicyA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2JzJywge1xuICAgIG1vbnRocyA6ICdqYW51YXJfZmVicnVhcl9tYXJ0X2FwcmlsX21hal9qdW5pX2p1bGlfYXVndXN0X3NlcHRlbWJhcl9va3RvYmFyX25vdmVtYmFyX2RlY2VtYmFyJy5zcGxpdCgnXycpLFxuICAgIG1vbnRoc1Nob3J0IDogJ2phbi5fZmViLl9tYXIuX2Fwci5fbWFqLl9qdW4uX2p1bC5fYXVnLl9zZXAuX29rdC5fbm92Ll9kZWMuJy5zcGxpdCgnXycpLFxuICAgIG1vbnRoc1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgd2Vla2RheXMgOiAnbmVkamVsamFfcG9uZWRqZWxqYWtfdXRvcmFrX3NyaWplZGFfxI1ldHZydGFrX3BldGFrX3N1Ym90YScuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1Nob3J0IDogJ25lZC5fcG9uLl91dG8uX3NyaS5fxI1ldC5fcGV0Ll9zdWIuJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzTWluIDogJ25lX3BvX3V0X3NyX8SNZV9wZV9zdScuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICBMVCA6ICdIOm1tJyxcbiAgICAgICAgTFRTIDogJ0g6bW06c3MnLFxuICAgICAgICBMIDogJ0RELk1NLllZWVknLFxuICAgICAgICBMTCA6ICdELiBNTU1NIFlZWVknLFxuICAgICAgICBMTEwgOiAnRC4gTU1NTSBZWVlZIEg6bW0nLFxuICAgICAgICBMTExMIDogJ2RkZGQsIEQuIE1NTU0gWVlZWSBIOm1tJ1xuICAgIH0sXG4gICAgY2FsZW5kYXIgOiB7XG4gICAgICAgIHNhbWVEYXkgIDogJ1tkYW5hcyB1XSBMVCcsXG4gICAgICAgIG5leHREYXkgIDogJ1tzdXRyYSB1XSBMVCcsXG4gICAgICAgIG5leHRXZWVrIDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgc3dpdGNoICh0aGlzLmRheSgpKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t1XSBbbmVkamVsanVdIFt1XSBMVCc7XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t1XSBbc3JpamVkdV0gW3VdIExUJztcbiAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3VdIFtzdWJvdHVdIFt1XSBMVCc7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t1XSBkZGRkIFt1XSBMVCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGxhc3REYXkgIDogJ1tqdcSNZXIgdV0gTFQnLFxuICAgICAgICBsYXN0V2VlayA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHN3aXRjaCAodGhpcy5kYXkoKSkge1xuICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3Byb8WhbHVdIGRkZGQgW3VdIExUJztcbiAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3Byb8WhbGVdIFtzdWJvdGVdIFt1XSBMVCc7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1twcm/FoWxpXSBkZGRkIFt1XSBMVCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgfSxcbiAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgIGZ1dHVyZSA6ICd6YSAlcycsXG4gICAgICAgIHBhc3QgICA6ICdwcmlqZSAlcycsXG4gICAgICAgIHMgICAgICA6ICdwYXIgc2VrdW5kaScsXG4gICAgICAgIG0gICAgICA6IHRyYW5zbGF0ZSxcbiAgICAgICAgbW0gICAgIDogdHJhbnNsYXRlLFxuICAgICAgICBoICAgICAgOiB0cmFuc2xhdGUsXG4gICAgICAgIGhoICAgICA6IHRyYW5zbGF0ZSxcbiAgICAgICAgZCAgICAgIDogJ2RhbicsXG4gICAgICAgIGRkICAgICA6IHRyYW5zbGF0ZSxcbiAgICAgICAgTSAgICAgIDogJ21qZXNlYycsXG4gICAgICAgIE1NICAgICA6IHRyYW5zbGF0ZSxcbiAgICAgICAgeSAgICAgIDogJ2dvZGludScsXG4gICAgICAgIHl5ICAgICA6IHRyYW5zbGF0ZVxuICAgIH0sXG4gICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9XFwuLyxcbiAgICBvcmRpbmFsIDogJyVkLicsXG4gICAgd2VlayA6IHtcbiAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgIGRveSA6IDcgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDFzdCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICB9XG59KTtcblxucmV0dXJuIGJzO1xuXG59KSkpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvYnMuanMiLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogQ2F0YWxhbiBbY2FdXG4vLyEgYXV0aG9yIDogSnVhbiBHLiBIdXJ0YWRvIDogaHR0cHM6Ly9naXRodWIuY29tL2p1YW5naHVydGFkb1xuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciBjYSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2NhJywge1xuICAgIG1vbnRocyA6IHtcbiAgICAgICAgc3RhbmRhbG9uZTogJ2dlbmVyX2ZlYnJlcl9tYXLDp19hYnJpbF9tYWlnX2p1bnlfanVsaW9sX2Fnb3N0X3NldGVtYnJlX29jdHVicmVfbm92ZW1icmVfZGVzZW1icmUnLnNwbGl0KCdfJyksXG4gICAgICAgIGZvcm1hdDogJ2RlIGdlbmVyX2RlIGZlYnJlcl9kZSBtYXLDp19kXFwnYWJyaWxfZGUgbWFpZ19kZSBqdW55X2RlIGp1bGlvbF9kXFwnYWdvc3RfZGUgc2V0ZW1icmVfZFxcJ29jdHVicmVfZGUgbm92ZW1icmVfZGUgZGVzZW1icmUnLnNwbGl0KCdfJyksXG4gICAgICAgIGlzRm9ybWF0OiAvRFtvRF0/KFxccykrTU1NTS9cbiAgICB9LFxuICAgIG1vbnRoc1Nob3J0IDogJ2dlbi5fZmVici5fbWFyw6dfYWJyLl9tYWlnX2p1bnlfanVsLl9hZy5fc2V0Ll9vY3QuX25vdi5fZGVzLicuc3BsaXQoJ18nKSxcbiAgICBtb250aHNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICB3ZWVrZGF5cyA6ICdkaXVtZW5nZV9kaWxsdW5zX2RpbWFydHNfZGltZWNyZXNfZGlqb3VzX2RpdmVuZHJlc19kaXNzYWJ0ZScuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1Nob3J0IDogJ2RnLl9kbC5fZHQuX2RjLl9kai5fZHYuX2RzLicuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c01pbiA6ICdkZ19kbF9kdF9kY19kal9kdl9kcycuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICBMVCA6ICdIOm1tJyxcbiAgICAgICAgTFRTIDogJ0g6bW06c3MnLFxuICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICBMTCA6ICdEIE1NTU0gW2RlXSBZWVlZJyxcbiAgICAgICAgbGwgOiAnRCBNTU0gWVlZWScsXG4gICAgICAgIExMTCA6ICdEIE1NTU0gW2RlXSBZWVlZIFthIGxlc10gSDptbScsXG4gICAgICAgIGxsbCA6ICdEIE1NTSBZWVlZLCBIOm1tJyxcbiAgICAgICAgTExMTCA6ICdkZGRkIEQgTU1NTSBbZGVdIFlZWVkgW2EgbGVzXSBIOm1tJyxcbiAgICAgICAgbGxsbCA6ICdkZGQgRCBNTU0gWVlZWSwgSDptbSdcbiAgICB9LFxuICAgIGNhbGVuZGFyIDoge1xuICAgICAgICBzYW1lRGF5IDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuICdbYXZ1aSBhICcgKyAoKHRoaXMuaG91cnMoKSAhPT0gMSkgPyAnbGVzJyA6ICdsYScpICsgJ10gTFQnO1xuICAgICAgICB9LFxuICAgICAgICBuZXh0RGF5IDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuICdbZGVtw6AgYSAnICsgKCh0aGlzLmhvdXJzKCkgIT09IDEpID8gJ2xlcycgOiAnbGEnKSArICddIExUJztcbiAgICAgICAgfSxcbiAgICAgICAgbmV4dFdlZWsgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gJ2RkZGQgW2EgJyArICgodGhpcy5ob3VycygpICE9PSAxKSA/ICdsZXMnIDogJ2xhJykgKyAnXSBMVCc7XG4gICAgICAgIH0sXG4gICAgICAgIGxhc3REYXkgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gJ1thaGlyIGEgJyArICgodGhpcy5ob3VycygpICE9PSAxKSA/ICdsZXMnIDogJ2xhJykgKyAnXSBMVCc7XG4gICAgICAgIH0sXG4gICAgICAgIGxhc3RXZWVrIDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuICdbZWxdIGRkZGQgW3Bhc3NhdCBhICcgKyAoKHRoaXMuaG91cnMoKSAhPT0gMSkgPyAnbGVzJyA6ICdsYScpICsgJ10gTFQnO1xuICAgICAgICB9LFxuICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgIH0sXG4gICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICBmdXR1cmUgOiAnZFxcJ2FxdcOtICVzJyxcbiAgICAgICAgcGFzdCA6ICdmYSAlcycsXG4gICAgICAgIHMgOiAndW5zIHNlZ29ucycsXG4gICAgICAgIG0gOiAndW4gbWludXQnLFxuICAgICAgICBtbSA6ICclZCBtaW51dHMnLFxuICAgICAgICBoIDogJ3VuYSBob3JhJyxcbiAgICAgICAgaGggOiAnJWQgaG9yZXMnLFxuICAgICAgICBkIDogJ3VuIGRpYScsXG4gICAgICAgIGRkIDogJyVkIGRpZXMnLFxuICAgICAgICBNIDogJ3VuIG1lcycsXG4gICAgICAgIE1NIDogJyVkIG1lc29zJyxcbiAgICAgICAgeSA6ICd1biBhbnknLFxuICAgICAgICB5eSA6ICclZCBhbnlzJ1xuICAgIH0sXG4gICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9KHJ8bnx0fMOofGEpLyxcbiAgICBvcmRpbmFsIDogZnVuY3Rpb24gKG51bWJlciwgcGVyaW9kKSB7XG4gICAgICAgIHZhciBvdXRwdXQgPSAobnVtYmVyID09PSAxKSA/ICdyJyA6XG4gICAgICAgICAgICAobnVtYmVyID09PSAyKSA/ICduJyA6XG4gICAgICAgICAgICAobnVtYmVyID09PSAzKSA/ICdyJyA6XG4gICAgICAgICAgICAobnVtYmVyID09PSA0KSA/ICd0JyA6ICfDqCc7XG4gICAgICAgIGlmIChwZXJpb2QgPT09ICd3JyB8fCBwZXJpb2QgPT09ICdXJykge1xuICAgICAgICAgICAgb3V0cHV0ID0gJ2EnO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudW1iZXIgKyBvdXRwdXQ7XG4gICAgfSxcbiAgICB3ZWVrIDoge1xuICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgZG95IDogNCAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgIH1cbn0pO1xuXG5yZXR1cm4gY2E7XG5cbn0pKSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9jYS5qcyIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBDemVjaCBbY3NdXG4vLyEgYXV0aG9yIDogcGV0cmJlbGEgOiBodHRwczovL2dpdGh1Yi5jb20vcGV0cmJlbGFcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG52YXIgbW9udGhzID0gJ2xlZGVuX8O6bm9yX2LFmWV6ZW5fZHViZW5fa3bEm3Rlbl/EjWVydmVuX8SNZXJ2ZW5lY19zcnBlbl96w6HFmcOtX8WZw61qZW5fbGlzdG9wYWRfcHJvc2luZWMnLnNwbGl0KCdfJyk7XG52YXIgbW9udGhzU2hvcnQgPSAnbGVkX8O6bm9fYsWZZV9kdWJfa3bEm1/EjXZuX8SNdmNfc3JwX3rDocWZX8WZw61qX2xpc19wcm8nLnNwbGl0KCdfJyk7XG5mdW5jdGlvbiBwbHVyYWwobikge1xuICAgIHJldHVybiAobiA+IDEpICYmIChuIDwgNSkgJiYgKH5+KG4gLyAxMCkgIT09IDEpO1xufVxuZnVuY3Rpb24gdHJhbnNsYXRlKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5LCBpc0Z1dHVyZSkge1xuICAgIHZhciByZXN1bHQgPSBudW1iZXIgKyAnICc7XG4gICAgc3dpdGNoIChrZXkpIHtcbiAgICAgICAgY2FzZSAncyc6ICAvLyBhIGZldyBzZWNvbmRzIC8gaW4gYSBmZXcgc2Vjb25kcyAvIGEgZmV3IHNlY29uZHMgYWdvXG4gICAgICAgICAgICByZXR1cm4gKHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUpID8gJ3DDoXIgc2VrdW5kJyA6ICdww6FyIHNla3VuZGFtaSc7XG4gICAgICAgIGNhc2UgJ20nOiAgLy8gYSBtaW51dGUgLyBpbiBhIG1pbnV0ZSAvIGEgbWludXRlIGFnb1xuICAgICAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggPyAnbWludXRhJyA6IChpc0Z1dHVyZSA/ICdtaW51dHUnIDogJ21pbnV0b3UnKTtcbiAgICAgICAgY2FzZSAnbW0nOiAvLyA5IG1pbnV0ZXMgLyBpbiA5IG1pbnV0ZXMgLyA5IG1pbnV0ZXMgYWdvXG4gICAgICAgICAgICBpZiAod2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAocGx1cmFsKG51bWJlcikgPyAnbWludXR5JyA6ICdtaW51dCcpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgJ21pbnV0YW1pJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdoJzogIC8vIGFuIGhvdXIgLyBpbiBhbiBob3VyIC8gYW4gaG91ciBhZ29cbiAgICAgICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4ID8gJ2hvZGluYScgOiAoaXNGdXR1cmUgPyAnaG9kaW51JyA6ICdob2Rpbm91Jyk7XG4gICAgICAgIGNhc2UgJ2hoJzogLy8gOSBob3VycyAvIGluIDkgaG91cnMgLyA5IGhvdXJzIGFnb1xuICAgICAgICAgICAgaWYgKHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgKHBsdXJhbChudW1iZXIpID8gJ2hvZGlueScgOiAnaG9kaW4nKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArICdob2RpbmFtaSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnZCc6ICAvLyBhIGRheSAvIGluIGEgZGF5IC8gYSBkYXkgYWdvXG4gICAgICAgICAgICByZXR1cm4gKHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUpID8gJ2RlbicgOiAnZG5lbSc7XG4gICAgICAgIGNhc2UgJ2RkJzogLy8gOSBkYXlzIC8gaW4gOSBkYXlzIC8gOSBkYXlzIGFnb1xuICAgICAgICAgICAgaWYgKHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgKHBsdXJhbChudW1iZXIpID8gJ2RueScgOiAnZG7DrScpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgJ2RueSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnTSc6ICAvLyBhIG1vbnRoIC8gaW4gYSBtb250aCAvIGEgbW9udGggYWdvXG4gICAgICAgICAgICByZXR1cm4gKHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUpID8gJ23Em3PDrWMnIDogJ23Em3PDrWNlbSc7XG4gICAgICAgIGNhc2UgJ01NJzogLy8gOSBtb250aHMgLyBpbiA5IG1vbnRocyAvIDkgbW9udGhzIGFnb1xuICAgICAgICAgICAgaWYgKHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgKHBsdXJhbChudW1iZXIpID8gJ23Em3PDrWNlJyA6ICdtxJtzw61jxa8nKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArICdtxJtzw61jaSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAneSc6ICAvLyBhIHllYXIgLyBpbiBhIHllYXIgLyBhIHllYXIgYWdvXG4gICAgICAgICAgICByZXR1cm4gKHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUpID8gJ3JvaycgOiAncm9rZW0nO1xuICAgICAgICBjYXNlICd5eSc6IC8vIDkgeWVhcnMgLyBpbiA5IHllYXJzIC8gOSB5ZWFycyBhZ29cbiAgICAgICAgICAgIGlmICh3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArIChwbHVyYWwobnVtYmVyKSA/ICdyb2t5JyA6ICdsZXQnKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArICdsZXR5JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgIH1cbn1cblxudmFyIGNzID0gbW9tZW50LmRlZmluZUxvY2FsZSgnY3MnLCB7XG4gICAgbW9udGhzIDogbW9udGhzLFxuICAgIG1vbnRoc1Nob3J0IDogbW9udGhzU2hvcnQsXG4gICAgbW9udGhzUGFyc2UgOiAoZnVuY3Rpb24gKG1vbnRocywgbW9udGhzU2hvcnQpIHtcbiAgICAgICAgdmFyIGksIF9tb250aHNQYXJzZSA9IFtdO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgMTI7IGkrKykge1xuICAgICAgICAgICAgLy8gdXNlIGN1c3RvbSBwYXJzZXIgdG8gc29sdmUgcHJvYmxlbSB3aXRoIEp1bHkgKMSNZXJ2ZW5lYylcbiAgICAgICAgICAgIF9tb250aHNQYXJzZVtpXSA9IG5ldyBSZWdFeHAoJ14nICsgbW9udGhzW2ldICsgJyR8XicgKyBtb250aHNTaG9ydFtpXSArICckJywgJ2knKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gX21vbnRoc1BhcnNlO1xuICAgIH0obW9udGhzLCBtb250aHNTaG9ydCkpLFxuICAgIHNob3J0TW9udGhzUGFyc2UgOiAoZnVuY3Rpb24gKG1vbnRoc1Nob3J0KSB7XG4gICAgICAgIHZhciBpLCBfc2hvcnRNb250aHNQYXJzZSA9IFtdO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgMTI7IGkrKykge1xuICAgICAgICAgICAgX3Nob3J0TW9udGhzUGFyc2VbaV0gPSBuZXcgUmVnRXhwKCdeJyArIG1vbnRoc1Nob3J0W2ldICsgJyQnLCAnaScpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBfc2hvcnRNb250aHNQYXJzZTtcbiAgICB9KG1vbnRoc1Nob3J0KSksXG4gICAgbG9uZ01vbnRoc1BhcnNlIDogKGZ1bmN0aW9uIChtb250aHMpIHtcbiAgICAgICAgdmFyIGksIF9sb25nTW9udGhzUGFyc2UgPSBbXTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IDEyOyBpKyspIHtcbiAgICAgICAgICAgIF9sb25nTW9udGhzUGFyc2VbaV0gPSBuZXcgUmVnRXhwKCdeJyArIG1vbnRoc1tpXSArICckJywgJ2knKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gX2xvbmdNb250aHNQYXJzZTtcbiAgICB9KG1vbnRocykpLFxuICAgIHdlZWtkYXlzIDogJ25lZMSbbGVfcG9uZMSbbMOtX8O6dGVyw71fc3TFmWVkYV/EjXR2cnRla19ww6F0ZWtfc29ib3RhJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzU2hvcnQgOiAnbmVfcG9fw7p0X3N0X8SNdF9ww6Ffc28nLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNNaW4gOiAnbmVfcG9fw7p0X3N0X8SNdF9ww6Ffc28nLnNwbGl0KCdfJyksXG4gICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgIExUOiAnSDptbScsXG4gICAgICAgIExUUyA6ICdIOm1tOnNzJyxcbiAgICAgICAgTCA6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgTEwgOiAnRC4gTU1NTSBZWVlZJyxcbiAgICAgICAgTExMIDogJ0QuIE1NTU0gWVlZWSBIOm1tJyxcbiAgICAgICAgTExMTCA6ICdkZGRkIEQuIE1NTU0gWVlZWSBIOm1tJyxcbiAgICAgICAgbCA6ICdELiBNLiBZWVlZJ1xuICAgIH0sXG4gICAgY2FsZW5kYXIgOiB7XG4gICAgICAgIHNhbWVEYXk6ICdbZG5lcyB2XSBMVCcsXG4gICAgICAgIG5leHREYXk6ICdbesOtdHJhIHZdIExUJyxcbiAgICAgICAgbmV4dFdlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHN3aXRjaCAodGhpcy5kYXkoKSkge1xuICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbdiBuZWTEm2xpIHZdIExUJztcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t2XSBkZGRkIFt2XSBMVCc7XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t2ZSBzdMWZZWR1IHZdIExUJztcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3ZlIMSNdHZydGVrIHZdIExUJztcbiAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3YgcMOhdGVrIHZdIExUJztcbiAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3Ygc29ib3R1IHZdIExUJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbGFzdERheTogJ1t2xI1lcmEgdl0gTFQnLFxuICAgICAgICBsYXN0V2VlazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgc3dpdGNoICh0aGlzLmRheSgpKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1ttaW51bG91IG5lZMSbbGkgdl0gTFQnO1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnW21pbnVsw6ldIGRkZGQgW3ZdIExUJztcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnW21pbnVsb3Ugc3TFmWVkdSB2XSBMVCc7XG4gICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbbWludWzDvV0gZGRkZCBbdl0gTFQnO1xuICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbbWludWxvdSBzb2JvdHUgdl0gTFQnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBzYW1lRWxzZTogJ0wnXG4gICAgfSxcbiAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgIGZ1dHVyZSA6ICd6YSAlcycsXG4gICAgICAgIHBhc3QgOiAncMWZZWQgJXMnLFxuICAgICAgICBzIDogdHJhbnNsYXRlLFxuICAgICAgICBtIDogdHJhbnNsYXRlLFxuICAgICAgICBtbSA6IHRyYW5zbGF0ZSxcbiAgICAgICAgaCA6IHRyYW5zbGF0ZSxcbiAgICAgICAgaGggOiB0cmFuc2xhdGUsXG4gICAgICAgIGQgOiB0cmFuc2xhdGUsXG4gICAgICAgIGRkIDogdHJhbnNsYXRlLFxuICAgICAgICBNIDogdHJhbnNsYXRlLFxuICAgICAgICBNTSA6IHRyYW5zbGF0ZSxcbiAgICAgICAgeSA6IHRyYW5zbGF0ZSxcbiAgICAgICAgeXkgOiB0cmFuc2xhdGVcbiAgICB9LFxuICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2UgOiAvXFxkezEsMn1cXC4vLFxuICAgIG9yZGluYWwgOiAnJWQuJyxcbiAgICB3ZWVrIDoge1xuICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgZG95IDogNCAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgIH1cbn0pO1xuXG5yZXR1cm4gY3M7XG5cbn0pKSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9jcy5qcyIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBDaHV2YXNoIFtjdl1cbi8vISBhdXRob3IgOiBBbmF0b2x5IE1pcm9ub3YgOiBodHRwczovL2dpdGh1Yi5jb20vbWlyb250b2xpXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxudmFyIGN2ID0gbW9tZW50LmRlZmluZUxvY2FsZSgnY3YnLCB7XG4gICAgbW9udGhzIDogJ9C605HRgNC70LDRh1/QvdCw0YDTkdGBX9C/0YPRiF/QsNC60LBf0LzQsNC5X9Kr05fRgNGC0LzQtV/Rg9GC05Ff0qvRg9GA0LvQsF/QsNCy05HQvV/RjtC/0LBf0YfTs9C6X9GA0LDRiNGC0LDQsicuc3BsaXQoJ18nKSxcbiAgICBtb250aHNTaG9ydCA6ICfQutOR0YBf0L3QsNGAX9C/0YPRiF/QsNC60LBf0LzQsNC5X9Kr05fRgF/Rg9GC05Ff0qvRg9GAX9Cw0LLQvV/RjtC/0LBf0YfTs9C6X9GA0LDRiCcuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5cyA6ICfQstGL0YDRgdCw0YDQvdC40LrRg9C9X9GC0YPQvdGC0LjQutGD0L1f0YvRgtC70LDRgNC40LrRg9C9X9GO0L3QutGD0L1f0LrTl9Kr0L3QtdGA0L3QuNC60YPQvV/RjdGA0L3QtdC60YPQvV/RiNOR0LzQsNGC0LrRg9C9Jy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzU2hvcnQgOiAn0LLRi9GAX9GC0YPQvV/Ri9GC0Ltf0Y7QvV/QutOX0qtf0Y3RgNC9X9GI05HQvCcuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c01pbiA6ICfQstGAX9GC0L1f0YvRgl/RjtC9X9C60qtf0Y3RgF/RiNC8Jy5zcGxpdCgnXycpLFxuICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgIEwgOiAnREQtTU0tWVlZWScsXG4gICAgICAgIExMIDogJ1lZWVkgW9Kr0YPQu9GF0LhdIE1NTU0gW9GD0LnTkdGF05fQvV0gRFst0LzTl9GI05ddJyxcbiAgICAgICAgTExMIDogJ1lZWVkgW9Kr0YPQu9GF0LhdIE1NTU0gW9GD0LnTkdGF05fQvV0gRFst0LzTl9GI05ddLCBISDptbScsXG4gICAgICAgIExMTEwgOiAnZGRkZCwgWVlZWSBb0qvRg9C70YXQuF0gTU1NTSBb0YPQudOR0YXTl9C9XSBEWy3QvNOX0YjTl10sIEhIOm1tJ1xuICAgIH0sXG4gICAgY2FsZW5kYXIgOiB7XG4gICAgICAgIHNhbWVEYXk6ICdb0J/QsNGP0L1dIExUIFvRgdC10YXQtdGC0YDQtV0nLFxuICAgICAgICBuZXh0RGF5OiAnW9Cr0YDQsNC9XSBMVCBb0YHQtdGF0LXRgtGA0LVdJyxcbiAgICAgICAgbGFzdERheTogJ1vTltC90LXRgF0gTFQgW9GB0LXRhdC10YLRgNC1XScsXG4gICAgICAgIG5leHRXZWVrOiAnW9Kq0LjRgtC10YFdIGRkZGQgTFQgW9GB0LXRhdC10YLRgNC1XScsXG4gICAgICAgIGxhc3RXZWVrOiAnW9CY0YDRgtC905ddIGRkZGQgTFQgW9GB0LXRhdC10YLRgNC1XScsXG4gICAgICAgIHNhbWVFbHNlOiAnTCdcbiAgICB9LFxuICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgZnV0dXJlIDogZnVuY3Rpb24gKG91dHB1dCkge1xuICAgICAgICAgICAgdmFyIGFmZml4ID0gL9GB0LXRhdC10YIkL2kuZXhlYyhvdXRwdXQpID8gJ9GA0LXQvScgOiAv0qvRg9C7JC9pLmV4ZWMob3V0cHV0KSA/ICfRgtCw0L0nIDogJ9GA0LDQvSc7XG4gICAgICAgICAgICByZXR1cm4gb3V0cHV0ICsgYWZmaXg7XG4gICAgICAgIH0sXG4gICAgICAgIHBhc3QgOiAnJXMg0LrQsNGP0LvQu9CwJyxcbiAgICAgICAgcyA6ICfQv9OX0YAt0LjQuiDSq9C10LrQutGD0L3RgicsXG4gICAgICAgIG0gOiAn0L/Tl9GAINC80LjQvdGD0YInLFxuICAgICAgICBtbSA6ICclZCDQvNC40L3Rg9GCJyxcbiAgICAgICAgaCA6ICfQv9OX0YAg0YHQtdGF0LXRgicsXG4gICAgICAgIGhoIDogJyVkINGB0LXRhdC10YInLFxuICAgICAgICBkIDogJ9C/05fRgCDQutGD0L0nLFxuICAgICAgICBkZCA6ICclZCDQutGD0L0nLFxuICAgICAgICBNIDogJ9C/05fRgCDRg9C505HRhScsXG4gICAgICAgIE1NIDogJyVkINGD0LnTkdGFJyxcbiAgICAgICAgeSA6ICfQv9OX0YAg0qvRg9C7JyxcbiAgICAgICAgeXkgOiAnJWQg0qvRg9C7J1xuICAgIH0sXG4gICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9LdC805fRiC8sXG4gICAgb3JkaW5hbCA6ICclZC3QvNOX0YgnLFxuICAgIHdlZWsgOiB7XG4gICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICBkb3kgOiA3ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiAxc3QgaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgfVxufSk7XG5cbnJldHVybiBjdjtcblxufSkpKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2N2LmpzIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IFdlbHNoIFtjeV1cbi8vISBhdXRob3IgOiBSb2JlcnQgQWxsZW4gOiBodHRwczovL2dpdGh1Yi5jb20vcm9iZ2FsbGVuXG4vLyEgYXV0aG9yIDogaHR0cHM6Ly9naXRodWIuY29tL3J5YW5ncmVhdmVzXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxudmFyIGN5ID0gbW9tZW50LmRlZmluZUxvY2FsZSgnY3knLCB7XG4gICAgbW9udGhzOiAnSW9uYXdyX0Nod2Vmcm9yX01hd3J0aF9FYnJpbGxfTWFpX01laGVmaW5fR29yZmZlbm5hZl9Bd3N0X01lZGlfSHlkcmVmX1RhY2h3ZWRkX1JoYWdmeXInLnNwbGl0KCdfJyksXG4gICAgbW9udGhzU2hvcnQ6ICdJb25fQ2h3ZV9NYXdfRWJyX01haV9NZWhfR29yX0F3c19NZWRfSHlkX1RhY2hfUmhhZycuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5czogJ0R5ZGQgU3VsX0R5ZGQgTGx1bl9EeWRkIE1hd3J0aF9EeWRkIE1lcmNoZXJfRHlkZCBJYXVfRHlkZCBHd2VuZXJfRHlkZCBTYWR3cm4nLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNTaG9ydDogJ1N1bF9MbHVuX01hd19NZXJfSWF1X0d3ZV9TYWQnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNNaW46ICdTdV9MbF9NYV9NZV9JYV9Hd19TYScuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgIC8vIHRpbWUgZm9ybWF0cyBhcmUgdGhlIHNhbWUgYXMgZW4tZ2JcbiAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICBMTExMOiAnZGRkZCwgRCBNTU1NIFlZWVkgSEg6bW0nXG4gICAgfSxcbiAgICBjYWxlbmRhcjoge1xuICAgICAgICBzYW1lRGF5OiAnW0hlZGRpdyBhbV0gTFQnLFxuICAgICAgICBuZXh0RGF5OiAnW1lmb3J5IGFtXSBMVCcsXG4gICAgICAgIG5leHRXZWVrOiAnZGRkZCBbYW1dIExUJyxcbiAgICAgICAgbGFzdERheTogJ1tEZG9lIGFtXSBMVCcsXG4gICAgICAgIGxhc3RXZWVrOiAnZGRkZCBbZGl3ZXRoYWYgYW1dIExUJyxcbiAgICAgICAgc2FtZUVsc2U6ICdMJ1xuICAgIH0sXG4gICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgIGZ1dHVyZTogJ21ld24gJXMnLFxuICAgICAgICBwYXN0OiAnJXMgeW4gw7RsJyxcbiAgICAgICAgczogJ3ljaHlkaWcgZWlsaWFkYXUnLFxuICAgICAgICBtOiAnbXVudWQnLFxuICAgICAgICBtbTogJyVkIG11bnVkJyxcbiAgICAgICAgaDogJ2F3cicsXG4gICAgICAgIGhoOiAnJWQgYXdyJyxcbiAgICAgICAgZDogJ2Rpd3Jub2QnLFxuICAgICAgICBkZDogJyVkIGRpd3Jub2QnLFxuICAgICAgICBNOiAnbWlzJyxcbiAgICAgICAgTU06ICclZCBtaXMnLFxuICAgICAgICB5OiAnYmx3eWRkeW4nLFxuICAgICAgICB5eTogJyVkIGZseW5lZGQnXG4gICAgfSxcbiAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0oZmVkfGFpbnxhZnxpbHx5ZGR8ZWR8ZWcpLyxcbiAgICAvLyB0cmFkaXRpb25hbCBvcmRpbmFsIG51bWJlcnMgYWJvdmUgMzEgYXJlIG5vdCBjb21tb25seSB1c2VkIGluIGNvbGxvcXVpYWwgV2Vsc2hcbiAgICBvcmRpbmFsOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgIHZhciBiID0gbnVtYmVyLFxuICAgICAgICAgICAgb3V0cHV0ID0gJycsXG4gICAgICAgICAgICBsb29rdXAgPSBbXG4gICAgICAgICAgICAgICAgJycsICdhZicsICdpbCcsICd5ZGQnLCAneWRkJywgJ2VkJywgJ2VkJywgJ2VkJywgJ2ZlZCcsICdmZWQnLCAnZmVkJywgLy8gMWFmIHRvIDEwZmVkXG4gICAgICAgICAgICAgICAgJ2VnJywgJ2ZlZCcsICdlZycsICdlZycsICdmZWQnLCAnZWcnLCAnZWcnLCAnZmVkJywgJ2VnJywgJ2ZlZCcgLy8gMTFlZyB0byAyMGZlZFxuICAgICAgICAgICAgXTtcbiAgICAgICAgaWYgKGIgPiAyMCkge1xuICAgICAgICAgICAgaWYgKGIgPT09IDQwIHx8IGIgPT09IDUwIHx8IGIgPT09IDYwIHx8IGIgPT09IDgwIHx8IGIgPT09IDEwMCkge1xuICAgICAgICAgICAgICAgIG91dHB1dCA9ICdmZWQnOyAvLyBub3QgMzBhaW4sIDcwYWluIG9yIDkwYWluXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG91dHB1dCA9ICdhaW4nO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGIgPiAwKSB7XG4gICAgICAgICAgICBvdXRwdXQgPSBsb29rdXBbYl07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bWJlciArIG91dHB1dDtcbiAgICB9LFxuICAgIHdlZWsgOiB7XG4gICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgfVxufSk7XG5cbnJldHVybiBjeTtcblxufSkpKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2N5LmpzIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IERhbmlzaCBbZGFdXG4vLyEgYXV0aG9yIDogVWxyaWsgTmllbHNlbiA6IGh0dHBzOi8vZ2l0aHViLmNvbS9tcmJhc2VcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG52YXIgZGEgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdkYScsIHtcbiAgICBtb250aHMgOiAnamFudWFyX2ZlYnJ1YXJfbWFydHNfYXByaWxfbWFqX2p1bmlfanVsaV9hdWd1c3Rfc2VwdGVtYmVyX29rdG9iZXJfbm92ZW1iZXJfZGVjZW1iZXInLnNwbGl0KCdfJyksXG4gICAgbW9udGhzU2hvcnQgOiAnamFuX2ZlYl9tYXJfYXByX21hal9qdW5fanVsX2F1Z19zZXBfb2t0X25vdl9kZWMnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXMgOiAnc8O4bmRhZ19tYW5kYWdfdGlyc2RhZ19vbnNkYWdfdG9yc2RhZ19mcmVkYWdfbMO4cmRhZycuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1Nob3J0IDogJ3PDuG5fbWFuX3Rpcl9vbnNfdG9yX2ZyZV9sw7hyJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzTWluIDogJ3PDuF9tYV90aV9vbl90b19mcl9sw7gnLnNwbGl0KCdfJyksXG4gICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgTCA6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgTEwgOiAnRC4gTU1NTSBZWVlZJyxcbiAgICAgICAgTExMIDogJ0QuIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgIExMTEwgOiAnZGRkZCBbZC5dIEQuIE1NTU0gWVlZWSBba2wuXSBISDptbSdcbiAgICB9LFxuICAgIGNhbGVuZGFyIDoge1xuICAgICAgICBzYW1lRGF5IDogJ1tpIGRhZyBrbC5dIExUJyxcbiAgICAgICAgbmV4dERheSA6ICdbaSBtb3JnZW4ga2wuXSBMVCcsXG4gICAgICAgIG5leHRXZWVrIDogJ3DDpSBkZGRkIFtrbC5dIExUJyxcbiAgICAgICAgbGFzdERheSA6ICdbaSBnw6VyIGtsLl0gTFQnLFxuICAgICAgICBsYXN0V2VlayA6ICdbaV0gZGRkZFtzIGtsLl0gTFQnLFxuICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgIH0sXG4gICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICBmdXR1cmUgOiAnb20gJXMnLFxuICAgICAgICBwYXN0IDogJyVzIHNpZGVuJyxcbiAgICAgICAgcyA6ICdmw6Ugc2VrdW5kZXInLFxuICAgICAgICBtIDogJ2V0IG1pbnV0JyxcbiAgICAgICAgbW0gOiAnJWQgbWludXR0ZXInLFxuICAgICAgICBoIDogJ2VuIHRpbWUnLFxuICAgICAgICBoaCA6ICclZCB0aW1lcicsXG4gICAgICAgIGQgOiAnZW4gZGFnJyxcbiAgICAgICAgZGQgOiAnJWQgZGFnZScsXG4gICAgICAgIE0gOiAnZW4gbcOlbmVkJyxcbiAgICAgICAgTU0gOiAnJWQgbcOlbmVkZXInLFxuICAgICAgICB5IDogJ2V0IMOlcicsXG4gICAgICAgIHl5IDogJyVkIMOlcidcbiAgICB9LFxuICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfVxcLi8sXG4gICAgb3JkaW5hbCA6ICclZC4nLFxuICAgIHdlZWsgOiB7XG4gICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgfVxufSk7XG5cbnJldHVybiBkYTtcblxufSkpKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2RhLmpzIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEdlcm1hbiBbZGVdXG4vLyEgYXV0aG9yIDogbGx1Y2hzIDogaHR0cHM6Ly9naXRodWIuY29tL2xsdWNoc1xuLy8hIGF1dGhvcjogTWVuZWxpb24gRWxlbnPDumxlOiBodHRwczovL2dpdGh1Yi5jb20vT2lyZVxuLy8hIGF1dGhvciA6IE1pa29sYWogRGFkZWxhIDogaHR0cHM6Ly9naXRodWIuY29tL21pazAxYWpcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG5mdW5jdGlvbiBwcm9jZXNzUmVsYXRpdmVUaW1lKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5LCBpc0Z1dHVyZSkge1xuICAgIHZhciBmb3JtYXQgPSB7XG4gICAgICAgICdtJzogWydlaW5lIE1pbnV0ZScsICdlaW5lciBNaW51dGUnXSxcbiAgICAgICAgJ2gnOiBbJ2VpbmUgU3R1bmRlJywgJ2VpbmVyIFN0dW5kZSddLFxuICAgICAgICAnZCc6IFsnZWluIFRhZycsICdlaW5lbSBUYWcnXSxcbiAgICAgICAgJ2RkJzogW251bWJlciArICcgVGFnZScsIG51bWJlciArICcgVGFnZW4nXSxcbiAgICAgICAgJ00nOiBbJ2VpbiBNb25hdCcsICdlaW5lbSBNb25hdCddLFxuICAgICAgICAnTU0nOiBbbnVtYmVyICsgJyBNb25hdGUnLCBudW1iZXIgKyAnIE1vbmF0ZW4nXSxcbiAgICAgICAgJ3knOiBbJ2VpbiBKYWhyJywgJ2VpbmVtIEphaHInXSxcbiAgICAgICAgJ3l5JzogW251bWJlciArICcgSmFocmUnLCBudW1iZXIgKyAnIEphaHJlbiddXG4gICAgfTtcbiAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCA/IGZvcm1hdFtrZXldWzBdIDogZm9ybWF0W2tleV1bMV07XG59XG5cbnZhciBkZSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2RlJywge1xuICAgIG1vbnRocyA6ICdKYW51YXJfRmVicnVhcl9Nw6Ryel9BcHJpbF9NYWlfSnVuaV9KdWxpX0F1Z3VzdF9TZXB0ZW1iZXJfT2t0b2Jlcl9Ob3ZlbWJlcl9EZXplbWJlcicuc3BsaXQoJ18nKSxcbiAgICBtb250aHNTaG9ydCA6ICdKYW4uX0ZlYi5fTcOkcnpfQXByLl9NYWlfSnVuaV9KdWxpX0F1Zy5fU2VwLl9Pa3QuX05vdi5fRGV6Licuc3BsaXQoJ18nKSxcbiAgICBtb250aHNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICB3ZWVrZGF5cyA6ICdTb25udGFnX01vbnRhZ19EaWVuc3RhZ19NaXR0d29jaF9Eb25uZXJzdGFnX0ZyZWl0YWdfU2Ftc3RhZycuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1Nob3J0IDogJ1NvLl9Nby5fRGkuX01pLl9Eby5fRnIuX1NhLicuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c01pbiA6ICdTb19Nb19EaV9NaV9Eb19Gcl9TYScuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICBMIDogJ0RELk1NLllZWVknLFxuICAgICAgICBMTCA6ICdELiBNTU1NIFlZWVknLFxuICAgICAgICBMTEwgOiAnRC4gTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgTExMTCA6ICdkZGRkLCBELiBNTU1NIFlZWVkgSEg6bW0nXG4gICAgfSxcbiAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgc2FtZURheTogJ1toZXV0ZSB1bV0gTFQgW1Vocl0nLFxuICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICBuZXh0RGF5OiAnW21vcmdlbiB1bV0gTFQgW1Vocl0nLFxuICAgICAgICBuZXh0V2VlazogJ2RkZGQgW3VtXSBMVCBbVWhyXScsXG4gICAgICAgIGxhc3REYXk6ICdbZ2VzdGVybiB1bV0gTFQgW1Vocl0nLFxuICAgICAgICBsYXN0V2VlazogJ1tsZXR6dGVuXSBkZGRkIFt1bV0gTFQgW1Vocl0nXG4gICAgfSxcbiAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgIGZ1dHVyZSA6ICdpbiAlcycsXG4gICAgICAgIHBhc3QgOiAndm9yICVzJyxcbiAgICAgICAgcyA6ICdlaW4gcGFhciBTZWt1bmRlbicsXG4gICAgICAgIG0gOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICBtbSA6ICclZCBNaW51dGVuJyxcbiAgICAgICAgaCA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgIGhoIDogJyVkIFN0dW5kZW4nLFxuICAgICAgICBkIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgZGQgOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICBNIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgTU0gOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICB5IDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgeXkgOiBwcm9jZXNzUmVsYXRpdmVUaW1lXG4gICAgfSxcbiAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn1cXC4vLFxuICAgIG9yZGluYWwgOiAnJWQuJyxcbiAgICB3ZWVrIDoge1xuICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgZG95IDogNCAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgIH1cbn0pO1xuXG5yZXR1cm4gZGU7XG5cbn0pKSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9kZS5qcyIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBHZXJtYW4gKEF1c3RyaWEpIFtkZS1hdF1cbi8vISBhdXRob3IgOiBsbHVjaHMgOiBodHRwczovL2dpdGh1Yi5jb20vbGx1Y2hzXG4vLyEgYXV0aG9yOiBNZW5lbGlvbiBFbGVuc8O6bGU6IGh0dHBzOi8vZ2l0aHViLmNvbS9PaXJlXG4vLyEgYXV0aG9yIDogTWFydGluIEdyb2xsZXIgOiBodHRwczovL2dpdGh1Yi5jb20vTWFkTUdcbi8vISBhdXRob3IgOiBNaWtvbGFqIERhZGVsYSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9taWswMWFqXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuZnVuY3Rpb24gcHJvY2Vzc1JlbGF0aXZlVGltZShudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGtleSwgaXNGdXR1cmUpIHtcbiAgICB2YXIgZm9ybWF0ID0ge1xuICAgICAgICAnbSc6IFsnZWluZSBNaW51dGUnLCAnZWluZXIgTWludXRlJ10sXG4gICAgICAgICdoJzogWydlaW5lIFN0dW5kZScsICdlaW5lciBTdHVuZGUnXSxcbiAgICAgICAgJ2QnOiBbJ2VpbiBUYWcnLCAnZWluZW0gVGFnJ10sXG4gICAgICAgICdkZCc6IFtudW1iZXIgKyAnIFRhZ2UnLCBudW1iZXIgKyAnIFRhZ2VuJ10sXG4gICAgICAgICdNJzogWydlaW4gTW9uYXQnLCAnZWluZW0gTW9uYXQnXSxcbiAgICAgICAgJ01NJzogW251bWJlciArICcgTW9uYXRlJywgbnVtYmVyICsgJyBNb25hdGVuJ10sXG4gICAgICAgICd5JzogWydlaW4gSmFocicsICdlaW5lbSBKYWhyJ10sXG4gICAgICAgICd5eSc6IFtudW1iZXIgKyAnIEphaHJlJywgbnVtYmVyICsgJyBKYWhyZW4nXVxuICAgIH07XG4gICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggPyBmb3JtYXRba2V5XVswXSA6IGZvcm1hdFtrZXldWzFdO1xufVxuXG52YXIgZGVBdCA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2RlLWF0Jywge1xuICAgIG1vbnRocyA6ICdKw6RubmVyX0ZlYnJ1YXJfTcOkcnpfQXByaWxfTWFpX0p1bmlfSnVsaV9BdWd1c3RfU2VwdGVtYmVyX09rdG9iZXJfTm92ZW1iZXJfRGV6ZW1iZXInLnNwbGl0KCdfJyksXG4gICAgbW9udGhzU2hvcnQgOiAnSsOkbi5fRmViLl9Nw6Ryel9BcHIuX01haV9KdW5pX0p1bGlfQXVnLl9TZXAuX09rdC5fTm92Ll9EZXouJy5zcGxpdCgnXycpLFxuICAgIG1vbnRoc1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgIHdlZWtkYXlzIDogJ1Nvbm50YWdfTW9udGFnX0RpZW5zdGFnX01pdHR3b2NoX0Rvbm5lcnN0YWdfRnJlaXRhZ19TYW1zdGFnJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzU2hvcnQgOiAnU28uX01vLl9EaS5fTWkuX0RvLl9Gci5fU2EuJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzTWluIDogJ1NvX01vX0RpX01pX0RvX0ZyX1NhJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgIEwgOiAnREQuTU0uWVlZWScsXG4gICAgICAgIExMIDogJ0QuIE1NTU0gWVlZWScsXG4gICAgICAgIExMTCA6ICdELiBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICBMTExMIDogJ2RkZGQsIEQuIE1NTU0gWVlZWSBISDptbSdcbiAgICB9LFxuICAgIGNhbGVuZGFyIDoge1xuICAgICAgICBzYW1lRGF5OiAnW2hldXRlIHVtXSBMVCBbVWhyXScsXG4gICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIG5leHREYXk6ICdbbW9yZ2VuIHVtXSBMVCBbVWhyXScsXG4gICAgICAgIG5leHRXZWVrOiAnZGRkZCBbdW1dIExUIFtVaHJdJyxcbiAgICAgICAgbGFzdERheTogJ1tnZXN0ZXJuIHVtXSBMVCBbVWhyXScsXG4gICAgICAgIGxhc3RXZWVrOiAnW2xldHp0ZW5dIGRkZGQgW3VtXSBMVCBbVWhyXSdcbiAgICB9LFxuICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgZnV0dXJlIDogJ2luICVzJyxcbiAgICAgICAgcGFzdCA6ICd2b3IgJXMnLFxuICAgICAgICBzIDogJ2VpbiBwYWFyIFNla3VuZGVuJyxcbiAgICAgICAgbSA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgIG1tIDogJyVkIE1pbnV0ZW4nLFxuICAgICAgICBoIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgaGggOiAnJWQgU3R1bmRlbicsXG4gICAgICAgIGQgOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICBkZCA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgIE0gOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICBNTSA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgIHkgOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICB5eSA6IHByb2Nlc3NSZWxhdGl2ZVRpbWVcbiAgICB9LFxuICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfVxcLi8sXG4gICAgb3JkaW5hbCA6ICclZC4nLFxuICAgIHdlZWsgOiB7XG4gICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgfVxufSk7XG5cbnJldHVybiBkZUF0O1xuXG59KSkpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZGUtYXQuanMiLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogR2VybWFuIChTd2l0emVybGFuZCkgW2RlLWNoXVxuLy8hIGF1dGhvciA6IHNzY2h1ZWxsZXIgOiBodHRwczovL2dpdGh1Yi5jb20vc3NjaHVlbGxlclxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbi8vIGJhc2VkIG9uOiBodHRwczovL3d3dy5iay5hZG1pbi5jaC9kb2t1bWVudGF0aW9uL3NwcmFjaGVuLzA0OTE1LzA1MDE2L2luZGV4Lmh0bWw/bGFuZz1kZSNcblxuZnVuY3Rpb24gcHJvY2Vzc1JlbGF0aXZlVGltZShudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGtleSwgaXNGdXR1cmUpIHtcbiAgICB2YXIgZm9ybWF0ID0ge1xuICAgICAgICAnbSc6IFsnZWluZSBNaW51dGUnLCAnZWluZXIgTWludXRlJ10sXG4gICAgICAgICdoJzogWydlaW5lIFN0dW5kZScsICdlaW5lciBTdHVuZGUnXSxcbiAgICAgICAgJ2QnOiBbJ2VpbiBUYWcnLCAnZWluZW0gVGFnJ10sXG4gICAgICAgICdkZCc6IFtudW1iZXIgKyAnIFRhZ2UnLCBudW1iZXIgKyAnIFRhZ2VuJ10sXG4gICAgICAgICdNJzogWydlaW4gTW9uYXQnLCAnZWluZW0gTW9uYXQnXSxcbiAgICAgICAgJ01NJzogW251bWJlciArICcgTW9uYXRlJywgbnVtYmVyICsgJyBNb25hdGVuJ10sXG4gICAgICAgICd5JzogWydlaW4gSmFocicsICdlaW5lbSBKYWhyJ10sXG4gICAgICAgICd5eSc6IFtudW1iZXIgKyAnIEphaHJlJywgbnVtYmVyICsgJyBKYWhyZW4nXVxuICAgIH07XG4gICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggPyBmb3JtYXRba2V5XVswXSA6IGZvcm1hdFtrZXldWzFdO1xufVxuXG52YXIgZGVDaCA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2RlLWNoJywge1xuICAgIG1vbnRocyA6ICdKYW51YXJfRmVicnVhcl9Nw6Ryel9BcHJpbF9NYWlfSnVuaV9KdWxpX0F1Z3VzdF9TZXB0ZW1iZXJfT2t0b2Jlcl9Ob3ZlbWJlcl9EZXplbWJlcicuc3BsaXQoJ18nKSxcbiAgICBtb250aHNTaG9ydCA6ICdKYW4uX0ZlYi5fTcOkcnpfQXByLl9NYWlfSnVuaV9KdWxpX0F1Zy5fU2VwLl9Pa3QuX05vdi5fRGV6Licuc3BsaXQoJ18nKSxcbiAgICBtb250aHNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICB3ZWVrZGF5cyA6ICdTb25udGFnX01vbnRhZ19EaWVuc3RhZ19NaXR0d29jaF9Eb25uZXJzdGFnX0ZyZWl0YWdfU2Ftc3RhZycuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1Nob3J0IDogJ1NvX01vX0RpX01pX0RvX0ZyX1NhJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzTWluIDogJ1NvX01vX0RpX01pX0RvX0ZyX1NhJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgIExUOiAnSEgubW0nLFxuICAgICAgICBMVFM6ICdISC5tbS5zcycsXG4gICAgICAgIEwgOiAnREQuTU0uWVlZWScsXG4gICAgICAgIExMIDogJ0QuIE1NTU0gWVlZWScsXG4gICAgICAgIExMTCA6ICdELiBNTU1NIFlZWVkgSEgubW0nLFxuICAgICAgICBMTExMIDogJ2RkZGQsIEQuIE1NTU0gWVlZWSBISC5tbSdcbiAgICB9LFxuICAgIGNhbGVuZGFyIDoge1xuICAgICAgICBzYW1lRGF5OiAnW2hldXRlIHVtXSBMVCBbVWhyXScsXG4gICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIG5leHREYXk6ICdbbW9yZ2VuIHVtXSBMVCBbVWhyXScsXG4gICAgICAgIG5leHRXZWVrOiAnZGRkZCBbdW1dIExUIFtVaHJdJyxcbiAgICAgICAgbGFzdERheTogJ1tnZXN0ZXJuIHVtXSBMVCBbVWhyXScsXG4gICAgICAgIGxhc3RXZWVrOiAnW2xldHp0ZW5dIGRkZGQgW3VtXSBMVCBbVWhyXSdcbiAgICB9LFxuICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgZnV0dXJlIDogJ2luICVzJyxcbiAgICAgICAgcGFzdCA6ICd2b3IgJXMnLFxuICAgICAgICBzIDogJ2VpbiBwYWFyIFNla3VuZGVuJyxcbiAgICAgICAgbSA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgIG1tIDogJyVkIE1pbnV0ZW4nLFxuICAgICAgICBoIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgaGggOiAnJWQgU3R1bmRlbicsXG4gICAgICAgIGQgOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICBkZCA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgIE0gOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICBNTSA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgIHkgOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICB5eSA6IHByb2Nlc3NSZWxhdGl2ZVRpbWVcbiAgICB9LFxuICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfVxcLi8sXG4gICAgb3JkaW5hbCA6ICclZC4nLFxuICAgIHdlZWsgOiB7XG4gICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgfVxufSk7XG5cbnJldHVybiBkZUNoO1xuXG59KSkpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZGUtY2guanMiLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogTWFsZGl2aWFuIFtkdl1cbi8vISBhdXRob3IgOiBKYXdpc2ggSGFtZWVkIDogaHR0cHM6Ly9naXRodWIuY29tL2phd2lzaFxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciBtb250aHMgPSBbXG4gICAgJ96W3qzegt6q3ofept6D3qknLFxuICAgICfeit6s3oTesN6D3qreh96m3oPeqScsXG4gICAgJ96J3qfeg96o3pfeqicsXG4gICAgJ96H3q3eld6w3oPeqd6N3qonLFxuICAgICfeid6tJyxcbiAgICAn3pbeq96C3rAnLFxuICAgICfelt6q3o3ept6H3qgnLFxuICAgICfeh96v3o7ept6Q3rDek96qJyxcbiAgICAn3pDerN6V3rDek96s3onesN6E3qbeg96qJyxcbiAgICAn3ofert6G3rDek96v3oTept6D3qonLFxuICAgICfegt6u3ojerN6J3rDehN6m3oPeqicsXG4gICAgJ96R3qjekN6s3onesN6E3qbeg96qJ1xuXTtcbnZhciB3ZWVrZGF5cyA9IFtcbiAgICAn3ofep96L3qjeh96w3ozepicsXG4gICAgJ96A3q/eid6mJyxcbiAgICAn3ofept6C3rDejt6n3oPepicsXG4gICAgJ96E3qrei96mJyxcbiAgICAn3oTeqt6D3qfekN6w3orept6M3qgnLFxuICAgICfegN6q3obeqt6D3qonLFxuICAgICfegN6u3oLeqN6A3qjeg96qJ1xuXTtcblxudmFyIGR2ID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZHYnLCB7XG4gICAgbW9udGhzIDogbW9udGhzLFxuICAgIG1vbnRoc1Nob3J0IDogbW9udGhzLFxuICAgIHdlZWtkYXlzIDogd2Vla2RheXMsXG4gICAgd2Vla2RheXNTaG9ydCA6IHdlZWtkYXlzLFxuICAgIHdlZWtkYXlzTWluIDogJ96H3qfei96oX96A3q/eid6mX96H3qbegt6wX96E3qrei96mX96E3qreg96nX96A3qreht6qX96A3q7egt6oJy5zcGxpdCgnXycpLFxuICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuXG4gICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgTCA6ICdEL00vWVlZWScsXG4gICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgTExMTCA6ICdkZGRkIEQgTU1NTSBZWVlZIEhIOm1tJ1xuICAgIH0sXG4gICAgbWVyaWRpZW1QYXJzZTogL96J3oZ83oneii8sXG4gICAgaXNQTSA6IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICByZXR1cm4gJ96J3oonID09PSBpbnB1dDtcbiAgICB9LFxuICAgIG1lcmlkaWVtIDogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICBpZiAoaG91ciA8IDEyKSB7XG4gICAgICAgICAgICByZXR1cm4gJ96J3oYnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuICfeid6KJztcbiAgICAgICAgfVxuICAgIH0sXG4gICAgY2FsZW5kYXIgOiB7XG4gICAgICAgIHNhbWVEYXkgOiAnW96J3qjeh96m3oveql0gTFQnLFxuICAgICAgICBuZXh0RGF5IDogJ1veid6n3ovept6J3qddIExUJyxcbiAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCBMVCcsXG4gICAgICAgIGxhc3REYXkgOiAnW96H3qjeh96w3pTerF0gTFQnLFxuICAgICAgICBsYXN0V2VlayA6ICdb3orep96H3qjejN6q3ojeqF0gZGRkZCBMVCcsXG4gICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgfSxcbiAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgIGZ1dHVyZSA6ICfejN6s3oPerd6O3qbeh96oICVzJyxcbiAgICAgICAgcGFzdCA6ICfeht6q3oPeqN6C3rAgJXMnLFxuICAgICAgICBzIDogJ96Q3qjeht6q3oLesN6M3qreht6u3oXerN6H3rAnLFxuICAgICAgICBtIDogJ96J3qjegt6o3pPerN6H3rAnLFxuICAgICAgICBtbSA6ICfeid6o3oLeqN6T3qogJWQnLFxuICAgICAgICBoIDogJ96O3qbekd6o3ofeqN6D3qzeh96wJyxcbiAgICAgICAgaGggOiAn3o7ept6R3qjeh96o3oPeqiAlZCcsXG4gICAgICAgIGQgOiAn3oveqt6I3qbegN6s3ofesCcsXG4gICAgICAgIGRkIDogJ96L3qreiN6m3pDesCAlZCcsXG4gICAgICAgIE0gOiAn3onept6A3qzeh96wJyxcbiAgICAgICAgTU0gOiAn3onept6Q3rAgJWQnLFxuICAgICAgICB5IDogJ96H3qbegN6m3oPerN6H3rAnLFxuICAgICAgICB5eSA6ICfeh96m3oDept6D3qogJWQnXG4gICAgfSxcbiAgICBwcmVwYXJzZTogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL9iML2csICcsJyk7XG4gICAgfSxcbiAgICBwb3N0Zm9ybWF0OiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvLC9nLCAn2IwnKTtcbiAgICB9LFxuICAgIHdlZWsgOiB7XG4gICAgICAgIGRvdyA6IDcsICAvLyBTdW5kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgZG95IDogMTIgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDFzdCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICB9XG59KTtcblxucmV0dXJuIGR2O1xuXG59KSkpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZHYuanMiLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogR3JlZWsgW2VsXVxuLy8hIGF1dGhvciA6IEFnZ2Vsb3MgS2FyYWxpYXMgOiBodHRwczovL2dpdGh1Yi5jb20vbWVoaWVsXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGlzRnVuY3Rpb24oaW5wdXQpIHtcbiAgICByZXR1cm4gaW5wdXQgaW5zdGFuY2VvZiBGdW5jdGlvbiB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaW5wdXQpID09PSAnW29iamVjdCBGdW5jdGlvbl0nO1xufVxuXG5cbnZhciBlbCA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2VsJywge1xuICAgIG1vbnRoc05vbWluYXRpdmVFbCA6ICfOmc6xzr3Ov8+FzqzPgc65zr/Pgl/Ops61zrLPgc6/z4XOrM+BzrnOv8+CX86czqzPgc+EzrnOv8+CX86Rz4DPgc6vzrvOuc6/z4JfzpzOrM65zr/Pgl/Omc6/z43Ovc65zr/Pgl/Omc6/z43Ou865zr/Pgl/Okc+NzrPOv8+Fz4PPhM6/z4JfzqPOtc+Az4TOrc68zrLPgc65zr/Pgl/On866z4TPjs6yz4HOuc6/z4Jfzp3Ov86tzrzOss+BzrnOv8+CX86UzrXOus6tzrzOss+BzrnOv8+CJy5zcGxpdCgnXycpLFxuICAgIG1vbnRoc0dlbml0aXZlRWwgOiAnzpnOsc69zr/Phc6xz4HOr86/z4VfzqbOtc6yz4HOv8+FzrHPgc6vzr/PhV/OnM6xz4HPhM6vzr/PhV/Okc+Az4HOuc67zq/Ov8+FX86czrHOkM6/z4VfzpnOv8+Fzr3Or86/z4VfzpnOv8+FzrvOr86/z4VfzpHPhc6zzr/Pjc+Dz4TOv8+FX86jzrXPgM+EzrXOvM6yz4HOr86/z4Vfzp/Ous+Ez4nOss+Bzq/Ov8+FX86dzr/Otc68zrLPgc6vzr/PhV/OlM61zrrOtc68zrLPgc6vzr/PhScuc3BsaXQoJ18nKSxcbiAgICBtb250aHMgOiBmdW5jdGlvbiAobW9tZW50VG9Gb3JtYXQsIGZvcm1hdCkge1xuICAgICAgICBpZiAoIW1vbWVudFRvRm9ybWF0KSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbW9udGhzTm9taW5hdGl2ZUVsO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBmb3JtYXQgPT09ICdzdHJpbmcnICYmIC9ELy50ZXN0KGZvcm1hdC5zdWJzdHJpbmcoMCwgZm9ybWF0LmluZGV4T2YoJ01NTU0nKSkpKSB7IC8vIGlmIHRoZXJlIGlzIGEgZGF5IG51bWJlciBiZWZvcmUgJ01NTU0nXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbW9udGhzR2VuaXRpdmVFbFttb21lbnRUb0Zvcm1hdC5tb250aCgpXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9tb250aHNOb21pbmF0aXZlRWxbbW9tZW50VG9Gb3JtYXQubW9udGgoKV07XG4gICAgICAgIH1cbiAgICB9LFxuICAgIG1vbnRoc1Nob3J0IDogJ86ZzrHOvV/Ops61zrJfzpzOsc+BX86Rz4DPgV/OnM6xz4pfzpnOv8+Fzr1fzpnOv8+FzrtfzpHPhc6zX86jzrXPgF/On866z4Rfzp3Ov861X86UzrXOuicuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5cyA6ICfOms+Fz4HOuc6xzrrOrl/OlM61z4XPhM6tz4HOsV/OpM+Bzq/PhM63X86kzrXPhM6sz4HPhM63X86gzq3OvM+Az4TOt1/OoM6xz4HOsc+DzrrOtc+Fzq5fzqPOrM6yzrLOsc+Ezr8nLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNTaG9ydCA6ICfOms+Fz4FfzpTOtc+FX86kz4HOuV/OpM61z4RfzqDOtc68X86gzrHPgV/Oo86xzrInLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNNaW4gOiAnzprPhV/OlM61X86kz4FfzqTOtV/OoM61X86gzrFfzqPOsScuc3BsaXQoJ18nKSxcbiAgICBtZXJpZGllbSA6IGZ1bmN0aW9uIChob3VycywgbWludXRlcywgaXNMb3dlcikge1xuICAgICAgICBpZiAoaG91cnMgPiAxMSkge1xuICAgICAgICAgICAgcmV0dXJuIGlzTG93ZXIgPyAnzrzOvCcgOiAnzpzOnCc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gaXNMb3dlciA/ICfPgM68JyA6ICfOoM6cJztcbiAgICAgICAgfVxuICAgIH0sXG4gICAgaXNQTSA6IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICByZXR1cm4gKChpbnB1dCArICcnKS50b0xvd2VyQ2FzZSgpWzBdID09PSAnzrwnKTtcbiAgICB9LFxuICAgIG1lcmlkaWVtUGFyc2UgOiAvW86gzpxdXFwuP86cP1xcLj8vaSxcbiAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgTFQgOiAnaDptbSBBJyxcbiAgICAgICAgTFRTIDogJ2g6bW06c3MgQScsXG4gICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIGg6bW0gQScsXG4gICAgICAgIExMTEwgOiAnZGRkZCwgRCBNTU1NIFlZWVkgaDptbSBBJ1xuICAgIH0sXG4gICAgY2FsZW5kYXJFbCA6IHtcbiAgICAgICAgc2FtZURheSA6ICdbzqPOrs68zrXPgc6xIHt9XSBMVCcsXG4gICAgICAgIG5leHREYXkgOiAnW86Rz43Pgc65zr8ge31dIExUJyxcbiAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCBbe31dIExUJyxcbiAgICAgICAgbGFzdERheSA6ICdbzqfOuM61z4Ige31dIExUJyxcbiAgICAgICAgbGFzdFdlZWsgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHRoaXMuZGF5KCkpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnW8+Ezr8gz4DPgc6/zrfOs86/z43OvM61zr3Ov10gZGRkZCBbe31dIExUJztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1vPhM63zr0gz4DPgc6/zrfOs86/z43OvM61zr3Ot10gZGRkZCBbe31dIExUJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICB9LFxuICAgIGNhbGVuZGFyIDogZnVuY3Rpb24gKGtleSwgbW9tKSB7XG4gICAgICAgIHZhciBvdXRwdXQgPSB0aGlzLl9jYWxlbmRhckVsW2tleV0sXG4gICAgICAgICAgICBob3VycyA9IG1vbSAmJiBtb20uaG91cnMoKTtcbiAgICAgICAgaWYgKGlzRnVuY3Rpb24ob3V0cHV0KSkge1xuICAgICAgICAgICAgb3V0cHV0ID0gb3V0cHV0LmFwcGx5KG1vbSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG91dHB1dC5yZXBsYWNlKCd7fScsIChob3VycyAlIDEyID09PSAxID8gJ8+Dz4TOtycgOiAnz4PPhM65z4InKSk7XG4gICAgfSxcbiAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgIGZ1dHVyZSA6ICfPg861ICVzJyxcbiAgICAgICAgcGFzdCA6ICclcyDPgM+BzrnOvScsXG4gICAgICAgIHMgOiAnzrvOr86zzrEgzrTOtc+Fz4TOtc+Bz4zOu861z4DPhM6xJyxcbiAgICAgICAgbSA6ICfOrc69zrEgzrvOtc+Az4TPjCcsXG4gICAgICAgIG1tIDogJyVkIM67zrXPgM+EzqwnLFxuICAgICAgICBoIDogJ868zq/OsSDPjs+BzrEnLFxuICAgICAgICBoaCA6ICclZCDPjs+BzrXPgicsXG4gICAgICAgIGQgOiAnzrzOr86xIM68zq3Pgc6xJyxcbiAgICAgICAgZGQgOiAnJWQgzrzOrc+BzrXPgicsXG4gICAgICAgIE0gOiAnzq3Ovc6xz4IgzrzOrs69zrHPgicsXG4gICAgICAgIE1NIDogJyVkIM68zq7Ovc61z4InLFxuICAgICAgICB5IDogJ86tzr3Osc+CIM+Hz4HPjM69zr/PgicsXG4gICAgICAgIHl5IDogJyVkIM+Hz4HPjM69zrnOsSdcbiAgICB9LFxuICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfc63LyxcbiAgICBvcmRpbmFsOiAnJWTOtycsXG4gICAgd2VlayA6IHtcbiAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDRzdCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICB9XG59KTtcblxucmV0dXJuIGVsO1xuXG59KSkpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZWwuanMiLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogRW5nbGlzaCAoQXVzdHJhbGlhKSBbZW4tYXVdXG4vLyEgYXV0aG9yIDogSmFyZWQgTW9yc2UgOiBodHRwczovL2dpdGh1Yi5jb20vamFyY29hbFxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciBlbkF1ID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZW4tYXUnLCB7XG4gICAgbW9udGhzIDogJ0phbnVhcnlfRmVicnVhcnlfTWFyY2hfQXByaWxfTWF5X0p1bmVfSnVseV9BdWd1c3RfU2VwdGVtYmVyX09jdG9iZXJfTm92ZW1iZXJfRGVjZW1iZXInLnNwbGl0KCdfJyksXG4gICAgbW9udGhzU2hvcnQgOiAnSmFuX0ZlYl9NYXJfQXByX01heV9KdW5fSnVsX0F1Z19TZXBfT2N0X05vdl9EZWMnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXMgOiAnU3VuZGF5X01vbmRheV9UdWVzZGF5X1dlZG5lc2RheV9UaHVyc2RheV9GcmlkYXlfU2F0dXJkYXknLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNTaG9ydCA6ICdTdW5fTW9uX1R1ZV9XZWRfVGh1X0ZyaV9TYXQnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNNaW4gOiAnU3VfTW9fVHVfV2VfVGhfRnJfU2EnLnNwbGl0KCdfJyksXG4gICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgIExUIDogJ2g6bW0gQScsXG4gICAgICAgIExUUyA6ICdoOm1tOnNzIEEnLFxuICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBoOm1tIEEnLFxuICAgICAgICBMTExMIDogJ2RkZGQsIEQgTU1NTSBZWVlZIGg6bW0gQSdcbiAgICB9LFxuICAgIGNhbGVuZGFyIDoge1xuICAgICAgICBzYW1lRGF5IDogJ1tUb2RheSBhdF0gTFQnLFxuICAgICAgICBuZXh0RGF5IDogJ1tUb21vcnJvdyBhdF0gTFQnLFxuICAgICAgICBuZXh0V2VlayA6ICdkZGRkIFthdF0gTFQnLFxuICAgICAgICBsYXN0RGF5IDogJ1tZZXN0ZXJkYXkgYXRdIExUJyxcbiAgICAgICAgbGFzdFdlZWsgOiAnW0xhc3RdIGRkZGQgW2F0XSBMVCcsXG4gICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgfSxcbiAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgIGZ1dHVyZSA6ICdpbiAlcycsXG4gICAgICAgIHBhc3QgOiAnJXMgYWdvJyxcbiAgICAgICAgcyA6ICdhIGZldyBzZWNvbmRzJyxcbiAgICAgICAgbSA6ICdhIG1pbnV0ZScsXG4gICAgICAgIG1tIDogJyVkIG1pbnV0ZXMnLFxuICAgICAgICBoIDogJ2FuIGhvdXInLFxuICAgICAgICBoaCA6ICclZCBob3VycycsXG4gICAgICAgIGQgOiAnYSBkYXknLFxuICAgICAgICBkZCA6ICclZCBkYXlzJyxcbiAgICAgICAgTSA6ICdhIG1vbnRoJyxcbiAgICAgICAgTU0gOiAnJWQgbW9udGhzJyxcbiAgICAgICAgeSA6ICdhIHllYXInLFxuICAgICAgICB5eSA6ICclZCB5ZWFycydcbiAgICB9LFxuICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfShzdHxuZHxyZHx0aCkvLFxuICAgIG9yZGluYWwgOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgIHZhciBiID0gbnVtYmVyICUgMTAsXG4gICAgICAgICAgICBvdXRwdXQgPSAofn4obnVtYmVyICUgMTAwIC8gMTApID09PSAxKSA/ICd0aCcgOlxuICAgICAgICAgICAgKGIgPT09IDEpID8gJ3N0JyA6XG4gICAgICAgICAgICAoYiA9PT0gMikgPyAnbmQnIDpcbiAgICAgICAgICAgIChiID09PSAzKSA/ICdyZCcgOiAndGgnO1xuICAgICAgICByZXR1cm4gbnVtYmVyICsgb3V0cHV0O1xuICAgIH0sXG4gICAgd2VlayA6IHtcbiAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICB9XG59KTtcblxucmV0dXJuIGVuQXU7XG5cbn0pKSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9lbi1hdS5qcyIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBFbmdsaXNoIChDYW5hZGEpIFtlbi1jYV1cbi8vISBhdXRob3IgOiBKb25hdGhhbiBBYm91cmJpaCA6IGh0dHBzOi8vZ2l0aHViLmNvbS9qb25iY2FcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG52YXIgZW5DYSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2VuLWNhJywge1xuICAgIG1vbnRocyA6ICdKYW51YXJ5X0ZlYnJ1YXJ5X01hcmNoX0FwcmlsX01heV9KdW5lX0p1bHlfQXVndXN0X1NlcHRlbWJlcl9PY3RvYmVyX05vdmVtYmVyX0RlY2VtYmVyJy5zcGxpdCgnXycpLFxuICAgIG1vbnRoc1Nob3J0IDogJ0phbl9GZWJfTWFyX0Fwcl9NYXlfSnVuX0p1bF9BdWdfU2VwX09jdF9Ob3ZfRGVjJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzIDogJ1N1bmRheV9Nb25kYXlfVHVlc2RheV9XZWRuZXNkYXlfVGh1cnNkYXlfRnJpZGF5X1NhdHVyZGF5Jy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzU2hvcnQgOiAnU3VuX01vbl9UdWVfV2VkX1RodV9GcmlfU2F0Jy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzTWluIDogJ1N1X01vX1R1X1dlX1RoX0ZyX1NhJy5zcGxpdCgnXycpLFxuICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICBMVCA6ICdoOm1tIEEnLFxuICAgICAgICBMVFMgOiAnaDptbTpzcyBBJyxcbiAgICAgICAgTCA6ICdZWVlZLU1NLUREJyxcbiAgICAgICAgTEwgOiAnTU1NTSBELCBZWVlZJyxcbiAgICAgICAgTExMIDogJ01NTU0gRCwgWVlZWSBoOm1tIEEnLFxuICAgICAgICBMTExMIDogJ2RkZGQsIE1NTU0gRCwgWVlZWSBoOm1tIEEnXG4gICAgfSxcbiAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgc2FtZURheSA6ICdbVG9kYXkgYXRdIExUJyxcbiAgICAgICAgbmV4dERheSA6ICdbVG9tb3Jyb3cgYXRdIExUJyxcbiAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCBbYXRdIExUJyxcbiAgICAgICAgbGFzdERheSA6ICdbWWVzdGVyZGF5IGF0XSBMVCcsXG4gICAgICAgIGxhc3RXZWVrIDogJ1tMYXN0XSBkZGRkIFthdF0gTFQnLFxuICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgIH0sXG4gICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICBmdXR1cmUgOiAnaW4gJXMnLFxuICAgICAgICBwYXN0IDogJyVzIGFnbycsXG4gICAgICAgIHMgOiAnYSBmZXcgc2Vjb25kcycsXG4gICAgICAgIG0gOiAnYSBtaW51dGUnLFxuICAgICAgICBtbSA6ICclZCBtaW51dGVzJyxcbiAgICAgICAgaCA6ICdhbiBob3VyJyxcbiAgICAgICAgaGggOiAnJWQgaG91cnMnLFxuICAgICAgICBkIDogJ2EgZGF5JyxcbiAgICAgICAgZGQgOiAnJWQgZGF5cycsXG4gICAgICAgIE0gOiAnYSBtb250aCcsXG4gICAgICAgIE1NIDogJyVkIG1vbnRocycsXG4gICAgICAgIHkgOiAnYSB5ZWFyJyxcbiAgICAgICAgeXkgOiAnJWQgeWVhcnMnXG4gICAgfSxcbiAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0oc3R8bmR8cmR8dGgpLyxcbiAgICBvcmRpbmFsIDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICB2YXIgYiA9IG51bWJlciAlIDEwLFxuICAgICAgICAgICAgb3V0cHV0ID0gKH5+KG51bWJlciAlIDEwMCAvIDEwKSA9PT0gMSkgPyAndGgnIDpcbiAgICAgICAgICAgIChiID09PSAxKSA/ICdzdCcgOlxuICAgICAgICAgICAgKGIgPT09IDIpID8gJ25kJyA6XG4gICAgICAgICAgICAoYiA9PT0gMykgPyAncmQnIDogJ3RoJztcbiAgICAgICAgcmV0dXJuIG51bWJlciArIG91dHB1dDtcbiAgICB9XG59KTtcblxucmV0dXJuIGVuQ2E7XG5cbn0pKSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9lbi1jYS5qcyIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBFbmdsaXNoIChVbml0ZWQgS2luZ2RvbSkgW2VuLWdiXVxuLy8hIGF1dGhvciA6IENocmlzIEdlZHJpbSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9jaHJpc2dlZHJpbVxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciBlbkdiID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZW4tZ2InLCB7XG4gICAgbW9udGhzIDogJ0phbnVhcnlfRmVicnVhcnlfTWFyY2hfQXByaWxfTWF5X0p1bmVfSnVseV9BdWd1c3RfU2VwdGVtYmVyX09jdG9iZXJfTm92ZW1iZXJfRGVjZW1iZXInLnNwbGl0KCdfJyksXG4gICAgbW9udGhzU2hvcnQgOiAnSmFuX0ZlYl9NYXJfQXByX01heV9KdW5fSnVsX0F1Z19TZXBfT2N0X05vdl9EZWMnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXMgOiAnU3VuZGF5X01vbmRheV9UdWVzZGF5X1dlZG5lc2RheV9UaHVyc2RheV9GcmlkYXlfU2F0dXJkYXknLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNTaG9ydCA6ICdTdW5fTW9uX1R1ZV9XZWRfVGh1X0ZyaV9TYXQnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNNaW4gOiAnU3VfTW9fVHVfV2VfVGhfRnJfU2EnLnNwbGl0KCdfJyksXG4gICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICBMTExMIDogJ2RkZGQsIEQgTU1NTSBZWVlZIEhIOm1tJ1xuICAgIH0sXG4gICAgY2FsZW5kYXIgOiB7XG4gICAgICAgIHNhbWVEYXkgOiAnW1RvZGF5IGF0XSBMVCcsXG4gICAgICAgIG5leHREYXkgOiAnW1RvbW9ycm93IGF0XSBMVCcsXG4gICAgICAgIG5leHRXZWVrIDogJ2RkZGQgW2F0XSBMVCcsXG4gICAgICAgIGxhc3REYXkgOiAnW1llc3RlcmRheSBhdF0gTFQnLFxuICAgICAgICBsYXN0V2VlayA6ICdbTGFzdF0gZGRkZCBbYXRdIExUJyxcbiAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICB9LFxuICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgZnV0dXJlIDogJ2luICVzJyxcbiAgICAgICAgcGFzdCA6ICclcyBhZ28nLFxuICAgICAgICBzIDogJ2EgZmV3IHNlY29uZHMnLFxuICAgICAgICBtIDogJ2EgbWludXRlJyxcbiAgICAgICAgbW0gOiAnJWQgbWludXRlcycsXG4gICAgICAgIGggOiAnYW4gaG91cicsXG4gICAgICAgIGhoIDogJyVkIGhvdXJzJyxcbiAgICAgICAgZCA6ICdhIGRheScsXG4gICAgICAgIGRkIDogJyVkIGRheXMnLFxuICAgICAgICBNIDogJ2EgbW9udGgnLFxuICAgICAgICBNTSA6ICclZCBtb250aHMnLFxuICAgICAgICB5IDogJ2EgeWVhcicsXG4gICAgICAgIHl5IDogJyVkIHllYXJzJ1xuICAgIH0sXG4gICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9KHN0fG5kfHJkfHRoKS8sXG4gICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgdmFyIGIgPSBudW1iZXIgJSAxMCxcbiAgICAgICAgICAgIG91dHB1dCA9ICh+fihudW1iZXIgJSAxMDAgLyAxMCkgPT09IDEpID8gJ3RoJyA6XG4gICAgICAgICAgICAoYiA9PT0gMSkgPyAnc3QnIDpcbiAgICAgICAgICAgIChiID09PSAyKSA/ICduZCcgOlxuICAgICAgICAgICAgKGIgPT09IDMpID8gJ3JkJyA6ICd0aCc7XG4gICAgICAgIHJldHVybiBudW1iZXIgKyBvdXRwdXQ7XG4gICAgfSxcbiAgICB3ZWVrIDoge1xuICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgZG95IDogNCAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgIH1cbn0pO1xuXG5yZXR1cm4gZW5HYjtcblxufSkpKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2VuLWdiLmpzIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEVuZ2xpc2ggKElyZWxhbmQpIFtlbi1pZV1cbi8vISBhdXRob3IgOiBDaHJpcyBDYXJ0bGlkZ2UgOiBodHRwczovL2dpdGh1Yi5jb20vY2hyaXNjYXJ0bGlkZ2VcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG52YXIgZW5JZSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2VuLWllJywge1xuICAgIG1vbnRocyA6ICdKYW51YXJ5X0ZlYnJ1YXJ5X01hcmNoX0FwcmlsX01heV9KdW5lX0p1bHlfQXVndXN0X1NlcHRlbWJlcl9PY3RvYmVyX05vdmVtYmVyX0RlY2VtYmVyJy5zcGxpdCgnXycpLFxuICAgIG1vbnRoc1Nob3J0IDogJ0phbl9GZWJfTWFyX0Fwcl9NYXlfSnVuX0p1bF9BdWdfU2VwX09jdF9Ob3ZfRGVjJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzIDogJ1N1bmRheV9Nb25kYXlfVHVlc2RheV9XZWRuZXNkYXlfVGh1cnNkYXlfRnJpZGF5X1NhdHVyZGF5Jy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzU2hvcnQgOiAnU3VuX01vbl9UdWVfV2VkX1RodV9GcmlfU2F0Jy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzTWluIDogJ1N1X01vX1R1X1dlX1RoX0ZyX1NhJy5zcGxpdCgnXycpLFxuICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgIEwgOiAnREQtTU0tWVlZWScsXG4gICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgTExMTCA6ICdkZGRkIEQgTU1NTSBZWVlZIEhIOm1tJ1xuICAgIH0sXG4gICAgY2FsZW5kYXIgOiB7XG4gICAgICAgIHNhbWVEYXkgOiAnW1RvZGF5IGF0XSBMVCcsXG4gICAgICAgIG5leHREYXkgOiAnW1RvbW9ycm93IGF0XSBMVCcsXG4gICAgICAgIG5leHRXZWVrIDogJ2RkZGQgW2F0XSBMVCcsXG4gICAgICAgIGxhc3REYXkgOiAnW1llc3RlcmRheSBhdF0gTFQnLFxuICAgICAgICBsYXN0V2VlayA6ICdbTGFzdF0gZGRkZCBbYXRdIExUJyxcbiAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICB9LFxuICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgZnV0dXJlIDogJ2luICVzJyxcbiAgICAgICAgcGFzdCA6ICclcyBhZ28nLFxuICAgICAgICBzIDogJ2EgZmV3IHNlY29uZHMnLFxuICAgICAgICBtIDogJ2EgbWludXRlJyxcbiAgICAgICAgbW0gOiAnJWQgbWludXRlcycsXG4gICAgICAgIGggOiAnYW4gaG91cicsXG4gICAgICAgIGhoIDogJyVkIGhvdXJzJyxcbiAgICAgICAgZCA6ICdhIGRheScsXG4gICAgICAgIGRkIDogJyVkIGRheXMnLFxuICAgICAgICBNIDogJ2EgbW9udGgnLFxuICAgICAgICBNTSA6ICclZCBtb250aHMnLFxuICAgICAgICB5IDogJ2EgeWVhcicsXG4gICAgICAgIHl5IDogJyVkIHllYXJzJ1xuICAgIH0sXG4gICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9KHN0fG5kfHJkfHRoKS8sXG4gICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgdmFyIGIgPSBudW1iZXIgJSAxMCxcbiAgICAgICAgICAgIG91dHB1dCA9ICh+fihudW1iZXIgJSAxMDAgLyAxMCkgPT09IDEpID8gJ3RoJyA6XG4gICAgICAgICAgICAoYiA9PT0gMSkgPyAnc3QnIDpcbiAgICAgICAgICAgIChiID09PSAyKSA/ICduZCcgOlxuICAgICAgICAgICAgKGIgPT09IDMpID8gJ3JkJyA6ICd0aCc7XG4gICAgICAgIHJldHVybiBudW1iZXIgKyBvdXRwdXQ7XG4gICAgfSxcbiAgICB3ZWVrIDoge1xuICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgZG95IDogNCAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgIH1cbn0pO1xuXG5yZXR1cm4gZW5JZTtcblxufSkpKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2VuLWllLmpzIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEVuZ2xpc2ggKE5ldyBaZWFsYW5kKSBbZW4tbnpdXG4vLyEgYXV0aG9yIDogTHVrZSBNY0dyZWdvciA6IGh0dHBzOi8vZ2l0aHViLmNvbS9sdWtlbWNncmVnb3JcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG52YXIgZW5OeiA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2VuLW56Jywge1xuICAgIG1vbnRocyA6ICdKYW51YXJ5X0ZlYnJ1YXJ5X01hcmNoX0FwcmlsX01heV9KdW5lX0p1bHlfQXVndXN0X1NlcHRlbWJlcl9PY3RvYmVyX05vdmVtYmVyX0RlY2VtYmVyJy5zcGxpdCgnXycpLFxuICAgIG1vbnRoc1Nob3J0IDogJ0phbl9GZWJfTWFyX0Fwcl9NYXlfSnVuX0p1bF9BdWdfU2VwX09jdF9Ob3ZfRGVjJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzIDogJ1N1bmRheV9Nb25kYXlfVHVlc2RheV9XZWRuZXNkYXlfVGh1cnNkYXlfRnJpZGF5X1NhdHVyZGF5Jy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzU2hvcnQgOiAnU3VuX01vbl9UdWVfV2VkX1RodV9GcmlfU2F0Jy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzTWluIDogJ1N1X01vX1R1X1dlX1RoX0ZyX1NhJy5zcGxpdCgnXycpLFxuICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICBMVCA6ICdoOm1tIEEnLFxuICAgICAgICBMVFMgOiAnaDptbTpzcyBBJyxcbiAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgaDptbSBBJyxcbiAgICAgICAgTExMTCA6ICdkZGRkLCBEIE1NTU0gWVlZWSBoOm1tIEEnXG4gICAgfSxcbiAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgc2FtZURheSA6ICdbVG9kYXkgYXRdIExUJyxcbiAgICAgICAgbmV4dERheSA6ICdbVG9tb3Jyb3cgYXRdIExUJyxcbiAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCBbYXRdIExUJyxcbiAgICAgICAgbGFzdERheSA6ICdbWWVzdGVyZGF5IGF0XSBMVCcsXG4gICAgICAgIGxhc3RXZWVrIDogJ1tMYXN0XSBkZGRkIFthdF0gTFQnLFxuICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgIH0sXG4gICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICBmdXR1cmUgOiAnaW4gJXMnLFxuICAgICAgICBwYXN0IDogJyVzIGFnbycsXG4gICAgICAgIHMgOiAnYSBmZXcgc2Vjb25kcycsXG4gICAgICAgIG0gOiAnYSBtaW51dGUnLFxuICAgICAgICBtbSA6ICclZCBtaW51dGVzJyxcbiAgICAgICAgaCA6ICdhbiBob3VyJyxcbiAgICAgICAgaGggOiAnJWQgaG91cnMnLFxuICAgICAgICBkIDogJ2EgZGF5JyxcbiAgICAgICAgZGQgOiAnJWQgZGF5cycsXG4gICAgICAgIE0gOiAnYSBtb250aCcsXG4gICAgICAgIE1NIDogJyVkIG1vbnRocycsXG4gICAgICAgIHkgOiAnYSB5ZWFyJyxcbiAgICAgICAgeXkgOiAnJWQgeWVhcnMnXG4gICAgfSxcbiAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0oc3R8bmR8cmR8dGgpLyxcbiAgICBvcmRpbmFsIDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICB2YXIgYiA9IG51bWJlciAlIDEwLFxuICAgICAgICAgICAgb3V0cHV0ID0gKH5+KG51bWJlciAlIDEwMCAvIDEwKSA9PT0gMSkgPyAndGgnIDpcbiAgICAgICAgICAgIChiID09PSAxKSA/ICdzdCcgOlxuICAgICAgICAgICAgKGIgPT09IDIpID8gJ25kJyA6XG4gICAgICAgICAgICAoYiA9PT0gMykgPyAncmQnIDogJ3RoJztcbiAgICAgICAgcmV0dXJuIG51bWJlciArIG91dHB1dDtcbiAgICB9LFxuICAgIHdlZWsgOiB7XG4gICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgfVxufSk7XG5cbnJldHVybiBlbk56O1xuXG59KSkpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZW4tbnouanMiLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogRXNwZXJhbnRvIFtlb11cbi8vISBhdXRob3IgOiBDb2xpbiBEZWFuIDogaHR0cHM6Ly9naXRodWIuY29tL2NvbGluZGVhblxuLy8hIGF1dGhvciA6IE1pYSBOb3JkZW50b2Z0IEltcGVyYXRvcmkgOiBodHRwczovL2dpdGh1Yi5jb20vbWllc3Rhc21pYVxuLy8hIGNvbW1lbnQgOiBtaWVzdGFzbWlhIGNvcnJlY3RlZCB0aGUgdHJhbnNsYXRpb24gYnkgY29saW5kZWFuXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxudmFyIGVvID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZW8nLCB7XG4gICAgbW9udGhzIDogJ2phbnVhcm9fZmVicnVhcm9fbWFydG9fYXByaWxvX21ham9fanVuaW9fanVsaW9fYcWtZ3VzdG9fc2VwdGVtYnJvX29rdG9icm9fbm92ZW1icm9fZGVjZW1icm8nLnNwbGl0KCdfJyksXG4gICAgbW9udGhzU2hvcnQgOiAnamFuX2ZlYl9tYXJfYXByX21hal9qdW5fanVsX2HFrWdfc2VwX29rdF9ub3ZfZGVjJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzIDogJ2RpbWFuxIlvX2x1bmRvX21hcmRvX21lcmtyZWRvX8S1YcWtZG9fdmVuZHJlZG9fc2FiYXRvJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzU2hvcnQgOiAnZGltX2x1bl9tYXJkX21lcmtfxLVhxa1fdmVuX3NhYicuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c01pbiA6ICdkaV9sdV9tYV9tZV/EtWFfdmVfc2EnLnNwbGl0KCdfJyksXG4gICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgTCA6ICdZWVlZLU1NLUREJyxcbiAgICAgICAgTEwgOiAnRFstYSBkZV0gTU1NTSwgWVlZWScsXG4gICAgICAgIExMTCA6ICdEWy1hIGRlXSBNTU1NLCBZWVlZIEhIOm1tJyxcbiAgICAgICAgTExMTCA6ICdkZGRkLCBbbGFdIERbLWEgZGVdIE1NTU0sIFlZWVkgSEg6bW0nXG4gICAgfSxcbiAgICBtZXJpZGllbVBhcnNlOiAvW2FwXVxcLnRcXC5tL2ksXG4gICAgaXNQTTogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgIHJldHVybiBpbnB1dC5jaGFyQXQoMCkudG9Mb3dlckNhc2UoKSA9PT0gJ3AnO1xuICAgIH0sXG4gICAgbWVyaWRpZW0gOiBmdW5jdGlvbiAoaG91cnMsIG1pbnV0ZXMsIGlzTG93ZXIpIHtcbiAgICAgICAgaWYgKGhvdXJzID4gMTEpIHtcbiAgICAgICAgICAgIHJldHVybiBpc0xvd2VyID8gJ3AudC5tLicgOiAnUC5ULk0uJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBpc0xvd2VyID8gJ2EudC5tLicgOiAnQS5ULk0uJztcbiAgICAgICAgfVxuICAgIH0sXG4gICAgY2FsZW5kYXIgOiB7XG4gICAgICAgIHNhbWVEYXkgOiAnW0hvZGlhxa0gamVdIExUJyxcbiAgICAgICAgbmV4dERheSA6ICdbTW9yZ2HFrSBqZV0gTFQnLFxuICAgICAgICBuZXh0V2VlayA6ICdkZGRkIFtqZV0gTFQnLFxuICAgICAgICBsYXN0RGF5IDogJ1tIaWVyYcWtIGplXSBMVCcsXG4gICAgICAgIGxhc3RXZWVrIDogJ1twYXNpbnRhXSBkZGRkIFtqZV0gTFQnLFxuICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgIH0sXG4gICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICBmdXR1cmUgOiAncG9zdCAlcycsXG4gICAgICAgIHBhc3QgOiAnYW50YcWtICVzJyxcbiAgICAgICAgcyA6ICdzZWt1bmRvaicsXG4gICAgICAgIG0gOiAnbWludXRvJyxcbiAgICAgICAgbW0gOiAnJWQgbWludXRvaicsXG4gICAgICAgIGggOiAnaG9ybycsXG4gICAgICAgIGhoIDogJyVkIGhvcm9qJyxcbiAgICAgICAgZCA6ICd0YWdvJywvL25lICdkaXVybm8nLCDEiWFyIGVzdGFzIHV6aXRhIHBvciBwcm9rc2ltdW1vXG4gICAgICAgIGRkIDogJyVkIHRhZ29qJyxcbiAgICAgICAgTSA6ICdtb25hdG8nLFxuICAgICAgICBNTSA6ICclZCBtb25hdG9qJyxcbiAgICAgICAgeSA6ICdqYXJvJyxcbiAgICAgICAgeXkgOiAnJWQgamFyb2onXG4gICAgfSxcbiAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn1hLyxcbiAgICBvcmRpbmFsIDogJyVkYScsXG4gICAgd2VlayA6IHtcbiAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgIGRveSA6IDcgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDFzdCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICB9XG59KTtcblxucmV0dXJuIGVvO1xuXG59KSkpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZW8uanMiLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogU3BhbmlzaCBbZXNdXG4vLyEgYXV0aG9yIDogSnVsaW8gTmFwdXLDrSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9qdWxpb25jXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxudmFyIG1vbnRoc1Nob3J0RG90ID0gJ2VuZS5fZmViLl9tYXIuX2Fici5fbWF5Ll9qdW4uX2p1bC5fYWdvLl9zZXAuX29jdC5fbm92Ll9kaWMuJy5zcGxpdCgnXycpO1xudmFyIG1vbnRoc1Nob3J0ID0gJ2VuZV9mZWJfbWFyX2Ficl9tYXlfanVuX2p1bF9hZ29fc2VwX29jdF9ub3ZfZGljJy5zcGxpdCgnXycpO1xuXG52YXIgbW9udGhzUGFyc2UgPSBbL15lbmUvaSwgL15mZWIvaSwgL15tYXIvaSwgL15hYnIvaSwgL15tYXkvaSwgL15qdW4vaSwgL15qdWwvaSwgL15hZ28vaSwgL15zZXAvaSwgL15vY3QvaSwgL15ub3YvaSwgL15kaWMvaV07XG52YXIgbW9udGhzUmVnZXggPSAvXihlbmVyb3xmZWJyZXJvfG1hcnpvfGFicmlsfG1heW98anVuaW98anVsaW98YWdvc3RvfHNlcHRpZW1icmV8b2N0dWJyZXxub3ZpZW1icmV8ZGljaWVtYnJlfGVuZVxcLj98ZmViXFwuP3xtYXJcXC4/fGFiclxcLj98bWF5XFwuP3xqdW5cXC4/fGp1bFxcLj98YWdvXFwuP3xzZXBcXC4/fG9jdFxcLj98bm92XFwuP3xkaWNcXC4/KS9pO1xuXG52YXIgZXMgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdlcycsIHtcbiAgICBtb250aHMgOiAnZW5lcm9fZmVicmVyb19tYXJ6b19hYnJpbF9tYXlvX2p1bmlvX2p1bGlvX2Fnb3N0b19zZXB0aWVtYnJlX29jdHVicmVfbm92aWVtYnJlX2RpY2llbWJyZScuc3BsaXQoJ18nKSxcbiAgICBtb250aHNTaG9ydCA6IGZ1bmN0aW9uIChtLCBmb3JtYXQpIHtcbiAgICAgICAgaWYgKCFtKSB7XG4gICAgICAgICAgICByZXR1cm4gbW9udGhzU2hvcnREb3Q7XG4gICAgICAgIH0gZWxzZSBpZiAoLy1NTU0tLy50ZXN0KGZvcm1hdCkpIHtcbiAgICAgICAgICAgIHJldHVybiBtb250aHNTaG9ydFttLm1vbnRoKCldO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG1vbnRoc1Nob3J0RG90W20ubW9udGgoKV07XG4gICAgICAgIH1cbiAgICB9LFxuICAgIG1vbnRoc1JlZ2V4IDogbW9udGhzUmVnZXgsXG4gICAgbW9udGhzU2hvcnRSZWdleCA6IG1vbnRoc1JlZ2V4LFxuICAgIG1vbnRoc1N0cmljdFJlZ2V4IDogL14oZW5lcm98ZmVicmVyb3xtYXJ6b3xhYnJpbHxtYXlvfGp1bmlvfGp1bGlvfGFnb3N0b3xzZXB0aWVtYnJlfG9jdHVicmV8bm92aWVtYnJlfGRpY2llbWJyZSkvaSxcbiAgICBtb250aHNTaG9ydFN0cmljdFJlZ2V4IDogL14oZW5lXFwuP3xmZWJcXC4/fG1hclxcLj98YWJyXFwuP3xtYXlcXC4/fGp1blxcLj98anVsXFwuP3xhZ29cXC4/fHNlcFxcLj98b2N0XFwuP3xub3ZcXC4/fGRpY1xcLj8pL2ksXG4gICAgbW9udGhzUGFyc2UgOiBtb250aHNQYXJzZSxcbiAgICBsb25nTW9udGhzUGFyc2UgOiBtb250aHNQYXJzZSxcbiAgICBzaG9ydE1vbnRoc1BhcnNlIDogbW9udGhzUGFyc2UsXG4gICAgd2Vla2RheXMgOiAnZG9taW5nb19sdW5lc19tYXJ0ZXNfbWnDqXJjb2xlc19qdWV2ZXNfdmllcm5lc19zw6FiYWRvJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzU2hvcnQgOiAnZG9tLl9sdW4uX21hci5fbWnDqS5fanVlLl92aWUuX3PDoWIuJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzTWluIDogJ2RvX2x1X21hX21pX2p1X3ZpX3PDoScuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICBMVCA6ICdIOm1tJyxcbiAgICAgICAgTFRTIDogJ0g6bW06c3MnLFxuICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICBMTCA6ICdEIFtkZV0gTU1NTSBbZGVdIFlZWVknLFxuICAgICAgICBMTEwgOiAnRCBbZGVdIE1NTU0gW2RlXSBZWVlZIEg6bW0nLFxuICAgICAgICBMTExMIDogJ2RkZGQsIEQgW2RlXSBNTU1NIFtkZV0gWVlZWSBIOm1tJ1xuICAgIH0sXG4gICAgY2FsZW5kYXIgOiB7XG4gICAgICAgIHNhbWVEYXkgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gJ1tob3kgYSBsYScgKyAoKHRoaXMuaG91cnMoKSAhPT0gMSkgPyAncycgOiAnJykgKyAnXSBMVCc7XG4gICAgICAgIH0sXG4gICAgICAgIG5leHREYXkgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gJ1ttYcOxYW5hIGEgbGEnICsgKCh0aGlzLmhvdXJzKCkgIT09IDEpID8gJ3MnIDogJycpICsgJ10gTFQnO1xuICAgICAgICB9LFxuICAgICAgICBuZXh0V2VlayA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiAnZGRkZCBbYSBsYScgKyAoKHRoaXMuaG91cnMoKSAhPT0gMSkgPyAncycgOiAnJykgKyAnXSBMVCc7XG4gICAgICAgIH0sXG4gICAgICAgIGxhc3REYXkgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gJ1theWVyIGEgbGEnICsgKCh0aGlzLmhvdXJzKCkgIT09IDEpID8gJ3MnIDogJycpICsgJ10gTFQnO1xuICAgICAgICB9LFxuICAgICAgICBsYXN0V2VlayA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiAnW2VsXSBkZGRkIFtwYXNhZG8gYSBsYScgKyAoKHRoaXMuaG91cnMoKSAhPT0gMSkgPyAncycgOiAnJykgKyAnXSBMVCc7XG4gICAgICAgIH0sXG4gICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgfSxcbiAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgIGZ1dHVyZSA6ICdlbiAlcycsXG4gICAgICAgIHBhc3QgOiAnaGFjZSAlcycsXG4gICAgICAgIHMgOiAndW5vcyBzZWd1bmRvcycsXG4gICAgICAgIG0gOiAndW4gbWludXRvJyxcbiAgICAgICAgbW0gOiAnJWQgbWludXRvcycsXG4gICAgICAgIGggOiAndW5hIGhvcmEnLFxuICAgICAgICBoaCA6ICclZCBob3JhcycsXG4gICAgICAgIGQgOiAndW4gZMOtYScsXG4gICAgICAgIGRkIDogJyVkIGTDrWFzJyxcbiAgICAgICAgTSA6ICd1biBtZXMnLFxuICAgICAgICBNTSA6ICclZCBtZXNlcycsXG4gICAgICAgIHkgOiAndW4gYcOxbycsXG4gICAgICAgIHl5IDogJyVkIGHDsW9zJ1xuICAgIH0sXG4gICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZSA6IC9cXGR7MSwyfcK6LyxcbiAgICBvcmRpbmFsIDogJyVkwronLFxuICAgIHdlZWsgOiB7XG4gICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgfVxufSk7XG5cbnJldHVybiBlcztcblxufSkpKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2VzLmpzIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IFNwYW5pc2ggKERvbWluaWNhbiBSZXB1YmxpYykgW2VzLWRvXVxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciBtb250aHNTaG9ydERvdCA9ICdlbmUuX2ZlYi5fbWFyLl9hYnIuX21heS5fanVuLl9qdWwuX2Fnby5fc2VwLl9vY3QuX25vdi5fZGljLicuc3BsaXQoJ18nKTtcbnZhciBtb250aHNTaG9ydCA9ICdlbmVfZmViX21hcl9hYnJfbWF5X2p1bl9qdWxfYWdvX3NlcF9vY3Rfbm92X2RpYycuc3BsaXQoJ18nKTtcblxudmFyIG1vbnRoc1BhcnNlID0gWy9eZW5lL2ksIC9eZmViL2ksIC9ebWFyL2ksIC9eYWJyL2ksIC9ebWF5L2ksIC9eanVuL2ksIC9eanVsL2ksIC9eYWdvL2ksIC9ec2VwL2ksIC9eb2N0L2ksIC9ebm92L2ksIC9eZGljL2ldO1xudmFyIG1vbnRoc1JlZ2V4ID0gL14oZW5lcm98ZmVicmVyb3xtYXJ6b3xhYnJpbHxtYXlvfGp1bmlvfGp1bGlvfGFnb3N0b3xzZXB0aWVtYnJlfG9jdHVicmV8bm92aWVtYnJlfGRpY2llbWJyZXxlbmVcXC4/fGZlYlxcLj98bWFyXFwuP3xhYnJcXC4/fG1heVxcLj98anVuXFwuP3xqdWxcXC4/fGFnb1xcLj98c2VwXFwuP3xvY3RcXC4/fG5vdlxcLj98ZGljXFwuPykvaTtcblxudmFyIGVzRG8gPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdlcy1kbycsIHtcbiAgICBtb250aHMgOiAnZW5lcm9fZmVicmVyb19tYXJ6b19hYnJpbF9tYXlvX2p1bmlvX2p1bGlvX2Fnb3N0b19zZXB0aWVtYnJlX29jdHVicmVfbm92aWVtYnJlX2RpY2llbWJyZScuc3BsaXQoJ18nKSxcbiAgICBtb250aHNTaG9ydCA6IGZ1bmN0aW9uIChtLCBmb3JtYXQpIHtcbiAgICAgICAgaWYgKCFtKSB7XG4gICAgICAgICAgICByZXR1cm4gbW9udGhzU2hvcnREb3Q7XG4gICAgICAgIH0gZWxzZSBpZiAoLy1NTU0tLy50ZXN0KGZvcm1hdCkpIHtcbiAgICAgICAgICAgIHJldHVybiBtb250aHNTaG9ydFttLm1vbnRoKCldO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG1vbnRoc1Nob3J0RG90W20ubW9udGgoKV07XG4gICAgICAgIH1cbiAgICB9LFxuICAgIG1vbnRoc1JlZ2V4OiBtb250aHNSZWdleCxcbiAgICBtb250aHNTaG9ydFJlZ2V4OiBtb250aHNSZWdleCxcbiAgICBtb250aHNTdHJpY3RSZWdleDogL14oZW5lcm98ZmVicmVyb3xtYXJ6b3xhYnJpbHxtYXlvfGp1bmlvfGp1bGlvfGFnb3N0b3xzZXB0aWVtYnJlfG9jdHVicmV8bm92aWVtYnJlfGRpY2llbWJyZSkvaSxcbiAgICBtb250aHNTaG9ydFN0cmljdFJlZ2V4OiAvXihlbmVcXC4/fGZlYlxcLj98bWFyXFwuP3xhYnJcXC4/fG1heVxcLj98anVuXFwuP3xqdWxcXC4/fGFnb1xcLj98c2VwXFwuP3xvY3RcXC4/fG5vdlxcLj98ZGljXFwuPykvaSxcbiAgICBtb250aHNQYXJzZTogbW9udGhzUGFyc2UsXG4gICAgbG9uZ01vbnRoc1BhcnNlOiBtb250aHNQYXJzZSxcbiAgICBzaG9ydE1vbnRoc1BhcnNlOiBtb250aHNQYXJzZSxcbiAgICB3ZWVrZGF5cyA6ICdkb21pbmdvX2x1bmVzX21hcnRlc19tacOpcmNvbGVzX2p1ZXZlc192aWVybmVzX3PDoWJhZG8nLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNTaG9ydCA6ICdkb20uX2x1bi5fbWFyLl9tacOpLl9qdWUuX3ZpZS5fc8OhYi4nLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNNaW4gOiAnZG9fbHVfbWFfbWlfanVfdmlfc8OhJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgIExUIDogJ2g6bW0gQScsXG4gICAgICAgIExUUyA6ICdoOm1tOnNzIEEnLFxuICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICBMTCA6ICdEIFtkZV0gTU1NTSBbZGVdIFlZWVknLFxuICAgICAgICBMTEwgOiAnRCBbZGVdIE1NTU0gW2RlXSBZWVlZIGg6bW0gQScsXG4gICAgICAgIExMTEwgOiAnZGRkZCwgRCBbZGVdIE1NTU0gW2RlXSBZWVlZIGg6bW0gQSdcbiAgICB9LFxuICAgIGNhbGVuZGFyIDoge1xuICAgICAgICBzYW1lRGF5IDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuICdbaG95IGEgbGEnICsgKCh0aGlzLmhvdXJzKCkgIT09IDEpID8gJ3MnIDogJycpICsgJ10gTFQnO1xuICAgICAgICB9LFxuICAgICAgICBuZXh0RGF5IDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuICdbbWHDsWFuYSBhIGxhJyArICgodGhpcy5ob3VycygpICE9PSAxKSA/ICdzJyA6ICcnKSArICddIExUJztcbiAgICAgICAgfSxcbiAgICAgICAgbmV4dFdlZWsgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gJ2RkZGQgW2EgbGEnICsgKCh0aGlzLmhvdXJzKCkgIT09IDEpID8gJ3MnIDogJycpICsgJ10gTFQnO1xuICAgICAgICB9LFxuICAgICAgICBsYXN0RGF5IDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuICdbYXllciBhIGxhJyArICgodGhpcy5ob3VycygpICE9PSAxKSA/ICdzJyA6ICcnKSArICddIExUJztcbiAgICAgICAgfSxcbiAgICAgICAgbGFzdFdlZWsgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gJ1tlbF0gZGRkZCBbcGFzYWRvIGEgbGEnICsgKCh0aGlzLmhvdXJzKCkgIT09IDEpID8gJ3MnIDogJycpICsgJ10gTFQnO1xuICAgICAgICB9LFxuICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgIH0sXG4gICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICBmdXR1cmUgOiAnZW4gJXMnLFxuICAgICAgICBwYXN0IDogJ2hhY2UgJXMnLFxuICAgICAgICBzIDogJ3Vub3Mgc2VndW5kb3MnLFxuICAgICAgICBtIDogJ3VuIG1pbnV0bycsXG4gICAgICAgIG1tIDogJyVkIG1pbnV0b3MnLFxuICAgICAgICBoIDogJ3VuYSBob3JhJyxcbiAgICAgICAgaGggOiAnJWQgaG9yYXMnLFxuICAgICAgICBkIDogJ3VuIGTDrWEnLFxuICAgICAgICBkZCA6ICclZCBkw61hcycsXG4gICAgICAgIE0gOiAndW4gbWVzJyxcbiAgICAgICAgTU0gOiAnJWQgbWVzZXMnLFxuICAgICAgICB5IDogJ3VuIGHDsW8nLFxuICAgICAgICB5eSA6ICclZCBhw7FvcydcbiAgICB9LFxuICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2UgOiAvXFxkezEsMn3Cui8sXG4gICAgb3JkaW5hbCA6ICclZMK6JyxcbiAgICB3ZWVrIDoge1xuICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgZG95IDogNCAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgIH1cbn0pO1xuXG5yZXR1cm4gZXNEbztcblxufSkpKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2VzLWRvLmpzIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IFNwYW5pc2ggKFVuaXRlZCBTdGF0ZXMpIFtlcy11c11cbi8vISBhdXRob3IgOiBidXN0dGEgOiBodHRwczovL2dpdGh1Yi5jb20vYnVzdHRhXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxudmFyIG1vbnRoc1Nob3J0RG90ID0gJ2VuZS5fZmViLl9tYXIuX2Fici5fbWF5Ll9qdW4uX2p1bC5fYWdvLl9zZXAuX29jdC5fbm92Ll9kaWMuJy5zcGxpdCgnXycpO1xudmFyIG1vbnRoc1Nob3J0ID0gJ2VuZV9mZWJfbWFyX2Ficl9tYXlfanVuX2p1bF9hZ29fc2VwX29jdF9ub3ZfZGljJy5zcGxpdCgnXycpO1xuXG52YXIgZXNVcyA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2VzLXVzJywge1xuICAgIG1vbnRocyA6ICdlbmVyb19mZWJyZXJvX21hcnpvX2FicmlsX21heW9fanVuaW9fanVsaW9fYWdvc3RvX3NlcHRpZW1icmVfb2N0dWJyZV9ub3ZpZW1icmVfZGljaWVtYnJlJy5zcGxpdCgnXycpLFxuICAgIG1vbnRoc1Nob3J0IDogZnVuY3Rpb24gKG0sIGZvcm1hdCkge1xuICAgICAgICBpZiAoIW0pIHtcbiAgICAgICAgICAgIHJldHVybiBtb250aHNTaG9ydERvdDtcbiAgICAgICAgfSBlbHNlIGlmICgvLU1NTS0vLnRlc3QoZm9ybWF0KSkge1xuICAgICAgICAgICAgcmV0dXJuIG1vbnRoc1Nob3J0W20ubW9udGgoKV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbW9udGhzU2hvcnREb3RbbS5tb250aCgpXTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgbW9udGhzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgd2Vla2RheXMgOiAnZG9taW5nb19sdW5lc19tYXJ0ZXNfbWnDqXJjb2xlc19qdWV2ZXNfdmllcm5lc19zw6FiYWRvJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzU2hvcnQgOiAnZG9tLl9sdW4uX21hci5fbWnDqS5fanVlLl92aWUuX3PDoWIuJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzTWluIDogJ2RvX2x1X21hX21pX2p1X3ZpX3PDoScuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICBMVCA6ICdIOm1tJyxcbiAgICAgICAgTFRTIDogJ0g6bW06c3MnLFxuICAgICAgICBMIDogJ01NL0REL1lZWVknLFxuICAgICAgICBMTCA6ICdNTU1NIFtkZV0gRCBbZGVdIFlZWVknLFxuICAgICAgICBMTEwgOiAnTU1NTSBbZGVdIEQgW2RlXSBZWVlZIEg6bW0nLFxuICAgICAgICBMTExMIDogJ2RkZGQsIE1NTU0gW2RlXSBEIFtkZV0gWVlZWSBIOm1tJ1xuICAgIH0sXG4gICAgY2FsZW5kYXIgOiB7XG4gICAgICAgIHNhbWVEYXkgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gJ1tob3kgYSBsYScgKyAoKHRoaXMuaG91cnMoKSAhPT0gMSkgPyAncycgOiAnJykgKyAnXSBMVCc7XG4gICAgICAgIH0sXG4gICAgICAgIG5leHREYXkgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gJ1ttYcOxYW5hIGEgbGEnICsgKCh0aGlzLmhvdXJzKCkgIT09IDEpID8gJ3MnIDogJycpICsgJ10gTFQnO1xuICAgICAgICB9LFxuICAgICAgICBuZXh0V2VlayA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiAnZGRkZCBbYSBsYScgKyAoKHRoaXMuaG91cnMoKSAhPT0gMSkgPyAncycgOiAnJykgKyAnXSBMVCc7XG4gICAgICAgIH0sXG4gICAgICAgIGxhc3REYXkgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gJ1theWVyIGEgbGEnICsgKCh0aGlzLmhvdXJzKCkgIT09IDEpID8gJ3MnIDogJycpICsgJ10gTFQnO1xuICAgICAgICB9LFxuICAgICAgICBsYXN0V2VlayA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiAnW2VsXSBkZGRkIFtwYXNhZG8gYSBsYScgKyAoKHRoaXMuaG91cnMoKSAhPT0gMSkgPyAncycgOiAnJykgKyAnXSBMVCc7XG4gICAgICAgIH0sXG4gICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgfSxcbiAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgIGZ1dHVyZSA6ICdlbiAlcycsXG4gICAgICAgIHBhc3QgOiAnaGFjZSAlcycsXG4gICAgICAgIHMgOiAndW5vcyBzZWd1bmRvcycsXG4gICAgICAgIG0gOiAndW4gbWludXRvJyxcbiAgICAgICAgbW0gOiAnJWQgbWludXRvcycsXG4gICAgICAgIGggOiAndW5hIGhvcmEnLFxuICAgICAgICBoaCA6ICclZCBob3JhcycsXG4gICAgICAgIGQgOiAndW4gZMOtYScsXG4gICAgICAgIGRkIDogJyVkIGTDrWFzJyxcbiAgICAgICAgTSA6ICd1biBtZXMnLFxuICAgICAgICBNTSA6ICclZCBtZXNlcycsXG4gICAgICAgIHkgOiAndW4gYcOxbycsXG4gICAgICAgIHl5IDogJyVkIGHDsW9zJ1xuICAgIH0sXG4gICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZSA6IC9cXGR7MSwyfcK6LyxcbiAgICBvcmRpbmFsIDogJyVkwronLFxuICAgIHdlZWsgOiB7XG4gICAgICAgIGRvdyA6IDAsIC8vIFN1bmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICBkb3kgOiA2ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiAxc3QgaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgfVxufSk7XG5cbnJldHVybiBlc1VzO1xuXG59KSkpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZXMtdXMuanMiLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogRXN0b25pYW4gW2V0XVxuLy8hIGF1dGhvciA6IEhlbnJ5IEtlaGxtYW5uIDogaHR0cHM6Ly9naXRodWIuY29tL21hZGhlbnJ5XG4vLyEgaW1wcm92ZW1lbnRzIDogSWxsaW1hciBUYW1iZWsgOiBodHRwczovL2dpdGh1Yi5jb20vcmFndWxrYVxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbmZ1bmN0aW9uIHByb2Nlc3NSZWxhdGl2ZVRpbWUobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXksIGlzRnV0dXJlKSB7XG4gICAgdmFyIGZvcm1hdCA9IHtcbiAgICAgICAgJ3MnIDogWydtw7VuZSBzZWt1bmRpJywgJ23DtW5pIHNla3VuZCcsICdwYWFyIHNla3VuZGl0J10sXG4gICAgICAgICdtJyA6IFsnw7xoZSBtaW51dGknLCAnw7xrcyBtaW51dCddLFxuICAgICAgICAnbW0nOiBbbnVtYmVyICsgJyBtaW51dGknLCBudW1iZXIgKyAnIG1pbnV0aXQnXSxcbiAgICAgICAgJ2gnIDogWyfDvGhlIHR1bm5pJywgJ3R1bmQgYWVnYScsICfDvGtzIHR1bmQnXSxcbiAgICAgICAgJ2hoJzogW251bWJlciArICcgdHVubmknLCBudW1iZXIgKyAnIHR1bmRpJ10sXG4gICAgICAgICdkJyA6IFsnw7xoZSBww6RldmEnLCAnw7xrcyBww6RldiddLFxuICAgICAgICAnTScgOiBbJ2t1dSBhamEnLCAna3V1IGFlZ2EnLCAnw7xrcyBrdXUnXSxcbiAgICAgICAgJ01NJzogW251bWJlciArICcga3V1JywgbnVtYmVyICsgJyBrdXVkJ10sXG4gICAgICAgICd5JyA6IFsnw7xoZSBhYXN0YScsICdhYXN0YScsICfDvGtzIGFhc3RhJ10sXG4gICAgICAgICd5eSc6IFtudW1iZXIgKyAnIGFhc3RhJywgbnVtYmVyICsgJyBhYXN0YXQnXVxuICAgIH07XG4gICAgaWYgKHdpdGhvdXRTdWZmaXgpIHtcbiAgICAgICAgcmV0dXJuIGZvcm1hdFtrZXldWzJdID8gZm9ybWF0W2tleV1bMl0gOiBmb3JtYXRba2V5XVsxXTtcbiAgICB9XG4gICAgcmV0dXJuIGlzRnV0dXJlID8gZm9ybWF0W2tleV1bMF0gOiBmb3JtYXRba2V5XVsxXTtcbn1cblxudmFyIGV0ID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZXQnLCB7XG4gICAgbW9udGhzICAgICAgICA6ICdqYWFudWFyX3ZlZWJydWFyX23DpHJ0c19hcHJpbGxfbWFpX2p1dW5pX2p1dWxpX2F1Z3VzdF9zZXB0ZW1iZXJfb2t0b29iZXJfbm92ZW1iZXJfZGV0c2VtYmVyJy5zcGxpdCgnXycpLFxuICAgIG1vbnRoc1Nob3J0ICAgOiAnamFhbl92ZWVicl9tw6RydHNfYXByX21haV9qdXVuaV9qdXVsaV9hdWdfc2VwdF9va3Rfbm92X2RldHMnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXMgICAgICA6ICdww7xoYXDDpGV2X2VzbWFzcMOkZXZfdGVpc2lww6Rldl9rb2xtYXDDpGV2X25lbGphcMOkZXZfcmVlZGVfbGF1cMOkZXYnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNTaG9ydCA6ICdQX0VfVF9LX05fUl9MJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzTWluICAgOiAnUF9FX1RfS19OX1JfTCcuc3BsaXQoJ18nKSxcbiAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgTFQgICA6ICdIOm1tJyxcbiAgICAgICAgTFRTIDogJ0g6bW06c3MnLFxuICAgICAgICBMICAgIDogJ0RELk1NLllZWVknLFxuICAgICAgICBMTCAgIDogJ0QuIE1NTU0gWVlZWScsXG4gICAgICAgIExMTCAgOiAnRC4gTU1NTSBZWVlZIEg6bW0nLFxuICAgICAgICBMTExMIDogJ2RkZGQsIEQuIE1NTU0gWVlZWSBIOm1tJ1xuICAgIH0sXG4gICAgY2FsZW5kYXIgOiB7XG4gICAgICAgIHNhbWVEYXkgIDogJ1tUw6RuYSxdIExUJyxcbiAgICAgICAgbmV4dERheSAgOiAnW0hvbW1lLF0gTFQnLFxuICAgICAgICBuZXh0V2VlayA6ICdbSsOkcmdtaW5lXSBkZGRkIExUJyxcbiAgICAgICAgbGFzdERheSAgOiAnW0VpbGUsXSBMVCcsXG4gICAgICAgIGxhc3RXZWVrIDogJ1tFZWxtaW5lXSBkZGRkIExUJyxcbiAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICB9LFxuICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgZnV0dXJlIDogJyVzIHDDpHJhc3QnLFxuICAgICAgICBwYXN0ICAgOiAnJXMgdGFnYXNpJyxcbiAgICAgICAgcyAgICAgIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgbSAgICAgIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgbW0gICAgIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgaCAgICAgIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgaGggICAgIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgZCAgICAgIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgZGQgICAgIDogJyVkIHDDpGV2YScsXG4gICAgICAgIE0gICAgICA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgIE1NICAgICA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgIHkgICAgICA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgIHl5ICAgICA6IHByb2Nlc3NSZWxhdGl2ZVRpbWVcbiAgICB9LFxuICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfVxcLi8sXG4gICAgb3JkaW5hbCA6ICclZC4nLFxuICAgIHdlZWsgOiB7XG4gICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgfVxufSk7XG5cbnJldHVybiBldDtcblxufSkpKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2V0LmpzIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEJhc3F1ZSBbZXVdXG4vLyEgYXV0aG9yIDogRW5la28gSWxsYXJyYW1lbmRpIDogaHR0cHM6Ly9naXRodWIuY29tL2VpbGxhcnJhXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxudmFyIGV1ID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZXUnLCB7XG4gICAgbW9udGhzIDogJ3VydGFycmlsYV9vdHNhaWxhX21hcnR4b2FfYXBpcmlsYV9tYWlhdHphX2VrYWluYV91enRhaWxhX2FidXp0dWFfaXJhaWxhX3VycmlhX2F6YXJvYV9hYmVuZHVhJy5zcGxpdCgnXycpLFxuICAgIG1vbnRoc1Nob3J0IDogJ3VydC5fb3RzLl9tYXIuX2FwaS5fbWFpLl9la2EuX3V6dC5fYWJ1Ll9pcmEuX3Vyci5fYXphLl9hYmUuJy5zcGxpdCgnXycpLFxuICAgIG1vbnRoc1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgIHdlZWtkYXlzIDogJ2lnYW5kZWFfYXN0ZWxlaGVuYV9hc3RlYXJ0ZWFfYXN0ZWF6a2VuYV9vc3RlZ3VuYV9vc3RpcmFsYV9sYXJ1bmJhdGEnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNTaG9ydCA6ICdpZy5fYWwuX2FyLl9hei5fb2cuX29sLl9sci4nLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNNaW4gOiAnaWdfYWxfYXJfYXpfb2dfb2xfbHInLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICBMIDogJ1lZWVktTU0tREQnLFxuICAgICAgICBMTCA6ICdZWVlZW2tvXSBNTU1NW3Jlbl0gRFthXScsXG4gICAgICAgIExMTCA6ICdZWVlZW2tvXSBNTU1NW3Jlbl0gRFthXSBISDptbScsXG4gICAgICAgIExMTEwgOiAnZGRkZCwgWVlZWVtrb10gTU1NTVtyZW5dIERbYV0gSEg6bW0nLFxuICAgICAgICBsIDogJ1lZWVktTS1EJyxcbiAgICAgICAgbGwgOiAnWVlZWVtrb10gTU1NIERbYV0nLFxuICAgICAgICBsbGwgOiAnWVlZWVtrb10gTU1NIERbYV0gSEg6bW0nLFxuICAgICAgICBsbGxsIDogJ2RkZCwgWVlZWVtrb10gTU1NIERbYV0gSEg6bW0nXG4gICAgfSxcbiAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgc2FtZURheSA6ICdbZ2F1cl0gTFRbZXRhbl0nLFxuICAgICAgICBuZXh0RGF5IDogJ1tiaWhhcl0gTFRbZXRhbl0nLFxuICAgICAgICBuZXh0V2VlayA6ICdkZGRkIExUW2V0YW5dJyxcbiAgICAgICAgbGFzdERheSA6ICdbYXR6b10gTFRbZXRhbl0nLFxuICAgICAgICBsYXN0V2VlayA6ICdbYXVycmVrb10gZGRkZCBMVFtldGFuXScsXG4gICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgfSxcbiAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgIGZ1dHVyZSA6ICclcyBiYXJydScsXG4gICAgICAgIHBhc3QgOiAnZHVlbGEgJXMnLFxuICAgICAgICBzIDogJ3NlZ3VuZG8gYmF0enVrJyxcbiAgICAgICAgbSA6ICdtaW51dHUgYmF0JyxcbiAgICAgICAgbW0gOiAnJWQgbWludXR1JyxcbiAgICAgICAgaCA6ICdvcmR1IGJhdCcsXG4gICAgICAgIGhoIDogJyVkIG9yZHUnLFxuICAgICAgICBkIDogJ2VndW4gYmF0JyxcbiAgICAgICAgZGQgOiAnJWQgZWd1bicsXG4gICAgICAgIE0gOiAnaGlsYWJldGUgYmF0JyxcbiAgICAgICAgTU0gOiAnJWQgaGlsYWJldGUnLFxuICAgICAgICB5IDogJ3VydGUgYmF0JyxcbiAgICAgICAgeXkgOiAnJWQgdXJ0ZSdcbiAgICB9LFxuICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfVxcLi8sXG4gICAgb3JkaW5hbCA6ICclZC4nLFxuICAgIHdlZWsgOiB7XG4gICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICBkb3kgOiA3ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiAxc3QgaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgfVxufSk7XG5cbnJldHVybiBldTtcblxufSkpKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2V1LmpzIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IFBlcnNpYW4gW2ZhXVxuLy8hIGF1dGhvciA6IEVicmFoaW0gQnlhZ293aSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9lYnJhbWluaW9cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG52YXIgc3ltYm9sTWFwID0ge1xuICAgICcxJzogJ9uxJyxcbiAgICAnMic6ICfbsicsXG4gICAgJzMnOiAn27MnLFxuICAgICc0JzogJ9u0JyxcbiAgICAnNSc6ICfbtScsXG4gICAgJzYnOiAn27YnLFxuICAgICc3JzogJ9u3JyxcbiAgICAnOCc6ICfbuCcsXG4gICAgJzknOiAn27knLFxuICAgICcwJzogJ9uwJ1xufTtcbnZhciBudW1iZXJNYXAgPSB7XG4gICAgJ9uxJzogJzEnLFxuICAgICfbsic6ICcyJyxcbiAgICAn27MnOiAnMycsXG4gICAgJ9u0JzogJzQnLFxuICAgICfbtSc6ICc1JyxcbiAgICAn27YnOiAnNicsXG4gICAgJ9u3JzogJzcnLFxuICAgICfbuCc6ICc4JyxcbiAgICAn27knOiAnOScsXG4gICAgJ9uwJzogJzAnXG59O1xuXG52YXIgZmEgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdmYScsIHtcbiAgICBtb250aHMgOiAn2pjYp9mG2YjbjNmHX9mB2YjYsduM2Ydf2YXYp9ix2LNf2KLZiNix24zZhF/ZhdmHX9qY2YjYptmGX9qY2YjYptuM2Ydf2KfZiNiqX9iz2b7Yqtin2YXYqNixX9in2qnYqtio2LFf2YbZiNin2YXYqNixX9iv2LPYp9mF2KjYsScuc3BsaXQoJ18nKSxcbiAgICBtb250aHNTaG9ydCA6ICfamNin2YbZiNuM2Ydf2YHZiNix24zZh1/Zhdin2LHYs1/YotmI2LHbjNmEX9mF2Ydf2pjZiNim2YZf2pjZiNim24zZh1/Yp9mI2Kpf2LPZvtiq2KfZhdio2LFf2Kfaqdiq2KjYsV/ZhtmI2KfZhdio2LFf2K/Ys9in2YXYqNixJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzIDogJ9uM2qlcXHUyMDBj2LTZhtio2Ydf2K/ZiNi02YbYqNmHX9iz2YdcXHUyMDBj2LTZhtio2Ydf2obZh9in2LHYtNmG2KjZh1/ZvtmG2KxcXHUyMDBj2LTZhtio2Ydf2KzZhdi52Ydf2LTZhtio2YcnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNTaG9ydCA6ICfbjNqpXFx1MjAwY9i02YbYqNmHX9iv2YjYtNmG2KjZh1/Ys9mHXFx1MjAwY9i02YbYqNmHX9qG2YfYp9ix2LTZhtio2Ydf2b7ZhtisXFx1MjAwY9i02YbYqNmHX9is2YXYudmHX9i02YbYqNmHJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzTWluIDogJ9uMX9ivX9izX9qGX9m+X9isX9i0Jy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICBMTExMIDogJ2RkZGQsIEQgTU1NTSBZWVlZIEhIOm1tJ1xuICAgIH0sXG4gICAgbWVyaWRpZW1QYXJzZTogL9mC2KjZhCDYp9iyINi42YfYsXzYqNi52K8g2KfYsiDYuNmH2LEvLFxuICAgIGlzUE06IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICByZXR1cm4gL9io2LnYryDYp9iyINi42YfYsS8udGVzdChpbnB1dCk7XG4gICAgfSxcbiAgICBtZXJpZGllbSA6IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgaWYgKGhvdXIgPCAxMikge1xuICAgICAgICAgICAgcmV0dXJuICfZgtio2YQg2KfYsiDYuNmH2LEnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuICfYqNi52K8g2KfYsiDYuNmH2LEnO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgc2FtZURheSA6ICdb2KfZhdix2YjYsiDYs9in2LnYql0gTFQnLFxuICAgICAgICBuZXh0RGF5IDogJ1vZgdix2K/YpyDYs9in2LnYql0gTFQnLFxuICAgICAgICBuZXh0V2VlayA6ICdkZGRkIFvYs9in2LnYql0gTFQnLFxuICAgICAgICBsYXN0RGF5IDogJ1vYr9uM2LHZiNiyINiz2KfYudiqXSBMVCcsXG4gICAgICAgIGxhc3RXZWVrIDogJ2RkZGQgW9m+24zYtF0gW9iz2KfYudiqXSBMVCcsXG4gICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgfSxcbiAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgIGZ1dHVyZSA6ICfYr9ixICVzJyxcbiAgICAgICAgcGFzdCA6ICclcyDZvtuM2LQnLFxuICAgICAgICBzIDogJ9qG2YbYryDYq9in2YbbjNmHJyxcbiAgICAgICAgbSA6ICfbjNqpINiv2YLbjNmC2YcnLFxuICAgICAgICBtbSA6ICclZCDYr9mC24zZgtmHJyxcbiAgICAgICAgaCA6ICfbjNqpINiz2KfYudiqJyxcbiAgICAgICAgaGggOiAnJWQg2LPYp9i52KonLFxuICAgICAgICBkIDogJ9uM2qkg2LHZiNiyJyxcbiAgICAgICAgZGQgOiAnJWQg2LHZiNiyJyxcbiAgICAgICAgTSA6ICfbjNqpINmF2KfZhycsXG4gICAgICAgIE1NIDogJyVkINmF2KfZhycsXG4gICAgICAgIHkgOiAn24zaqSDYs9in2YQnLFxuICAgICAgICB5eSA6ICclZCDYs9in2YQnXG4gICAgfSxcbiAgICBwcmVwYXJzZTogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1vbsC3buV0vZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyTWFwW21hdGNoXTtcbiAgICAgICAgfSkucmVwbGFjZSgv2IwvZywgJywnKTtcbiAgICB9LFxuICAgIHBvc3Rmb3JtYXQ6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9cXGQvZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICByZXR1cm4gc3ltYm9sTWFwW21hdGNoXTtcbiAgICAgICAgfSkucmVwbGFjZSgvLC9nLCAn2IwnKTtcbiAgICB9LFxuICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfdmFLyxcbiAgICBvcmRpbmFsIDogJyVk2YUnLFxuICAgIHdlZWsgOiB7XG4gICAgICAgIGRvdyA6IDYsIC8vIFNhdHVyZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgIGRveSA6IDEyIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDFzdCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICB9XG59KTtcblxucmV0dXJuIGZhO1xuXG59KSkpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZmEuanMiLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogRmlubmlzaCBbZmldXG4vLyEgYXV0aG9yIDogVGFybW8gQWlkYW50YXVzdGEgOiBodHRwczovL2dpdGh1Yi5jb20vYmxlYWRvZlxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciBudW1iZXJzUGFzdCA9ICdub2xsYSB5a3NpIGtha3NpIGtvbG1lIG5lbGrDpCB2aWlzaSBrdXVzaSBzZWl0c2Vtw6RuIGthaGRla3NhbiB5aGRla3PDpG4nLnNwbGl0KCcgJyk7XG52YXIgbnVtYmVyc0Z1dHVyZSA9IFtcbiAgICAgICAgJ25vbGxhJywgJ3loZGVuJywgJ2thaGRlbicsICdrb2xtZW4nLCAnbmVsasOkbicsICd2aWlkZW4nLCAna3V1ZGVuJyxcbiAgICAgICAgbnVtYmVyc1Bhc3RbN10sIG51bWJlcnNQYXN0WzhdLCBudW1iZXJzUGFzdFs5XVxuICAgIF07XG5mdW5jdGlvbiB0cmFuc2xhdGUobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXksIGlzRnV0dXJlKSB7XG4gICAgdmFyIHJlc3VsdCA9ICcnO1xuICAgIHN3aXRjaCAoa2V5KSB7XG4gICAgICAgIGNhc2UgJ3MnOlxuICAgICAgICAgICAgcmV0dXJuIGlzRnV0dXJlID8gJ211dXRhbWFuIHNla3VubmluJyA6ICdtdXV0YW1hIHNla3VudGknO1xuICAgICAgICBjYXNlICdtJzpcbiAgICAgICAgICAgIHJldHVybiBpc0Z1dHVyZSA/ICdtaW51dXRpbicgOiAnbWludXV0dGknO1xuICAgICAgICBjYXNlICdtbSc6XG4gICAgICAgICAgICByZXN1bHQgPSBpc0Z1dHVyZSA/ICdtaW51dXRpbicgOiAnbWludXV0dGlhJztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdoJzpcbiAgICAgICAgICAgIHJldHVybiBpc0Z1dHVyZSA/ICd0dW5uaW4nIDogJ3R1bnRpJztcbiAgICAgICAgY2FzZSAnaGgnOlxuICAgICAgICAgICAgcmVzdWx0ID0gaXNGdXR1cmUgPyAndHVubmluJyA6ICd0dW50aWEnO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2QnOlxuICAgICAgICAgICAgcmV0dXJuIGlzRnV0dXJlID8gJ3DDpGl2w6RuJyA6ICdww6RpdsOkJztcbiAgICAgICAgY2FzZSAnZGQnOlxuICAgICAgICAgICAgcmVzdWx0ID0gaXNGdXR1cmUgPyAncMOkaXbDpG4nIDogJ3DDpGl2w6TDpCc7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnTSc6XG4gICAgICAgICAgICByZXR1cm4gaXNGdXR1cmUgPyAna3V1a2F1ZGVuJyA6ICdrdXVrYXVzaSc7XG4gICAgICAgIGNhc2UgJ01NJzpcbiAgICAgICAgICAgIHJlc3VsdCA9IGlzRnV0dXJlID8gJ2t1dWthdWRlbicgOiAna3V1a2F1dHRhJztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICd5JzpcbiAgICAgICAgICAgIHJldHVybiBpc0Z1dHVyZSA/ICd2dW9kZW4nIDogJ3Z1b3NpJztcbiAgICAgICAgY2FzZSAneXknOlxuICAgICAgICAgICAgcmVzdWx0ID0gaXNGdXR1cmUgPyAndnVvZGVuJyA6ICd2dW90dGEnO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHJlc3VsdCA9IHZlcmJhbE51bWJlcihudW1iZXIsIGlzRnV0dXJlKSArICcgJyArIHJlc3VsdDtcbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gdmVyYmFsTnVtYmVyKG51bWJlciwgaXNGdXR1cmUpIHtcbiAgICByZXR1cm4gbnVtYmVyIDwgMTAgPyAoaXNGdXR1cmUgPyBudW1iZXJzRnV0dXJlW251bWJlcl0gOiBudW1iZXJzUGFzdFtudW1iZXJdKSA6IG51bWJlcjtcbn1cblxudmFyIGZpID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZmknLCB7XG4gICAgbW9udGhzIDogJ3RhbW1pa3V1X2hlbG1pa3V1X21hYWxpc2t1dV9odWh0aWt1dV90b3Vrb2t1dV9rZXPDpGt1dV9oZWluw6RrdXVfZWxva3V1X3N5eXNrdXVfbG9rYWt1dV9tYXJyYXNrdXVfam91bHVrdXUnLnNwbGl0KCdfJyksXG4gICAgbW9udGhzU2hvcnQgOiAndGFtbWlfaGVsbWlfbWFhbGlzX2h1aHRpX3RvdWtvX2tlc8OkX2hlaW7DpF9lbG9fc3l5c19sb2thX21hcnJhc19qb3VsdScuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5cyA6ICdzdW5udW50YWlfbWFhbmFudGFpX3RpaXN0YWlfa2Vza2l2aWlra29fdG9yc3RhaV9wZXJqYW50YWlfbGF1YW50YWknLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNTaG9ydCA6ICdzdV9tYV90aV9rZV90b19wZV9sYScuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c01pbiA6ICdzdV9tYV90aV9rZV90b19wZV9sYScuc3BsaXQoJ18nKSxcbiAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgTFQgOiAnSEgubW0nLFxuICAgICAgICBMVFMgOiAnSEgubW0uc3MnLFxuICAgICAgICBMIDogJ0RELk1NLllZWVknLFxuICAgICAgICBMTCA6ICdEbyBNTU1NW3RhXSBZWVlZJyxcbiAgICAgICAgTExMIDogJ0RvIE1NTU1bdGFdIFlZWVksIFtrbG9dIEhILm1tJyxcbiAgICAgICAgTExMTCA6ICdkZGRkLCBEbyBNTU1NW3RhXSBZWVlZLCBba2xvXSBISC5tbScsXG4gICAgICAgIGwgOiAnRC5NLllZWVknLFxuICAgICAgICBsbCA6ICdEbyBNTU0gWVlZWScsXG4gICAgICAgIGxsbCA6ICdEbyBNTU0gWVlZWSwgW2tsb10gSEgubW0nLFxuICAgICAgICBsbGxsIDogJ2RkZCwgRG8gTU1NIFlZWVksIFtrbG9dIEhILm1tJ1xuICAgIH0sXG4gICAgY2FsZW5kYXIgOiB7XG4gICAgICAgIHNhbWVEYXkgOiAnW3TDpG7DpMOkbl0gW2tsb10gTFQnLFxuICAgICAgICBuZXh0RGF5IDogJ1todW9tZW5uYV0gW2tsb10gTFQnLFxuICAgICAgICBuZXh0V2VlayA6ICdkZGRkIFtrbG9dIExUJyxcbiAgICAgICAgbGFzdERheSA6ICdbZWlsZW5dIFtrbG9dIExUJyxcbiAgICAgICAgbGFzdFdlZWsgOiAnW3ZpaW1lXSBkZGRkW25hXSBba2xvXSBMVCcsXG4gICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgfSxcbiAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgIGZ1dHVyZSA6ICclcyBww6TDpHN0w6QnLFxuICAgICAgICBwYXN0IDogJyVzIHNpdHRlbicsXG4gICAgICAgIHMgOiB0cmFuc2xhdGUsXG4gICAgICAgIG0gOiB0cmFuc2xhdGUsXG4gICAgICAgIG1tIDogdHJhbnNsYXRlLFxuICAgICAgICBoIDogdHJhbnNsYXRlLFxuICAgICAgICBoaCA6IHRyYW5zbGF0ZSxcbiAgICAgICAgZCA6IHRyYW5zbGF0ZSxcbiAgICAgICAgZGQgOiB0cmFuc2xhdGUsXG4gICAgICAgIE0gOiB0cmFuc2xhdGUsXG4gICAgICAgIE1NIDogdHJhbnNsYXRlLFxuICAgICAgICB5IDogdHJhbnNsYXRlLFxuICAgICAgICB5eSA6IHRyYW5zbGF0ZVxuICAgIH0sXG4gICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9XFwuLyxcbiAgICBvcmRpbmFsIDogJyVkLicsXG4gICAgd2VlayA6IHtcbiAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICB9XG59KTtcblxucmV0dXJuIGZpO1xuXG59KSkpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZmkuanMiLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogRmFyb2VzZSBbZm9dXG4vLyEgYXV0aG9yIDogUmFnbmFyIEpvaGFubmVzZW4gOiBodHRwczovL2dpdGh1Yi5jb20vcmFnbmFyMTIzXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxudmFyIGZvID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZm8nLCB7XG4gICAgbW9udGhzIDogJ2phbnVhcl9mZWJydWFyX21hcnNfYXByw61sX21haV9qdW5pX2p1bGlfYXVndXN0X3NlcHRlbWJlcl9va3RvYmVyX25vdmVtYmVyX2Rlc2VtYmVyJy5zcGxpdCgnXycpLFxuICAgIG1vbnRoc1Nob3J0IDogJ2phbl9mZWJfbWFyX2Fwcl9tYWlfanVuX2p1bF9hdWdfc2VwX29rdF9ub3ZfZGVzJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzIDogJ3N1bm51ZGFndXJfbcOhbmFkYWd1cl90w71zZGFndXJfbWlrdWRhZ3VyX2jDs3NkYWd1cl9mcsOtZ2dqYWRhZ3VyX2xleWdhcmRhZ3VyJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzU2hvcnQgOiAnc3VuX23DoW5fdMO9c19taWtfaMOzc19mcsOtX2xleScuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c01pbiA6ICdzdV9tw6FfdMO9X21pX2jDs19mcl9sZScuc3BsaXQoJ18nKSxcbiAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgIExMTEwgOiAnZGRkZCBELiBNTU1NLCBZWVlZIEhIOm1tJ1xuICAgIH0sXG4gICAgY2FsZW5kYXIgOiB7XG4gICAgICAgIHNhbWVEYXkgOiAnW8ONIGRhZyBrbC5dIExUJyxcbiAgICAgICAgbmV4dERheSA6ICdbw40gbW9yZ2luIGtsLl0gTFQnLFxuICAgICAgICBuZXh0V2VlayA6ICdkZGRkIFtrbC5dIExUJyxcbiAgICAgICAgbGFzdERheSA6ICdbw40gZ2rDoXIga2wuXSBMVCcsXG4gICAgICAgIGxhc3RXZWVrIDogJ1tzw63DsHN0dV0gZGRkZCBba2xdIExUJyxcbiAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICB9LFxuICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgZnV0dXJlIDogJ3VtICVzJyxcbiAgICAgICAgcGFzdCA6ICclcyBzw63DsGFuaScsXG4gICAgICAgIHMgOiAnZsOhIHNla3VuZCcsXG4gICAgICAgIG0gOiAnZWluIG1pbnV0dCcsXG4gICAgICAgIG1tIDogJyVkIG1pbnV0dGlyJyxcbiAgICAgICAgaCA6ICdlaW4gdMOtbWknLFxuICAgICAgICBoaCA6ICclZCB0w61tYXInLFxuICAgICAgICBkIDogJ2VpbiBkYWd1cicsXG4gICAgICAgIGRkIDogJyVkIGRhZ2FyJyxcbiAgICAgICAgTSA6ICdlaW4gbcOhbmHDsGknLFxuICAgICAgICBNTSA6ICclZCBtw6FuYcOwaXInLFxuICAgICAgICB5IDogJ2VpdHQgw6FyJyxcbiAgICAgICAgeXkgOiAnJWQgw6FyJ1xuICAgIH0sXG4gICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9XFwuLyxcbiAgICBvcmRpbmFsIDogJyVkLicsXG4gICAgd2VlayA6IHtcbiAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICB9XG59KTtcblxucmV0dXJuIGZvO1xuXG59KSkpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZm8uanMiLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogRnJlbmNoIFtmcl1cbi8vISBhdXRob3IgOiBKb2huIEZpc2NoZXIgOiBodHRwczovL2dpdGh1Yi5jb20vamZyb2ZmaWNlXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxudmFyIGZyID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZnInLCB7XG4gICAgbW9udGhzIDogJ2phbnZpZXJfZsOpdnJpZXJfbWFyc19hdnJpbF9tYWlfanVpbl9qdWlsbGV0X2Fvw7t0X3NlcHRlbWJyZV9vY3RvYnJlX25vdmVtYnJlX2TDqWNlbWJyZScuc3BsaXQoJ18nKSxcbiAgICBtb250aHNTaG9ydCA6ICdqYW52Ll9mw6l2ci5fbWFyc19hdnIuX21haV9qdWluX2p1aWwuX2Fvw7t0X3NlcHQuX29jdC5fbm92Ll9kw6ljLicuc3BsaXQoJ18nKSxcbiAgICBtb250aHNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICB3ZWVrZGF5cyA6ICdkaW1hbmNoZV9sdW5kaV9tYXJkaV9tZXJjcmVkaV9qZXVkaV92ZW5kcmVkaV9zYW1lZGknLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNTaG9ydCA6ICdkaW0uX2x1bi5fbWFyLl9tZXIuX2pldS5fdmVuLl9zYW0uJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzTWluIDogJ0RpX0x1X01hX01lX0plX1ZlX1NhJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICBMTExMIDogJ2RkZGQgRCBNTU1NIFlZWVkgSEg6bW0nXG4gICAgfSxcbiAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgc2FtZURheSA6ICdbQXVqb3VyZOKAmWh1aSDDoF0gTFQnLFxuICAgICAgICBuZXh0RGF5IDogJ1tEZW1haW4gw6BdIExUJyxcbiAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCBbw6BdIExUJyxcbiAgICAgICAgbGFzdERheSA6ICdbSGllciDDoF0gTFQnLFxuICAgICAgICBsYXN0V2VlayA6ICdkZGRkIFtkZXJuaWVyIMOgXSBMVCcsXG4gICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgfSxcbiAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgIGZ1dHVyZSA6ICdkYW5zICVzJyxcbiAgICAgICAgcGFzdCA6ICdpbCB5IGEgJXMnLFxuICAgICAgICBzIDogJ3F1ZWxxdWVzIHNlY29uZGVzJyxcbiAgICAgICAgbSA6ICd1bmUgbWludXRlJyxcbiAgICAgICAgbW0gOiAnJWQgbWludXRlcycsXG4gICAgICAgIGggOiAndW5lIGhldXJlJyxcbiAgICAgICAgaGggOiAnJWQgaGV1cmVzJyxcbiAgICAgICAgZCA6ICd1biBqb3VyJyxcbiAgICAgICAgZGQgOiAnJWQgam91cnMnLFxuICAgICAgICBNIDogJ3VuIG1vaXMnLFxuICAgICAgICBNTSA6ICclZCBtb2lzJyxcbiAgICAgICAgeSA6ICd1biBhbicsXG4gICAgICAgIHl5IDogJyVkIGFucydcbiAgICB9LFxuICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfShlcnwpLyxcbiAgICBvcmRpbmFsIDogZnVuY3Rpb24gKG51bWJlciwgcGVyaW9kKSB7XG4gICAgICAgIHN3aXRjaCAocGVyaW9kKSB7XG4gICAgICAgICAgICAvLyBUT0RPOiBSZXR1cm4gJ2UnIHdoZW4gZGF5IG9mIG1vbnRoID4gMS4gTW92ZSB0aGlzIGNhc2UgaW5zaWRlXG4gICAgICAgICAgICAvLyBibG9jayBmb3IgbWFzY3VsaW5lIHdvcmRzIGJlbG93LlxuICAgICAgICAgICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9tb21lbnQvbW9tZW50L2lzc3Vlcy8zMzc1XG4gICAgICAgICAgICBjYXNlICdEJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgKG51bWJlciA9PT0gMSA/ICdlcicgOiAnJyk7XG5cbiAgICAgICAgICAgIC8vIFdvcmRzIHdpdGggbWFzY3VsaW5lIGdyYW1tYXRpY2FsIGdlbmRlcjogbW9pcywgdHJpbWVzdHJlLCBqb3VyXG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgY2FzZSAnTSc6XG4gICAgICAgICAgICBjYXNlICdRJzpcbiAgICAgICAgICAgIGNhc2UgJ0RERCc6XG4gICAgICAgICAgICBjYXNlICdkJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgKG51bWJlciA9PT0gMSA/ICdlcicgOiAnZScpO1xuXG4gICAgICAgICAgICAvLyBXb3JkcyB3aXRoIGZlbWluaW5lIGdyYW1tYXRpY2FsIGdlbmRlcjogc2VtYWluZVxuICAgICAgICAgICAgY2FzZSAndyc6XG4gICAgICAgICAgICBjYXNlICdXJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgKG51bWJlciA9PT0gMSA/ICdyZScgOiAnZScpO1xuICAgICAgICB9XG4gICAgfSxcbiAgICB3ZWVrIDoge1xuICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgZG95IDogNCAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgIH1cbn0pO1xuXG5yZXR1cm4gZnI7XG5cbn0pKSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9mci5qcyIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBGcmVuY2ggKENhbmFkYSkgW2ZyLWNhXVxuLy8hIGF1dGhvciA6IEpvbmF0aGFuIEFib3VyYmloIDogaHR0cHM6Ly9naXRodWIuY29tL2pvbmJjYVxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciBmckNhID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZnItY2EnLCB7XG4gICAgbW9udGhzIDogJ2phbnZpZXJfZsOpdnJpZXJfbWFyc19hdnJpbF9tYWlfanVpbl9qdWlsbGV0X2Fvw7t0X3NlcHRlbWJyZV9vY3RvYnJlX25vdmVtYnJlX2TDqWNlbWJyZScuc3BsaXQoJ18nKSxcbiAgICBtb250aHNTaG9ydCA6ICdqYW52Ll9mw6l2ci5fbWFyc19hdnIuX21haV9qdWluX2p1aWwuX2Fvw7t0X3NlcHQuX29jdC5fbm92Ll9kw6ljLicuc3BsaXQoJ18nKSxcbiAgICBtb250aHNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICB3ZWVrZGF5cyA6ICdkaW1hbmNoZV9sdW5kaV9tYXJkaV9tZXJjcmVkaV9qZXVkaV92ZW5kcmVkaV9zYW1lZGknLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNTaG9ydCA6ICdkaW0uX2x1bi5fbWFyLl9tZXIuX2pldS5fdmVuLl9zYW0uJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzTWluIDogJ0RpX0x1X01hX01lX0plX1ZlX1NhJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgTCA6ICdZWVlZLU1NLUREJyxcbiAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICBMTExMIDogJ2RkZGQgRCBNTU1NIFlZWVkgSEg6bW0nXG4gICAgfSxcbiAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgc2FtZURheSA6ICdbQXVqb3VyZOKAmWh1aSDDoF0gTFQnLFxuICAgICAgICBuZXh0RGF5IDogJ1tEZW1haW4gw6BdIExUJyxcbiAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCBbw6BdIExUJyxcbiAgICAgICAgbGFzdERheSA6ICdbSGllciDDoF0gTFQnLFxuICAgICAgICBsYXN0V2VlayA6ICdkZGRkIFtkZXJuaWVyIMOgXSBMVCcsXG4gICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgfSxcbiAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgIGZ1dHVyZSA6ICdkYW5zICVzJyxcbiAgICAgICAgcGFzdCA6ICdpbCB5IGEgJXMnLFxuICAgICAgICBzIDogJ3F1ZWxxdWVzIHNlY29uZGVzJyxcbiAgICAgICAgbSA6ICd1bmUgbWludXRlJyxcbiAgICAgICAgbW0gOiAnJWQgbWludXRlcycsXG4gICAgICAgIGggOiAndW5lIGhldXJlJyxcbiAgICAgICAgaGggOiAnJWQgaGV1cmVzJyxcbiAgICAgICAgZCA6ICd1biBqb3VyJyxcbiAgICAgICAgZGQgOiAnJWQgam91cnMnLFxuICAgICAgICBNIDogJ3VuIG1vaXMnLFxuICAgICAgICBNTSA6ICclZCBtb2lzJyxcbiAgICAgICAgeSA6ICd1biBhbicsXG4gICAgICAgIHl5IDogJyVkIGFucydcbiAgICB9LFxuICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfShlcnxlKS8sXG4gICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIsIHBlcmlvZCkge1xuICAgICAgICBzd2l0Y2ggKHBlcmlvZCkge1xuICAgICAgICAgICAgLy8gV29yZHMgd2l0aCBtYXNjdWxpbmUgZ3JhbW1hdGljYWwgZ2VuZGVyOiBtb2lzLCB0cmltZXN0cmUsIGpvdXJcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBjYXNlICdNJzpcbiAgICAgICAgICAgIGNhc2UgJ1EnOlxuICAgICAgICAgICAgY2FzZSAnRCc6XG4gICAgICAgICAgICBjYXNlICdEREQnOlxuICAgICAgICAgICAgY2FzZSAnZCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArIChudW1iZXIgPT09IDEgPyAnZXInIDogJ2UnKTtcblxuICAgICAgICAgICAgLy8gV29yZHMgd2l0aCBmZW1pbmluZSBncmFtbWF0aWNhbCBnZW5kZXI6IHNlbWFpbmVcbiAgICAgICAgICAgIGNhc2UgJ3cnOlxuICAgICAgICAgICAgY2FzZSAnVyc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArIChudW1iZXIgPT09IDEgPyAncmUnIDogJ2UnKTtcbiAgICAgICAgfVxuICAgIH1cbn0pO1xuXG5yZXR1cm4gZnJDYTtcblxufSkpKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2ZyLWNhLmpzIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEZyZW5jaCAoU3dpdHplcmxhbmQpIFtmci1jaF1cbi8vISBhdXRob3IgOiBHYXNwYXJkIEJ1Y2hlciA6IGh0dHBzOi8vZ2l0aHViLmNvbS9nYXNwYXJkXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxudmFyIGZyQ2ggPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdmci1jaCcsIHtcbiAgICBtb250aHMgOiAnamFudmllcl9mw6l2cmllcl9tYXJzX2F2cmlsX21haV9qdWluX2p1aWxsZXRfYW/Du3Rfc2VwdGVtYnJlX29jdG9icmVfbm92ZW1icmVfZMOpY2VtYnJlJy5zcGxpdCgnXycpLFxuICAgIG1vbnRoc1Nob3J0IDogJ2phbnYuX2bDqXZyLl9tYXJzX2F2ci5fbWFpX2p1aW5fanVpbC5fYW/Du3Rfc2VwdC5fb2N0Ll9ub3YuX2TDqWMuJy5zcGxpdCgnXycpLFxuICAgIG1vbnRoc1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgIHdlZWtkYXlzIDogJ2RpbWFuY2hlX2x1bmRpX21hcmRpX21lcmNyZWRpX2pldWRpX3ZlbmRyZWRpX3NhbWVkaScuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1Nob3J0IDogJ2RpbS5fbHVuLl9tYXIuX21lci5famV1Ll92ZW4uX3NhbS4nLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNNaW4gOiAnRGlfTHVfTWFfTWVfSmVfVmVfU2EnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICBMIDogJ0RELk1NLllZWVknLFxuICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgIExMTEwgOiAnZGRkZCBEIE1NTU0gWVlZWSBISDptbSdcbiAgICB9LFxuICAgIGNhbGVuZGFyIDoge1xuICAgICAgICBzYW1lRGF5IDogJ1tBdWpvdXJk4oCZaHVpIMOgXSBMVCcsXG4gICAgICAgIG5leHREYXkgOiAnW0RlbWFpbiDDoF0gTFQnLFxuICAgICAgICBuZXh0V2VlayA6ICdkZGRkIFvDoF0gTFQnLFxuICAgICAgICBsYXN0RGF5IDogJ1tIaWVyIMOgXSBMVCcsXG4gICAgICAgIGxhc3RXZWVrIDogJ2RkZGQgW2Rlcm5pZXIgw6BdIExUJyxcbiAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICB9LFxuICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgZnV0dXJlIDogJ2RhbnMgJXMnLFxuICAgICAgICBwYXN0IDogJ2lsIHkgYSAlcycsXG4gICAgICAgIHMgOiAncXVlbHF1ZXMgc2Vjb25kZXMnLFxuICAgICAgICBtIDogJ3VuZSBtaW51dGUnLFxuICAgICAgICBtbSA6ICclZCBtaW51dGVzJyxcbiAgICAgICAgaCA6ICd1bmUgaGV1cmUnLFxuICAgICAgICBoaCA6ICclZCBoZXVyZXMnLFxuICAgICAgICBkIDogJ3VuIGpvdXInLFxuICAgICAgICBkZCA6ICclZCBqb3VycycsXG4gICAgICAgIE0gOiAndW4gbW9pcycsXG4gICAgICAgIE1NIDogJyVkIG1vaXMnLFxuICAgICAgICB5IDogJ3VuIGFuJyxcbiAgICAgICAgeXkgOiAnJWQgYW5zJ1xuICAgIH0sXG4gICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9KGVyfGUpLyxcbiAgICBvcmRpbmFsIDogZnVuY3Rpb24gKG51bWJlciwgcGVyaW9kKSB7XG4gICAgICAgIHN3aXRjaCAocGVyaW9kKSB7XG4gICAgICAgICAgICAvLyBXb3JkcyB3aXRoIG1hc2N1bGluZSBncmFtbWF0aWNhbCBnZW5kZXI6IG1vaXMsIHRyaW1lc3RyZSwgam91clxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGNhc2UgJ00nOlxuICAgICAgICAgICAgY2FzZSAnUSc6XG4gICAgICAgICAgICBjYXNlICdEJzpcbiAgICAgICAgICAgIGNhc2UgJ0RERCc6XG4gICAgICAgICAgICBjYXNlICdkJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgKG51bWJlciA9PT0gMSA/ICdlcicgOiAnZScpO1xuXG4gICAgICAgICAgICAvLyBXb3JkcyB3aXRoIGZlbWluaW5lIGdyYW1tYXRpY2FsIGdlbmRlcjogc2VtYWluZVxuICAgICAgICAgICAgY2FzZSAndyc6XG4gICAgICAgICAgICBjYXNlICdXJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgKG51bWJlciA9PT0gMSA/ICdyZScgOiAnZScpO1xuICAgICAgICB9XG4gICAgfSxcbiAgICB3ZWVrIDoge1xuICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgZG95IDogNCAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgIH1cbn0pO1xuXG5yZXR1cm4gZnJDaDtcblxufSkpKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2ZyLWNoLmpzIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEZyaXNpYW4gW2Z5XVxuLy8hIGF1dGhvciA6IFJvYmluIHZhbiBkZXIgVmxpZXQgOiBodHRwczovL2dpdGh1Yi5jb20vcm9iaW4wdmFuMGRlcjB2XG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxudmFyIG1vbnRoc1Nob3J0V2l0aERvdHMgPSAnamFuLl9mZWIuX21ydC5fYXByLl9tYWlfanVuLl9qdWwuX2F1Zy5fc2VwLl9va3QuX25vdi5fZGVzLicuc3BsaXQoJ18nKTtcbnZhciBtb250aHNTaG9ydFdpdGhvdXREb3RzID0gJ2phbl9mZWJfbXJ0X2Fwcl9tYWlfanVuX2p1bF9hdWdfc2VwX29rdF9ub3ZfZGVzJy5zcGxpdCgnXycpO1xuXG52YXIgZnkgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdmeScsIHtcbiAgICBtb250aHMgOiAnamFubmV3YXJpc19mZWJyZXdhcmlzX21hYXJ0X2FwcmlsX21hYWllX2p1bnlfanVseV9hdWd1c3R1c19zZXB0aW1iZXJfb2t0b2Jlcl9ub3ZpbWJlcl9kZXNpbWJlcicuc3BsaXQoJ18nKSxcbiAgICBtb250aHNTaG9ydCA6IGZ1bmN0aW9uIChtLCBmb3JtYXQpIHtcbiAgICAgICAgaWYgKCFtKSB7XG4gICAgICAgICAgICByZXR1cm4gbW9udGhzU2hvcnRXaXRoRG90cztcbiAgICAgICAgfSBlbHNlIGlmICgvLU1NTS0vLnRlc3QoZm9ybWF0KSkge1xuICAgICAgICAgICAgcmV0dXJuIG1vbnRoc1Nob3J0V2l0aG91dERvdHNbbS5tb250aCgpXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBtb250aHNTaG9ydFdpdGhEb3RzW20ubW9udGgoKV07XG4gICAgICAgIH1cbiAgICB9LFxuICAgIG1vbnRoc1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgIHdlZWtkYXlzIDogJ3NuZWluX21vYW5kZWlfdGlpc2RlaV93b2Fuc2RlaV90b25nZXJzZGVpX2ZyZWVkX3NuZW9uJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzU2hvcnQgOiAnc2kuX21vLl90aS5fd28uX3RvLl9mci5fc28uJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzTWluIDogJ1NpX01vX1RpX1dvX1RvX0ZyX1NvJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgTCA6ICdERC1NTS1ZWVlZJyxcbiAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICBMTExMIDogJ2RkZGQgRCBNTU1NIFlZWVkgSEg6bW0nXG4gICAgfSxcbiAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgc2FtZURheTogJ1toam9lZCBvbV0gTFQnLFxuICAgICAgICBuZXh0RGF5OiAnW21vYXJuIG9tXSBMVCcsXG4gICAgICAgIG5leHRXZWVrOiAnZGRkZCBbb21dIExUJyxcbiAgICAgICAgbGFzdERheTogJ1tqdXN0ZXIgb21dIExUJyxcbiAgICAgICAgbGFzdFdlZWs6ICdbw7RmcsO7bmVdIGRkZGQgW29tXSBMVCcsXG4gICAgICAgIHNhbWVFbHNlOiAnTCdcbiAgICB9LFxuICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgZnV0dXJlIDogJ29lciAlcycsXG4gICAgICAgIHBhc3QgOiAnJXMgbHluJyxcbiAgICAgICAgcyA6ICdpbiBwZWFyIHNla29uZGVuJyxcbiAgICAgICAgbSA6ICdpZW4gbWluw7p0JyxcbiAgICAgICAgbW0gOiAnJWQgbWludXRlbicsXG4gICAgICAgIGggOiAnaWVuIG9lcmUnLFxuICAgICAgICBoaCA6ICclZCBvZXJlbicsXG4gICAgICAgIGQgOiAnaWVuIGRlaScsXG4gICAgICAgIGRkIDogJyVkIGRhZ2VuJyxcbiAgICAgICAgTSA6ICdpZW4gbW9hbm5lJyxcbiAgICAgICAgTU0gOiAnJWQgbW9hbm5lbicsXG4gICAgICAgIHkgOiAnaWVuIGppZXInLFxuICAgICAgICB5eSA6ICclZCBqaWVycmVuJ1xuICAgIH0sXG4gICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9KHN0ZXxkZSkvLFxuICAgIG9yZGluYWwgOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgIHJldHVybiBudW1iZXIgKyAoKG51bWJlciA9PT0gMSB8fCBudW1iZXIgPT09IDggfHwgbnVtYmVyID49IDIwKSA/ICdzdGUnIDogJ2RlJyk7XG4gICAgfSxcbiAgICB3ZWVrIDoge1xuICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgZG95IDogNCAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgIH1cbn0pO1xuXG5yZXR1cm4gZnk7XG5cbn0pKSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9meS5qcyIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBTY290dGlzaCBHYWVsaWMgW2dkXVxuLy8hIGF1dGhvciA6IEpvbiBBc2hkb3duIDogaHR0cHM6Ly9naXRodWIuY29tL2pvbmFzaGRvd25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG52YXIgbW9udGhzID0gW1xuICAgICdBbSBGYW9pbGxlYWNoJywgJ0FuIEdlYXJyYW4nLCAnQW0gTcOgcnQnLCAnQW4gR2libGVhbicsICdBbiBDw6hpdGVhbicsICdBbiB0LcOSZ21oaW9zJywgJ0FuIHQtSXVjaGFyJywgJ0FuIEzDuW5hc3RhbCcsICdBbiB0LVN1bHRhaW4nLCAnQW4gRMOgbWhhaXInLCAnQW4gdC1TYW1oYWluJywgJ0FuIETDuWJobGFjaGQnXG5dO1xuXG52YXIgbW9udGhzU2hvcnQgPSBbJ0Zhb2knLCAnR2VhcicsICdNw6BydCcsICdHaWJsJywgJ0PDqGl0JywgJ8OSZ21oJywgJ0l1Y2gnLCAnTMO5bicsICdTdWx0JywgJ0TDoG1oJywgJ1NhbWgnLCAnRMO5YmgnXTtcblxudmFyIHdlZWtkYXlzID0gWydEaWTDsm1obmFpY2gnLCAnRGlsdWFpbicsICdEaW3DoGlydCcsICdEaWNpYWRhaW4nLCAnRGlhcmRhb2luJywgJ0RpaGFvaW5lJywgJ0Rpc2F0aGFpcm5lJ107XG5cbnZhciB3ZWVrZGF5c1Nob3J0ID0gWydEaWQnLCAnRGlsJywgJ0RpbScsICdEaWMnLCAnRGlhJywgJ0RpaCcsICdEaXMnXTtcblxudmFyIHdlZWtkYXlzTWluID0gWydEw7InLCAnTHUnLCAnTcOgJywgJ0NpJywgJ0FyJywgJ0hhJywgJ1NhJ107XG5cbnZhciBnZCA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2dkJywge1xuICAgIG1vbnRocyA6IG1vbnRocyxcbiAgICBtb250aHNTaG9ydCA6IG1vbnRoc1Nob3J0LFxuICAgIG1vbnRoc1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgIHdlZWtkYXlzIDogd2Vla2RheXMsXG4gICAgd2Vla2RheXNTaG9ydCA6IHdlZWtkYXlzU2hvcnQsXG4gICAgd2Vla2RheXNNaW4gOiB3ZWVrZGF5c01pbixcbiAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgIExMTEwgOiAnZGRkZCwgRCBNTU1NIFlZWVkgSEg6bW0nXG4gICAgfSxcbiAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgc2FtZURheSA6ICdbQW4tZGl1Z2ggYWlnXSBMVCcsXG4gICAgICAgIG5leHREYXkgOiAnW0EtbcOgaXJlYWNoIGFpZ10gTFQnLFxuICAgICAgICBuZXh0V2VlayA6ICdkZGRkIFthaWddIExUJyxcbiAgICAgICAgbGFzdERheSA6ICdbQW4tZMOoIGFpZ10gTFQnLFxuICAgICAgICBsYXN0V2VlayA6ICdkZGRkIFtzZW8gY2hhaWRoXSBbYWlnXSBMVCcsXG4gICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgfSxcbiAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgIGZ1dHVyZSA6ICdhbm4gYW4gJXMnLFxuICAgICAgICBwYXN0IDogJ2JobyBjaGlvbm4gJXMnLFxuICAgICAgICBzIDogJ2JlYWdhbiBkaW9nYW4nLFxuICAgICAgICBtIDogJ21pb25haWQnLFxuICAgICAgICBtbSA6ICclZCBtaW9uYWlkZWFuJyxcbiAgICAgICAgaCA6ICd1YWlyJyxcbiAgICAgICAgaGggOiAnJWQgdWFpcmVhbicsXG4gICAgICAgIGQgOiAnbGF0aGEnLFxuICAgICAgICBkZCA6ICclZCBsYXRoYScsXG4gICAgICAgIE0gOiAnbcOsb3MnLFxuICAgICAgICBNTSA6ICclZCBtw6xvc2FuJyxcbiAgICAgICAgeSA6ICdibGlhZGhuYScsXG4gICAgICAgIHl5IDogJyVkIGJsaWFkaG5hJ1xuICAgIH0sXG4gICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZSA6IC9cXGR7MSwyfShkfG5hfG1oKS8sXG4gICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgdmFyIG91dHB1dCA9IG51bWJlciA9PT0gMSA/ICdkJyA6IG51bWJlciAlIDEwID09PSAyID8gJ25hJyA6ICdtaCc7XG4gICAgICAgIHJldHVybiBudW1iZXIgKyBvdXRwdXQ7XG4gICAgfSxcbiAgICB3ZWVrIDoge1xuICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgZG95IDogNCAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgIH1cbn0pO1xuXG5yZXR1cm4gZ2Q7XG5cbn0pKSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9nZC5qcyIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBHYWxpY2lhbiBbZ2xdXG4vLyEgYXV0aG9yIDogSnVhbiBHLiBIdXJ0YWRvIDogaHR0cHM6Ly9naXRodWIuY29tL2p1YW5naHVydGFkb1xuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciBnbCA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2dsJywge1xuICAgIG1vbnRocyA6ICd4YW5laXJvX2ZlYnJlaXJvX21hcnpvX2FicmlsX21haW9feHXDsW9feHVsbG9fYWdvc3RvX3NldGVtYnJvX291dHVicm9fbm92ZW1icm9fZGVjZW1icm8nLnNwbGl0KCdfJyksXG4gICAgbW9udGhzU2hvcnQgOiAneGFuLl9mZWIuX21hci5fYWJyLl9tYWkuX3h1w7EuX3h1bC5fYWdvLl9zZXQuX291dC5fbm92Ll9kZWMuJy5zcGxpdCgnXycpLFxuICAgIG1vbnRoc1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgd2Vla2RheXMgOiAnZG9taW5nb19sdW5zX21hcnRlc19tw6lyY29yZXNfeG92ZXNfdmVucmVzX3PDoWJhZG8nLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNTaG9ydCA6ICdkb20uX2x1bi5fbWFyLl9tw6lyLl94b3YuX3Zlbi5fc8OhYi4nLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNNaW4gOiAnZG9fbHVfbWFfbcOpX3hvX3ZlX3PDoScuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICBMVCA6ICdIOm1tJyxcbiAgICAgICAgTFRTIDogJ0g6bW06c3MnLFxuICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICBMTCA6ICdEIFtkZV0gTU1NTSBbZGVdIFlZWVknLFxuICAgICAgICBMTEwgOiAnRCBbZGVdIE1NTU0gW2RlXSBZWVlZIEg6bW0nLFxuICAgICAgICBMTExMIDogJ2RkZGQsIEQgW2RlXSBNTU1NIFtkZV0gWVlZWSBIOm1tJ1xuICAgIH0sXG4gICAgY2FsZW5kYXIgOiB7XG4gICAgICAgIHNhbWVEYXkgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gJ1tob3hlICcgKyAoKHRoaXMuaG91cnMoKSAhPT0gMSkgPyAnw6FzJyA6ICfDoScpICsgJ10gTFQnO1xuICAgICAgICB9LFxuICAgICAgICBuZXh0RGF5IDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuICdbbWHDscOhICcgKyAoKHRoaXMuaG91cnMoKSAhPT0gMSkgPyAnw6FzJyA6ICfDoScpICsgJ10gTFQnO1xuICAgICAgICB9LFxuICAgICAgICBuZXh0V2VlayA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiAnZGRkZCBbJyArICgodGhpcy5ob3VycygpICE9PSAxKSA/ICfDoXMnIDogJ2EnKSArICddIExUJztcbiAgICAgICAgfSxcbiAgICAgICAgbGFzdERheSA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiAnW29udGUgJyArICgodGhpcy5ob3VycygpICE9PSAxKSA/ICfDoScgOiAnYScpICsgJ10gTFQnO1xuICAgICAgICB9LFxuICAgICAgICBsYXN0V2VlayA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiAnW29dIGRkZGQgW3Bhc2FkbyAnICsgKCh0aGlzLmhvdXJzKCkgIT09IDEpID8gJ8OhcycgOiAnYScpICsgJ10gTFQnO1xuICAgICAgICB9LFxuICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgIH0sXG4gICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICBmdXR1cmUgOiBmdW5jdGlvbiAoc3RyKSB7XG4gICAgICAgICAgICBpZiAoc3RyLmluZGV4T2YoJ3VuJykgPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ24nICsgc3RyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuICdlbiAnICsgc3RyO1xuICAgICAgICB9LFxuICAgICAgICBwYXN0IDogJ2hhaSAlcycsXG4gICAgICAgIHMgOiAndW5zIHNlZ3VuZG9zJyxcbiAgICAgICAgbSA6ICd1biBtaW51dG8nLFxuICAgICAgICBtbSA6ICclZCBtaW51dG9zJyxcbiAgICAgICAgaCA6ICd1bmhhIGhvcmEnLFxuICAgICAgICBoaCA6ICclZCBob3JhcycsXG4gICAgICAgIGQgOiAndW4gZMOtYScsXG4gICAgICAgIGRkIDogJyVkIGTDrWFzJyxcbiAgICAgICAgTSA6ICd1biBtZXMnLFxuICAgICAgICBNTSA6ICclZCBtZXNlcycsXG4gICAgICAgIHkgOiAndW4gYW5vJyxcbiAgICAgICAgeXkgOiAnJWQgYW5vcydcbiAgICB9LFxuICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2UgOiAvXFxkezEsMn3Cui8sXG4gICAgb3JkaW5hbCA6ICclZMK6JyxcbiAgICB3ZWVrIDoge1xuICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgZG95IDogNCAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgIH1cbn0pO1xuXG5yZXR1cm4gZ2w7XG5cbn0pKSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9nbC5qcyIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBLb25rYW5pIExhdGluIHNjcmlwdCBbZ29tLWxhdG5dXG4vLyEgYXV0aG9yIDogVGhlIERpc2NvdmVyZXIgOiBodHRwczovL2dpdGh1Yi5jb20vV2lraURpc2NvdmVyZXJcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG5mdW5jdGlvbiBwcm9jZXNzUmVsYXRpdmVUaW1lKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5LCBpc0Z1dHVyZSkge1xuICAgIHZhciBmb3JtYXQgPSB7XG4gICAgICAgICdzJzogWyd0aG9kZGUgc2Vjb25kYW5pbScsICd0aG9kZGUgc2Vjb25kJ10sXG4gICAgICAgICdtJzogWydla2EgbWludGFuJywgJ2VrIG1pbnV0ZSddLFxuICAgICAgICAnbW0nOiBbbnVtYmVyICsgJyBtaW50YW5pbScsIG51bWJlciArICcgbWludGFtJ10sXG4gICAgICAgICdoJzogWydla2EgaG9yYW4nLCAnZWsgaG9yJ10sXG4gICAgICAgICdoaCc6IFtudW1iZXIgKyAnIGhvcmFuaW0nLCBudW1iZXIgKyAnIGhvciddLFxuICAgICAgICAnZCc6IFsnZWthIGRpc2FuJywgJ2VrIGRpcyddLFxuICAgICAgICAnZGQnOiBbbnVtYmVyICsgJyBkaXNhbmltJywgbnVtYmVyICsgJyBkaXMnXSxcbiAgICAgICAgJ00nOiBbJ2VrYSBtaG9pbmVhbicsICdlayBtaG9pbm8nXSxcbiAgICAgICAgJ01NJzogW251bWJlciArICcgbWhvaW5lYW5pbScsIG51bWJlciArICcgbWhvaW5lJ10sXG4gICAgICAgICd5JzogWydla2Egdm9yc2FuJywgJ2VrIHZvcm9zJ10sXG4gICAgICAgICd5eSc6IFtudW1iZXIgKyAnIHZvcnNhbmltJywgbnVtYmVyICsgJyB2b3JzYW0nXVxuICAgIH07XG4gICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggPyBmb3JtYXRba2V5XVswXSA6IGZvcm1hdFtrZXldWzFdO1xufVxuXG52YXIgZ29tTGF0biA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2dvbS1sYXRuJywge1xuICAgIG1vbnRocyA6ICdKYW5lcl9GZWJyZXJfTWFyc19BYnJpbF9NYWlfSnVuX0p1bGFpX0Fnb3N0X1NldGVtYnJfT3R1YnJfTm92ZW1icl9EZXplbWJyJy5zcGxpdCgnXycpLFxuICAgIG1vbnRoc1Nob3J0IDogJ0phbi5fRmViLl9NYXJzX0Fici5fTWFpX0p1bl9KdWwuX0Fnby5fU2V0Ll9PdHUuX05vdi5fRGV6Licuc3BsaXQoJ18nKSxcbiAgICBtb250aHNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICB3ZWVrZGF5cyA6ICdBaXRhcl9Tb21hcl9Nb25nbGxhcl9CdWR2YXJfQnJlc3Rhcl9TdWtyYXJfU29uXFwndmFyJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzU2hvcnQgOiAnQWl0Ll9Tb20uX01vbi5fQnVkLl9CcmUuX1N1ay5fU29uLicuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c01pbiA6ICdBaV9TbV9Nb19CdV9Ccl9TdV9Tbicuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICBMVCA6ICdBIGg6bW0gW3ZhenRhXScsXG4gICAgICAgIExUUyA6ICdBIGg6bW06c3MgW3ZhenRhXScsXG4gICAgICAgIEwgOiAnREQtTU0tWVlZWScsXG4gICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIEEgaDptbSBbdmF6dGFdJyxcbiAgICAgICAgTExMTCA6ICdkZGRkLCBNTU1NW2FjaGVhXSBEbywgWVlZWSwgQSBoOm1tIFt2YXp0YV0nLFxuICAgICAgICBsbGxsOiAnZGRkLCBEIE1NTSBZWVlZLCBBIGg6bW0gW3ZhenRhXSdcbiAgICB9LFxuICAgIGNhbGVuZGFyIDoge1xuICAgICAgICBzYW1lRGF5OiAnW0Fpel0gTFQnLFxuICAgICAgICBuZXh0RGF5OiAnW0ZhbGVhbV0gTFQnLFxuICAgICAgICBuZXh0V2VlazogJ1tJZXRhIHRvXSBkZGRkWyxdIExUJyxcbiAgICAgICAgbGFzdERheTogJ1tLYWxdIExUJyxcbiAgICAgICAgbGFzdFdlZWs6ICdbRmF0bG9dIGRkZGRbLF0gTFQnLFxuICAgICAgICBzYW1lRWxzZTogJ0wnXG4gICAgfSxcbiAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgIGZ1dHVyZSA6ICclcycsXG4gICAgICAgIHBhc3QgOiAnJXMgYWRpbScsXG4gICAgICAgIHMgOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICBtIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgbW0gOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICBoIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgaGggOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICBkIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgZGQgOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICBNIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgTU0gOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICB5IDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgeXkgOiBwcm9jZXNzUmVsYXRpdmVUaW1lXG4gICAgfSxcbiAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlIDogL1xcZHsxLDJ9KGVyKS8sXG4gICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIsIHBlcmlvZCkge1xuICAgICAgICBzd2l0Y2ggKHBlcmlvZCkge1xuICAgICAgICAgICAgLy8gdGhlIG9yZGluYWwgJ2VyJyBvbmx5IGFwcGxpZXMgdG8gZGF5IG9mIHRoZSBtb250aFxuICAgICAgICAgICAgY2FzZSAnRCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICdlcic7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgY2FzZSAnTSc6XG4gICAgICAgICAgICBjYXNlICdRJzpcbiAgICAgICAgICAgIGNhc2UgJ0RERCc6XG4gICAgICAgICAgICBjYXNlICdkJzpcbiAgICAgICAgICAgIGNhc2UgJ3cnOlxuICAgICAgICAgICAgY2FzZSAnVyc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgd2VlayA6IHtcbiAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICB9LFxuICAgIG1lcmlkaWVtUGFyc2U6IC9yYXRpfHNva2FsbGl8ZG9ucGFyYW18c2FuamUvLFxuICAgIG1lcmlkaWVtSG91ciA6IGZ1bmN0aW9uIChob3VyLCBtZXJpZGllbSkge1xuICAgICAgICBpZiAoaG91ciA9PT0gMTIpIHtcbiAgICAgICAgICAgIGhvdXIgPSAwO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXJpZGllbSA9PT0gJ3JhdGknKSB7XG4gICAgICAgICAgICByZXR1cm4gaG91ciA8IDQgPyBob3VyIDogaG91ciArIDEyO1xuICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAnc29rYWxsaScpIHtcbiAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAnZG9ucGFyYW0nKSB7XG4gICAgICAgICAgICByZXR1cm4gaG91ciA+IDEyID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ3NhbmplJykge1xuICAgICAgICAgICAgcmV0dXJuIGhvdXIgKyAxMjtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgbWVyaWRpZW0gOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgIGlmIChob3VyIDwgNCkge1xuICAgICAgICAgICAgcmV0dXJuICdyYXRpJztcbiAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTIpIHtcbiAgICAgICAgICAgIHJldHVybiAnc29rYWxsaSc7XG4gICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDE2KSB7XG4gICAgICAgICAgICByZXR1cm4gJ2RvbnBhcmFtJztcbiAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMjApIHtcbiAgICAgICAgICAgIHJldHVybiAnc2FuamUnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuICdyYXRpJztcbiAgICAgICAgfVxuICAgIH1cbn0pO1xuXG5yZXR1cm4gZ29tTGF0bjtcblxufSkpKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2dvbS1sYXRuLmpzIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEd1amFyYXRpIFtndV1cbi8vISBhdXRob3IgOiBLYXVzaGlrIFRoYW5raSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9LYXVzaGlrMTk4N1xuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciBzeW1ib2xNYXAgPSB7XG4gICAgICAgICcxJzogJ+CrpycsXG4gICAgICAgICcyJzogJ+CrqCcsXG4gICAgICAgICczJzogJ+CrqScsXG4gICAgICAgICc0JzogJ+CrqicsXG4gICAgICAgICc1JzogJ+CrqycsXG4gICAgICAgICc2JzogJ+CrrCcsXG4gICAgICAgICc3JzogJ+CrrScsXG4gICAgICAgICc4JzogJ+CrricsXG4gICAgICAgICc5JzogJ+CrrycsXG4gICAgICAgICcwJzogJ+CrpidcbiAgICB9O1xudmFyIG51bWJlck1hcCA9IHtcbiAgICAgICAgJ+Crpyc6ICcxJyxcbiAgICAgICAgJ+CrqCc6ICcyJyxcbiAgICAgICAgJ+CrqSc6ICczJyxcbiAgICAgICAgJ+Crqic6ICc0JyxcbiAgICAgICAgJ+Crqyc6ICc1JyxcbiAgICAgICAgJ+CrrCc6ICc2JyxcbiAgICAgICAgJ+CrrSc6ICc3JyxcbiAgICAgICAgJ+Crric6ICc4JyxcbiAgICAgICAgJ+Crryc6ICc5JyxcbiAgICAgICAgJ+Crpic6ICcwJ1xuICAgIH07XG5cbnZhciBndSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2d1Jywge1xuICAgIG1vbnRoczogJ+CqnOCqvuCqqOCrjeCqr+CrgeCqhuCqsOCrgF/gqqvgq4fgqqzgq43gqrDgq4HgqobgqrDgq4Bf4Kqu4Kq+4Kqw4KuN4KqaX+Cqj+CqquCrjeCqsOCqv+Cqsl/gqq7gq4df4Kqc4KuC4KqoX+CqnOCrgeCqsuCqvuCqiF/gqpHgqpfgqrjgq43gqp9f4Kq44Kqq4KuN4Kqf4KuH4Kqu4KuN4Kqs4KqwX+CqkeCqleCrjeCqn+CrjeCqrOCqsF/gqqjgqrXgq4fgqq7gq43gqqzgqrBf4Kqh4Kq/4Kq44KuH4Kqu4KuN4Kqs4KqwJy5zcGxpdCgnXycpLFxuICAgIG1vbnRoc1Nob3J0OiAn4Kqc4Kq+4Kqo4KuN4Kqv4KuBLl/gqqvgq4fgqqzgq43gqrDgq4EuX+CqruCqvuCqsOCrjeCqml/gqo/gqqrgq43gqrDgqr8uX+CqruCrh1/gqpzgq4Lgqqhf4Kqc4KuB4Kqy4Kq+Ll/gqpHgqpcuX+CquOCqquCrjeCqn+Crhy5f4KqR4KqV4KuN4Kqf4KuNLl/gqqjgqrXgq4cuX+CqoeCqv+CquOCrhy4nLnNwbGl0KCdfJyksXG4gICAgbW9udGhzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICB3ZWVrZGF5czogJ+CqsOCqteCqv+CqteCqvuCqsF/gqrjgq4vgqq7gqrXgqr7gqrBf4Kqu4KqC4KqX4Kqz4Kq14Kq+4KqwX+CqrOCrgeCqp+CrjeCqteCqvuCqsF/gqpfgq4HgqrDgq4HgqrXgqr7gqrBf4Kq24KuB4KqV4KuN4Kqw4Kq14Kq+4KqwX+CqtuCqqOCqv+CqteCqvuCqsCcuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1Nob3J0OiAn4Kqw4Kq14Kq/X+CquOCri+Cqrl/gqq7gqoLgqpfgqrNf4Kqs4KuB4Kqn4KuNX+Cql+CrgeCqsOCrgV/gqrbgq4HgqpXgq43gqrBf4Kq24Kqo4Kq/Jy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzTWluOiAn4KqwX+CquOCri1/gqq7gqoJf4Kqs4KuBX+Cql+CrgV/gqrbgq4Ff4Kq2Jy5zcGxpdCgnXycpLFxuICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgIExUOiAnQSBoOm1tIOCqteCqvuCql+CrjeCqr+CrhycsXG4gICAgICAgIExUUzogJ0EgaDptbTpzcyDgqrXgqr7gqpfgq43gqq/gq4cnLFxuICAgICAgICBMOiAnREQvTU0vWVlZWScsXG4gICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSwgQSBoOm1tIOCqteCqvuCql+CrjeCqr+CrhycsXG4gICAgICAgIExMTEw6ICdkZGRkLCBEIE1NTU0gWVlZWSwgQSBoOm1tIOCqteCqvuCql+CrjeCqr+CrhydcbiAgICB9LFxuICAgIGNhbGVuZGFyOiB7XG4gICAgICAgIHNhbWVEYXk6ICdb4KqG4KqcXSBMVCcsXG4gICAgICAgIG5leHREYXk6ICdb4KqV4Kq+4Kqy4KuHXSBMVCcsXG4gICAgICAgIG5leHRXZWVrOiAnZGRkZCwgTFQnLFxuICAgICAgICBsYXN0RGF5OiAnW+Cql+Cqh+CqleCqvuCqsuCrh10gTFQnLFxuICAgICAgICBsYXN0V2VlazogJ1vgqqrgqr7gqpvgqrLgqr5dIGRkZGQsIExUJyxcbiAgICAgICAgc2FtZUVsc2U6ICdMJ1xuICAgIH0sXG4gICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgIGZ1dHVyZTogJyVzIOCqruCqvicsXG4gICAgICAgIHBhc3Q6ICclcyDgqqrgq4fgqrngqrLgqr4nLFxuICAgICAgICBzOiAn4KqF4Kqu4KuB4KqVIOCqquCqs+CriycsXG4gICAgICAgIG06ICfgqo/gqpUg4Kqu4Kq/4Kqo4Kq/4KqfJyxcbiAgICAgICAgbW06ICclZCDgqq7gqr/gqqjgqr/gqp8nLFxuICAgICAgICBoOiAn4KqP4KqVIOCqleCqsuCqvuCqlScsXG4gICAgICAgIGhoOiAnJWQg4KqV4Kqy4Kq+4KqVJyxcbiAgICAgICAgZDogJ+Cqj+CqlSDgqqbgqr/gqrXgqrgnLFxuICAgICAgICBkZDogJyVkIOCqpuCqv+CqteCquCcsXG4gICAgICAgIE06ICfgqo/gqpUg4Kqu4Kq54Kq/4Kqo4KuLJyxcbiAgICAgICAgTU06ICclZCDgqq7gqrngqr/gqqjgq4snLFxuICAgICAgICB5OiAn4KqP4KqVIOCqteCqsOCrjeCqtycsXG4gICAgICAgIHl5OiAnJWQg4Kq14Kqw4KuN4Kq3J1xuICAgIH0sXG4gICAgcHJlcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9b4Kun4Kuo4Kup4Kuq4Kur4Kus4Kut4Kuu4Kuv4KumXS9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgIHJldHVybiBudW1iZXJNYXBbbWF0Y2hdO1xuICAgICAgICB9KTtcbiAgICB9LFxuICAgIHBvc3Rmb3JtYXQ6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9cXGQvZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICByZXR1cm4gc3ltYm9sTWFwW21hdGNoXTtcbiAgICAgICAgfSk7XG4gICAgfSxcbiAgICAvLyBHdWphcmF0aSBub3RhdGlvbiBmb3IgbWVyaWRpZW1zIGFyZSBxdWl0ZSBmdXp6eSBpbiBwcmFjdGljZS4gV2hpbGUgdGhlcmUgZXhpc3RzXG4gICAgLy8gYSByaWdpZCBub3Rpb24gb2YgYSAnUGFoYXInIGl0IGlzIG5vdCB1c2VkIGFzIHJpZ2lkbHkgaW4gbW9kZXJuIEd1amFyYXRpLlxuICAgIG1lcmlkaWVtUGFyc2U6IC/gqrDgqr7gqqR84Kqs4Kqq4KuL4KqwfOCquOCqteCqvuCqsHzgqrjgqr7gqoLgqpwvLFxuICAgIG1lcmlkaWVtSG91cjogZnVuY3Rpb24gKGhvdXIsIG1lcmlkaWVtKSB7XG4gICAgICAgIGlmIChob3VyID09PSAxMikge1xuICAgICAgICAgICAgaG91ciA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lcmlkaWVtID09PSAn4Kqw4Kq+4KqkJykge1xuICAgICAgICAgICAgcmV0dXJuIGhvdXIgPCA0ID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ+CquOCqteCqvuCqsCcpIHtcbiAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn4Kqs4Kqq4KuL4KqwJykge1xuICAgICAgICAgICAgcmV0dXJuIGhvdXIgPj0gMTAgPyBob3VyIDogaG91ciArIDEyO1xuICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn4Kq44Kq+4KqC4KqcJykge1xuICAgICAgICAgICAgcmV0dXJuIGhvdXIgKyAxMjtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgbWVyaWRpZW06IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgaWYgKGhvdXIgPCA0KSB7XG4gICAgICAgICAgICByZXR1cm4gJ+CqsOCqvuCqpCc7XG4gICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDEwKSB7XG4gICAgICAgICAgICByZXR1cm4gJ+CquOCqteCqvuCqsCc7XG4gICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDE3KSB7XG4gICAgICAgICAgICByZXR1cm4gJ+CqrOCqquCri+CqsCc7XG4gICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDIwKSB7XG4gICAgICAgICAgICByZXR1cm4gJ+CquOCqvuCqguCqnCc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gJ+CqsOCqvuCqpCc7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIHdlZWs6IHtcbiAgICAgICAgZG93OiAwLCAvLyBTdW5kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgZG95OiA2IC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDFzdCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICB9XG59KTtcblxucmV0dXJuIGd1O1xuXG59KSkpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZ3UuanMiLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogSGVicmV3IFtoZV1cbi8vISBhdXRob3IgOiBUb21lciBDb2hlbiA6IGh0dHBzOi8vZ2l0aHViLmNvbS90b21lclxuLy8hIGF1dGhvciA6IE1vc2hlIFNpbWFudG92IDogaHR0cHM6Ly9naXRodWIuY29tL0RldmVsb3BtZW50SUxcbi8vISBhdXRob3IgOiBUYWwgQXRlciA6IGh0dHBzOi8vZ2l0aHViLmNvbS9UYWxBdGVyXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxudmFyIGhlID0gbW9tZW50LmRlZmluZUxvY2FsZSgnaGUnLCB7XG4gICAgbW9udGhzIDogJ9eZ16DXldeQ16hf16TXkdeo15XXkNeoX9ee16jXpV/XkNek16jXmdecX9ee15DXmV/XmdeV16DXmV/XmdeV15zXmV/XkNeV15LXldeh15hf16HXpNeY157XkdeoX9eQ15XXp9eY15XXkdeoX9eg15XXkdee15HXqF/Xk9em157XkdeoJy5zcGxpdCgnXycpLFxuICAgIG1vbnRoc1Nob3J0IDogJ9eZ16DXldezX9ek15HXqNezX9ee16jXpV/XkNek16jXs1/XnteQ15lf15nXldeg15lf15nXldec15lf15DXldeS17Nf16HXpNeY17Nf15DXlden17Nf16DXldeR17Nf15PXptee17MnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXMgOiAn16jXkNep15XXn1/Xqdeg15lf16nXnNeZ16nXmV/XqNeR15nXoteZX9eX157Xmdep15lf16nXmdep15lf16nXkdeqJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzU2hvcnQgOiAn15DXs1/XkdezX9eS17Nf15PXs1/XlNezX9eV17Nf16nXsycuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c01pbiA6ICfXkF/XkV/Xkl/Xk1/XlF/XlV/XqScuc3BsaXQoJ18nKSxcbiAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICBMTCA6ICdEIFvXkV1NTU1NIFlZWVknLFxuICAgICAgICBMTEwgOiAnRCBb15FdTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgTExMTCA6ICdkZGRkLCBEIFvXkV1NTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICBsIDogJ0QvTS9ZWVlZJyxcbiAgICAgICAgbGwgOiAnRCBNTU0gWVlZWScsXG4gICAgICAgIGxsbCA6ICdEIE1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgbGxsbCA6ICdkZGQsIEQgTU1NIFlZWVkgSEg6bW0nXG4gICAgfSxcbiAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgc2FtZURheSA6ICdb15TXmdeV150g15HWvl1MVCcsXG4gICAgICAgIG5leHREYXkgOiAnW9ee15fXqCDXkda+XUxUJyxcbiAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCBb15HXqdei15RdIExUJyxcbiAgICAgICAgbGFzdERheSA6ICdb15DXqtee15XXnCDXkda+XUxUJyxcbiAgICAgICAgbGFzdFdlZWsgOiAnW9eR15nXldedXSBkZGRkIFvXlNeQ15fXqNeV158g15HXqdei15RdIExUJyxcbiAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICB9LFxuICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgZnV0dXJlIDogJ9eR16LXldeTICVzJyxcbiAgICAgICAgcGFzdCA6ICfXnNek16DXmSAlcycsXG4gICAgICAgIHMgOiAn157Xodek16gg16nXoNeZ15XXqicsXG4gICAgICAgIG0gOiAn15PXp9eUJyxcbiAgICAgICAgbW0gOiAnJWQg15PXp9eV16onLFxuICAgICAgICBoIDogJ9ep16LXlCcsXG4gICAgICAgIGhoIDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgaWYgKG51bWJlciA9PT0gMikge1xuICAgICAgICAgICAgICAgIHJldHVybiAn16nXoteq15nXmdedJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnINep16LXldeqJztcbiAgICAgICAgfSxcbiAgICAgICAgZCA6ICfXmdeV150nLFxuICAgICAgICBkZCA6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIGlmIChudW1iZXIgPT09IDIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9eZ15XXnteZ15nXnSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJyDXmdee15nXnSc7XG4gICAgICAgIH0sXG4gICAgICAgIE0gOiAn15fXldeT16knLFxuICAgICAgICBNTSA6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIGlmIChudW1iZXIgPT09IDIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9eX15XXk9ep15nXmdedJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnINeX15XXk9ep15nXnSc7XG4gICAgICAgIH0sXG4gICAgICAgIHkgOiAn16nXoNeUJyxcbiAgICAgICAgeXkgOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICBpZiAobnVtYmVyID09PSAyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfXqdeg16rXmdeZ150nO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChudW1iZXIgJSAxMCA9PT0gMCAmJiBudW1iZXIgIT09IDEwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICcg16nXoNeUJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnINep16DXmdedJztcbiAgICAgICAgfVxuICAgIH0sXG4gICAgbWVyaWRpZW1QYXJzZTogL9eQ15fXlFwi16Z815zXpNeg15RcItemfNeQ15fXqNeZINeU16bXlNeo15nXmdedfNec16TXoNeZINeU16bXlNeo15nXmdedfNec16TXoNeV16og15HXlden16h815HXkdeV16fXqHzXkdei16jXkS9pLFxuICAgIGlzUE0gOiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIC9eKNeQ15fXlFwi16Z815DXl9eo15kg15TXpteU16jXmdeZ151815HXoteo15EpJC8udGVzdChpbnB1dCk7XG4gICAgfSxcbiAgICBtZXJpZGllbSA6IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgaWYgKGhvdXIgPCA1KSB7XG4gICAgICAgICAgICByZXR1cm4gJ9ec16TXoNeV16og15HXlden16gnO1xuICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxMCkge1xuICAgICAgICAgICAgcmV0dXJuICfXkdeR15XXp9eoJztcbiAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTIpIHtcbiAgICAgICAgICAgIHJldHVybiBpc0xvd2VyID8gJ9ec16TXoNeUXCLXpicgOiAn15zXpNeg15kg15TXpteU16jXmdeZ150nO1xuICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxOCkge1xuICAgICAgICAgICAgcmV0dXJuIGlzTG93ZXIgPyAn15DXl9eUXCLXpicgOiAn15DXl9eo15kg15TXpteU16jXmdeZ150nO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuICfXkdei16jXkSc7XG4gICAgICAgIH1cbiAgICB9XG59KTtcblxucmV0dXJuIGhlO1xuXG59KSkpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvaGUuanMiLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogSGluZGkgW2hpXVxuLy8hIGF1dGhvciA6IE1heWFuayBTaW5naGFsIDogaHR0cHM6Ly9naXRodWIuY29tL21heWFua3NpbmdoYWxcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG52YXIgc3ltYm9sTWFwID0ge1xuICAgICcxJzogJ+ClpycsXG4gICAgJzInOiAn4KWoJyxcbiAgICAnMyc6ICfgpaknLFxuICAgICc0JzogJ+ClqicsXG4gICAgJzUnOiAn4KWrJyxcbiAgICAnNic6ICfgpawnLFxuICAgICc3JzogJ+ClrScsXG4gICAgJzgnOiAn4KWuJyxcbiAgICAnOSc6ICfgpa8nLFxuICAgICcwJzogJ+Clpidcbn07XG52YXIgbnVtYmVyTWFwID0ge1xuICAgICfgpacnOiAnMScsXG4gICAgJ+ClqCc6ICcyJyxcbiAgICAn4KWpJzogJzMnLFxuICAgICfgpaonOiAnNCcsXG4gICAgJ+Clqyc6ICc1JyxcbiAgICAn4KWsJzogJzYnLFxuICAgICfgpa0nOiAnNycsXG4gICAgJ+Clric6ICc4JyxcbiAgICAn4KWvJzogJzknLFxuICAgICfgpaYnOiAnMCdcbn07XG5cbnZhciBoaSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2hpJywge1xuICAgIG1vbnRocyA6ICfgpJzgpKjgpLXgpLDgpYBf4KSr4KS84KSw4KS14KSw4KWAX+CkruCkvuCksOCljeCkml/gpIXgpKrgpY3gpLDgpYjgpLJf4KSu4KSIX+CknOClguCkqF/gpJzgpYHgpLLgpL7gpIhf4KSF4KSX4KS44KWN4KSkX+CkuOCkv+CkpOCkruCljeCkrOCksF/gpIXgpJXgpY3gpJ/gpYLgpKzgpLBf4KSo4KS14KSu4KWN4KSs4KSwX+CkpuCkv+CkuOCkruCljeCkrOCksCcuc3BsaXQoJ18nKSxcbiAgICBtb250aHNTaG9ydCA6ICfgpJzgpKguX+Ckq+CkvOCksC5f4KSu4KS+4KSw4KWN4KSaX+CkheCkquCljeCksOCliC5f4KSu4KSIX+CknOClguCkqF/gpJzgpYHgpLIuX+CkheCkly5f4KS44KS/4KSkLl/gpIXgpJXgpY3gpJ/gpYIuX+CkqOCktS5f4KSm4KS/4KS4Licuc3BsaXQoJ18nKSxcbiAgICBtb250aHNQYXJzZUV4YWN0OiB0cnVlLFxuICAgIHdlZWtkYXlzIDogJ+CksOCkteCkv+CkteCkvuCksF/gpLjgpYvgpK7gpLXgpL7gpLBf4KSu4KSC4KSX4KSy4KS14KS+4KSwX+CkrOClgeCkp+CkteCkvuCksF/gpJfgpYHgpLDgpYLgpLXgpL7gpLBf4KS24KWB4KSV4KWN4KSw4KS14KS+4KSwX+CktuCkqOCkv+CkteCkvuCksCcuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1Nob3J0IDogJ+CksOCkteCkv1/gpLjgpYvgpK5f4KSu4KSC4KSX4KSyX+CkrOClgeCkp1/gpJfgpYHgpLDgpYJf4KS24KWB4KSV4KWN4KSwX+CktuCkqOCkvycuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c01pbiA6ICfgpLBf4KS44KWLX+CkruCkgl/gpKzgpYFf4KSX4KWBX+CktuClgV/gpLYnLnNwbGl0KCdfJyksXG4gICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgIExUIDogJ0EgaDptbSDgpKzgpJzgpYcnLFxuICAgICAgICBMVFMgOiAnQSBoOm1tOnNzIOCkrOCknOClhycsXG4gICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZLCBBIGg6bW0g4KSs4KSc4KWHJyxcbiAgICAgICAgTExMTCA6ICdkZGRkLCBEIE1NTU0gWVlZWSwgQSBoOm1tIOCkrOCknOClhydcbiAgICB9LFxuICAgIGNhbGVuZGFyIDoge1xuICAgICAgICBzYW1lRGF5IDogJ1vgpIbgpJxdIExUJyxcbiAgICAgICAgbmV4dERheSA6ICdb4KSV4KSyXSBMVCcsXG4gICAgICAgIG5leHRXZWVrIDogJ2RkZGQsIExUJyxcbiAgICAgICAgbGFzdERheSA6ICdb4KSV4KSyXSBMVCcsXG4gICAgICAgIGxhc3RXZWVrIDogJ1vgpKrgpL/gpJvgpLLgpYddIGRkZGQsIExUJyxcbiAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICB9LFxuICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgZnV0dXJlIDogJyVzIOCkruClh+CkgicsXG4gICAgICAgIHBhc3QgOiAnJXMg4KSq4KS54KSy4KWHJyxcbiAgICAgICAgcyA6ICfgpJXgpYHgpJsg4KS54KWAIOCkleCljeCkt+CkoycsXG4gICAgICAgIG0gOiAn4KSP4KSVIOCkruCkv+CkqOCknycsXG4gICAgICAgIG1tIDogJyVkIOCkruCkv+CkqOCknycsXG4gICAgICAgIGggOiAn4KSP4KSVIOCkmOCkguCkn+CkvicsXG4gICAgICAgIGhoIDogJyVkIOCkmOCkguCkn+ClhycsXG4gICAgICAgIGQgOiAn4KSP4KSVIOCkpuCkv+CkqCcsXG4gICAgICAgIGRkIDogJyVkIOCkpuCkv+CkqCcsXG4gICAgICAgIE0gOiAn4KSP4KSVIOCkruCkueClgOCkqOClhycsXG4gICAgICAgIE1NIDogJyVkIOCkruCkueClgOCkqOClhycsXG4gICAgICAgIHkgOiAn4KSP4KSVIOCkteCksOCljeCktycsXG4gICAgICAgIHl5IDogJyVkIOCkteCksOCljeCktydcbiAgICB9LFxuICAgIHByZXBhcnNlOiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvW+Clp+ClqOClqeClquClq+ClrOClreClruClr+Clpl0vZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyTWFwW21hdGNoXTtcbiAgICAgICAgfSk7XG4gICAgfSxcbiAgICBwb3N0Zm9ybWF0OiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvXFxkL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgcmV0dXJuIHN5bWJvbE1hcFttYXRjaF07XG4gICAgICAgIH0pO1xuICAgIH0sXG4gICAgLy8gSGluZGkgbm90YXRpb24gZm9yIG1lcmlkaWVtcyBhcmUgcXVpdGUgZnV6enkgaW4gcHJhY3RpY2UuIFdoaWxlIHRoZXJlIGV4aXN0c1xuICAgIC8vIGEgcmlnaWQgbm90aW9uIG9mIGEgJ1BhaGFyJyBpdCBpcyBub3QgdXNlZCBhcyByaWdpZGx5IGluIG1vZGVybiBIaW5kaS5cbiAgICBtZXJpZGllbVBhcnNlOiAv4KSw4KS+4KSkfOCkuOClgeCkrOCkuXzgpKbgpYvgpKrgpLngpLB84KS24KS+4KSuLyxcbiAgICBtZXJpZGllbUhvdXIgOiBmdW5jdGlvbiAoaG91ciwgbWVyaWRpZW0pIHtcbiAgICAgICAgaWYgKGhvdXIgPT09IDEyKSB7XG4gICAgICAgICAgICBob3VyID0gMDtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVyaWRpZW0gPT09ICfgpLDgpL7gpKQnKSB7XG4gICAgICAgICAgICByZXR1cm4gaG91ciA8IDQgPyBob3VyIDogaG91ciArIDEyO1xuICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn4KS44KWB4KSs4KS5Jykge1xuICAgICAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfgpKbgpYvgpKrgpLngpLAnKSB7XG4gICAgICAgICAgICByZXR1cm4gaG91ciA+PSAxMCA/IGhvdXIgOiBob3VyICsgMTI7XG4gICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfgpLbgpL7gpK4nKSB7XG4gICAgICAgICAgICByZXR1cm4gaG91ciArIDEyO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBtZXJpZGllbSA6IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgaWYgKGhvdXIgPCA0KSB7XG4gICAgICAgICAgICByZXR1cm4gJ+CksOCkvuCkpCc7XG4gICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDEwKSB7XG4gICAgICAgICAgICByZXR1cm4gJ+CkuOClgeCkrOCkuSc7XG4gICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDE3KSB7XG4gICAgICAgICAgICByZXR1cm4gJ+CkpuCli+CkquCkueCksCc7XG4gICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDIwKSB7XG4gICAgICAgICAgICByZXR1cm4gJ+CktuCkvuCkric7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gJ+CksOCkvuCkpCc7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIHdlZWsgOiB7XG4gICAgICAgIGRvdyA6IDAsIC8vIFN1bmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICBkb3kgOiA2ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiAxc3QgaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgfVxufSk7XG5cbnJldHVybiBoaTtcblxufSkpKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2hpLmpzIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IENyb2F0aWFuIFtocl1cbi8vISBhdXRob3IgOiBCb2phbiBNYXJrb3ZpxIcgOiBodHRwczovL2dpdGh1Yi5jb20vYm1hcmtvdmljXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuZnVuY3Rpb24gdHJhbnNsYXRlKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5KSB7XG4gICAgdmFyIHJlc3VsdCA9IG51bWJlciArICcgJztcbiAgICBzd2l0Y2ggKGtleSkge1xuICAgICAgICBjYXNlICdtJzpcbiAgICAgICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4ID8gJ2plZG5hIG1pbnV0YScgOiAnamVkbmUgbWludXRlJztcbiAgICAgICAgY2FzZSAnbW0nOlxuICAgICAgICAgICAgaWYgKG51bWJlciA9PT0gMSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnbWludXRhJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobnVtYmVyID09PSAyIHx8IG51bWJlciA9PT0gMyB8fCBudW1iZXIgPT09IDQpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ21pbnV0ZSc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnbWludXRhJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIGNhc2UgJ2gnOlxuICAgICAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggPyAnamVkYW4gc2F0JyA6ICdqZWRub2cgc2F0YSc7XG4gICAgICAgIGNhc2UgJ2hoJzpcbiAgICAgICAgICAgIGlmIChudW1iZXIgPT09IDEpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ3NhdCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG51bWJlciA9PT0gMiB8fCBudW1iZXIgPT09IDMgfHwgbnVtYmVyID09PSA0KSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdzYXRhJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdzYXRpJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIGNhc2UgJ2RkJzpcbiAgICAgICAgICAgIGlmIChudW1iZXIgPT09IDEpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ2Rhbic7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnZGFuYSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICBjYXNlICdNTSc6XG4gICAgICAgICAgICBpZiAobnVtYmVyID09PSAxKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdtamVzZWMnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChudW1iZXIgPT09IDIgfHwgbnVtYmVyID09PSAzIHx8IG51bWJlciA9PT0gNCkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnbWplc2VjYSc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnbWplc2VjaSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICBjYXNlICd5eSc6XG4gICAgICAgICAgICBpZiAobnVtYmVyID09PSAxKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdnb2RpbmEnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChudW1iZXIgPT09IDIgfHwgbnVtYmVyID09PSAzIHx8IG51bWJlciA9PT0gNCkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnZ29kaW5lJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdnb2RpbmEnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59XG5cbnZhciBociA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2hyJywge1xuICAgIG1vbnRocyA6IHtcbiAgICAgICAgZm9ybWF0OiAnc2lqZcSNbmphX3ZlbGphxI1lX2/FvnVqa2FfdHJhdm5qYV9zdmlibmphX2xpcG5qYV9zcnBuamFfa29sb3ZvemFfcnVqbmFfbGlzdG9wYWRhX3N0dWRlbm9nYV9wcm9zaW5jYScuc3BsaXQoJ18nKSxcbiAgICAgICAgc3RhbmRhbG9uZTogJ3NpamXEjWFual92ZWxqYcSNYV9vxb51amFrX3RyYXZhbmpfc3ZpYmFual9saXBhbmpfc3JwYW5qX2tvbG92b3pfcnVqYW5fbGlzdG9wYWRfc3R1ZGVuaV9wcm9zaW5hYycuc3BsaXQoJ18nKVxuICAgIH0sXG4gICAgbW9udGhzU2hvcnQgOiAnc2lqLl92ZWxqLl9vxb51Ll90cmEuX3N2aS5fbGlwLl9zcnAuX2tvbC5fcnVqLl9saXMuX3N0dS5fcHJvLicuc3BsaXQoJ18nKSxcbiAgICBtb250aHNQYXJzZUV4YWN0OiB0cnVlLFxuICAgIHdlZWtkYXlzIDogJ25lZGplbGphX3BvbmVkamVsamFrX3V0b3Jha19zcmlqZWRhX8SNZXR2cnRha19wZXRha19zdWJvdGEnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNTaG9ydCA6ICduZWQuX3Bvbi5fdXRvLl9zcmkuX8SNZXQuX3BldC5fc3ViLicuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c01pbiA6ICduZV9wb191dF9zcl/EjWVfcGVfc3UnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgTFQgOiAnSDptbScsXG4gICAgICAgIExUUyA6ICdIOm1tOnNzJyxcbiAgICAgICAgTCA6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgTEwgOiAnRC4gTU1NTSBZWVlZJyxcbiAgICAgICAgTExMIDogJ0QuIE1NTU0gWVlZWSBIOm1tJyxcbiAgICAgICAgTExMTCA6ICdkZGRkLCBELiBNTU1NIFlZWVkgSDptbSdcbiAgICB9LFxuICAgIGNhbGVuZGFyIDoge1xuICAgICAgICBzYW1lRGF5ICA6ICdbZGFuYXMgdV0gTFQnLFxuICAgICAgICBuZXh0RGF5ICA6ICdbc3V0cmEgdV0gTFQnLFxuICAgICAgICBuZXh0V2VlayA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHN3aXRjaCAodGhpcy5kYXkoKSkge1xuICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbdV0gW25lZGplbGp1XSBbdV0gTFQnO1xuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbdV0gW3NyaWplZHVdIFt1XSBMVCc7XG4gICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t1XSBbc3Vib3R1XSBbdV0gTFQnO1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbdV0gZGRkZCBbdV0gTFQnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBsYXN0RGF5ICA6ICdbanXEjWVyIHVdIExUJyxcbiAgICAgICAgbGFzdFdlZWsgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHRoaXMuZGF5KCkpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1twcm/FoWx1XSBkZGRkIFt1XSBMVCc7XG4gICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1twcm/FoWxlXSBbc3Vib3RlXSBbdV0gTFQnO1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbcHJvxaFsaV0gZGRkZCBbdV0gTFQnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgIH0sXG4gICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICBmdXR1cmUgOiAnemEgJXMnLFxuICAgICAgICBwYXN0ICAgOiAncHJpamUgJXMnLFxuICAgICAgICBzICAgICAgOiAncGFyIHNla3VuZGknLFxuICAgICAgICBtICAgICAgOiB0cmFuc2xhdGUsXG4gICAgICAgIG1tICAgICA6IHRyYW5zbGF0ZSxcbiAgICAgICAgaCAgICAgIDogdHJhbnNsYXRlLFxuICAgICAgICBoaCAgICAgOiB0cmFuc2xhdGUsXG4gICAgICAgIGQgICAgICA6ICdkYW4nLFxuICAgICAgICBkZCAgICAgOiB0cmFuc2xhdGUsXG4gICAgICAgIE0gICAgICA6ICdtamVzZWMnLFxuICAgICAgICBNTSAgICAgOiB0cmFuc2xhdGUsXG4gICAgICAgIHkgICAgICA6ICdnb2RpbnUnLFxuICAgICAgICB5eSAgICAgOiB0cmFuc2xhdGVcbiAgICB9LFxuICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfVxcLi8sXG4gICAgb3JkaW5hbCA6ICclZC4nLFxuICAgIHdlZWsgOiB7XG4gICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICBkb3kgOiA3ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiAxc3QgaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgfVxufSk7XG5cbnJldHVybiBocjtcblxufSkpKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2hyLmpzIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEh1bmdhcmlhbiBbaHVdXG4vLyEgYXV0aG9yIDogQWRhbSBCcnVubmVyIDogaHR0cHM6Ly9naXRodWIuY29tL2FkYW1icnVubmVyXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxudmFyIHdlZWtFbmRpbmdzID0gJ3Zhc8Ohcm5hcCBow6l0ZsWRbiBrZWRkZW4gc3plcmTDoW4gY3PDvHTDtnJ0w7Zrw7ZuIHDDqW50ZWtlbiBzem9tYmF0b24nLnNwbGl0KCcgJyk7XG5mdW5jdGlvbiB0cmFuc2xhdGUobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXksIGlzRnV0dXJlKSB7XG4gICAgdmFyIG51bSA9IG51bWJlcjtcbiAgICBzd2l0Y2ggKGtleSkge1xuICAgICAgICBjYXNlICdzJzpcbiAgICAgICAgICAgIHJldHVybiAoaXNGdXR1cmUgfHwgd2l0aG91dFN1ZmZpeCkgPyAnbsOpaMOhbnkgbcOhc29kcGVyYycgOiAnbsOpaMOhbnkgbcOhc29kcGVyY2UnO1xuICAgICAgICBjYXNlICdtJzpcbiAgICAgICAgICAgIHJldHVybiAnZWd5JyArIChpc0Z1dHVyZSB8fCB3aXRob3V0U3VmZml4ID8gJyBwZXJjJyA6ICcgcGVyY2UnKTtcbiAgICAgICAgY2FzZSAnbW0nOlxuICAgICAgICAgICAgcmV0dXJuIG51bSArIChpc0Z1dHVyZSB8fCB3aXRob3V0U3VmZml4ID8gJyBwZXJjJyA6ICcgcGVyY2UnKTtcbiAgICAgICAgY2FzZSAnaCc6XG4gICAgICAgICAgICByZXR1cm4gJ2VneScgKyAoaXNGdXR1cmUgfHwgd2l0aG91dFN1ZmZpeCA/ICcgw7NyYScgOiAnIMOzcsOhamEnKTtcbiAgICAgICAgY2FzZSAnaGgnOlxuICAgICAgICAgICAgcmV0dXJuIG51bSArIChpc0Z1dHVyZSB8fCB3aXRob3V0U3VmZml4ID8gJyDDs3JhJyA6ICcgw7Nyw6FqYScpO1xuICAgICAgICBjYXNlICdkJzpcbiAgICAgICAgICAgIHJldHVybiAnZWd5JyArIChpc0Z1dHVyZSB8fCB3aXRob3V0U3VmZml4ID8gJyBuYXAnIDogJyBuYXBqYScpO1xuICAgICAgICBjYXNlICdkZCc6XG4gICAgICAgICAgICByZXR1cm4gbnVtICsgKGlzRnV0dXJlIHx8IHdpdGhvdXRTdWZmaXggPyAnIG5hcCcgOiAnIG5hcGphJyk7XG4gICAgICAgIGNhc2UgJ00nOlxuICAgICAgICAgICAgcmV0dXJuICdlZ3knICsgKGlzRnV0dXJlIHx8IHdpdGhvdXRTdWZmaXggPyAnIGjDs25hcCcgOiAnIGjDs25hcGphJyk7XG4gICAgICAgIGNhc2UgJ01NJzpcbiAgICAgICAgICAgIHJldHVybiBudW0gKyAoaXNGdXR1cmUgfHwgd2l0aG91dFN1ZmZpeCA/ICcgaMOzbmFwJyA6ICcgaMOzbmFwamEnKTtcbiAgICAgICAgY2FzZSAneSc6XG4gICAgICAgICAgICByZXR1cm4gJ2VneScgKyAoaXNGdXR1cmUgfHwgd2l0aG91dFN1ZmZpeCA/ICcgw6l2JyA6ICcgw6l2ZScpO1xuICAgICAgICBjYXNlICd5eSc6XG4gICAgICAgICAgICByZXR1cm4gbnVtICsgKGlzRnV0dXJlIHx8IHdpdGhvdXRTdWZmaXggPyAnIMOpdicgOiAnIMOpdmUnKTtcbiAgICB9XG4gICAgcmV0dXJuICcnO1xufVxuZnVuY3Rpb24gd2Vlayhpc0Z1dHVyZSkge1xuICAgIHJldHVybiAoaXNGdXR1cmUgPyAnJyA6ICdbbcO6bHRdICcpICsgJ1snICsgd2Vla0VuZGluZ3NbdGhpcy5kYXkoKV0gKyAnXSBMVFsta29yXSc7XG59XG5cbnZhciBodSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2h1Jywge1xuICAgIG1vbnRocyA6ICdqYW51w6FyX2ZlYnJ1w6FyX23DoXJjaXVzX8OhcHJpbGlzX23DoWp1c19qw7puaXVzX2rDumxpdXNfYXVndXN6dHVzX3N6ZXB0ZW1iZXJfb2t0w7NiZXJfbm92ZW1iZXJfZGVjZW1iZXInLnNwbGl0KCdfJyksXG4gICAgbW9udGhzU2hvcnQgOiAnamFuX2ZlYl9tw6FyY1/DoXByX23DoWpfasO6bl9qw7psX2F1Z19zemVwdF9va3Rfbm92X2RlYycuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5cyA6ICd2YXPDoXJuYXBfaMOpdGbFkV9rZWRkX3N6ZXJkYV9jc8O8dMO2cnTDtmtfcMOpbnRla19zem9tYmF0Jy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzU2hvcnQgOiAndmFzX2jDqXRfa2VkZF9zemVfY3PDvHRfcMOpbl9zem8nLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNNaW4gOiAndl9oX2tfc3plX2NzX3Bfc3pvJy5zcGxpdCgnXycpLFxuICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICBMVCA6ICdIOm1tJyxcbiAgICAgICAgTFRTIDogJ0g6bW06c3MnLFxuICAgICAgICBMIDogJ1lZWVkuTU0uREQuJyxcbiAgICAgICAgTEwgOiAnWVlZWS4gTU1NTSBELicsXG4gICAgICAgIExMTCA6ICdZWVlZLiBNTU1NIEQuIEg6bW0nLFxuICAgICAgICBMTExMIDogJ1lZWVkuIE1NTU0gRC4sIGRkZGQgSDptbSdcbiAgICB9LFxuICAgIG1lcmlkaWVtUGFyc2U6IC9kZXxkdS9pLFxuICAgIGlzUE06IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICByZXR1cm4gaW5wdXQuY2hhckF0KDEpLnRvTG93ZXJDYXNlKCkgPT09ICd1JztcbiAgICB9LFxuICAgIG1lcmlkaWVtIDogZnVuY3Rpb24gKGhvdXJzLCBtaW51dGVzLCBpc0xvd2VyKSB7XG4gICAgICAgIGlmIChob3VycyA8IDEyKSB7XG4gICAgICAgICAgICByZXR1cm4gaXNMb3dlciA9PT0gdHJ1ZSA/ICdkZScgOiAnREUnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGlzTG93ZXIgPT09IHRydWUgPyAnZHUnIDogJ0RVJztcbiAgICAgICAgfVxuICAgIH0sXG4gICAgY2FsZW5kYXIgOiB7XG4gICAgICAgIHNhbWVEYXkgOiAnW21hXSBMVFsta29yXScsXG4gICAgICAgIG5leHREYXkgOiAnW2hvbG5hcF0gTFRbLWtvcl0nLFxuICAgICAgICBuZXh0V2VlayA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB3ZWVrLmNhbGwodGhpcywgdHJ1ZSk7XG4gICAgICAgIH0sXG4gICAgICAgIGxhc3REYXkgOiAnW3RlZ25hcF0gTFRbLWtvcl0nLFxuICAgICAgICBsYXN0V2VlayA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB3ZWVrLmNhbGwodGhpcywgZmFsc2UpO1xuICAgICAgICB9LFxuICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgIH0sXG4gICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICBmdXR1cmUgOiAnJXMgbcO6bHZhJyxcbiAgICAgICAgcGFzdCA6ICclcycsXG4gICAgICAgIHMgOiB0cmFuc2xhdGUsXG4gICAgICAgIG0gOiB0cmFuc2xhdGUsXG4gICAgICAgIG1tIDogdHJhbnNsYXRlLFxuICAgICAgICBoIDogdHJhbnNsYXRlLFxuICAgICAgICBoaCA6IHRyYW5zbGF0ZSxcbiAgICAgICAgZCA6IHRyYW5zbGF0ZSxcbiAgICAgICAgZGQgOiB0cmFuc2xhdGUsXG4gICAgICAgIE0gOiB0cmFuc2xhdGUsXG4gICAgICAgIE1NIDogdHJhbnNsYXRlLFxuICAgICAgICB5IDogdHJhbnNsYXRlLFxuICAgICAgICB5eSA6IHRyYW5zbGF0ZVxuICAgIH0sXG4gICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9XFwuLyxcbiAgICBvcmRpbmFsIDogJyVkLicsXG4gICAgd2VlayA6IHtcbiAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICB9XG59KTtcblxucmV0dXJuIGh1O1xuXG59KSkpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvaHUuanMiLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogQXJtZW5pYW4gW2h5LWFtXVxuLy8hIGF1dGhvciA6IEFybWVuZGFyYWJ5YW4gOiBodHRwczovL2dpdGh1Yi5jb20vYXJtZW5kYXJhYnlhblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciBoeUFtID0gbW9tZW50LmRlZmluZUxvY2FsZSgnaHktYW0nLCB7XG4gICAgbW9udGhzIDoge1xuICAgICAgICBmb3JtYXQ6ICfVsNW41oLVttW+1aHWgNWrX9aD1aXVv9aA1b7VodaA1atf1bTVodaA1b/Vq1/VodW61oDVq9Ws1atf1bTVodW11avVvdWrX9Ww1bjWgtW21avVvdWrX9Ww1bjWgtWs1avVvdWrX9aF1aPVuNW91b/VuNW91atf1b3VpdW61b/VpdW01aLVpdaA1atf1bDVuNWv1b/VpdW01aLVpdaA1atf1bbVuNW11aXVtNWi1aXWgNWrX9Wk1aXVr9W/1aXVtNWi1aXWgNWrJy5zcGxpdCgnXycpLFxuICAgICAgICBzdGFuZGFsb25lOiAn1bDVuNaC1bbVvtWh1oBf1oPVpdW/1oDVvtWh1oBf1bTVodaA1b9f1aHVutaA1avVrF/VtNWh1bXVq9W9X9Ww1bjWgtW21avVvV/VsNW41oLVrNWr1b1f1oXVo9W41b3Vv9W41b1f1b3VpdW61b/VpdW01aLVpdaAX9Ww1bjVr9W/1aXVtNWi1aXWgF/VttW41bXVpdW01aLVpdaAX9Wk1aXVr9W/1aXVtNWi1aXWgCcuc3BsaXQoJ18nKVxuICAgIH0sXG4gICAgbW9udGhzU2hvcnQgOiAn1bDVttW+X9aD1b/WgF/VtNaA1b9f1aHVutaAX9W01bXVvV/VsNW21b1f1bDVrNW9X9aF1aPVvV/VvdW61b9f1bDVr9W/X9W21bTVol/VpNWv1b8nLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXMgOiAn1a/Vq9aA1aHVr9WrX9Wl1oDVr9W41oLVt9Wh1aLVqdWrX9Wl1oDVpdaE1bfVodWi1anVq1/VudW41oDVpdaE1bfVodWi1anVq1/VsNWr1bbVo9W31aHVotWp1atf1bjWgtaA1aLVodWpX9W31aHVotWh1aknLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNTaG9ydCA6ICfVr9aA1a9f1aXWgNWvX9Wl1oDWhF/VudaA1oRf1bDVttWjX9W41oLWgNWiX9W31aLVqScuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c01pbiA6ICfVr9aA1a9f1aXWgNWvX9Wl1oDWhF/VudaA1oRf1bDVttWjX9W41oLWgNWiX9W31aLVqScuc3BsaXQoJ18nKSxcbiAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICBMIDogJ0RELk1NLllZWVknLFxuICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWSDVqS4nLFxuICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkg1akuLCBISDptbScsXG4gICAgICAgIExMTEwgOiAnZGRkZCwgRCBNTU1NIFlZWVkg1akuLCBISDptbSdcbiAgICB9LFxuICAgIGNhbGVuZGFyIDoge1xuICAgICAgICBzYW1lRGF5OiAnW9Wh1bXVvdaF1oBdIExUJyxcbiAgICAgICAgbmV4dERheTogJ1vVvtWh1bLVqF0gTFQnLFxuICAgICAgICBsYXN0RGF5OiAnW9Wl1oDVpdWvXSBMVCcsXG4gICAgICAgIG5leHRXZWVrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gJ2RkZGQgW9aF1oDVqCDVqtWh1bTVqF0gTFQnO1xuICAgICAgICB9LFxuICAgICAgICBsYXN0V2VlazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuICdb1aHVttaB1aHVrl0gZGRkZCBb1oXWgNWoINWq1aHVtNWoXSBMVCc7XG4gICAgICAgIH0sXG4gICAgICAgIHNhbWVFbHNlOiAnTCdcbiAgICB9LFxuICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgZnV0dXJlIDogJyVzINWw1aXVv9W4JyxcbiAgICAgICAgcGFzdCA6ICclcyDVodW81aHVuycsXG4gICAgICAgIHMgOiAn1bTVqyDWhNWh1bbVqyDVvtWh1bXWgNWv1bXVodW2JyxcbiAgICAgICAgbSA6ICfWgNW41brVpScsXG4gICAgICAgIG1tIDogJyVkINaA1bjVutWlJyxcbiAgICAgICAgaCA6ICfVqtWh1bQnLFxuICAgICAgICBoaCA6ICclZCDVqtWh1bQnLFxuICAgICAgICBkIDogJ9aF1oAnLFxuICAgICAgICBkZCA6ICclZCDWhdaAJyxcbiAgICAgICAgTSA6ICfVodW01avVvScsXG4gICAgICAgIE1NIDogJyVkINWh1bTVq9W9JyxcbiAgICAgICAgeSA6ICfVv9Wh1oDVqycsXG4gICAgICAgIHl5IDogJyVkINW/1aHWgNWrJ1xuICAgIH0sXG4gICAgbWVyaWRpZW1QYXJzZTogL9Wj1avVt9Wl1oDVvtWhfNWh1bzVodW+1bjVv9W+1aF81oHVpdaA1aXVr9W+1aF81aXWgNWl1a/VuNW11aHVti8sXG4gICAgaXNQTTogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgIHJldHVybiAvXijWgdWl1oDVpdWv1b7VoXzVpdaA1aXVr9W41bXVodW2KSQvLnRlc3QoaW5wdXQpO1xuICAgIH0sXG4gICAgbWVyaWRpZW0gOiBmdW5jdGlvbiAoaG91cikge1xuICAgICAgICBpZiAoaG91ciA8IDQpIHtcbiAgICAgICAgICAgIHJldHVybiAn1aPVq9W31aXWgNW+1aEnO1xuICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxMikge1xuICAgICAgICAgICAgcmV0dXJuICfVodW81aHVvtW41b/VvtWhJztcbiAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTcpIHtcbiAgICAgICAgICAgIHJldHVybiAn1oHVpdaA1aXVr9W+1aEnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuICfVpdaA1aXVr9W41bXVodW2JztcbiAgICAgICAgfVxuICAgIH0sXG4gICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9fFxcZHsxLDJ9LSjVq9W2fNaA1aQpLyxcbiAgICBvcmRpbmFsOiBmdW5jdGlvbiAobnVtYmVyLCBwZXJpb2QpIHtcbiAgICAgICAgc3dpdGNoIChwZXJpb2QpIHtcbiAgICAgICAgICAgIGNhc2UgJ0RERCc6XG4gICAgICAgICAgICBjYXNlICd3JzpcbiAgICAgICAgICAgIGNhc2UgJ1cnOlxuICAgICAgICAgICAgY2FzZSAnREREbyc6XG4gICAgICAgICAgICAgICAgaWYgKG51bWJlciA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJy3Vq9W2JztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICct1oDVpCc7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXI7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIHdlZWsgOiB7XG4gICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICBkb3kgOiA3ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiAxc3QgaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgfVxufSk7XG5cbnJldHVybiBoeUFtO1xuXG59KSkpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvaHktYW0uanMiLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogSW5kb25lc2lhbiBbaWRdXG4vLyEgYXV0aG9yIDogTW9oYW1tYWQgU2F0cmlvIFV0b21vIDogaHR0cHM6Ly9naXRodWIuY29tL3R5b2tcbi8vISByZWZlcmVuY2U6IGh0dHA6Ly9pZC53aWtpc291cmNlLm9yZy93aWtpL1BlZG9tYW5fVW11bV9FamFhbl9CYWhhc2FfSW5kb25lc2lhX3lhbmdfRGlzZW1wdXJuYWthblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciBpZCA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2lkJywge1xuICAgIG1vbnRocyA6ICdKYW51YXJpX0ZlYnJ1YXJpX01hcmV0X0FwcmlsX01laV9KdW5pX0p1bGlfQWd1c3R1c19TZXB0ZW1iZXJfT2t0b2Jlcl9Ob3ZlbWJlcl9EZXNlbWJlcicuc3BsaXQoJ18nKSxcbiAgICBtb250aHNTaG9ydCA6ICdKYW5fRmViX01hcl9BcHJfTWVpX0p1bl9KdWxfQWdzX1NlcF9Pa3RfTm92X0Rlcycuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5cyA6ICdNaW5nZ3VfU2VuaW5fU2VsYXNhX1JhYnVfS2FtaXNfSnVtYXRfU2FidHUnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNTaG9ydCA6ICdNaW5fU2VuX1NlbF9SYWJfS2FtX0p1bV9TYWInLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNNaW4gOiAnTWdfU25fU2xfUmJfS21fSm1fU2InLnNwbGl0KCdfJyksXG4gICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgIExUIDogJ0hILm1tJyxcbiAgICAgICAgTFRTIDogJ0hILm1tLnNzJyxcbiAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgW3B1a3VsXSBISC5tbScsXG4gICAgICAgIExMTEwgOiAnZGRkZCwgRCBNTU1NIFlZWVkgW3B1a3VsXSBISC5tbSdcbiAgICB9LFxuICAgIG1lcmlkaWVtUGFyc2U6IC9wYWdpfHNpYW5nfHNvcmV8bWFsYW0vLFxuICAgIG1lcmlkaWVtSG91ciA6IGZ1bmN0aW9uIChob3VyLCBtZXJpZGllbSkge1xuICAgICAgICBpZiAoaG91ciA9PT0gMTIpIHtcbiAgICAgICAgICAgIGhvdXIgPSAwO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXJpZGllbSA9PT0gJ3BhZ2knKSB7XG4gICAgICAgICAgICByZXR1cm4gaG91cjtcbiAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ3NpYW5nJykge1xuICAgICAgICAgICAgcmV0dXJuIGhvdXIgPj0gMTEgPyBob3VyIDogaG91ciArIDEyO1xuICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAnc29yZScgfHwgbWVyaWRpZW0gPT09ICdtYWxhbScpIHtcbiAgICAgICAgICAgIHJldHVybiBob3VyICsgMTI7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIG1lcmlkaWVtIDogZnVuY3Rpb24gKGhvdXJzLCBtaW51dGVzLCBpc0xvd2VyKSB7XG4gICAgICAgIGlmIChob3VycyA8IDExKSB7XG4gICAgICAgICAgICByZXR1cm4gJ3BhZ2knO1xuICAgICAgICB9IGVsc2UgaWYgKGhvdXJzIDwgMTUpIHtcbiAgICAgICAgICAgIHJldHVybiAnc2lhbmcnO1xuICAgICAgICB9IGVsc2UgaWYgKGhvdXJzIDwgMTkpIHtcbiAgICAgICAgICAgIHJldHVybiAnc29yZSc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gJ21hbGFtJztcbiAgICAgICAgfVxuICAgIH0sXG4gICAgY2FsZW5kYXIgOiB7XG4gICAgICAgIHNhbWVEYXkgOiAnW0hhcmkgaW5pIHB1a3VsXSBMVCcsXG4gICAgICAgIG5leHREYXkgOiAnW0Jlc29rIHB1a3VsXSBMVCcsXG4gICAgICAgIG5leHRXZWVrIDogJ2RkZGQgW3B1a3VsXSBMVCcsXG4gICAgICAgIGxhc3REYXkgOiAnW0tlbWFyaW4gcHVrdWxdIExUJyxcbiAgICAgICAgbGFzdFdlZWsgOiAnZGRkZCBbbGFsdSBwdWt1bF0gTFQnLFxuICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgIH0sXG4gICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICBmdXR1cmUgOiAnZGFsYW0gJXMnLFxuICAgICAgICBwYXN0IDogJyVzIHlhbmcgbGFsdScsXG4gICAgICAgIHMgOiAnYmViZXJhcGEgZGV0aWsnLFxuICAgICAgICBtIDogJ3NlbWVuaXQnLFxuICAgICAgICBtbSA6ICclZCBtZW5pdCcsXG4gICAgICAgIGggOiAnc2VqYW0nLFxuICAgICAgICBoaCA6ICclZCBqYW0nLFxuICAgICAgICBkIDogJ3NlaGFyaScsXG4gICAgICAgIGRkIDogJyVkIGhhcmknLFxuICAgICAgICBNIDogJ3NlYnVsYW4nLFxuICAgICAgICBNTSA6ICclZCBidWxhbicsXG4gICAgICAgIHkgOiAnc2V0YWh1bicsXG4gICAgICAgIHl5IDogJyVkIHRhaHVuJ1xuICAgIH0sXG4gICAgd2VlayA6IHtcbiAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgIGRveSA6IDcgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDFzdCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICB9XG59KTtcblxucmV0dXJuIGlkO1xuXG59KSkpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvaWQuanMiLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogSWNlbGFuZGljIFtpc11cbi8vISBhdXRob3IgOiBIaW5yaWsgw5ZybiBTaWd1csOwc3NvbiA6IGh0dHBzOi8vZ2l0aHViLmNvbS9oaW5yaWtcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG5mdW5jdGlvbiBwbHVyYWwobikge1xuICAgIGlmIChuICUgMTAwID09PSAxMSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKG4gJSAxMCA9PT0gMSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuZnVuY3Rpb24gdHJhbnNsYXRlKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5LCBpc0Z1dHVyZSkge1xuICAgIHZhciByZXN1bHQgPSBudW1iZXIgKyAnICc7XG4gICAgc3dpdGNoIChrZXkpIHtcbiAgICAgICAgY2FzZSAncyc6XG4gICAgICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICdub2trcmFyIHNla8O6bmR1cicgOiAnbm9ra3J1bSBzZWvDum5kdW0nO1xuICAgICAgICBjYXNlICdtJzpcbiAgICAgICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4ID8gJ23DrW7DunRhJyA6ICdtw61uw7p0dSc7XG4gICAgICAgIGNhc2UgJ21tJzpcbiAgICAgICAgICAgIGlmIChwbHVyYWwobnVtYmVyKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAod2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICdtw61uw7p0dXInIDogJ23DrW7DunR1bScpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh3aXRob3V0U3VmZml4KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArICdtw61uw7p0YSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgJ23DrW7DunR1JztcbiAgICAgICAgY2FzZSAnaGgnOlxuICAgICAgICAgICAgaWYgKHBsdXJhbChudW1iZXIpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArICh3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlID8gJ2tsdWtrdXN0dW5kaXInIDogJ2tsdWtrdXN0dW5kdW0nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAna2x1a2t1c3R1bmQnO1xuICAgICAgICBjYXNlICdkJzpcbiAgICAgICAgICAgIGlmICh3aXRob3V0U3VmZml4KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdkYWd1cic7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gaXNGdXR1cmUgPyAnZGFnJyA6ICdkZWdpJztcbiAgICAgICAgY2FzZSAnZGQnOlxuICAgICAgICAgICAgaWYgKHBsdXJhbChudW1iZXIpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHdpdGhvdXRTdWZmaXgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArICdkYWdhcic7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAoaXNGdXR1cmUgPyAnZGFnYScgOiAnZMO2Z3VtJyk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHdpdGhvdXRTdWZmaXgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgJ2RhZ3VyJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAoaXNGdXR1cmUgPyAnZGFnJyA6ICdkZWdpJyk7XG4gICAgICAgIGNhc2UgJ00nOlxuICAgICAgICAgICAgaWYgKHdpdGhvdXRTdWZmaXgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ23DoW51w7B1cic7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gaXNGdXR1cmUgPyAnbcOhbnXDsCcgOiAnbcOhbnXDsGknO1xuICAgICAgICBjYXNlICdNTSc6XG4gICAgICAgICAgICBpZiAocGx1cmFsKG51bWJlcikpIHtcbiAgICAgICAgICAgICAgICBpZiAod2l0aG91dFN1ZmZpeCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgJ23DoW51w7Bpcic7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAoaXNGdXR1cmUgPyAnbcOhbnXDsGknIDogJ23DoW51w7B1bScpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh3aXRob3V0U3VmZml4KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArICdtw6FudcOwdXInO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArIChpc0Z1dHVyZSA/ICdtw6FudcOwJyA6ICdtw6FudcOwaScpO1xuICAgICAgICBjYXNlICd5JzpcbiAgICAgICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlID8gJ8OhcicgOiAnw6FyaSc7XG4gICAgICAgIGNhc2UgJ3l5JzpcbiAgICAgICAgICAgIGlmIChwbHVyYWwobnVtYmVyKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAod2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICfDoXInIDogJ8OhcnVtJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgKHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAnw6FyJyA6ICfDoXJpJyk7XG4gICAgfVxufVxuXG52YXIgaXMgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdpcycsIHtcbiAgICBtb250aHMgOiAnamFuw7phcl9mZWJyw7phcl9tYXJzX2FwcsOtbF9tYcOtX2rDum7DrV9qw7psw61fw6Fnw7pzdF9zZXB0ZW1iZXJfb2t0w7NiZXJfbsOzdmVtYmVyX2Rlc2VtYmVyJy5zcGxpdCgnXycpLFxuICAgIG1vbnRoc1Nob3J0IDogJ2phbl9mZWJfbWFyX2Fwcl9tYcOtX2rDum5fasO6bF/DoWfDul9zZXBfb2t0X27Ds3ZfZGVzJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzIDogJ3N1bm51ZGFndXJfbcOhbnVkYWd1cl/DvnJpw7BqdWRhZ3VyX21pw7B2aWt1ZGFndXJfZmltbXR1ZGFndXJfZsO2c3R1ZGFndXJfbGF1Z2FyZGFndXInLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNTaG9ydCA6ICdzdW5fbcOhbl/DvnJpX21pw7BfZmltX2bDtnNfbGF1Jy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzTWluIDogJ1N1X03DoV/DnnJfTWlfRmlfRsO2X0xhJy5zcGxpdCgnXycpLFxuICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICBMVCA6ICdIOm1tJyxcbiAgICAgICAgTFRTIDogJ0g6bW06c3MnLFxuICAgICAgICBMIDogJ0RELk1NLllZWVknLFxuICAgICAgICBMTCA6ICdELiBNTU1NIFlZWVknLFxuICAgICAgICBMTEwgOiAnRC4gTU1NTSBZWVlZIFtrbC5dIEg6bW0nLFxuICAgICAgICBMTExMIDogJ2RkZGQsIEQuIE1NTU0gWVlZWSBba2wuXSBIOm1tJ1xuICAgIH0sXG4gICAgY2FsZW5kYXIgOiB7XG4gICAgICAgIHNhbWVEYXkgOiAnW8OtIGRhZyBrbC5dIExUJyxcbiAgICAgICAgbmV4dERheSA6ICdbw6EgbW9yZ3VuIGtsLl0gTFQnLFxuICAgICAgICBuZXh0V2VlayA6ICdkZGRkIFtrbC5dIExUJyxcbiAgICAgICAgbGFzdERheSA6ICdbw60gZ8OmciBrbC5dIExUJyxcbiAgICAgICAgbGFzdFdlZWsgOiAnW3PDrcOwYXN0YV0gZGRkZCBba2wuXSBMVCcsXG4gICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgfSxcbiAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgIGZ1dHVyZSA6ICdlZnRpciAlcycsXG4gICAgICAgIHBhc3QgOiAnZnlyaXIgJXMgc8Otw7BhbicsXG4gICAgICAgIHMgOiB0cmFuc2xhdGUsXG4gICAgICAgIG0gOiB0cmFuc2xhdGUsXG4gICAgICAgIG1tIDogdHJhbnNsYXRlLFxuICAgICAgICBoIDogJ2tsdWtrdXN0dW5kJyxcbiAgICAgICAgaGggOiB0cmFuc2xhdGUsXG4gICAgICAgIGQgOiB0cmFuc2xhdGUsXG4gICAgICAgIGRkIDogdHJhbnNsYXRlLFxuICAgICAgICBNIDogdHJhbnNsYXRlLFxuICAgICAgICBNTSA6IHRyYW5zbGF0ZSxcbiAgICAgICAgeSA6IHRyYW5zbGF0ZSxcbiAgICAgICAgeXkgOiB0cmFuc2xhdGVcbiAgICB9LFxuICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfVxcLi8sXG4gICAgb3JkaW5hbCA6ICclZC4nLFxuICAgIHdlZWsgOiB7XG4gICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgfVxufSk7XG5cbnJldHVybiBpcztcblxufSkpKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2lzLmpzIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEl0YWxpYW4gW2l0XVxuLy8hIGF1dGhvciA6IExvcmVuem8gOiBodHRwczovL2dpdGh1Yi5jb20vYWxpZW1cbi8vISBhdXRob3I6IE1hdHRpYSBMYXJlbnRpczogaHR0cHM6Ly9naXRodWIuY29tL25vc3RhbGdpYXpcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG52YXIgaXQgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdpdCcsIHtcbiAgICBtb250aHMgOiAnZ2VubmFpb19mZWJicmFpb19tYXJ6b19hcHJpbGVfbWFnZ2lvX2dpdWdub19sdWdsaW9fYWdvc3RvX3NldHRlbWJyZV9vdHRvYnJlX25vdmVtYnJlX2RpY2VtYnJlJy5zcGxpdCgnXycpLFxuICAgIG1vbnRoc1Nob3J0IDogJ2dlbl9mZWJfbWFyX2Fwcl9tYWdfZ2l1X2x1Z19hZ29fc2V0X290dF9ub3ZfZGljJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzIDogJ2RvbWVuaWNhX2x1bmVkw6xfbWFydGVkw6xfbWVyY29sZWTDrF9naW92ZWTDrF92ZW5lcmTDrF9zYWJhdG8nLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNTaG9ydCA6ICdkb21fbHVuX21hcl9tZXJfZ2lvX3Zlbl9zYWInLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNNaW4gOiAnZG9fbHVfbWFfbWVfZ2lfdmVfc2EnLnNwbGl0KCdfJyksXG4gICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICBMTExMIDogJ2RkZGQsIEQgTU1NTSBZWVlZIEhIOm1tJ1xuICAgIH0sXG4gICAgY2FsZW5kYXIgOiB7XG4gICAgICAgIHNhbWVEYXk6ICdbT2dnaSBhbGxlXSBMVCcsXG4gICAgICAgIG5leHREYXk6ICdbRG9tYW5pIGFsbGVdIExUJyxcbiAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFthbGxlXSBMVCcsXG4gICAgICAgIGxhc3REYXk6ICdbSWVyaSBhbGxlXSBMVCcsXG4gICAgICAgIGxhc3RXZWVrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHRoaXMuZGF5KCkpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnW2xhIHNjb3JzYV0gZGRkZCBbYWxsZV0gTFQnO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnW2xvIHNjb3Jzb10gZGRkZCBbYWxsZV0gTFQnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBzYW1lRWxzZTogJ0wnXG4gICAgfSxcbiAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgIGZ1dHVyZSA6IGZ1bmN0aW9uIChzKSB7XG4gICAgICAgICAgICByZXR1cm4gKCgvXlswLTldLiskLykudGVzdChzKSA/ICd0cmEnIDogJ2luJykgKyAnICcgKyBzO1xuICAgICAgICB9LFxuICAgICAgICBwYXN0IDogJyVzIGZhJyxcbiAgICAgICAgcyA6ICdhbGN1bmkgc2Vjb25kaScsXG4gICAgICAgIG0gOiAndW4gbWludXRvJyxcbiAgICAgICAgbW0gOiAnJWQgbWludXRpJyxcbiAgICAgICAgaCA6ICd1blxcJ29yYScsXG4gICAgICAgIGhoIDogJyVkIG9yZScsXG4gICAgICAgIGQgOiAndW4gZ2lvcm5vJyxcbiAgICAgICAgZGQgOiAnJWQgZ2lvcm5pJyxcbiAgICAgICAgTSA6ICd1biBtZXNlJyxcbiAgICAgICAgTU0gOiAnJWQgbWVzaScsXG4gICAgICAgIHkgOiAndW4gYW5ubycsXG4gICAgICAgIHl5IDogJyVkIGFubmknXG4gICAgfSxcbiAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlIDogL1xcZHsxLDJ9wrovLFxuICAgIG9yZGluYWw6ICclZMK6JyxcbiAgICB3ZWVrIDoge1xuICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgZG95IDogNCAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgIH1cbn0pO1xuXG5yZXR1cm4gaXQ7XG5cbn0pKSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9pdC5qcyIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBKYXBhbmVzZSBbamFdXG4vLyEgYXV0aG9yIDogTEkgTG9uZyA6IGh0dHBzOi8vZ2l0aHViLmNvbS9iYXJ5b25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG52YXIgamEgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdqYScsIHtcbiAgICBtb250aHMgOiAnMeaciF8y5pyIXzPmnIhfNOaciF815pyIXzbmnIhfN+aciF845pyIXznmnIhfMTDmnIhfMTHmnIhfMTLmnIgnLnNwbGl0KCdfJyksXG4gICAgbW9udGhzU2hvcnQgOiAnMeaciF8y5pyIXzPmnIhfNOaciF815pyIXzbmnIhfN+aciF845pyIXznmnIhfMTDmnIhfMTHmnIhfMTLmnIgnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXMgOiAn5pel5puc5pelX+aciOabnOaXpV/ngavmm5zml6Vf5rC05puc5pelX+acqOabnOaXpV/ph5Hmm5zml6Vf5Zyf5puc5pelJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzU2hvcnQgOiAn5pelX+aciF/ngatf5rC0X+acqF/ph5Ff5ZyfJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzTWluIDogJ+aXpV/mnIhf54GrX+awtF/mnKhf6YeRX+Wcnycuc3BsaXQoJ18nKSxcbiAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICBMIDogJ1lZWVkvTU0vREQnLFxuICAgICAgICBMTCA6ICdZWVlZ5bm0TeaciETml6UnLFxuICAgICAgICBMTEwgOiAnWVlZWeW5tE3mnIhE5pelIEhIOm1tJyxcbiAgICAgICAgTExMTCA6ICdZWVlZ5bm0TeaciETml6UgSEg6bW0gZGRkZCcsXG4gICAgICAgIGwgOiAnWVlZWS9NTS9ERCcsXG4gICAgICAgIGxsIDogJ1lZWVnlubRN5pyIROaXpScsXG4gICAgICAgIGxsbCA6ICdZWVlZ5bm0TeaciETml6UgSEg6bW0nLFxuICAgICAgICBsbGxsIDogJ1lZWVnlubRN5pyIROaXpSBISDptbSBkZGRkJ1xuICAgIH0sXG4gICAgbWVyaWRpZW1QYXJzZTogL+WNiOWJjXzljYjlvowvaSxcbiAgICBpc1BNIDogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgIHJldHVybiBpbnB1dCA9PT0gJ+WNiOW+jCc7XG4gICAgfSxcbiAgICBtZXJpZGllbSA6IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgaWYgKGhvdXIgPCAxMikge1xuICAgICAgICAgICAgcmV0dXJuICfljYjliY0nO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuICfljYjlvownO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgc2FtZURheSA6ICdb5LuK5pelXSBMVCcsXG4gICAgICAgIG5leHREYXkgOiAnW+aYjuaXpV0gTFQnLFxuICAgICAgICBuZXh0V2VlayA6ICdb5p2l6YCxXWRkZGQgTFQnLFxuICAgICAgICBsYXN0RGF5IDogJ1vmmKjml6VdIExUJyxcbiAgICAgICAgbGFzdFdlZWsgOiAnW+WJjemAsV1kZGRkIExUJyxcbiAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICB9LFxuICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2UgOiAvXFxkezEsMn3ml6UvLFxuICAgIG9yZGluYWwgOiBmdW5jdGlvbiAobnVtYmVyLCBwZXJpb2QpIHtcbiAgICAgICAgc3dpdGNoIChwZXJpb2QpIHtcbiAgICAgICAgICAgIGNhc2UgJ2QnOlxuICAgICAgICAgICAgY2FzZSAnRCc6XG4gICAgICAgICAgICBjYXNlICdEREQnOlxuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAn5pelJztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICBmdXR1cmUgOiAnJXPlvownLFxuICAgICAgICBwYXN0IDogJyVz5YmNJyxcbiAgICAgICAgcyA6ICfmlbDnp5InLFxuICAgICAgICBtIDogJzHliIYnLFxuICAgICAgICBtbSA6ICclZOWIhicsXG4gICAgICAgIGggOiAnMeaZgumWkycsXG4gICAgICAgIGhoIDogJyVk5pmC6ZaTJyxcbiAgICAgICAgZCA6ICcx5pelJyxcbiAgICAgICAgZGQgOiAnJWTml6UnLFxuICAgICAgICBNIDogJzHjg7bmnIgnLFxuICAgICAgICBNTSA6ICclZOODtuaciCcsXG4gICAgICAgIHkgOiAnMeW5tCcsXG4gICAgICAgIHl5IDogJyVk5bm0J1xuICAgIH1cbn0pO1xuXG5yZXR1cm4gamE7XG5cbn0pKSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9qYS5qcyIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBKYXZhbmVzZSBbanZdXG4vLyEgYXV0aG9yIDogUm9ueSBMYW50aXAgOiBodHRwczovL2dpdGh1Yi5jb20vbGFudGlwXG4vLyEgcmVmZXJlbmNlOiBodHRwOi8vanYud2lraXBlZGlhLm9yZy93aWtpL0Jhc2FfSmF3YVxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciBqdiA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2p2Jywge1xuICAgIG1vbnRocyA6ICdKYW51YXJpX0ZlYnJ1YXJpX01hcmV0X0FwcmlsX01laV9KdW5pX0p1bGlfQWd1c3R1c19TZXB0ZW1iZXJfT2t0b2Jlcl9Ob3BlbWJlcl9EZXNlbWJlcicuc3BsaXQoJ18nKSxcbiAgICBtb250aHNTaG9ydCA6ICdKYW5fRmViX01hcl9BcHJfTWVpX0p1bl9KdWxfQWdzX1NlcF9Pa3RfTm9wX0Rlcycuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5cyA6ICdNaW5nZ3VfU2VuZW5fU2Vsb3NvX1JlYnVfS2VtaXNfSmVtdXdhaF9TZXB0dScuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1Nob3J0IDogJ01pbl9TZW5fU2VsX1JlYl9LZW1fSmVtX1NlcCcuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c01pbiA6ICdNZ19Tbl9TbF9SYl9LbV9KbV9TcCcuc3BsaXQoJ18nKSxcbiAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgTFQgOiAnSEgubW0nLFxuICAgICAgICBMVFMgOiAnSEgubW0uc3MnLFxuICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBbcHVrdWxdIEhILm1tJyxcbiAgICAgICAgTExMTCA6ICdkZGRkLCBEIE1NTU0gWVlZWSBbcHVrdWxdIEhILm1tJ1xuICAgIH0sXG4gICAgbWVyaWRpZW1QYXJzZTogL2VuamluZ3xzaXlhbmd8c29udGVufG5kYWx1LyxcbiAgICBtZXJpZGllbUhvdXIgOiBmdW5jdGlvbiAoaG91ciwgbWVyaWRpZW0pIHtcbiAgICAgICAgaWYgKGhvdXIgPT09IDEyKSB7XG4gICAgICAgICAgICBob3VyID0gMDtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVyaWRpZW0gPT09ICdlbmppbmcnKSB7XG4gICAgICAgICAgICByZXR1cm4gaG91cjtcbiAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ3NpeWFuZycpIHtcbiAgICAgICAgICAgIHJldHVybiBob3VyID49IDExID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ3NvbnRlbicgfHwgbWVyaWRpZW0gPT09ICduZGFsdScpIHtcbiAgICAgICAgICAgIHJldHVybiBob3VyICsgMTI7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIG1lcmlkaWVtIDogZnVuY3Rpb24gKGhvdXJzLCBtaW51dGVzLCBpc0xvd2VyKSB7XG4gICAgICAgIGlmIChob3VycyA8IDExKSB7XG4gICAgICAgICAgICByZXR1cm4gJ2VuamluZyc7XG4gICAgICAgIH0gZWxzZSBpZiAoaG91cnMgPCAxNSkge1xuICAgICAgICAgICAgcmV0dXJuICdzaXlhbmcnO1xuICAgICAgICB9IGVsc2UgaWYgKGhvdXJzIDwgMTkpIHtcbiAgICAgICAgICAgIHJldHVybiAnc29udGVuJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAnbmRhbHUnO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgc2FtZURheSA6ICdbRGludGVuIHB1bmlrbyBwdWt1bF0gTFQnLFxuICAgICAgICBuZXh0RGF5IDogJ1tNYmVuamFuZyBwdWt1bF0gTFQnLFxuICAgICAgICBuZXh0V2VlayA6ICdkZGRkIFtwdWt1bF0gTFQnLFxuICAgICAgICBsYXN0RGF5IDogJ1tLYWxhIHdpbmdpIHB1a3VsXSBMVCcsXG4gICAgICAgIGxhc3RXZWVrIDogJ2RkZGQgW2tlcGVuZ2tlciBwdWt1bF0gTFQnLFxuICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgIH0sXG4gICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICBmdXR1cmUgOiAnd29udGVuIGluZyAlcycsXG4gICAgICAgIHBhc3QgOiAnJXMgaW5na2FuZyBrZXBlbmdrZXInLFxuICAgICAgICBzIDogJ3Nhd2V0YXdpcyBkZXRpaycsXG4gICAgICAgIG0gOiAnc2V0dW5nZ2FsIG1lbml0JyxcbiAgICAgICAgbW0gOiAnJWQgbWVuaXQnLFxuICAgICAgICBoIDogJ3NldHVuZ2dhbCBqYW0nLFxuICAgICAgICBoaCA6ICclZCBqYW0nLFxuICAgICAgICBkIDogJ3NlZGludGVuJyxcbiAgICAgICAgZGQgOiAnJWQgZGludGVuJyxcbiAgICAgICAgTSA6ICdzZXd1bGFuJyxcbiAgICAgICAgTU0gOiAnJWQgd3VsYW4nLFxuICAgICAgICB5IDogJ3NldGF1bicsXG4gICAgICAgIHl5IDogJyVkIHRhdW4nXG4gICAgfSxcbiAgICB3ZWVrIDoge1xuICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgZG95IDogNyAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gMXN0IGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgIH1cbn0pO1xuXG5yZXR1cm4ganY7XG5cbn0pKSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9qdi5qcyIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBHZW9yZ2lhbiBba2FdXG4vLyEgYXV0aG9yIDogSXJha2xpIEphbmlhc2h2aWxpIDogaHR0cHM6Ly9naXRodWIuY29tL2lyYWtsaS1qYW5pYXNodmlsaVxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciBrYSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2thJywge1xuICAgIG1vbnRocyA6IHtcbiAgICAgICAgc3RhbmRhbG9uZTogJ+GDmOGDkOGDnOGDleGDkOGDoOGDmF/hg5fhg5Thg5Hhg5Thg6Dhg5Xhg5Dhg5rhg5hf4YOb4YOQ4YOg4YOi4YOYX+GDkOGDnuGDoOGDmOGDmuGDmF/hg5vhg5Dhg5jhg6Hhg5hf4YOY4YOV4YOc4YOY4YOh4YOYX+GDmOGDleGDmuGDmOGDoeGDmF/hg5Dhg5Lhg5Xhg5jhg6Hhg6Lhg51f4YOh4YOU4YOl4YOi4YOU4YOb4YOR4YOU4YOg4YOYX+GDneGDpeGDouGDneGDm+GDkeGDlOGDoOGDmF/hg5zhg53hg5Thg5vhg5Hhg5Thg6Dhg5hf4YOT4YOU4YOZ4YOU4YOb4YOR4YOU4YOg4YOYJy5zcGxpdCgnXycpLFxuICAgICAgICBmb3JtYXQ6ICfhg5jhg5Dhg5zhg5Xhg5Dhg6Dhg6Ff4YOX4YOU4YOR4YOU4YOg4YOV4YOQ4YOa4YOhX+GDm+GDkOGDoOGDouGDoV/hg5Dhg57hg6Dhg5jhg5rhg5jhg6Ff4YOb4YOQ4YOY4YOh4YOhX+GDmOGDleGDnOGDmOGDoeGDoV/hg5jhg5Xhg5rhg5jhg6Hhg6Ff4YOQ4YOS4YOV4YOY4YOh4YOi4YOhX+GDoeGDlOGDpeGDouGDlOGDm+GDkeGDlOGDoOGDoV/hg53hg6Xhg6Lhg53hg5vhg5Hhg5Thg6Dhg6Ff4YOc4YOd4YOU4YOb4YOR4YOU4YOg4YOhX+GDk+GDlOGDmeGDlOGDm+GDkeGDlOGDoOGDoScuc3BsaXQoJ18nKVxuICAgIH0sXG4gICAgbW9udGhzU2hvcnQgOiAn4YOY4YOQ4YOcX+GDl+GDlOGDkV/hg5vhg5Dhg6Bf4YOQ4YOe4YOgX+GDm+GDkOGDmF/hg5jhg5Xhg5xf4YOY4YOV4YOaX+GDkOGDkuGDlV/hg6Hhg5Thg6Vf4YOd4YOl4YOiX+GDnOGDneGDlF/hg5Phg5Thg5knLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXMgOiB7XG4gICAgICAgIHN0YW5kYWxvbmU6ICfhg5nhg5Xhg5jhg6Dhg5Bf4YOd4YOg4YOo4YOQ4YOR4YOQ4YOX4YOYX+GDoeGDkOGDm+GDqOGDkOGDkeGDkOGDl+GDmF/hg53hg5fhg67hg6jhg5Dhg5Hhg5Dhg5fhg5hf4YOu4YOj4YOX4YOo4YOQ4YOR4YOQ4YOX4YOYX+GDnuGDkOGDoOGDkOGDoeGDmeGDlOGDleGDmF/hg6jhg5Dhg5Hhg5Dhg5fhg5gnLnNwbGl0KCdfJyksXG4gICAgICAgIGZvcm1hdDogJ+GDmeGDleGDmOGDoOGDkOGDoV/hg53hg6Dhg6jhg5Dhg5Hhg5Dhg5fhg6Ff4YOh4YOQ4YOb4YOo4YOQ4YOR4YOQ4YOX4YOhX+GDneGDl+GDruGDqOGDkOGDkeGDkOGDl+GDoV/hg67hg6Phg5fhg6jhg5Dhg5Hhg5Dhg5fhg6Ff4YOe4YOQ4YOg4YOQ4YOh4YOZ4YOU4YOV4YOhX+GDqOGDkOGDkeGDkOGDl+GDoScuc3BsaXQoJ18nKSxcbiAgICAgICAgaXNGb3JtYXQ6IC8o4YOs4YOY4YOc4YOQfOGDqOGDlOGDm+GDk+GDlOGDkikvXG4gICAgfSxcbiAgICB3ZWVrZGF5c1Nob3J0IDogJ+GDmeGDleGDmF/hg53hg6Dhg6hf4YOh4YOQ4YObX+GDneGDl+GDrl/hg67hg6Phg5df4YOe4YOQ4YOgX+GDqOGDkOGDkScuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c01pbiA6ICfhg5nhg5Vf4YOd4YOgX+GDoeGDkF/hg53hg5df4YOu4YOjX+GDnuGDkF/hg6jhg5AnLnNwbGl0KCdfJyksXG4gICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgIExUIDogJ2g6bW0gQScsXG4gICAgICAgIExUUyA6ICdoOm1tOnNzIEEnLFxuICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBoOm1tIEEnLFxuICAgICAgICBMTExMIDogJ2RkZGQsIEQgTU1NTSBZWVlZIGg6bW0gQSdcbiAgICB9LFxuICAgIGNhbGVuZGFyIDoge1xuICAgICAgICBzYW1lRGF5IDogJ1vhg5Phg6bhg5Thg6FdIExUWy3hg5bhg5RdJyxcbiAgICAgICAgbmV4dERheSA6ICdb4YOu4YOV4YOQ4YOaXSBMVFst4YOW4YOUXScsXG4gICAgICAgIGxhc3REYXkgOiAnW+GDkuGDo+GDqOGDmOGDnF0gTFRbLeGDluGDlF0nLFxuICAgICAgICBuZXh0V2VlayA6ICdb4YOo4YOU4YOb4YOT4YOU4YOSXSBkZGRkIExUWy3hg5bhg5RdJyxcbiAgICAgICAgbGFzdFdlZWsgOiAnW+GDrOGDmOGDnOGDkF0gZGRkZCBMVC3hg5bhg5QnLFxuICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgIH0sXG4gICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICBmdXR1cmUgOiBmdW5jdGlvbiAocykge1xuICAgICAgICAgICAgcmV0dXJuICgvKOGDrOGDkOGDm+GDmHzhg6zhg6Phg5fhg5h84YOh4YOQ4YOQ4YOX4YOYfOGDrOGDlOGDmuGDmCkvKS50ZXN0KHMpID9cbiAgICAgICAgICAgICAgICBzLnJlcGxhY2UoL+GDmCQvLCAn4YOo4YOYJykgOlxuICAgICAgICAgICAgICAgIHMgKyAn4YOo4YOYJztcbiAgICAgICAgfSxcbiAgICAgICAgcGFzdCA6IGZ1bmN0aW9uIChzKSB7XG4gICAgICAgICAgICBpZiAoKC8o4YOs4YOQ4YOb4YOYfOGDrOGDo+GDl+GDmHzhg6Hhg5Dhg5Dhg5fhg5h84YOT4YOm4YOUfOGDl+GDleGDlCkvKS50ZXN0KHMpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHMucmVwbGFjZSgvKOGDmHzhg5QpJC8sICfhg5jhg6Eg4YOj4YOZ4YOQ4YOcJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoKC/hg6zhg5Thg5rhg5gvKS50ZXN0KHMpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHMucmVwbGFjZSgv4YOs4YOU4YOa4YOYJC8sICfhg6zhg5rhg5jhg6Eg4YOj4YOZ4YOQ4YOcJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHMgOiAn4YOg4YOQ4YOb4YOT4YOU4YOc4YOY4YOb4YOUIOGDrOGDkOGDm+GDmCcsXG4gICAgICAgIG0gOiAn4YOs4YOj4YOX4YOYJyxcbiAgICAgICAgbW0gOiAnJWQg4YOs4YOj4YOX4YOYJyxcbiAgICAgICAgaCA6ICfhg6Hhg5Dhg5Dhg5fhg5gnLFxuICAgICAgICBoaCA6ICclZCDhg6Hhg5Dhg5Dhg5fhg5gnLFxuICAgICAgICBkIDogJ+GDk+GDpuGDlCcsXG4gICAgICAgIGRkIDogJyVkIOGDk+GDpuGDlCcsXG4gICAgICAgIE0gOiAn4YOX4YOV4YOUJyxcbiAgICAgICAgTU0gOiAnJWQg4YOX4YOV4YOUJyxcbiAgICAgICAgeSA6ICfhg6zhg5Thg5rhg5gnLFxuICAgICAgICB5eSA6ICclZCDhg6zhg5Thg5rhg5gnXG4gICAgfSxcbiAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvMHwxLeGDmuGDmHzhg5vhg5QtXFxkezEsMn18XFxkezEsMn0t4YOULyxcbiAgICBvcmRpbmFsIDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICBpZiAobnVtYmVyID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyO1xuICAgICAgICB9XG4gICAgICAgIGlmIChudW1iZXIgPT09IDEpIHtcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnLeGDmuGDmCc7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKChudW1iZXIgPCAyMCkgfHwgKG51bWJlciA8PSAxMDAgJiYgKG51bWJlciAlIDIwID09PSAwKSkgfHwgKG51bWJlciAlIDEwMCA9PT0gMCkpIHtcbiAgICAgICAgICAgIHJldHVybiAn4YOb4YOULScgKyBudW1iZXI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bWJlciArICct4YOUJztcbiAgICB9LFxuICAgIHdlZWsgOiB7XG4gICAgICAgIGRvdyA6IDEsXG4gICAgICAgIGRveSA6IDdcbiAgICB9XG59KTtcblxucmV0dXJuIGthO1xuXG59KSkpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUva2EuanMiLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogS2F6YWtoIFtra11cbi8vISBhdXRob3JzIDogTnVybGFuIFJha2hpbXpoYW5vdiA6IGh0dHBzOi8vZ2l0aHViLmNvbS9udXJsYW5cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG52YXIgc3VmZml4ZXMgPSB7XG4gICAgMDogJy3RiNGWJyxcbiAgICAxOiAnLdGI0ZYnLFxuICAgIDI6ICct0YjRlicsXG4gICAgMzogJy3RiNGWJyxcbiAgICA0OiAnLdGI0ZYnLFxuICAgIDU6ICct0YjRlicsXG4gICAgNjogJy3RiNGLJyxcbiAgICA3OiAnLdGI0ZYnLFxuICAgIDg6ICct0YjRlicsXG4gICAgOTogJy3RiNGLJyxcbiAgICAxMDogJy3RiNGLJyxcbiAgICAyMDogJy3RiNGLJyxcbiAgICAzMDogJy3RiNGLJyxcbiAgICA0MDogJy3RiNGLJyxcbiAgICA1MDogJy3RiNGWJyxcbiAgICA2MDogJy3RiNGLJyxcbiAgICA3MDogJy3RiNGWJyxcbiAgICA4MDogJy3RiNGWJyxcbiAgICA5MDogJy3RiNGLJyxcbiAgICAxMDA6ICct0YjRlidcbn07XG5cbnZhciBrayA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2trJywge1xuICAgIG1vbnRocyA6ICfSm9Cw0qPRgtCw0YBf0LDSm9C/0LDQvV/QvdCw0YPRgNGL0Ldf0YHTmdGD0ZbRgF/QvNCw0LzRi9GAX9C80LDRg9GB0YvQvF/RiNGW0LvQtNC1X9GC0LDQvNGL0Ldf0pvRi9GA0LrSr9C50LXQul/Sm9Cw0LfQsNC9X9Kb0LDRgNCw0YjQsF/QttC10LvRgtC+0pvRgdCw0L0nLnNwbGl0KCdfJyksXG4gICAgbW9udGhzU2hvcnQgOiAn0pvQsNKjX9Cw0pvQv1/QvdCw0YNf0YHTmdGDX9C80LDQvF/QvNCw0YNf0YjRltC7X9GC0LDQvF/Sm9GL0YBf0pvQsNC3X9Kb0LDRgF/QttC10LsnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXMgOiAn0LbQtdC60YHQtdC90LHRll/QtNKv0LnRgdC10L3QsdGWX9GB0LXQudGB0LXQvdCx0ZZf0YHTmdGA0YHQtdC90LHRll/QsdC10LnRgdC10L3QsdGWX9C20rHQvNCwX9GB0LXQvdCx0ZYnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNTaG9ydCA6ICfQttC10Lpf0LTSr9C5X9GB0LXQuV/RgdOZ0YBf0LHQtdC5X9C20rHQvF/RgdC10L0nLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNNaW4gOiAn0LbQul/QtNC5X9GB0Llf0YHRgF/QsdC5X9C20Lxf0YHQvScuc3BsaXQoJ18nKSxcbiAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICBMIDogJ0RELk1NLllZWVknLFxuICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgIExMTEwgOiAnZGRkZCwgRCBNTU1NIFlZWVkgSEg6bW0nXG4gICAgfSxcbiAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgc2FtZURheSA6ICdb0JHSr9Cz0ZbQvSDRgdCw0pPQsNGCXSBMVCcsXG4gICAgICAgIG5leHREYXkgOiAnW9CV0YDRgtC10qMg0YHQsNKT0LDRgl0gTFQnLFxuICAgICAgICBuZXh0V2VlayA6ICdkZGRkIFvRgdCw0pPQsNGCXSBMVCcsXG4gICAgICAgIGxhc3REYXkgOiAnW9Ca0LXRiNC1INGB0LDSk9Cw0YJdIExUJyxcbiAgICAgICAgbGFzdFdlZWsgOiAnW9Oo0YLQutC10L0g0LDQv9GC0LDQvdGL0qNdIGRkZGQgW9GB0LDSk9Cw0YJdIExUJyxcbiAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICB9LFxuICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgZnV0dXJlIDogJyVzINGW0YjRltC90LTQtScsXG4gICAgICAgIHBhc3QgOiAnJXMg0LHSsdGA0YvQvScsXG4gICAgICAgIHMgOiAn0LHRltGA0L3QtdGI0LUg0YHQtdC60YPQvdC0JyxcbiAgICAgICAgbSA6ICfQsdGW0YAg0LzQuNC90YPRgicsXG4gICAgICAgIG1tIDogJyVkINC80LjQvdGD0YInLFxuICAgICAgICBoIDogJ9Cx0ZbRgCDRgdCw0pPQsNGCJyxcbiAgICAgICAgaGggOiAnJWQg0YHQsNKT0LDRgicsXG4gICAgICAgIGQgOiAn0LHRltGAINC60q/QvScsXG4gICAgICAgIGRkIDogJyVkINC60q/QvScsXG4gICAgICAgIE0gOiAn0LHRltGAINCw0LknLFxuICAgICAgICBNTSA6ICclZCDQsNC5JyxcbiAgICAgICAgeSA6ICfQsdGW0YAg0LbRi9C7JyxcbiAgICAgICAgeXkgOiAnJWQg0LbRi9C7J1xuICAgIH0sXG4gICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9LSjRiNGWfNGI0YspLyxcbiAgICBvcmRpbmFsIDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICB2YXIgYSA9IG51bWJlciAlIDEwLFxuICAgICAgICAgICAgYiA9IG51bWJlciA+PSAxMDAgPyAxMDAgOiBudWxsO1xuICAgICAgICByZXR1cm4gbnVtYmVyICsgKHN1ZmZpeGVzW251bWJlcl0gfHwgc3VmZml4ZXNbYV0gfHwgc3VmZml4ZXNbYl0pO1xuICAgIH0sXG4gICAgd2VlayA6IHtcbiAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgIGRveSA6IDcgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDFzdCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICB9XG59KTtcblxucmV0dXJuIGtrO1xuXG59KSkpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUva2suanMiLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogQ2FtYm9kaWFuIFtrbV1cbi8vISBhdXRob3IgOiBLcnV5IFZhbm5hIDogaHR0cHM6Ly9naXRodWIuY29tL2tydXl2YW5uYVxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciBrbSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2ttJywge1xuICAgIG1vbnRoczogJ+GemOGegOGemuGetl/hnoDhnrvhnpjhn5Lhnpfhn4hf4Z6Y4Z644Z6T4Z62X+GemOGfgeGen+Getl/hnqfhnp/hnpfhnrZf4Z6Y4Z634Z6Q4Z674Z6T4Z62X+GegOGegOGfkuGegOGeiuGetl/hnp/hnrjhnqDhnrZf4Z6A4Z6J4Z+S4Z6J4Z62X+Gej+Geu+Gem+Getl/hnpzhnrfhnoXhn5LhnobhnrfhnoDhnrZf4Z6S4Z+S4Z6T4Z68Jy5zcGxpdCgnXycpLFxuICAgIG1vbnRoc1Nob3J0OiAn4Z6Y4Z6A4Z6a4Z62X+GegOGeu+GemOGfkuGel+GfiF/hnpjhnrjhnpPhnrZf4Z6Y4Z+B4Z6f4Z62X+Gep+Gen+Gel+Getl/hnpjhnrfhnpDhnrvhnpPhnrZf4Z6A4Z6A4Z+S4Z6A4Z6K4Z62X+Gen+GeuOGeoOGetl/hnoDhnonhn5LhnonhnrZf4Z6P4Z674Z6b4Z62X+GenOGet+GeheGfkuGehuGet+GegOGetl/hnpLhn5LhnpPhnrwnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXM6ICfhnqLhnrbhnpHhnrfhno/hn5Lhnplf4Z6F4Z+Q4Z6T4Z+S4Z6RX+GeouGehOGfkuGeguGetuGeml/hnpbhnrvhnpJf4Z6W4Z+S4Z6a4Z6g4Z6f4Z+S4Z6U4Z6P4Z634Z+NX+Gen+Geu+GegOGfkuGeml/hnp/hn4Xhnprhn40nLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNTaG9ydDogJ+GeouGetuGekeGet+Gej+GfkuGemV/hnoXhn5DhnpPhn5LhnpFf4Z6i4Z6E4Z+S4Z6C4Z624Z6aX+GeluGeu+Gekl/hnpbhn5LhnprhnqDhnp/hn5LhnpThno/hnrfhn41f4Z6f4Z674Z6A4Z+S4Z6aX+Gen+GfheGemuGfjScuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c01pbjogJ+GeouGetuGekeGet+Gej+GfkuGemV/hnoXhn5DhnpPhn5LhnpFf4Z6i4Z6E4Z+S4Z6C4Z624Z6aX+GeluGeu+Gekl/hnpbhn5LhnprhnqDhnp/hn5LhnpThno/hnrfhn41f4Z6f4Z674Z6A4Z+S4Z6aX+Gen+GfheGemuGfjScuc3BsaXQoJ18nKSxcbiAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICBMTExMOiAnZGRkZCwgRCBNTU1NIFlZWVkgSEg6bW0nXG4gICAgfSxcbiAgICBjYWxlbmRhcjoge1xuICAgICAgICBzYW1lRGF5OiAnW+GekOGfkuGehOGfg+Gek+GfgeGfhyDhnpjhn4nhn4ThnoRdIExUJyxcbiAgICAgICAgbmV4dERheTogJ1vhnp/hn5LhnqLhn4LhnoAg4Z6Y4Z+J4Z+E4Z6EXSBMVCcsXG4gICAgICAgIG5leHRXZWVrOiAnZGRkZCBb4Z6Y4Z+J4Z+E4Z6EXSBMVCcsXG4gICAgICAgIGxhc3REYXk6ICdb4Z6Y4Z+S4Z6f4Z634Z6b4Z6Y4Z634Z6JIOGemOGfieGfhOGehF0gTFQnLFxuICAgICAgICBsYXN0V2VlazogJ2RkZGQgW+Gen+GelOGfkuGej+GetuGeoOGfjeGemOGeu+Gek10gW+GemOGfieGfhOGehF0gTFQnLFxuICAgICAgICBzYW1lRWxzZTogJ0wnXG4gICAgfSxcbiAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgZnV0dXJlOiAnJXPhnpHhn4Dhno8nLFxuICAgICAgICBwYXN0OiAnJXPhnpjhnrvhnpMnLFxuICAgICAgICBzOiAn4Z6U4Z+J4Z674Z6T4Z+S4Z6Y4Z624Z6T4Z6c4Z634Z6T4Z624Z6R4Z64JyxcbiAgICAgICAgbTogJ+GemOGeveGemeGek+GetuGekeGeuCcsXG4gICAgICAgIG1tOiAnJWQg4Z6T4Z624Z6R4Z64JyxcbiAgICAgICAgaDogJ+GemOGeveGemeGemOGfieGfhOGehCcsXG4gICAgICAgIGhoOiAnJWQg4Z6Y4Z+J4Z+E4Z6EJyxcbiAgICAgICAgZDogJ+GemOGeveGemeGekOGfkuGehOGfgycsXG4gICAgICAgIGRkOiAnJWQg4Z6Q4Z+S4Z6E4Z+DJyxcbiAgICAgICAgTTogJ+GemOGeveGemeGegeGfgicsXG4gICAgICAgIE1NOiAnJWQg4Z6B4Z+CJyxcbiAgICAgICAgeTogJ+GemOGeveGemeGehuGfkuGek+GetuGfhicsXG4gICAgICAgIHl5OiAnJWQg4Z6G4Z+S4Z6T4Z624Z+GJ1xuICAgIH0sXG4gICAgd2Vlazoge1xuICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICBkb3k6IDQgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgIH1cbn0pO1xuXG5yZXR1cm4ga207XG5cbn0pKSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9rbS5qcyIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBLYW5uYWRhIFtrbl1cbi8vISBhdXRob3IgOiBSYWplZXYgTmFpayA6IGh0dHBzOi8vZ2l0aHViLmNvbS9yYWplZXZuYWlrdGVcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG52YXIgc3ltYm9sTWFwID0ge1xuICAgICcxJzogJ+CzpycsXG4gICAgJzInOiAn4LOoJyxcbiAgICAnMyc6ICfgs6knLFxuICAgICc0JzogJ+CzqicsXG4gICAgJzUnOiAn4LOrJyxcbiAgICAnNic6ICfgs6wnLFxuICAgICc3JzogJ+CzrScsXG4gICAgJzgnOiAn4LOuJyxcbiAgICAnOSc6ICfgs68nLFxuICAgICcwJzogJ+Czpidcbn07XG52YXIgbnVtYmVyTWFwID0ge1xuICAgICfgs6cnOiAnMScsXG4gICAgJ+CzqCc6ICcyJyxcbiAgICAn4LOpJzogJzMnLFxuICAgICfgs6onOiAnNCcsXG4gICAgJ+Czqyc6ICc1JyxcbiAgICAn4LOsJzogJzYnLFxuICAgICfgs60nOiAnNycsXG4gICAgJ+Czric6ICc4JyxcbiAgICAn4LOvJzogJzknLFxuICAgICfgs6YnOiAnMCdcbn07XG5cbnZhciBrbiA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2tuJywge1xuICAgIG1vbnRocyA6ICfgspzgsqjgsrXgsrDgsr9f4LKr4LOG4LKs4LON4LKw4LK14LKw4LK/X+CyruCyvuCysOCzjeCymuCzjV/gso/gsqrgs43gsrDgsr/gsrLgs41f4LKu4LOG4LOVX+CynOCzguCyqOCzjV/gspzgs4HgsrLgs4bgs5Zf4LKG4LKX4LK44LON4LKf4LONX+CyuOCzhuCyquCzjeCyn+CzhuCyguCyrOCysOCzjV/gsoXgspXgs43gsp/gs4bgs4Lgs5XgsqzgsrDgs41f4LKo4LK14LOG4LKC4LKs4LKw4LONX+CyoeCyv+CyuOCzhuCyguCyrOCysOCzjScuc3BsaXQoJ18nKSxcbiAgICBtb250aHNTaG9ydCA6ICfgspzgsqhf4LKr4LOG4LKs4LON4LKwX+CyruCyvuCysOCzjeCymuCzjV/gso/gsqrgs43gsrDgsr/gsrLgs41f4LKu4LOG4LOVX+CynOCzguCyqOCzjV/gspzgs4HgsrLgs4bgs5Zf4LKG4LKX4LK44LON4LKf4LONX+CyuOCzhuCyquCzjeCyn+CzhuCyguCyrF/gsoXgspXgs43gsp/gs4bgs4Lgs5Xgsqxf4LKo4LK14LOG4LKC4LKsX+CyoeCyv+CyuOCzhuCyguCyrCcuc3BsaXQoJ18nKSxcbiAgICBtb250aHNQYXJzZUV4YWN0OiB0cnVlLFxuICAgIHdlZWtkYXlzIDogJ+CyreCyvuCyqOCzgeCyteCyvuCysF/gsrjgs4bgs4Lgs5Xgsq7gsrXgsr7gsrBf4LKu4LKC4LKX4LKz4LK14LK+4LKwX+CyrOCzgeCyp+CyteCyvuCysF/gspfgs4HgsrDgs4HgsrXgsr7gsrBf4LK24LOB4LKV4LON4LKw4LK14LK+4LKwX+CytuCyqOCyv+CyteCyvuCysCcuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1Nob3J0IDogJ+CyreCyvuCyqOCzgV/gsrjgs4bgs4Lgs5Xgsq5f4LKu4LKC4LKX4LKzX+CyrOCzgeCyp1/gspfgs4HgsrDgs4Ff4LK24LOB4LKV4LON4LKwX+CytuCyqOCyvycuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c01pbiA6ICfgsq3gsr5f4LK44LOG4LOC4LOVX+CyruCygl/gsqzgs4Ff4LKX4LOBX+CytuCzgV/gsrYnLnNwbGl0KCdfJyksXG4gICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgIExUIDogJ0EgaDptbScsXG4gICAgICAgIExUUyA6ICdBIGg6bW06c3MnLFxuICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSwgQSBoOm1tJyxcbiAgICAgICAgTExMTCA6ICdkZGRkLCBEIE1NTU0gWVlZWSwgQSBoOm1tJ1xuICAgIH0sXG4gICAgY2FsZW5kYXIgOiB7XG4gICAgICAgIHNhbWVEYXkgOiAnW+Cyh+CyguCypuCzgV0gTFQnLFxuICAgICAgICBuZXh0RGF5IDogJ1vgsqjgsr7gsrPgs4ZdIExUJyxcbiAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCwgTFQnLFxuICAgICAgICBsYXN0RGF5IDogJ1vgsqjgsr/gsqjgs43gsqjgs4ZdIExUJyxcbiAgICAgICAgbGFzdFdlZWsgOiAnW+CyleCzhuCzguCyqOCzhuCyr10gZGRkZCwgTFQnLFxuICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgIH0sXG4gICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICBmdXR1cmUgOiAnJXMg4LKo4LKC4LKk4LKwJyxcbiAgICAgICAgcGFzdCA6ICclcyDgsrngsr/gsoLgsqbgs4YnLFxuICAgICAgICBzIDogJ+CyleCzhuCysuCyteCzgSDgspXgs43gsrfgsqPgspfgsrPgs4EnLFxuICAgICAgICBtIDogJ+CykuCyguCypuCzgSDgsqjgsr/gsq7gsr/gsrcnLFxuICAgICAgICBtbSA6ICclZCDgsqjgsr/gsq7gsr/gsrcnLFxuICAgICAgICBoIDogJ+CykuCyguCypuCzgSDgspfgsoLgsp/gs4YnLFxuICAgICAgICBoaCA6ICclZCDgspfgsoLgsp/gs4YnLFxuICAgICAgICBkIDogJ+CykuCyguCypuCzgSDgsqbgsr/gsqgnLFxuICAgICAgICBkZCA6ICclZCDgsqbgsr/gsqgnLFxuICAgICAgICBNIDogJ+CykuCyguCypuCzgSDgsqTgsr/gsoLgspfgsrPgs4EnLFxuICAgICAgICBNTSA6ICclZCDgsqTgsr/gsoLgspfgsrPgs4EnLFxuICAgICAgICB5IDogJ+CykuCyguCypuCzgSDgsrXgsrDgs43gsrcnLFxuICAgICAgICB5eSA6ICclZCDgsrXgsrDgs43gsrcnXG4gICAgfSxcbiAgICBwcmVwYXJzZTogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1vgs6fgs6jgs6ngs6rgs6vgs6zgs63gs67gs6/gs6ZdL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlck1hcFttYXRjaF07XG4gICAgICAgIH0pO1xuICAgIH0sXG4gICAgcG9zdGZvcm1hdDogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1xcZC9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgIHJldHVybiBzeW1ib2xNYXBbbWF0Y2hdO1xuICAgICAgICB9KTtcbiAgICB9LFxuICAgIG1lcmlkaWVtUGFyc2U6IC/gsrDgsr7gsqTgs43gsrDgsr984LKs4LOG4LKz4LK/4LKX4LON4LKX4LOGfOCyruCyp+CzjeCyr+CyvuCyueCzjeCyqHzgsrjgsoLgspzgs4YvLFxuICAgIG1lcmlkaWVtSG91ciA6IGZ1bmN0aW9uIChob3VyLCBtZXJpZGllbSkge1xuICAgICAgICBpZiAoaG91ciA9PT0gMTIpIHtcbiAgICAgICAgICAgIGhvdXIgPSAwO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXJpZGllbSA9PT0gJ+CysOCyvuCypOCzjeCysOCyvycpIHtcbiAgICAgICAgICAgIHJldHVybiBob3VyIDwgNCA/IGhvdXIgOiBob3VyICsgMTI7XG4gICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfgsqzgs4bgsrPgsr/gspfgs43gspfgs4YnKSB7XG4gICAgICAgICAgICByZXR1cm4gaG91cjtcbiAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ+CyruCyp+CzjeCyr+CyvuCyueCzjeCyqCcpIHtcbiAgICAgICAgICAgIHJldHVybiBob3VyID49IDEwID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ+CyuOCyguCynOCzhicpIHtcbiAgICAgICAgICAgIHJldHVybiBob3VyICsgMTI7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIG1lcmlkaWVtIDogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICBpZiAoaG91ciA8IDQpIHtcbiAgICAgICAgICAgIHJldHVybiAn4LKw4LK+4LKk4LON4LKw4LK/JztcbiAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTApIHtcbiAgICAgICAgICAgIHJldHVybiAn4LKs4LOG4LKz4LK/4LKX4LON4LKX4LOGJztcbiAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTcpIHtcbiAgICAgICAgICAgIHJldHVybiAn4LKu4LKn4LON4LKv4LK+4LK54LON4LKoJztcbiAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMjApIHtcbiAgICAgICAgICAgIHJldHVybiAn4LK44LKC4LKc4LOGJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAn4LKw4LK+4LKk4LON4LKw4LK/JztcbiAgICAgICAgfVxuICAgIH0sXG4gICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9KOCyqOCzhuCzlSkvLFxuICAgIG9yZGluYWwgOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgIHJldHVybiBudW1iZXIgKyAn4LKo4LOG4LOVJztcbiAgICB9LFxuICAgIHdlZWsgOiB7XG4gICAgICAgIGRvdyA6IDAsIC8vIFN1bmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICBkb3kgOiA2ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiAxc3QgaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgfVxufSk7XG5cbnJldHVybiBrbjtcblxufSkpKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2tuLmpzIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEtvcmVhbiBba29dXG4vLyEgYXV0aG9yIDogS3l1bmd3b29rLCBQYXJrIDogaHR0cHM6Ly9naXRodWIuY29tL2t5dW5ndzAwa1xuLy8hIGF1dGhvciA6IEplZWV5dWwgTGVlIDxqZWVleXVsQGdtYWlsLmNvbT5cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG52YXIga28gPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdrbycsIHtcbiAgICBtb250aHMgOiAnMeyblF8y7JuUXzPsm5RfNOyblF817JuUXzbsm5RfN+yblF847JuUXznsm5RfMTDsm5RfMTHsm5RfMTLsm5QnLnNwbGl0KCdfJyksXG4gICAgbW9udGhzU2hvcnQgOiAnMeyblF8y7JuUXzPsm5RfNOyblF817JuUXzbsm5RfN+yblF847JuUXznsm5RfMTDsm5RfMTHsm5RfMTLsm5QnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXMgOiAn7J287JqU7J28X+yblOyalOydvF/tmZTsmpTsnbxf7IiY7JqU7J28X+uqqeyalOydvF/quIjsmpTsnbxf7Yag7JqU7J28Jy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzU2hvcnQgOiAn7J28X+yblF/tmZRf7IiYX+uqqV/quIhf7YagJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzTWluIDogJ+ydvF/sm5Rf7ZmUX+yImF/rqqlf6riIX+2GoCcuc3BsaXQoJ18nKSxcbiAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgTFQgOiAnQSBoOm1tJyxcbiAgICAgICAgTFRTIDogJ0EgaDptbTpzcycsXG4gICAgICAgIEwgOiAnWVlZWS5NTS5ERCcsXG4gICAgICAgIExMIDogJ1lZWVnrhYQgTU1NTSBE7J28JyxcbiAgICAgICAgTExMIDogJ1lZWVnrhYQgTU1NTSBE7J28IEEgaDptbScsXG4gICAgICAgIExMTEwgOiAnWVlZWeuFhCBNTU1NIETsnbwgZGRkZCBBIGg6bW0nLFxuICAgICAgICBsIDogJ1lZWVkuTU0uREQnLFxuICAgICAgICBsbCA6ICdZWVlZ64WEIE1NTU0gROydvCcsXG4gICAgICAgIGxsbCA6ICdZWVlZ64WEIE1NTU0gROydvCBBIGg6bW0nLFxuICAgICAgICBsbGxsIDogJ1lZWVnrhYQgTU1NTSBE7J28IGRkZGQgQSBoOm1tJ1xuICAgIH0sXG4gICAgY2FsZW5kYXIgOiB7XG4gICAgICAgIHNhbWVEYXkgOiAn7Jik64qYIExUJyxcbiAgICAgICAgbmV4dERheSA6ICfrgrTsnbwgTFQnLFxuICAgICAgICBuZXh0V2VlayA6ICdkZGRkIExUJyxcbiAgICAgICAgbGFzdERheSA6ICfslrTsoJwgTFQnLFxuICAgICAgICBsYXN0V2VlayA6ICfsp4Drgpzso7wgZGRkZCBMVCcsXG4gICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgfSxcbiAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgIGZ1dHVyZSA6ICclcyDtm4QnLFxuICAgICAgICBwYXN0IDogJyVzIOyghCcsXG4gICAgICAgIHMgOiAn66qHIOy0iCcsXG4gICAgICAgIHNzIDogJyVk7LSIJyxcbiAgICAgICAgbSA6ICcx67aEJyxcbiAgICAgICAgbW0gOiAnJWTrtoQnLFxuICAgICAgICBoIDogJ+2VnCDsi5zqsIQnLFxuICAgICAgICBoaCA6ICclZOyLnOqwhCcsXG4gICAgICAgIGQgOiAn7ZWY66OoJyxcbiAgICAgICAgZGQgOiAnJWTsnbwnLFxuICAgICAgICBNIDogJ+2VnCDri6wnLFxuICAgICAgICBNTSA6ICclZOuLrCcsXG4gICAgICAgIHkgOiAn7J28IOuFhCcsXG4gICAgICAgIHl5IDogJyVk64WEJ1xuICAgIH0sXG4gICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZSA6IC9cXGR7MSwyfSjsnbx87JuUfOyjvCkvLFxuICAgIG9yZGluYWwgOiBmdW5jdGlvbiAobnVtYmVyLCBwZXJpb2QpIHtcbiAgICAgICAgc3dpdGNoIChwZXJpb2QpIHtcbiAgICAgICAgICAgIGNhc2UgJ2QnOlxuICAgICAgICAgICAgY2FzZSAnRCc6XG4gICAgICAgICAgICBjYXNlICdEREQnOlxuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAn7J28JztcbiAgICAgICAgICAgIGNhc2UgJ00nOlxuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAn7JuUJztcbiAgICAgICAgICAgIGNhc2UgJ3cnOlxuICAgICAgICAgICAgY2FzZSAnVyc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICfso7wnO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBtZXJpZGllbVBhcnNlIDogL+yYpOyghHzsmKTtm4QvLFxuICAgIGlzUE0gOiBmdW5jdGlvbiAodG9rZW4pIHtcbiAgICAgICAgcmV0dXJuIHRva2VuID09PSAn7Jik7ZuEJztcbiAgICB9LFxuICAgIG1lcmlkaWVtIDogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNVcHBlcikge1xuICAgICAgICByZXR1cm4gaG91ciA8IDEyID8gJ+yYpOyghCcgOiAn7Jik7ZuEJztcbiAgICB9XG59KTtcblxucmV0dXJuIGtvO1xuXG59KSkpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUva28uanMiLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogS3lyZ3l6IFtreV1cbi8vISBhdXRob3IgOiBDaHluZ3l6IEFyeXN0YW4gdXVsdSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9jaHluZ3l6XG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuXG52YXIgc3VmZml4ZXMgPSB7XG4gICAgMDogJy3Rh9KvJyxcbiAgICAxOiAnLdGH0LgnLFxuICAgIDI6ICct0YfQuCcsXG4gICAgMzogJy3Rh9KvJyxcbiAgICA0OiAnLdGH0q8nLFxuICAgIDU6ICct0YfQuCcsXG4gICAgNjogJy3Rh9GLJyxcbiAgICA3OiAnLdGH0LgnLFxuICAgIDg6ICct0YfQuCcsXG4gICAgOTogJy3Rh9GDJyxcbiAgICAxMDogJy3Rh9GDJyxcbiAgICAyMDogJy3Rh9GLJyxcbiAgICAzMDogJy3Rh9GDJyxcbiAgICA0MDogJy3Rh9GLJyxcbiAgICA1MDogJy3Rh9KvJyxcbiAgICA2MDogJy3Rh9GLJyxcbiAgICA3MDogJy3Rh9C4JyxcbiAgICA4MDogJy3Rh9C4JyxcbiAgICA5MDogJy3Rh9GDJyxcbiAgICAxMDA6ICct0YfSrydcbn07XG5cbnZhciBreSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2t5Jywge1xuICAgIG1vbnRocyA6ICfRj9C90LLQsNGA0Yxf0YTQtdCy0YDQsNC70Yxf0LzQsNGA0YJf0LDQv9GA0LXQu9GMX9C80LDQuV/QuNGO0L3RjF/QuNGO0LvRjF/QsNCy0LPRg9GB0YJf0YHQtdC90YLRj9Cx0YDRjF/QvtC60YLRj9Cx0YDRjF/QvdC+0Y/QsdGA0Yxf0LTQtdC60LDQsdGA0YwnLnNwbGl0KCdfJyksXG4gICAgbW9udGhzU2hvcnQgOiAn0Y/QvdCyX9GE0LXQsl/QvNCw0YDRgl/QsNC/0YBf0LzQsNC5X9C40Y7QvdGMX9C40Y7Qu9GMX9Cw0LLQs1/RgdC10L1f0L7QutGCX9C90L7Rj1/QtNC10LonLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXMgOiAn0JbQtdC60YjQtdC80LHQuF/QlNKv0LnRiNOp0LzQsdKvX9Co0LXQudGI0LXQvNCx0Lhf0KjQsNGA0YjQtdC80LHQuF/QkdC10LnRiNC10LzQsdC4X9CW0YPQvNCwX9CY0YjQtdC80LHQuCcuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1Nob3J0IDogJ9CW0LXQul/QlNKv0Llf0KjQtdC5X9Co0LDRgF/QkdC10Llf0JbRg9C8X9CY0YjQtScuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c01pbiA6ICfQltC6X9CU0Llf0KjQuV/QqNGAX9CR0Llf0JbQvF/QmNGIJy5zcGxpdCgnXycpLFxuICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgIEwgOiAnREQuTU0uWVlZWScsXG4gICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgTExMTCA6ICdkZGRkLCBEIE1NTU0gWVlZWSBISDptbSdcbiAgICB9LFxuICAgIGNhbGVuZGFyIDoge1xuICAgICAgICBzYW1lRGF5IDogJ1vQkdKv0LPSr9C9INGB0LDQsNGCXSBMVCcsXG4gICAgICAgIG5leHREYXkgOiAnW9Ct0YDRgtC10qMg0YHQsNCw0YJdIExUJyxcbiAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCBb0YHQsNCw0YJdIExUJyxcbiAgICAgICAgbGFzdERheSA6ICdb0JrQtdGH0LUg0YHQsNCw0YJdIExUJyxcbiAgICAgICAgbGFzdFdlZWsgOiAnW9Oo0YLQutC10L0g0LDQv9GC0LDQvdGL0L1dIGRkZGQgW9C60q/QvdKvXSBb0YHQsNCw0YJdIExUJyxcbiAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICB9LFxuICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgZnV0dXJlIDogJyVzINC40YfQuNC90LTQtScsXG4gICAgICAgIHBhc3QgOiAnJXMg0LzRg9GA0YPQvScsXG4gICAgICAgIHMgOiAn0LHQuNGA0L3QtdGH0LUg0YHQtdC60YPQvdC0JyxcbiAgICAgICAgbSA6ICfQsdC40YAg0LzSr9C906nRgicsXG4gICAgICAgIG1tIDogJyVkINC80q/QvdOp0YInLFxuICAgICAgICBoIDogJ9Cx0LjRgCDRgdCw0LDRgicsXG4gICAgICAgIGhoIDogJyVkINGB0LDQsNGCJyxcbiAgICAgICAgZCA6ICfQsdC40YAg0LrSr9C9JyxcbiAgICAgICAgZGQgOiAnJWQg0LrSr9C9JyxcbiAgICAgICAgTSA6ICfQsdC40YAg0LDQuScsXG4gICAgICAgIE1NIDogJyVkINCw0LknLFxuICAgICAgICB5IDogJ9Cx0LjRgCDQttGL0LsnLFxuICAgICAgICB5eSA6ICclZCDQttGL0LsnXG4gICAgfSxcbiAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0tKNGH0Lh80YfRi3zRh9KvfNGH0YMpLyxcbiAgICBvcmRpbmFsIDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICB2YXIgYSA9IG51bWJlciAlIDEwLFxuICAgICAgICAgICAgYiA9IG51bWJlciA+PSAxMDAgPyAxMDAgOiBudWxsO1xuICAgICAgICByZXR1cm4gbnVtYmVyICsgKHN1ZmZpeGVzW251bWJlcl0gfHwgc3VmZml4ZXNbYV0gfHwgc3VmZml4ZXNbYl0pO1xuICAgIH0sXG4gICAgd2VlayA6IHtcbiAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgIGRveSA6IDcgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDFzdCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICB9XG59KTtcblxucmV0dXJuIGt5O1xuXG59KSkpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUva3kuanMiLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogTHV4ZW1ib3VyZ2lzaCBbbGJdXG4vLyEgYXV0aG9yIDogbXdlaW1lcnNraXJjaCA6IGh0dHBzOi8vZ2l0aHViLmNvbS9td2VpbWVyc2tpcmNoXG4vLyEgYXV0aG9yIDogRGF2aWQgUmFpc29uIDogaHR0cHM6Ly9naXRodWIuY29tL2t3aXNhdHpcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG5mdW5jdGlvbiBwcm9jZXNzUmVsYXRpdmVUaW1lKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5LCBpc0Z1dHVyZSkge1xuICAgIHZhciBmb3JtYXQgPSB7XG4gICAgICAgICdtJzogWydlbmcgTWludXR0JywgJ2VuZ2VyIE1pbnV0dCddLFxuICAgICAgICAnaCc6IFsnZW5nIFN0b25uJywgJ2VuZ2VyIFN0b25uJ10sXG4gICAgICAgICdkJzogWydlZW4gRGFnJywgJ2VuZ2VtIERhZyddLFxuICAgICAgICAnTSc6IFsnZWUgTW91bnQnLCAnZW5nZW0gTW91bnQnXSxcbiAgICAgICAgJ3knOiBbJ2VlIEpvZXInLCAnZW5nZW0gSm9lciddXG4gICAgfTtcbiAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCA/IGZvcm1hdFtrZXldWzBdIDogZm9ybWF0W2tleV1bMV07XG59XG5mdW5jdGlvbiBwcm9jZXNzRnV0dXJlVGltZShzdHJpbmcpIHtcbiAgICB2YXIgbnVtYmVyID0gc3RyaW5nLnN1YnN0cigwLCBzdHJpbmcuaW5kZXhPZignICcpKTtcbiAgICBpZiAoZWlmZWxlclJlZ2VsQXBwbGllc1RvTnVtYmVyKG51bWJlcikpIHtcbiAgICAgICAgcmV0dXJuICdhICcgKyBzdHJpbmc7XG4gICAgfVxuICAgIHJldHVybiAnYW4gJyArIHN0cmluZztcbn1cbmZ1bmN0aW9uIHByb2Nlc3NQYXN0VGltZShzdHJpbmcpIHtcbiAgICB2YXIgbnVtYmVyID0gc3RyaW5nLnN1YnN0cigwLCBzdHJpbmcuaW5kZXhPZignICcpKTtcbiAgICBpZiAoZWlmZWxlclJlZ2VsQXBwbGllc1RvTnVtYmVyKG51bWJlcikpIHtcbiAgICAgICAgcmV0dXJuICd2aXJ1ICcgKyBzdHJpbmc7XG4gICAgfVxuICAgIHJldHVybiAndmlydW4gJyArIHN0cmluZztcbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSB3b3JkIGJlZm9yZSB0aGUgZ2l2ZW4gbnVtYmVyIGxvc2VzIHRoZSAnLW4nIGVuZGluZy5cbiAqIGUuZy4gJ2FuIDEwIERlZWcnIGJ1dCAnYSA1IERlZWcnXG4gKlxuICogQHBhcmFtIG51bWJlciB7aW50ZWdlcn1cbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBlaWZlbGVyUmVnZWxBcHBsaWVzVG9OdW1iZXIobnVtYmVyKSB7XG4gICAgbnVtYmVyID0gcGFyc2VJbnQobnVtYmVyLCAxMCk7XG4gICAgaWYgKGlzTmFOKG51bWJlcikpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAobnVtYmVyIDwgMCkge1xuICAgICAgICAvLyBOZWdhdGl2ZSBOdW1iZXIgLS0+IGFsd2F5cyB0cnVlXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSBpZiAobnVtYmVyIDwgMTApIHtcbiAgICAgICAgLy8gT25seSAxIGRpZ2l0XG4gICAgICAgIGlmICg0IDw9IG51bWJlciAmJiBudW1iZXIgPD0gNykge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gZWxzZSBpZiAobnVtYmVyIDwgMTAwKSB7XG4gICAgICAgIC8vIDIgZGlnaXRzXG4gICAgICAgIHZhciBsYXN0RGlnaXQgPSBudW1iZXIgJSAxMCwgZmlyc3REaWdpdCA9IG51bWJlciAvIDEwO1xuICAgICAgICBpZiAobGFzdERpZ2l0ID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gZWlmZWxlclJlZ2VsQXBwbGllc1RvTnVtYmVyKGZpcnN0RGlnaXQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlaWZlbGVyUmVnZWxBcHBsaWVzVG9OdW1iZXIobGFzdERpZ2l0KTtcbiAgICB9IGVsc2UgaWYgKG51bWJlciA8IDEwMDAwKSB7XG4gICAgICAgIC8vIDMgb3IgNCBkaWdpdHMgLS0+IHJlY3Vyc2l2ZWx5IGNoZWNrIGZpcnN0IGRpZ2l0XG4gICAgICAgIHdoaWxlIChudW1iZXIgPj0gMTApIHtcbiAgICAgICAgICAgIG51bWJlciA9IG51bWJlciAvIDEwO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlaWZlbGVyUmVnZWxBcHBsaWVzVG9OdW1iZXIobnVtYmVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyBBbnl0aGluZyBsYXJnZXIgdGhhbiA0IGRpZ2l0czogcmVjdXJzaXZlbHkgY2hlY2sgZmlyc3Qgbi0zIGRpZ2l0c1xuICAgICAgICBudW1iZXIgPSBudW1iZXIgLyAxMDAwO1xuICAgICAgICByZXR1cm4gZWlmZWxlclJlZ2VsQXBwbGllc1RvTnVtYmVyKG51bWJlcik7XG4gICAgfVxufVxuXG52YXIgbGIgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdsYicsIHtcbiAgICBtb250aHM6ICdKYW51YXJfRmVicnVhcl9Nw6RlcnpfQWJyw6tsbF9NZWVfSnVuaV9KdWxpX0F1Z3VzdF9TZXB0ZW1iZXJfT2t0b2Jlcl9Ob3ZlbWJlcl9EZXplbWJlcicuc3BsaXQoJ18nKSxcbiAgICBtb250aHNTaG9ydDogJ0phbi5fRmVici5fTXJ6Ll9BYnIuX01lZV9KdW4uX0p1bC5fQXVnLl9TZXB0Ll9Pa3QuX05vdi5fRGV6Licuc3BsaXQoJ18nKSxcbiAgICBtb250aHNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICB3ZWVrZGF5czogJ1Nvbm5kZWdfTcOpaW5kZWdfRMOrbnNjaGRlZ19Nw6t0dHdvY2hfRG9ubmVzY2hkZWdfRnJlaWRlZ19TYW1zY2hkZWcnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNTaG9ydDogJ1NvLl9Nw6kuX0TDqy5fTcOrLl9Eby5fRnIuX1NhLicuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c01pbjogJ1NvX03DqV9Ew6tfTcOrX0RvX0ZyX1NhJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgTFQ6ICdIOm1tIFtBdWVyXScsXG4gICAgICAgIExUUzogJ0g6bW06c3MgW0F1ZXJdJyxcbiAgICAgICAgTDogJ0RELk1NLllZWVknLFxuICAgICAgICBMTDogJ0QuIE1NTU0gWVlZWScsXG4gICAgICAgIExMTDogJ0QuIE1NTU0gWVlZWSBIOm1tIFtBdWVyXScsXG4gICAgICAgIExMTEw6ICdkZGRkLCBELiBNTU1NIFlZWVkgSDptbSBbQXVlcl0nXG4gICAgfSxcbiAgICBjYWxlbmRhcjoge1xuICAgICAgICBzYW1lRGF5OiAnW0hhdXQgdW1dIExUJyxcbiAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgbmV4dERheTogJ1tNdWVyIHVtXSBMVCcsXG4gICAgICAgIG5leHRXZWVrOiAnZGRkZCBbdW1dIExUJyxcbiAgICAgICAgbGFzdERheTogJ1tHw6tzY2h0ZXIgdW1dIExUJyxcbiAgICAgICAgbGFzdFdlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8vIERpZmZlcmVudCBkYXRlIHN0cmluZyBmb3IgJ0TDq25zY2hkZWcnIChUdWVzZGF5KSBhbmQgJ0Rvbm5lc2NoZGVnJyAoVGh1cnNkYXkpIGR1ZSB0byBwaG9ub2xvZ2ljYWwgcnVsZVxuICAgICAgICAgICAgc3dpdGNoICh0aGlzLmRheSgpKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbTGVzY2h0ZW5dIGRkZGQgW3VtXSBMVCc7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbTGVzY2h0ZV0gZGRkZCBbdW1dIExUJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG4gICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICBmdXR1cmUgOiBwcm9jZXNzRnV0dXJlVGltZSxcbiAgICAgICAgcGFzdCA6IHByb2Nlc3NQYXN0VGltZSxcbiAgICAgICAgcyA6ICdlIHB1ZXIgU2Vrb25uZW4nLFxuICAgICAgICBtIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgbW0gOiAnJWQgTWludXR0ZW4nLFxuICAgICAgICBoIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgaGggOiAnJWQgU3Rvbm5lbicsXG4gICAgICAgIGQgOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICBkZCA6ICclZCBEZWVnJyxcbiAgICAgICAgTSA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgIE1NIDogJyVkIE3DqWludCcsXG4gICAgICAgIHkgOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICB5eSA6ICclZCBKb2VyJ1xuICAgIH0sXG4gICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9XFwuLyxcbiAgICBvcmRpbmFsOiAnJWQuJyxcbiAgICB3ZWVrOiB7XG4gICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgIGRveTogNCAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgIH1cbn0pO1xuXG5yZXR1cm4gbGI7XG5cbn0pKSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9sYi5qcyIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBMYW8gW2xvXVxuLy8hIGF1dGhvciA6IFJ5YW4gSGFydCA6IGh0dHBzOi8vZ2l0aHViLmNvbS9yeWFuaGFydDJcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG52YXIgbG8gPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdsbycsIHtcbiAgICBtb250aHMgOiAn4Lqh4Lqx4LqH4LqB4Lqt4LqZX+C6geC6uOC6oeC6nuC6sl/guqHgurXgupngurJf4LuA4Lqh4Lqq4LqyX+C6nuC6tuC6lOC6quC6sOC6nuC6sl/guqHgurTgupbgurjgupngurJf4LqB4LuN4Lql4Lqw4LqB4Lq74LqUX+C6quC6tOC6h+C6q+C6sl/guoHgurHgupnguo3gurJf4LqV4Lq44Lql4LqyX+C6nuC6sOC6iOC6tOC6gV/gupfgurHgupnguqfgurInLnNwbGl0KCdfJyksXG4gICAgbW9udGhzU2hvcnQgOiAn4Lqh4Lqx4LqH4LqB4Lqt4LqZX+C6geC6uOC6oeC6nuC6sl/guqHgurXgupngurJf4LuA4Lqh4Lqq4LqyX+C6nuC6tuC6lOC6quC6sOC6nuC6sl/guqHgurTgupbgurjgupngurJf4LqB4LuN4Lql4Lqw4LqB4Lq74LqUX+C6quC6tOC6h+C6q+C6sl/guoHgurHgupnguo3gurJf4LqV4Lq44Lql4LqyX+C6nuC6sOC6iOC6tOC6gV/gupfgurHgupnguqfgurInLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXMgOiAn4Lqt4Lqy4LqX4Lq04LqUX+C6iOC6seC6mV/guq3gurHguofguoTgurLguplf4Lqe4Lq44LqUX+C6nuC6sOC6q+C6seC6lF/guqrgurjguoFf4LuA4Lqq4Lq74LqyJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzU2hvcnQgOiAn4LqX4Lq04LqUX+C6iOC6seC6mV/guq3gurHguofguoTgurLguplf4Lqe4Lq44LqUX+C6nuC6sOC6q+C6seC6lF/guqrgurjguoFf4LuA4Lqq4Lq74LqyJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzTWluIDogJ+C6l1/guohf4Lqt4LqEX+C6nl/gup7guqtf4Lqq4LqBX+C6qicuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgTExMTCA6ICfguqfgurHguplkZGRkIEQgTU1NTSBZWVlZIEhIOm1tJ1xuICAgIH0sXG4gICAgbWVyaWRpZW1QYXJzZTogL+C6leC6reC6meC7gOC6iuC6u+C7ieC6snzgupXguq3gupngu4HguqXguocvLFxuICAgIGlzUE06IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICByZXR1cm4gaW5wdXQgPT09ICfgupXguq3gupngu4HguqXguocnO1xuICAgIH0sXG4gICAgbWVyaWRpZW0gOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgIGlmIChob3VyIDwgMTIpIHtcbiAgICAgICAgICAgIHJldHVybiAn4LqV4Lqt4LqZ4LuA4LqK4Lq74LuJ4LqyJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAn4LqV4Lqt4LqZ4LuB4Lql4LqHJztcbiAgICAgICAgfVxuICAgIH0sXG4gICAgY2FsZW5kYXIgOiB7XG4gICAgICAgIHNhbWVEYXkgOiAnW+C6oeC6t+C7ieC6meC6teC7ieC7gOC6p+C6peC6sl0gTFQnLFxuICAgICAgICBuZXh0RGF5IDogJ1vguqHgurfgu4nguq3gurfgu4jgupngu4DguqfguqXgurJdIExUJyxcbiAgICAgICAgbmV4dFdlZWsgOiAnW+C6p+C6seC6mV1kZGRkW+C7nOC7ieC6suC7gOC6p+C6peC6sl0gTFQnLFxuICAgICAgICBsYXN0RGF5IDogJ1vguqHgurfgu4nguqfgurLgupngupngurXgu4ngu4DguqfguqXgurJdIExUJyxcbiAgICAgICAgbGFzdFdlZWsgOiAnW+C6p+C6seC6mV1kZGRkW+C7geC6peC7ieC6p+C6meC6teC7ieC7gOC6p+C6peC6sl0gTFQnLFxuICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgIH0sXG4gICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICBmdXR1cmUgOiAn4Lqt4Lq14LqBICVzJyxcbiAgICAgICAgcGFzdCA6ICclc+C6nOC7iOC6suC6meC6oeC6sicsXG4gICAgICAgIHMgOiAn4Lqa4LuN4LuI4LuA4LqX4Lq74LuI4Lqy4LuD4LqU4Lqn4Lq04LqZ4Lqy4LqX4Lq1JyxcbiAgICAgICAgbSA6ICcxIOC6meC6suC6l+C6tScsXG4gICAgICAgIG1tIDogJyVkIOC6meC6suC6l+C6tScsXG4gICAgICAgIGggOiAnMSDguorgurvgu4jguqfgu4LguqHguocnLFxuICAgICAgICBoaCA6ICclZCDguorgurvgu4jguqfgu4LguqHguocnLFxuICAgICAgICBkIDogJzEg4Lqh4Lq34LuJJyxcbiAgICAgICAgZGQgOiAnJWQg4Lqh4Lq34LuJJyxcbiAgICAgICAgTSA6ICcxIOC7gOC6lOC6t+C6reC6mScsXG4gICAgICAgIE1NIDogJyVkIOC7gOC6lOC6t+C6reC6mScsXG4gICAgICAgIHkgOiAnMSDgupvgurUnLFxuICAgICAgICB5eSA6ICclZCDgupvgurUnXG4gICAgfSxcbiAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvKOC6l+C6teC7iClcXGR7MSwyfS8sXG4gICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgcmV0dXJuICfgupfgurXgu4gnICsgbnVtYmVyO1xuICAgIH1cbn0pO1xuXG5yZXR1cm4gbG87XG5cbn0pKSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9sby5qcyIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBMaXRodWFuaWFuIFtsdF1cbi8vISBhdXRob3IgOiBNaW5kYXVnYXMgTW96xatyYXMgOiBodHRwczovL2dpdGh1Yi5jb20vbW1venVyYXNcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG52YXIgdW5pdHMgPSB7XG4gICAgJ20nIDogJ21pbnV0xJdfbWludXTEl3NfbWludXTEmScsXG4gICAgJ21tJzogJ21pbnV0xJdzX21pbnXEjWnFs19taW51dGVzJyxcbiAgICAnaCcgOiAndmFsYW5kYV92YWxhbmRvc192YWxhbmTEhScsXG4gICAgJ2hoJzogJ3ZhbGFuZG9zX3ZhbGFuZMWzX3ZhbGFuZGFzJyxcbiAgICAnZCcgOiAnZGllbmFfZGllbm9zX2RpZW7EhScsXG4gICAgJ2RkJzogJ2RpZW5vc19kaWVuxbNfZGllbmFzJyxcbiAgICAnTScgOiAnbcSXbnVvX23El25lc2lvX23El25lc8SvJyxcbiAgICAnTU0nOiAnbcSXbmVzaWFpX23El25lc2nFs19txJduZXNpdXMnLFxuICAgICd5JyA6ICdtZXRhaV9tZXTFs19tZXR1cycsXG4gICAgJ3l5JzogJ21ldGFpX21ldMWzX21ldHVzJ1xufTtcbmZ1bmN0aW9uIHRyYW5zbGF0ZVNlY29uZHMobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXksIGlzRnV0dXJlKSB7XG4gICAgaWYgKHdpdGhvdXRTdWZmaXgpIHtcbiAgICAgICAgcmV0dXJuICdrZWxpb3Mgc2VrdW5kxJdzJztcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gaXNGdXR1cmUgPyAna2VsacWzIHNla3VuZMW+acWzJyA6ICdrZWxpYXMgc2VrdW5kZXMnO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHRyYW5zbGF0ZVNpbmd1bGFyKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5LCBpc0Z1dHVyZSkge1xuICAgIHJldHVybiB3aXRob3V0U3VmZml4ID8gZm9ybXMoa2V5KVswXSA6IChpc0Z1dHVyZSA/IGZvcm1zKGtleSlbMV0gOiBmb3JtcyhrZXkpWzJdKTtcbn1cbmZ1bmN0aW9uIHNwZWNpYWwobnVtYmVyKSB7XG4gICAgcmV0dXJuIG51bWJlciAlIDEwID09PSAwIHx8IChudW1iZXIgPiAxMCAmJiBudW1iZXIgPCAyMCk7XG59XG5mdW5jdGlvbiBmb3JtcyhrZXkpIHtcbiAgICByZXR1cm4gdW5pdHNba2V5XS5zcGxpdCgnXycpO1xufVxuZnVuY3Rpb24gdHJhbnNsYXRlKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5LCBpc0Z1dHVyZSkge1xuICAgIHZhciByZXN1bHQgPSBudW1iZXIgKyAnICc7XG4gICAgaWYgKG51bWJlciA9PT0gMSkge1xuICAgICAgICByZXR1cm4gcmVzdWx0ICsgdHJhbnNsYXRlU2luZ3VsYXIobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXlbMF0sIGlzRnV0dXJlKTtcbiAgICB9IGVsc2UgaWYgKHdpdGhvdXRTdWZmaXgpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdCArIChzcGVjaWFsKG51bWJlcikgPyBmb3JtcyhrZXkpWzFdIDogZm9ybXMoa2V5KVswXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGlzRnV0dXJlKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgZm9ybXMoa2V5KVsxXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAoc3BlY2lhbChudW1iZXIpID8gZm9ybXMoa2V5KVsxXSA6IGZvcm1zKGtleSlbMl0pO1xuICAgICAgICB9XG4gICAgfVxufVxudmFyIGx0ID0gbW9tZW50LmRlZmluZUxvY2FsZSgnbHQnLCB7XG4gICAgbW9udGhzIDoge1xuICAgICAgICBmb3JtYXQ6ICdzYXVzaW9fdmFzYXJpb19rb3ZvX2JhbGFuZMW+aW9fZ2VndcW+xJdzX2JpcsW+ZWxpb19saWVwb3NfcnVncGrFq8SNaW9fcnVnc8SXam9fc3BhbGlvX2xhcGtyacSNaW9fZ3J1b2TFvmlvJy5zcGxpdCgnXycpLFxuICAgICAgICBzdGFuZGFsb25lOiAnc2F1c2lzX3Zhc2FyaXNfa292YXNfYmFsYW5kaXNfZ2VndcW+xJdfYmlyxb5lbGlzX2xpZXBhX3J1Z3Bqxat0aXNfcnVnc8SXamlzX3NwYWxpc19sYXBrcml0aXNfZ3J1b2Rpcycuc3BsaXQoJ18nKSxcbiAgICAgICAgaXNGb3JtYXQ6IC9EW29EXT8oXFxbW15cXFtcXF1dKlxcXXxcXHMpK01NTU0/fE1NTU0/KFxcW1teXFxbXFxdXSpcXF18XFxzKStEW29EXT8vXG4gICAgfSxcbiAgICBtb250aHNTaG9ydCA6ICdzYXVfdmFzX2tvdl9iYWxfZ2VnX2Jpcl9saWVfcmdwX3Jnc19zcGFfbGFwX2dyZCcuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5cyA6IHtcbiAgICAgICAgZm9ybWF0OiAnc2VrbWFkaWVuxK9fcGlybWFkaWVuxK9fYW50cmFkaWVuxK9fdHJlxI1pYWRpZW7Er19rZXR2aXJ0YWRpZW7Er19wZW5rdGFkaWVuxK9fxaFlxaF0YWRpZW7Erycuc3BsaXQoJ18nKSxcbiAgICAgICAgc3RhbmRhbG9uZTogJ3Nla21hZGllbmlzX3Bpcm1hZGllbmlzX2FudHJhZGllbmlzX3RyZcSNaWFkaWVuaXNfa2V0dmlydGFkaWVuaXNfcGVua3RhZGllbmlzX8WhZcWhdGFkaWVuaXMnLnNwbGl0KCdfJyksXG4gICAgICAgIGlzRm9ybWF0OiAvZGRkZCBISDptbS9cbiAgICB9LFxuICAgIHdlZWtkYXlzU2hvcnQgOiAnU2VrX1Bpcl9BbnRfVHJlX0tldF9QZW5fxaBlxaEnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNNaW4gOiAnU19QX0FfVF9LX1BuX8WgJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgTCA6ICdZWVlZLU1NLUREJyxcbiAgICAgICAgTEwgOiAnWVlZWSBbbS5dIE1NTU0gRCBbZC5dJyxcbiAgICAgICAgTExMIDogJ1lZWVkgW20uXSBNTU1NIEQgW2QuXSwgSEg6bW0gW3ZhbC5dJyxcbiAgICAgICAgTExMTCA6ICdZWVlZIFttLl0gTU1NTSBEIFtkLl0sIGRkZGQsIEhIOm1tIFt2YWwuXScsXG4gICAgICAgIGwgOiAnWVlZWS1NTS1ERCcsXG4gICAgICAgIGxsIDogJ1lZWVkgW20uXSBNTU1NIEQgW2QuXScsXG4gICAgICAgIGxsbCA6ICdZWVlZIFttLl0gTU1NTSBEIFtkLl0sIEhIOm1tIFt2YWwuXScsXG4gICAgICAgIGxsbGwgOiAnWVlZWSBbbS5dIE1NTU0gRCBbZC5dLCBkZGQsIEhIOm1tIFt2YWwuXSdcbiAgICB9LFxuICAgIGNhbGVuZGFyIDoge1xuICAgICAgICBzYW1lRGF5IDogJ1vFoGlhbmRpZW5dIExUJyxcbiAgICAgICAgbmV4dERheSA6ICdbUnl0b2pdIExUJyxcbiAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCBMVCcsXG4gICAgICAgIGxhc3REYXkgOiAnW1Zha2FyXSBMVCcsXG4gICAgICAgIGxhc3RXZWVrIDogJ1tQcmHEl2p1c8SvXSBkZGRkIExUJyxcbiAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICB9LFxuICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgZnV0dXJlIDogJ3BvICVzJyxcbiAgICAgICAgcGFzdCA6ICdwcmllxaEgJXMnLFxuICAgICAgICBzIDogdHJhbnNsYXRlU2Vjb25kcyxcbiAgICAgICAgbSA6IHRyYW5zbGF0ZVNpbmd1bGFyLFxuICAgICAgICBtbSA6IHRyYW5zbGF0ZSxcbiAgICAgICAgaCA6IHRyYW5zbGF0ZVNpbmd1bGFyLFxuICAgICAgICBoaCA6IHRyYW5zbGF0ZSxcbiAgICAgICAgZCA6IHRyYW5zbGF0ZVNpbmd1bGFyLFxuICAgICAgICBkZCA6IHRyYW5zbGF0ZSxcbiAgICAgICAgTSA6IHRyYW5zbGF0ZVNpbmd1bGFyLFxuICAgICAgICBNTSA6IHRyYW5zbGF0ZSxcbiAgICAgICAgeSA6IHRyYW5zbGF0ZVNpbmd1bGFyLFxuICAgICAgICB5eSA6IHRyYW5zbGF0ZVxuICAgIH0sXG4gICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9LW9qaS8sXG4gICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgcmV0dXJuIG51bWJlciArICctb2ppJztcbiAgICB9LFxuICAgIHdlZWsgOiB7XG4gICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgfVxufSk7XG5cbnJldHVybiBsdDtcblxufSkpKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2x0LmpzIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IExhdHZpYW4gW2x2XVxuLy8hIGF1dGhvciA6IEtyaXN0YXBzIEthcmxzb25zIDogaHR0cHM6Ly9naXRodWIuY29tL3NrYWtyaVxuLy8hIGF1dGhvciA6IErEgW5pcyBFbG1lcmlzIDogaHR0cHM6Ly9naXRodWIuY29tL0phbmlzRVxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciB1bml0cyA9IHtcbiAgICAnbSc6ICdtaW7Fq3Rlc19taW7Fq3TEk21fbWluxat0ZV9taW7Fq3Rlcycuc3BsaXQoJ18nKSxcbiAgICAnbW0nOiAnbWluxat0ZXNfbWluxat0xJNtX21pbsWrdGVfbWluxat0ZXMnLnNwbGl0KCdfJyksXG4gICAgJ2gnOiAnc3R1bmRhc19zdHVuZMSBbV9zdHVuZGFfc3R1bmRhcycuc3BsaXQoJ18nKSxcbiAgICAnaGgnOiAnc3R1bmRhc19zdHVuZMSBbV9zdHVuZGFfc3R1bmRhcycuc3BsaXQoJ18nKSxcbiAgICAnZCc6ICdkaWVuYXNfZGllbsSBbV9kaWVuYV9kaWVuYXMnLnNwbGl0KCdfJyksXG4gICAgJ2RkJzogJ2RpZW5hc19kaWVuxIFtX2RpZW5hX2RpZW5hcycuc3BsaXQoJ18nKSxcbiAgICAnTSc6ICdtxJNuZcWhYV9txJNuZcWhaWVtX23Ek25lc2lzX23Ek25lxaFpJy5zcGxpdCgnXycpLFxuICAgICdNTSc6ICdtxJNuZcWhYV9txJNuZcWhaWVtX23Ek25lc2lzX23Ek25lxaFpJy5zcGxpdCgnXycpLFxuICAgICd5JzogJ2dhZGFfZ2FkaWVtX2dhZHNfZ2FkaScuc3BsaXQoJ18nKSxcbiAgICAneXknOiAnZ2FkYV9nYWRpZW1fZ2Fkc19nYWRpJy5zcGxpdCgnXycpXG59O1xuLyoqXG4gKiBAcGFyYW0gd2l0aG91dFN1ZmZpeCBib29sZWFuIHRydWUgPSBhIGxlbmd0aCBvZiB0aW1lOyBmYWxzZSA9IGJlZm9yZS9hZnRlciBhIHBlcmlvZCBvZiB0aW1lLlxuICovXG5mdW5jdGlvbiBmb3JtYXQoZm9ybXMsIG51bWJlciwgd2l0aG91dFN1ZmZpeCkge1xuICAgIGlmICh3aXRob3V0U3VmZml4KSB7XG4gICAgICAgIC8vIEUuZy4gXCIyMSBtaW7Fq3RlXCIsIFwiMyBtaW7Fq3Rlc1wiLlxuICAgICAgICByZXR1cm4gbnVtYmVyICUgMTAgPT09IDEgJiYgbnVtYmVyICUgMTAwICE9PSAxMSA/IGZvcm1zWzJdIDogZm9ybXNbM107XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gRS5nLiBcIjIxIG1pbsWrdGVzXCIgYXMgaW4gXCJwxJNjIDIxIG1pbsWrdGVzXCIuXG4gICAgICAgIC8vIEUuZy4gXCIzIG1pbsWrdMSTbVwiIGFzIGluIFwicMSTYyAzIG1pbsWrdMSTbVwiLlxuICAgICAgICByZXR1cm4gbnVtYmVyICUgMTAgPT09IDEgJiYgbnVtYmVyICUgMTAwICE9PSAxMSA/IGZvcm1zWzBdIDogZm9ybXNbMV07XG4gICAgfVxufVxuZnVuY3Rpb24gcmVsYXRpdmVUaW1lV2l0aFBsdXJhbChudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGtleSkge1xuICAgIHJldHVybiBudW1iZXIgKyAnICcgKyBmb3JtYXQodW5pdHNba2V5XSwgbnVtYmVyLCB3aXRob3V0U3VmZml4KTtcbn1cbmZ1bmN0aW9uIHJlbGF0aXZlVGltZVdpdGhTaW5ndWxhcihudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGtleSkge1xuICAgIHJldHVybiBmb3JtYXQodW5pdHNba2V5XSwgbnVtYmVyLCB3aXRob3V0U3VmZml4KTtcbn1cbmZ1bmN0aW9uIHJlbGF0aXZlU2Vjb25kcyhudW1iZXIsIHdpdGhvdXRTdWZmaXgpIHtcbiAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCA/ICdkYcW+YXMgc2VrdW5kZXMnIDogJ2Rhxb7EgW0gc2VrdW5kxJNtJztcbn1cblxudmFyIGx2ID0gbW9tZW50LmRlZmluZUxvY2FsZSgnbHYnLCB7XG4gICAgbW9udGhzIDogJ2phbnbEgXJpc19mZWJydcSBcmlzX21hcnRzX2FwcsSrbGlzX21haWpzX2rFq25panNfasWrbGlqc19hdWd1c3RzX3NlcHRlbWJyaXNfb2t0b2JyaXNfbm92ZW1icmlzX2RlY2VtYnJpcycuc3BsaXQoJ18nKSxcbiAgICBtb250aHNTaG9ydCA6ICdqYW5fZmViX21hcl9hcHJfbWFpX2rFq25fasWrbF9hdWdfc2VwX29rdF9ub3ZfZGVjJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzIDogJ3N2xJN0ZGllbmFfcGlybWRpZW5hX290cmRpZW5hX3RyZcWhZGllbmFfY2V0dXJ0ZGllbmFfcGlla3RkaWVuYV9zZXN0ZGllbmEnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNTaG9ydCA6ICdTdl9QX09fVF9DX1BrX1MnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNNaW4gOiAnU3ZfUF9PX1RfQ19Qa19TJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgTCA6ICdERC5NTS5ZWVlZLicsXG4gICAgICAgIExMIDogJ1lZWVkuIFtnYWRhXSBELiBNTU1NJyxcbiAgICAgICAgTExMIDogJ1lZWVkuIFtnYWRhXSBELiBNTU1NLCBISDptbScsXG4gICAgICAgIExMTEwgOiAnWVlZWS4gW2dhZGFdIEQuIE1NTU0sIGRkZGQsIEhIOm1tJ1xuICAgIH0sXG4gICAgY2FsZW5kYXIgOiB7XG4gICAgICAgIHNhbWVEYXkgOiAnW8Wgb2RpZW4gcHVsa3N0ZW5dIExUJyxcbiAgICAgICAgbmV4dERheSA6ICdbUsSrdCBwdWxrc3Rlbl0gTFQnLFxuICAgICAgICBuZXh0V2VlayA6ICdkZGRkIFtwdWxrc3Rlbl0gTFQnLFxuICAgICAgICBsYXN0RGF5IDogJ1tWYWthciBwdWxrc3Rlbl0gTFQnLFxuICAgICAgICBsYXN0V2VlayA6ICdbUGFnxIFqdcWhxIFdIGRkZGQgW3B1bGtzdGVuXSBMVCcsXG4gICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgfSxcbiAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgIGZ1dHVyZSA6ICdwxJNjICVzJyxcbiAgICAgICAgcGFzdCA6ICdwaXJtcyAlcycsXG4gICAgICAgIHMgOiByZWxhdGl2ZVNlY29uZHMsXG4gICAgICAgIG0gOiByZWxhdGl2ZVRpbWVXaXRoU2luZ3VsYXIsXG4gICAgICAgIG1tIDogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgaCA6IHJlbGF0aXZlVGltZVdpdGhTaW5ndWxhcixcbiAgICAgICAgaGggOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICBkIDogcmVsYXRpdmVUaW1lV2l0aFNpbmd1bGFyLFxuICAgICAgICBkZCA6IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgIE0gOiByZWxhdGl2ZVRpbWVXaXRoU2luZ3VsYXIsXG4gICAgICAgIE1NIDogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgeSA6IHJlbGF0aXZlVGltZVdpdGhTaW5ndWxhcixcbiAgICAgICAgeXkgOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsXG4gICAgfSxcbiAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn1cXC4vLFxuICAgIG9yZGluYWwgOiAnJWQuJyxcbiAgICB3ZWVrIDoge1xuICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgZG95IDogNCAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgIH1cbn0pO1xuXG5yZXR1cm4gbHY7XG5cbn0pKSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9sdi5qcyIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBNb250ZW5lZ3JpbiBbbWVdXG4vLyEgYXV0aG9yIDogTWlvZHJhZyBOaWthxI0gPG1pb2RyYWdAcmVzdGFydGl0Lm1lPiA6IGh0dHBzOi8vZ2l0aHViLmNvbS9taW9kcmFnbmlrYWNcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG52YXIgdHJhbnNsYXRvciA9IHtcbiAgICB3b3JkczogeyAvL0RpZmZlcmVudCBncmFtbWF0aWNhbCBjYXNlc1xuICAgICAgICBtOiBbJ2plZGFuIG1pbnV0JywgJ2plZG5vZyBtaW51dGEnXSxcbiAgICAgICAgbW06IFsnbWludXQnLCAnbWludXRhJywgJ21pbnV0YSddLFxuICAgICAgICBoOiBbJ2plZGFuIHNhdCcsICdqZWRub2cgc2F0YSddLFxuICAgICAgICBoaDogWydzYXQnLCAnc2F0YScsICdzYXRpJ10sXG4gICAgICAgIGRkOiBbJ2RhbicsICdkYW5hJywgJ2RhbmEnXSxcbiAgICAgICAgTU06IFsnbWplc2VjJywgJ21qZXNlY2EnLCAnbWplc2VjaSddLFxuICAgICAgICB5eTogWydnb2RpbmEnLCAnZ29kaW5lJywgJ2dvZGluYSddXG4gICAgfSxcbiAgICBjb3JyZWN0R3JhbW1hdGljYWxDYXNlOiBmdW5jdGlvbiAobnVtYmVyLCB3b3JkS2V5KSB7XG4gICAgICAgIHJldHVybiBudW1iZXIgPT09IDEgPyB3b3JkS2V5WzBdIDogKG51bWJlciA+PSAyICYmIG51bWJlciA8PSA0ID8gd29yZEtleVsxXSA6IHdvcmRLZXlbMl0pO1xuICAgIH0sXG4gICAgdHJhbnNsYXRlOiBmdW5jdGlvbiAobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXkpIHtcbiAgICAgICAgdmFyIHdvcmRLZXkgPSB0cmFuc2xhdG9yLndvcmRzW2tleV07XG4gICAgICAgIGlmIChrZXkubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCA/IHdvcmRLZXlbMF0gOiB3b3JkS2V5WzFdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICcgJyArIHRyYW5zbGF0b3IuY29ycmVjdEdyYW1tYXRpY2FsQ2FzZShudW1iZXIsIHdvcmRLZXkpO1xuICAgICAgICB9XG4gICAgfVxufTtcblxudmFyIG1lID0gbW9tZW50LmRlZmluZUxvY2FsZSgnbWUnLCB7XG4gICAgbW9udGhzOiAnamFudWFyX2ZlYnJ1YXJfbWFydF9hcHJpbF9tYWpfanVuX2p1bF9hdmd1c3Rfc2VwdGVtYmFyX29rdG9iYXJfbm92ZW1iYXJfZGVjZW1iYXInLnNwbGl0KCdfJyksXG4gICAgbW9udGhzU2hvcnQ6ICdqYW4uX2ZlYi5fbWFyLl9hcHIuX21hal9qdW5fanVsX2F2Zy5fc2VwLl9va3QuX25vdi5fZGVjLicuc3BsaXQoJ18nKSxcbiAgICBtb250aHNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICB3ZWVrZGF5czogJ25lZGplbGphX3BvbmVkamVsamFrX3V0b3Jha19zcmlqZWRhX8SNZXR2cnRha19wZXRha19zdWJvdGEnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNTaG9ydDogJ25lZC5fcG9uLl91dG8uX3NyaS5fxI1ldC5fcGV0Ll9zdWIuJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzTWluOiAnbmVfcG9fdXRfc3JfxI1lX3BlX3N1Jy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgTFQ6ICdIOm1tJyxcbiAgICAgICAgTFRTIDogJ0g6bW06c3MnLFxuICAgICAgICBMOiAnREQuTU0uWVlZWScsXG4gICAgICAgIExMOiAnRC4gTU1NTSBZWVlZJyxcbiAgICAgICAgTExMOiAnRC4gTU1NTSBZWVlZIEg6bW0nLFxuICAgICAgICBMTExMOiAnZGRkZCwgRC4gTU1NTSBZWVlZIEg6bW0nXG4gICAgfSxcbiAgICBjYWxlbmRhcjoge1xuICAgICAgICBzYW1lRGF5OiAnW2RhbmFzIHVdIExUJyxcbiAgICAgICAgbmV4dERheTogJ1tzanV0cmEgdV0gTFQnLFxuXG4gICAgICAgIG5leHRXZWVrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHRoaXMuZGF5KCkpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3VdIFtuZWRqZWxqdV0gW3VdIExUJztcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3VdIFtzcmlqZWR1XSBbdV0gTFQnO1xuICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbdV0gW3N1Ym90dV0gW3VdIExUJztcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3VdIGRkZGQgW3VdIExUJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbGFzdERheSAgOiAnW2p1xI1lIHVdIExUJyxcbiAgICAgICAgbGFzdFdlZWsgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgbGFzdFdlZWtEYXlzID0gW1xuICAgICAgICAgICAgICAgICdbcHJvxaFsZV0gW25lZGplbGplXSBbdV0gTFQnLFxuICAgICAgICAgICAgICAgICdbcHJvxaFsb2ddIFtwb25lZGplbGprYV0gW3VdIExUJyxcbiAgICAgICAgICAgICAgICAnW3Byb8WhbG9nXSBbdXRvcmthXSBbdV0gTFQnLFxuICAgICAgICAgICAgICAgICdbcHJvxaFsZV0gW3NyaWplZGVdIFt1XSBMVCcsXG4gICAgICAgICAgICAgICAgJ1twcm/FoWxvZ10gW8SNZXR2cnRrYV0gW3VdIExUJyxcbiAgICAgICAgICAgICAgICAnW3Byb8WhbG9nXSBbcGV0a2FdIFt1XSBMVCcsXG4gICAgICAgICAgICAgICAgJ1twcm/FoWxlXSBbc3Vib3RlXSBbdV0gTFQnXG4gICAgICAgICAgICBdO1xuICAgICAgICAgICAgcmV0dXJuIGxhc3RXZWVrRGF5c1t0aGlzLmRheSgpXTtcbiAgICAgICAgfSxcbiAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICB9LFxuICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgZnV0dXJlIDogJ3phICVzJyxcbiAgICAgICAgcGFzdCAgIDogJ3ByaWplICVzJyxcbiAgICAgICAgcyAgICAgIDogJ25la29saWtvIHNla3VuZGknLFxuICAgICAgICBtICAgICAgOiB0cmFuc2xhdG9yLnRyYW5zbGF0ZSxcbiAgICAgICAgbW0gICAgIDogdHJhbnNsYXRvci50cmFuc2xhdGUsXG4gICAgICAgIGggICAgICA6IHRyYW5zbGF0b3IudHJhbnNsYXRlLFxuICAgICAgICBoaCAgICAgOiB0cmFuc2xhdG9yLnRyYW5zbGF0ZSxcbiAgICAgICAgZCAgICAgIDogJ2RhbicsXG4gICAgICAgIGRkICAgICA6IHRyYW5zbGF0b3IudHJhbnNsYXRlLFxuICAgICAgICBNICAgICAgOiAnbWplc2VjJyxcbiAgICAgICAgTU0gICAgIDogdHJhbnNsYXRvci50cmFuc2xhdGUsXG4gICAgICAgIHkgICAgICA6ICdnb2RpbnUnLFxuICAgICAgICB5eSAgICAgOiB0cmFuc2xhdG9yLnRyYW5zbGF0ZVxuICAgIH0sXG4gICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9XFwuLyxcbiAgICBvcmRpbmFsIDogJyVkLicsXG4gICAgd2VlayA6IHtcbiAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgIGRveSA6IDcgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDFzdCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICB9XG59KTtcblxucmV0dXJuIG1lO1xuXG59KSkpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvbWUuanMiLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogTWFvcmkgW21pXVxuLy8hIGF1dGhvciA6IEpvaG4gQ29ycmlnYW4gPHJvYmJpZWNsb3NldEBnbWFpbC5jb20+IDogaHR0cHM6Ly9naXRodWIuY29tL2pvaG5pZGVhbFxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciBtaSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ21pJywge1xuICAgIG1vbnRoczogJ0tvaGktdMSBdGVfSHVpLXRhbmd1cnVfUG91dMWrLXRlLXJhbmdpX1BhZW5nYS13aMSBd2jEgV9IYXJhdHVhX1BpcGlyaV9IxY1uZ29pbmdvaV9IZXJlLXR1cmkta8WNa8SBX01haHVydV9XaGlyaW5nYS3EgS1udWt1X1doaXJpbmdhLcSBLXJhbmdpX0hha2loZWEnLnNwbGl0KCdfJyksXG4gICAgbW9udGhzU2hvcnQ6ICdLb2hpX0h1aV9Qb3VfUGFlX0hhcmFfUGlwaV9IxY1uZ29pX0hlcmVfTWFodV9XaGktbnVfV2hpLXJhX0hha2knLnNwbGl0KCdfJyksXG4gICAgbW9udGhzUmVnZXg6IC8oPzpbJ2EtelxcdTAxMDFcXHUwMTREXFx1MDE2Ql0rXFwtPyl7MSwzfS9pLFxuICAgIG1vbnRoc1N0cmljdFJlZ2V4OiAvKD86WydhLXpcXHUwMTAxXFx1MDE0RFxcdTAxNkJdK1xcLT8pezEsM30vaSxcbiAgICBtb250aHNTaG9ydFJlZ2V4OiAvKD86WydhLXpcXHUwMTAxXFx1MDE0RFxcdTAxNkJdK1xcLT8pezEsM30vaSxcbiAgICBtb250aHNTaG9ydFN0cmljdFJlZ2V4OiAvKD86WydhLXpcXHUwMTAxXFx1MDE0RFxcdTAxNkJdK1xcLT8pezEsMn0vaSxcbiAgICB3ZWVrZGF5czogJ1LEgXRhcHVfTWFuZV9UxatyZWlfV2VuZXJlaV9UxIFpdGVfUGFyYWlyZV9IxIF0YXJlaScuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1Nob3J0OiAnVGFfTWFfVMWrX1dlX1TEgWlfUGFfSMSBJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzTWluOiAnVGFfTWFfVMWrX1dlX1TEgWlfUGFfSMSBJy5zcGxpdCgnXycpLFxuICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgIEw6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgIExMTDogJ0QgTU1NTSBZWVlZIFtpXSBISDptbScsXG4gICAgICAgIExMTEw6ICdkZGRkLCBEIE1NTU0gWVlZWSBbaV0gSEg6bW0nXG4gICAgfSxcbiAgICBjYWxlbmRhcjoge1xuICAgICAgICBzYW1lRGF5OiAnW2kgdGVpZSBtYWhhbmEsIGldIExUJyxcbiAgICAgICAgbmV4dERheTogJ1thcG9wbyBpXSBMVCcsXG4gICAgICAgIG5leHRXZWVrOiAnZGRkZCBbaV0gTFQnLFxuICAgICAgICBsYXN0RGF5OiAnW2luYW5haGkgaV0gTFQnLFxuICAgICAgICBsYXN0V2VlazogJ2RkZGQgW3doYWthbXV0dW5nYSBpXSBMVCcsXG4gICAgICAgIHNhbWVFbHNlOiAnTCdcbiAgICB9LFxuICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICBmdXR1cmU6ICdpIHJvdG8gaSAlcycsXG4gICAgICAgIHBhc3Q6ICclcyBpIG11YScsXG4gICAgICAgIHM6ICd0ZSBoxJNrb25hIHJ1YXJ1YScsXG4gICAgICAgIG06ICdoZSBtZW5ldGknLFxuICAgICAgICBtbTogJyVkIG1lbmV0aScsXG4gICAgICAgIGg6ICd0ZSBoYW9yYScsXG4gICAgICAgIGhoOiAnJWQgaGFvcmEnLFxuICAgICAgICBkOiAnaGUgcmEnLFxuICAgICAgICBkZDogJyVkIHJhJyxcbiAgICAgICAgTTogJ2hlIG1hcmFtYScsXG4gICAgICAgIE1NOiAnJWQgbWFyYW1hJyxcbiAgICAgICAgeTogJ2hlIHRhdScsXG4gICAgICAgIHl5OiAnJWQgdGF1J1xuICAgIH0sXG4gICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9wrovLFxuICAgIG9yZGluYWw6ICclZMK6JyxcbiAgICB3ZWVrIDoge1xuICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgZG95IDogNCAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgIH1cbn0pO1xuXG5yZXR1cm4gbWk7XG5cbn0pKSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9taS5qcyIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBNYWNlZG9uaWFuIFtta11cbi8vISBhdXRob3IgOiBCb3Jpc2xhdiBNaWNrb3YgOiBodHRwczovL2dpdGh1Yi5jb20vQjBrMFxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciBtayA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ21rJywge1xuICAgIG1vbnRocyA6ICfRmNCw0L3Rg9Cw0YDQuF/RhNC10LLRgNGD0LDRgNC4X9C80LDRgNGCX9Cw0L/RgNC40Ltf0LzQsNGYX9GY0YPQvdC4X9GY0YPQu9C4X9Cw0LLQs9GD0YHRgl/RgdC10L/RgtC10LzQstGA0Lhf0L7QutGC0L7QvNCy0YDQuF/QvdC+0LXQvNCy0YDQuF/QtNC10LrQtdC80LLRgNC4Jy5zcGxpdCgnXycpLFxuICAgIG1vbnRoc1Nob3J0IDogJ9GY0LDQvV/RhNC10LJf0LzQsNGAX9Cw0L/RgF/QvNCw0Zhf0ZjRg9C9X9GY0YPQu1/QsNCy0LNf0YHQtdC/X9C+0LrRgl/QvdC+0LVf0LTQtdC6Jy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzIDogJ9C90LXQtNC10LvQsF/Qv9C+0L3QtdC00LXQu9C90LjQul/QstGC0L7RgNC90LjQul/RgdGA0LXQtNCwX9GH0LXRgtCy0YDRgtC+0Lpf0L/QtdGC0L7Qul/RgdCw0LHQvtGC0LAnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNTaG9ydCA6ICfQvdC10LRf0L/QvtC9X9Cy0YLQvl/RgdGA0LVf0YfQtdGCX9C/0LXRgl/RgdCw0LEnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNNaW4gOiAn0L1lX9C/b1/QstGCX9GB0YBf0YfQtV/Qv9C1X9GBYScuc3BsaXQoJ18nKSxcbiAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgTFQgOiAnSDptbScsXG4gICAgICAgIExUUyA6ICdIOm1tOnNzJyxcbiAgICAgICAgTCA6ICdELk1NLllZWVknLFxuICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBIOm1tJyxcbiAgICAgICAgTExMTCA6ICdkZGRkLCBEIE1NTU0gWVlZWSBIOm1tJ1xuICAgIH0sXG4gICAgY2FsZW5kYXIgOiB7XG4gICAgICAgIHNhbWVEYXkgOiAnW9CU0LXQvdC10YEg0LLQvl0gTFQnLFxuICAgICAgICBuZXh0RGF5IDogJ1vQo9GC0YDQtSDQstC+XSBMVCcsXG4gICAgICAgIG5leHRXZWVrIDogJ1vQktC+XSBkZGRkIFvQstC+XSBMVCcsXG4gICAgICAgIGxhc3REYXkgOiAnW9CS0YfQtdGA0LAg0LLQvl0gTFQnLFxuICAgICAgICBsYXN0V2VlayA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHN3aXRjaCAodGhpcy5kYXkoKSkge1xuICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1vQmNC30LzQuNC90LDRgtCw0YLQsF0gZGRkZCBb0LLQvl0gTFQnO1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdb0JjQt9C80LjQvdCw0YLQuNC+0YJdIGRkZGQgW9Cy0L5dIExUJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICB9LFxuICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgZnV0dXJlIDogJ9C/0L7RgdC70LUgJXMnLFxuICAgICAgICBwYXN0IDogJ9C/0YDQtdC0ICVzJyxcbiAgICAgICAgcyA6ICfQvdC10LrQvtC70LrRgyDRgdC10LrRg9C90LTQuCcsXG4gICAgICAgIG0gOiAn0LzQuNC90YPRgtCwJyxcbiAgICAgICAgbW0gOiAnJWQg0LzQuNC90YPRgtC4JyxcbiAgICAgICAgaCA6ICfRh9Cw0YEnLFxuICAgICAgICBoaCA6ICclZCDRh9Cw0YHQsCcsXG4gICAgICAgIGQgOiAn0LTQtdC9JyxcbiAgICAgICAgZGQgOiAnJWQg0LTQtdC90LAnLFxuICAgICAgICBNIDogJ9C80LXRgdC10YYnLFxuICAgICAgICBNTSA6ICclZCDQvNC10YHQtdGG0LgnLFxuICAgICAgICB5IDogJ9Cz0L7QtNC40L3QsCcsXG4gICAgICAgIHl5IDogJyVkINCz0L7QtNC40L3QuCdcbiAgICB9LFxuICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfS0o0LXQsnzQtdC9fNGC0Lh80LLQuHzRgNC4fNC80LgpLyxcbiAgICBvcmRpbmFsIDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICB2YXIgbGFzdERpZ2l0ID0gbnVtYmVyICUgMTAsXG4gICAgICAgICAgICBsYXN0MkRpZ2l0cyA9IG51bWJlciAlIDEwMDtcbiAgICAgICAgaWYgKG51bWJlciA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICct0LXQsic7XG4gICAgICAgIH0gZWxzZSBpZiAobGFzdDJEaWdpdHMgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnLdC10L0nO1xuICAgICAgICB9IGVsc2UgaWYgKGxhc3QyRGlnaXRzID4gMTAgJiYgbGFzdDJEaWdpdHMgPCAyMCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICct0YLQuCc7XG4gICAgICAgIH0gZWxzZSBpZiAobGFzdERpZ2l0ID09PSAxKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJy3QstC4JztcbiAgICAgICAgfSBlbHNlIGlmIChsYXN0RGlnaXQgPT09IDIpIHtcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnLdGA0LgnO1xuICAgICAgICB9IGVsc2UgaWYgKGxhc3REaWdpdCA9PT0gNyB8fCBsYXN0RGlnaXQgPT09IDgpIHtcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnLdC80LgnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICct0YLQuCc7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIHdlZWsgOiB7XG4gICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICBkb3kgOiA3ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiAxc3QgaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgfVxufSk7XG5cbnJldHVybiBtaztcblxufSkpKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL21rLmpzIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IE1hbGF5YWxhbSBbbWxdXG4vLyEgYXV0aG9yIDogRmxveWQgUGluayA6IGh0dHBzOi8vZ2l0aHViLmNvbS9mbG95ZHBpbmtcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG52YXIgbWwgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdtbCcsIHtcbiAgICBtb250aHMgOiAn4LSc4LSo4LWB4LS14LSw4LS/X+C0q+C1huC0rOC1jeC0sOC1geC0teC0sOC0v1/gtK7gtL7gtbzgtJrgtY3gtJrgtY1f4LSP4LSq4LWN4LSw4LS/4LW9X+C0ruC1h+C0r+C1jV/gtJzgtYLgtbpf4LSc4LWC4LSy4LWIX+C0k+C0l+C0uOC1jeC0seC1jeC0seC1jV/gtLjgtYbgtKrgtY3gtLHgtY3gtLHgtILgtKzgtbxf4LSS4LSV4LWN4LSf4LWL4LSs4LW8X+C0qOC0teC0guC0rOC1vF/gtKHgtL/gtLjgtILgtKzgtbwnLnNwbGl0KCdfJyksXG4gICAgbW9udGhzU2hvcnQgOiAn4LSc4LSo4LWBLl/gtKvgtYbgtKzgtY3gtLDgtYEuX+C0ruC0vuC1vC5f4LSP4LSq4LWN4LSw4LS/Ll/gtK7gtYfgtK/gtY1f4LSc4LWC4LW6X+C0nOC1guC0suC1iC5f4LST4LSXLl/gtLjgtYbgtKrgtY3gtLHgtY3gtLEuX+C0kuC0leC1jeC0n+C1iy5f4LSo4LS14LSCLl/gtKHgtL/gtLjgtIIuJy5zcGxpdCgnXycpLFxuICAgIG1vbnRoc1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgIHdlZWtkYXlzIDogJ+C0nuC0vuC0r+C0seC0vuC0tOC1jeC0ml/gtKTgtL/gtJngtY3gtJXgtLPgtL7gtLTgtY3gtJpf4LSa4LWK4LS14LWN4LS14LS+4LS04LWN4LSaX+C0rOC1geC0p+C0qOC0vuC0tOC1jeC0ml/gtLXgtY3gtK/gtL7gtLTgtL7gtLTgtY3gtJpf4LS14LWG4LSz4LWN4LSz4LS/4LSv4LS+4LS04LWN4LSaX+C0tuC0qOC0v+C0r+C0vuC0tOC1jeC0micuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1Nob3J0IDogJ+C0nuC0vuC0r+C1vF/gtKTgtL/gtJngtY3gtJXgtb5f4LSa4LWK4LS14LWN4LS1X+C0rOC1geC0p+C1u1/gtLXgtY3gtK/gtL7gtLTgtIJf4LS14LWG4LSz4LWN4LSz4LS/X+C0tuC0qOC0vycuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c01pbiA6ICfgtJ7gtL5f4LSk4LS/X+C0muC1il/gtKzgtYFf4LS14LWN4LSv4LS+X+C0teC1hl/gtLYnLnNwbGl0KCdfJyksXG4gICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgIExUIDogJ0EgaDptbSAt4LSo4LWBJyxcbiAgICAgICAgTFRTIDogJ0EgaDptbTpzcyAt4LSo4LWBJyxcbiAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVksIEEgaDptbSAt4LSo4LWBJyxcbiAgICAgICAgTExMTCA6ICdkZGRkLCBEIE1NTU0gWVlZWSwgQSBoOm1tIC3gtKjgtYEnXG4gICAgfSxcbiAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgc2FtZURheSA6ICdb4LSH4LSo4LWN4LSo4LWNXSBMVCcsXG4gICAgICAgIG5leHREYXkgOiAnW+C0qOC0vuC0s+C1hl0gTFQnLFxuICAgICAgICBuZXh0V2VlayA6ICdkZGRkLCBMVCcsXG4gICAgICAgIGxhc3REYXkgOiAnW+C0h+C0qOC1jeC0qOC0suC1hl0gTFQnLFxuICAgICAgICBsYXN0V2VlayA6ICdb4LSV4LS04LS/4LSe4LWN4LSeXSBkZGRkLCBMVCcsXG4gICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgfSxcbiAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgIGZ1dHVyZSA6ICclcyDgtJXgtLTgtL/gtJ7gtY3gtJ7gtY0nLFxuICAgICAgICBwYXN0IDogJyVzIOC0ruC1geC1u+C0quC1jScsXG4gICAgICAgIHMgOiAn4LSF4LW94LSqIOC0qOC0v+C0ruC0v+C0t+C0meC1jeC0meC1vicsXG4gICAgICAgIG0gOiAn4LSS4LSw4LWBIOC0ruC0v+C0qOC0v+C0seC1jeC0seC1jScsXG4gICAgICAgIG1tIDogJyVkIOC0ruC0v+C0qOC0v+C0seC1jeC0seC1jScsXG4gICAgICAgIGggOiAn4LSS4LSw4LWBIOC0ruC0o+C0v+C0leC1jeC0leC1guC1vCcsXG4gICAgICAgIGhoIDogJyVkIOC0ruC0o+C0v+C0leC1jeC0leC1guC1vCcsXG4gICAgICAgIGQgOiAn4LSS4LSw4LWBIOC0puC0v+C0teC0uOC0gicsXG4gICAgICAgIGRkIDogJyVkIOC0puC0v+C0teC0uOC0gicsXG4gICAgICAgIE0gOiAn4LSS4LSw4LWBIOC0ruC0vuC0uOC0gicsXG4gICAgICAgIE1NIDogJyVkIOC0ruC0vuC0uOC0gicsXG4gICAgICAgIHkgOiAn4LSS4LSw4LWBIOC0teC1vOC0t+C0gicsXG4gICAgICAgIHl5IDogJyVkIOC0teC1vOC0t+C0gidcbiAgICB9LFxuICAgIG1lcmlkaWVtUGFyc2U6IC/gtLDgtL7gtKTgtY3gtLDgtL984LSw4LS+4LS14LS/4LSy4LWGfOC0ieC0muC1jeC0miDgtJXgtLTgtL/gtJ7gtY3gtJ7gtY184LS14LWI4LSV4LWB4LSo4LWN4LSo4LWH4LSw4LSCfOC0sOC0vuC0pOC1jeC0sOC0vy9pLFxuICAgIG1lcmlkaWVtSG91ciA6IGZ1bmN0aW9uIChob3VyLCBtZXJpZGllbSkge1xuICAgICAgICBpZiAoaG91ciA9PT0gMTIpIHtcbiAgICAgICAgICAgIGhvdXIgPSAwO1xuICAgICAgICB9XG4gICAgICAgIGlmICgobWVyaWRpZW0gPT09ICfgtLDgtL7gtKTgtY3gtLDgtL8nICYmIGhvdXIgPj0gNCkgfHxcbiAgICAgICAgICAgICAgICBtZXJpZGllbSA9PT0gJ+C0ieC0muC1jeC0miDgtJXgtLTgtL/gtJ7gtY3gtJ7gtY0nIHx8XG4gICAgICAgICAgICAgICAgbWVyaWRpZW0gPT09ICfgtLXgtYjgtJXgtYHgtKjgtY3gtKjgtYfgtLDgtIInKSB7XG4gICAgICAgICAgICByZXR1cm4gaG91ciArIDEyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIG1lcmlkaWVtIDogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICBpZiAoaG91ciA8IDQpIHtcbiAgICAgICAgICAgIHJldHVybiAn4LSw4LS+4LSk4LWN4LSw4LS/JztcbiAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTIpIHtcbiAgICAgICAgICAgIHJldHVybiAn4LSw4LS+4LS14LS/4LSy4LWGJztcbiAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTcpIHtcbiAgICAgICAgICAgIHJldHVybiAn4LSJ4LSa4LWN4LSaIOC0leC0tOC0v+C0nuC1jeC0nuC1jSc7XG4gICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDIwKSB7XG4gICAgICAgICAgICByZXR1cm4gJ+C0teC1iOC0leC1geC0qOC1jeC0qOC1h+C0sOC0gic7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gJ+C0sOC0vuC0pOC1jeC0sOC0vyc7XG4gICAgICAgIH1cbiAgICB9XG59KTtcblxucmV0dXJuIG1sO1xuXG59KSkpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvbWwuanMiLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogTWFyYXRoaSBbbXJdXG4vLyEgYXV0aG9yIDogSGFyc2hhZCBLYWxlIDogaHR0cHM6Ly9naXRodWIuY29tL2thbGVodlxuLy8hIGF1dGhvciA6IFZpdmVrIEF0aGFseWUgOiBodHRwczovL2dpdGh1Yi5jb20vdm5hdGhhbHllXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxudmFyIHN5bWJvbE1hcCA9IHtcbiAgICAnMSc6ICfgpacnLFxuICAgICcyJzogJ+ClqCcsXG4gICAgJzMnOiAn4KWpJyxcbiAgICAnNCc6ICfgpaonLFxuICAgICc1JzogJ+ClqycsXG4gICAgJzYnOiAn4KWsJyxcbiAgICAnNyc6ICfgpa0nLFxuICAgICc4JzogJ+ClricsXG4gICAgJzknOiAn4KWvJyxcbiAgICAnMCc6ICfgpaYnXG59O1xudmFyIG51bWJlck1hcCA9IHtcbiAgICAn4KWnJzogJzEnLFxuICAgICfgpagnOiAnMicsXG4gICAgJ+ClqSc6ICczJyxcbiAgICAn4KWqJzogJzQnLFxuICAgICfgpasnOiAnNScsXG4gICAgJ+ClrCc6ICc2JyxcbiAgICAn4KWtJzogJzcnLFxuICAgICfgpa4nOiAnOCcsXG4gICAgJ+Clryc6ICc5JyxcbiAgICAn4KWmJzogJzAnXG59O1xuXG5mdW5jdGlvbiByZWxhdGl2ZVRpbWVNcihudW1iZXIsIHdpdGhvdXRTdWZmaXgsIHN0cmluZywgaXNGdXR1cmUpXG57XG4gICAgdmFyIG91dHB1dCA9ICcnO1xuICAgIGlmICh3aXRob3V0U3VmZml4KSB7XG4gICAgICAgIHN3aXRjaCAoc3RyaW5nKSB7XG4gICAgICAgICAgICBjYXNlICdzJzogb3V0cHV0ID0gJ+CkleCkvuCkueClgCDgpLjgpYfgpJXgpILgpKYnOyBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ20nOiBvdXRwdXQgPSAn4KSP4KSVIOCkruCkv+CkqOCkv+Cknyc7IGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnbW0nOiBvdXRwdXQgPSAnJWQg4KSu4KS/4KSo4KS/4KSf4KWHJzsgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdoJzogb3V0cHV0ID0gJ+Ckj+CklSDgpKTgpL7gpLgnOyBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2hoJzogb3V0cHV0ID0gJyVkIOCkpOCkvuCkuCc7IGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnZCc6IG91dHB1dCA9ICfgpI/gpJUg4KSm4KS/4KS14KS4JzsgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdkZCc6IG91dHB1dCA9ICclZCDgpKbgpL/gpLXgpLgnOyBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ00nOiBvdXRwdXQgPSAn4KSP4KSVIOCkruCkueCkv+CkqOCkvic7IGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnTU0nOiBvdXRwdXQgPSAnJWQg4KSu4KS54KS/4KSo4KWHJzsgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICd5Jzogb3V0cHV0ID0gJ+Ckj+CklSDgpLXgpLDgpY3gpLcnOyBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3l5Jzogb3V0cHV0ID0gJyVkIOCkteCksOCljeCkt+Clhyc7IGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBzd2l0Y2ggKHN0cmluZykge1xuICAgICAgICAgICAgY2FzZSAncyc6IG91dHB1dCA9ICfgpJXgpL7gpLngpYAg4KS44KWH4KSV4KSC4KSm4KS+4KSCJzsgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdtJzogb3V0cHV0ID0gJ+Ckj+CkleCkviDgpK7gpL/gpKjgpL/gpJ/gpL4nOyBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ21tJzogb3V0cHV0ID0gJyVkIOCkruCkv+CkqOCkv+Ckn+CkvuCkgic7IGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnaCc6IG91dHB1dCA9ICfgpI/gpJXgpL4g4KSk4KS+4KS44KS+JzsgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdoaCc6IG91dHB1dCA9ICclZCDgpKTgpL7gpLjgpL7gpIInOyBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2QnOiBvdXRwdXQgPSAn4KSP4KSV4KS+IOCkpuCkv+CkteCkuOCkvic7IGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnZGQnOiBvdXRwdXQgPSAnJWQg4KSm4KS/4KS14KS44KS+4KSCJzsgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdNJzogb3V0cHV0ID0gJ+Ckj+CkleCkviDgpK7gpLngpL/gpKjgpY3gpK/gpL4nOyBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ01NJzogb3V0cHV0ID0gJyVkIOCkruCkueCkv+CkqOCljeCkr+CkvuCkgic7IGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAneSc6IG91dHB1dCA9ICfgpI/gpJXgpL4g4KS14KSw4KWN4KS34KS+JzsgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICd5eSc6IG91dHB1dCA9ICclZCDgpLXgpLDgpY3gpLfgpL7gpIInOyBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb3V0cHV0LnJlcGxhY2UoLyVkL2ksIG51bWJlcik7XG59XG5cbnZhciBtciA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ21yJywge1xuICAgIG1vbnRocyA6ICfgpJzgpL7gpKjgpYfgpLXgpL7gpLDgpYBf4KSr4KWH4KSs4KWN4KSw4KWB4KS14KS+4KSw4KWAX+CkruCkvuCksOCljeCkml/gpI/gpKrgpY3gpLDgpL/gpLJf4KSu4KWHX+CknOClguCkqF/gpJzgpYHgpLLgpYhf4KSR4KSX4KS44KWN4KSfX+CkuOCkquCljeCkn+Clh+CkguCkrOCksF/gpJHgpJXgpY3gpJ/gpYvgpKzgpLBf4KSo4KWL4KS14KWN4KS54KWH4KSC4KSs4KSwX+CkoeCkv+CkuOClh+CkguCkrOCksCcuc3BsaXQoJ18nKSxcbiAgICBtb250aHNTaG9ydDogJ+CknOCkvuCkqOClhy5f4KSr4KWH4KSs4KWN4KSw4KWBLl/gpK7gpL7gpLDgpY3gpJouX+Ckj+CkquCljeCksOCkvy5f4KSu4KWHLl/gpJzgpYLgpKguX+CknOClgeCksuCliC5f4KSR4KSXLl/gpLjgpKrgpY3gpJ/gpYfgpIIuX+CkkeCkleCljeCkn+Cliy5f4KSo4KWL4KS14KWN4KS54KWH4KSCLl/gpKHgpL/gpLjgpYfgpIIuJy5zcGxpdCgnXycpLFxuICAgIG1vbnRoc1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgIHdlZWtkYXlzIDogJ+CksOCkteCkv+CkteCkvuCksF/gpLjgpYvgpK7gpLXgpL7gpLBf4KSu4KSC4KSX4KSz4KS14KS+4KSwX+CkrOClgeCkp+CkteCkvuCksF/gpJfgpYHgpLDgpYLgpLXgpL7gpLBf4KS24KWB4KSV4KWN4KSw4KS14KS+4KSwX+CktuCkqOCkv+CkteCkvuCksCcuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1Nob3J0IDogJ+CksOCkteCkv1/gpLjgpYvgpK5f4KSu4KSC4KSX4KSzX+CkrOClgeCkp1/gpJfgpYHgpLDgpYJf4KS24KWB4KSV4KWN4KSwX+CktuCkqOCkvycuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c01pbiA6ICfgpLBf4KS44KWLX+CkruCkgl/gpKzgpYFf4KSX4KWBX+CktuClgV/gpLYnLnNwbGl0KCdfJyksXG4gICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgIExUIDogJ0EgaDptbSDgpLXgpL7gpJzgpKTgpL4nLFxuICAgICAgICBMVFMgOiAnQSBoOm1tOnNzIOCkteCkvuCknOCkpOCkvicsXG4gICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZLCBBIGg6bW0g4KS14KS+4KSc4KSk4KS+JyxcbiAgICAgICAgTExMTCA6ICdkZGRkLCBEIE1NTU0gWVlZWSwgQSBoOm1tIOCkteCkvuCknOCkpOCkvidcbiAgICB9LFxuICAgIGNhbGVuZGFyIDoge1xuICAgICAgICBzYW1lRGF5IDogJ1vgpIbgpJxdIExUJyxcbiAgICAgICAgbmV4dERheSA6ICdb4KSJ4KSm4KWN4KSv4KS+XSBMVCcsXG4gICAgICAgIG5leHRXZWVrIDogJ2RkZGQsIExUJyxcbiAgICAgICAgbGFzdERheSA6ICdb4KSV4KS+4KSyXSBMVCcsXG4gICAgICAgIGxhc3RXZWVrOiAnW+CkruCkvuCkl+ClgOCksl0gZGRkZCwgTFQnLFxuICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgIH0sXG4gICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICBmdXR1cmU6ICclc+CkruCkp+CljeCkr+ClhycsXG4gICAgICAgIHBhc3Q6ICclc+CkquClguCksOCljeCkteClgCcsXG4gICAgICAgIHM6IHJlbGF0aXZlVGltZU1yLFxuICAgICAgICBtOiByZWxhdGl2ZVRpbWVNcixcbiAgICAgICAgbW06IHJlbGF0aXZlVGltZU1yLFxuICAgICAgICBoOiByZWxhdGl2ZVRpbWVNcixcbiAgICAgICAgaGg6IHJlbGF0aXZlVGltZU1yLFxuICAgICAgICBkOiByZWxhdGl2ZVRpbWVNcixcbiAgICAgICAgZGQ6IHJlbGF0aXZlVGltZU1yLFxuICAgICAgICBNOiByZWxhdGl2ZVRpbWVNcixcbiAgICAgICAgTU06IHJlbGF0aXZlVGltZU1yLFxuICAgICAgICB5OiByZWxhdGl2ZVRpbWVNcixcbiAgICAgICAgeXk6IHJlbGF0aXZlVGltZU1yXG4gICAgfSxcbiAgICBwcmVwYXJzZTogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1vgpafgpajgpangpargpavgpazgpa3gpa7gpa/gpaZdL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlck1hcFttYXRjaF07XG4gICAgICAgIH0pO1xuICAgIH0sXG4gICAgcG9zdGZvcm1hdDogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1xcZC9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgIHJldHVybiBzeW1ib2xNYXBbbWF0Y2hdO1xuICAgICAgICB9KTtcbiAgICB9LFxuICAgIG1lcmlkaWVtUGFyc2U6IC/gpLDgpL7gpKTgpY3gpLDgpYB84KS44KSV4KS+4KSz4KWAfOCkpuClgeCkquCkvuCksOClgHzgpLjgpL7gpK/gpILgpJXgpL7gpLPgpYAvLFxuICAgIG1lcmlkaWVtSG91ciA6IGZ1bmN0aW9uIChob3VyLCBtZXJpZGllbSkge1xuICAgICAgICBpZiAoaG91ciA9PT0gMTIpIHtcbiAgICAgICAgICAgIGhvdXIgPSAwO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXJpZGllbSA9PT0gJ+CksOCkvuCkpOCljeCksOClgCcpIHtcbiAgICAgICAgICAgIHJldHVybiBob3VyIDwgNCA/IGhvdXIgOiBob3VyICsgMTI7XG4gICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfgpLjgpJXgpL7gpLPgpYAnKSB7XG4gICAgICAgICAgICByZXR1cm4gaG91cjtcbiAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ+CkpuClgeCkquCkvuCksOClgCcpIHtcbiAgICAgICAgICAgIHJldHVybiBob3VyID49IDEwID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ+CkuOCkvuCkr+CkguCkleCkvuCks+ClgCcpIHtcbiAgICAgICAgICAgIHJldHVybiBob3VyICsgMTI7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIG1lcmlkaWVtOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgIGlmIChob3VyIDwgNCkge1xuICAgICAgICAgICAgcmV0dXJuICfgpLDgpL7gpKTgpY3gpLDgpYAnO1xuICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxMCkge1xuICAgICAgICAgICAgcmV0dXJuICfgpLjgpJXgpL7gpLPgpYAnO1xuICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxNykge1xuICAgICAgICAgICAgcmV0dXJuICfgpKbgpYHgpKrgpL7gpLDgpYAnO1xuICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAyMCkge1xuICAgICAgICAgICAgcmV0dXJuICfgpLjgpL7gpK/gpILgpJXgpL7gpLPgpYAnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuICfgpLDgpL7gpKTgpY3gpLDgpYAnO1xuICAgICAgICB9XG4gICAgfSxcbiAgICB3ZWVrIDoge1xuICAgICAgICBkb3cgOiAwLCAvLyBTdW5kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgZG95IDogNiAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gMXN0IGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgIH1cbn0pO1xuXG5yZXR1cm4gbXI7XG5cbn0pKSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9tci5qcyIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBNYWxheSBbbXNdXG4vLyEgYXV0aG9yIDogV2VsZGFuIEphbWlsaSA6IGh0dHBzOi8vZ2l0aHViLmNvbS93ZWxkYW5cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG52YXIgbXMgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdtcycsIHtcbiAgICBtb250aHMgOiAnSmFudWFyaV9GZWJydWFyaV9NYWNfQXByaWxfTWVpX0p1bl9KdWxhaV9PZ29zX1NlcHRlbWJlcl9Pa3RvYmVyX05vdmVtYmVyX0Rpc2VtYmVyJy5zcGxpdCgnXycpLFxuICAgIG1vbnRoc1Nob3J0IDogJ0phbl9GZWJfTWFjX0Fwcl9NZWlfSnVuX0p1bF9PZ3NfU2VwX09rdF9Ob3ZfRGlzJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzIDogJ0FoYWRfSXNuaW5fU2VsYXNhX1JhYnVfS2hhbWlzX0p1bWFhdF9TYWJ0dScuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1Nob3J0IDogJ0FoZF9Jc25fU2VsX1JhYl9LaGFfSnVtX1NhYicuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c01pbiA6ICdBaF9Jc19TbF9SYl9LbV9KbV9TYicuc3BsaXQoJ18nKSxcbiAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgTFQgOiAnSEgubW0nLFxuICAgICAgICBMVFMgOiAnSEgubW0uc3MnLFxuICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBbcHVrdWxdIEhILm1tJyxcbiAgICAgICAgTExMTCA6ICdkZGRkLCBEIE1NTU0gWVlZWSBbcHVrdWxdIEhILm1tJ1xuICAgIH0sXG4gICAgbWVyaWRpZW1QYXJzZTogL3BhZ2l8dGVuZ2FoYXJpfHBldGFuZ3xtYWxhbS8sXG4gICAgbWVyaWRpZW1Ib3VyOiBmdW5jdGlvbiAoaG91ciwgbWVyaWRpZW0pIHtcbiAgICAgICAgaWYgKGhvdXIgPT09IDEyKSB7XG4gICAgICAgICAgICBob3VyID0gMDtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVyaWRpZW0gPT09ICdwYWdpJykge1xuICAgICAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICd0ZW5nYWhhcmknKSB7XG4gICAgICAgICAgICByZXR1cm4gaG91ciA+PSAxMSA/IGhvdXIgOiBob3VyICsgMTI7XG4gICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICdwZXRhbmcnIHx8IG1lcmlkaWVtID09PSAnbWFsYW0nKSB7XG4gICAgICAgICAgICByZXR1cm4gaG91ciArIDEyO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBtZXJpZGllbSA6IGZ1bmN0aW9uIChob3VycywgbWludXRlcywgaXNMb3dlcikge1xuICAgICAgICBpZiAoaG91cnMgPCAxMSkge1xuICAgICAgICAgICAgcmV0dXJuICdwYWdpJztcbiAgICAgICAgfSBlbHNlIGlmIChob3VycyA8IDE1KSB7XG4gICAgICAgICAgICByZXR1cm4gJ3RlbmdhaGFyaSc7XG4gICAgICAgIH0gZWxzZSBpZiAoaG91cnMgPCAxOSkge1xuICAgICAgICAgICAgcmV0dXJuICdwZXRhbmcnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuICdtYWxhbSc7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIGNhbGVuZGFyIDoge1xuICAgICAgICBzYW1lRGF5IDogJ1tIYXJpIGluaSBwdWt1bF0gTFQnLFxuICAgICAgICBuZXh0RGF5IDogJ1tFc29rIHB1a3VsXSBMVCcsXG4gICAgICAgIG5leHRXZWVrIDogJ2RkZGQgW3B1a3VsXSBMVCcsXG4gICAgICAgIGxhc3REYXkgOiAnW0tlbG1hcmluIHB1a3VsXSBMVCcsXG4gICAgICAgIGxhc3RXZWVrIDogJ2RkZGQgW2xlcGFzIHB1a3VsXSBMVCcsXG4gICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgfSxcbiAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgIGZ1dHVyZSA6ICdkYWxhbSAlcycsXG4gICAgICAgIHBhc3QgOiAnJXMgeWFuZyBsZXBhcycsXG4gICAgICAgIHMgOiAnYmViZXJhcGEgc2FhdCcsXG4gICAgICAgIG0gOiAnc2VtaW5pdCcsXG4gICAgICAgIG1tIDogJyVkIG1pbml0JyxcbiAgICAgICAgaCA6ICdzZWphbScsXG4gICAgICAgIGhoIDogJyVkIGphbScsXG4gICAgICAgIGQgOiAnc2VoYXJpJyxcbiAgICAgICAgZGQgOiAnJWQgaGFyaScsXG4gICAgICAgIE0gOiAnc2VidWxhbicsXG4gICAgICAgIE1NIDogJyVkIGJ1bGFuJyxcbiAgICAgICAgeSA6ICdzZXRhaHVuJyxcbiAgICAgICAgeXkgOiAnJWQgdGFodW4nXG4gICAgfSxcbiAgICB3ZWVrIDoge1xuICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgZG95IDogNyAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gMXN0IGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgIH1cbn0pO1xuXG5yZXR1cm4gbXM7XG5cbn0pKSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9tcy5qcyIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBNYWxheSBbbXMtbXldXG4vLyEgbm90ZSA6IERFUFJFQ0FURUQsIHRoZSBjb3JyZWN0IG9uZSBpcyBbbXNdXG4vLyEgYXV0aG9yIDogV2VsZGFuIEphbWlsaSA6IGh0dHBzOi8vZ2l0aHViLmNvbS93ZWxkYW5cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG52YXIgbXNNeSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ21zLW15Jywge1xuICAgIG1vbnRocyA6ICdKYW51YXJpX0ZlYnJ1YXJpX01hY19BcHJpbF9NZWlfSnVuX0p1bGFpX09nb3NfU2VwdGVtYmVyX09rdG9iZXJfTm92ZW1iZXJfRGlzZW1iZXInLnNwbGl0KCdfJyksXG4gICAgbW9udGhzU2hvcnQgOiAnSmFuX0ZlYl9NYWNfQXByX01laV9KdW5fSnVsX09nc19TZXBfT2t0X05vdl9EaXMnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXMgOiAnQWhhZF9Jc25pbl9TZWxhc2FfUmFidV9LaGFtaXNfSnVtYWF0X1NhYnR1Jy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzU2hvcnQgOiAnQWhkX0lzbl9TZWxfUmFiX0toYV9KdW1fU2FiJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzTWluIDogJ0FoX0lzX1NsX1JiX0ttX0ptX1NiJy5zcGxpdCgnXycpLFxuICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICBMVCA6ICdISC5tbScsXG4gICAgICAgIExUUyA6ICdISC5tbS5zcycsXG4gICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIFtwdWt1bF0gSEgubW0nLFxuICAgICAgICBMTExMIDogJ2RkZGQsIEQgTU1NTSBZWVlZIFtwdWt1bF0gSEgubW0nXG4gICAgfSxcbiAgICBtZXJpZGllbVBhcnNlOiAvcGFnaXx0ZW5nYWhhcml8cGV0YW5nfG1hbGFtLyxcbiAgICBtZXJpZGllbUhvdXI6IGZ1bmN0aW9uIChob3VyLCBtZXJpZGllbSkge1xuICAgICAgICBpZiAoaG91ciA9PT0gMTIpIHtcbiAgICAgICAgICAgIGhvdXIgPSAwO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXJpZGllbSA9PT0gJ3BhZ2knKSB7XG4gICAgICAgICAgICByZXR1cm4gaG91cjtcbiAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ3RlbmdhaGFyaScpIHtcbiAgICAgICAgICAgIHJldHVybiBob3VyID49IDExID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ3BldGFuZycgfHwgbWVyaWRpZW0gPT09ICdtYWxhbScpIHtcbiAgICAgICAgICAgIHJldHVybiBob3VyICsgMTI7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIG1lcmlkaWVtIDogZnVuY3Rpb24gKGhvdXJzLCBtaW51dGVzLCBpc0xvd2VyKSB7XG4gICAgICAgIGlmIChob3VycyA8IDExKSB7XG4gICAgICAgICAgICByZXR1cm4gJ3BhZ2knO1xuICAgICAgICB9IGVsc2UgaWYgKGhvdXJzIDwgMTUpIHtcbiAgICAgICAgICAgIHJldHVybiAndGVuZ2FoYXJpJztcbiAgICAgICAgfSBlbHNlIGlmIChob3VycyA8IDE5KSB7XG4gICAgICAgICAgICByZXR1cm4gJ3BldGFuZyc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gJ21hbGFtJztcbiAgICAgICAgfVxuICAgIH0sXG4gICAgY2FsZW5kYXIgOiB7XG4gICAgICAgIHNhbWVEYXkgOiAnW0hhcmkgaW5pIHB1a3VsXSBMVCcsXG4gICAgICAgIG5leHREYXkgOiAnW0Vzb2sgcHVrdWxdIExUJyxcbiAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCBbcHVrdWxdIExUJyxcbiAgICAgICAgbGFzdERheSA6ICdbS2VsbWFyaW4gcHVrdWxdIExUJyxcbiAgICAgICAgbGFzdFdlZWsgOiAnZGRkZCBbbGVwYXMgcHVrdWxdIExUJyxcbiAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICB9LFxuICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgZnV0dXJlIDogJ2RhbGFtICVzJyxcbiAgICAgICAgcGFzdCA6ICclcyB5YW5nIGxlcGFzJyxcbiAgICAgICAgcyA6ICdiZWJlcmFwYSBzYWF0JyxcbiAgICAgICAgbSA6ICdzZW1pbml0JyxcbiAgICAgICAgbW0gOiAnJWQgbWluaXQnLFxuICAgICAgICBoIDogJ3NlamFtJyxcbiAgICAgICAgaGggOiAnJWQgamFtJyxcbiAgICAgICAgZCA6ICdzZWhhcmknLFxuICAgICAgICBkZCA6ICclZCBoYXJpJyxcbiAgICAgICAgTSA6ICdzZWJ1bGFuJyxcbiAgICAgICAgTU0gOiAnJWQgYnVsYW4nLFxuICAgICAgICB5IDogJ3NldGFodW4nLFxuICAgICAgICB5eSA6ICclZCB0YWh1bidcbiAgICB9LFxuICAgIHdlZWsgOiB7XG4gICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICBkb3kgOiA3ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiAxc3QgaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgfVxufSk7XG5cbnJldHVybiBtc015O1xuXG59KSkpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvbXMtbXkuanMiLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogQnVybWVzZSBbbXldXG4vLyEgYXV0aG9yIDogU3F1YXIgdGVhbSwgbXlzcXVhci5jb21cbi8vISBhdXRob3IgOiBEYXZpZCBSb3NzZWxsYXQgOiBodHRwczovL2dpdGh1Yi5jb20vZ2hvbGFkclxuLy8hIGF1dGhvciA6IFRpbiBBdW5nIExpbiA6IGh0dHBzOi8vZ2l0aHViLmNvbS90aGFueWF3emlubWluXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxudmFyIHN5bWJvbE1hcCA9IHtcbiAgICAnMSc6ICfhgYEnLFxuICAgICcyJzogJ+GBgicsXG4gICAgJzMnOiAn4YGDJyxcbiAgICAnNCc6ICfhgYQnLFxuICAgICc1JzogJ+GBhScsXG4gICAgJzYnOiAn4YGGJyxcbiAgICAnNyc6ICfhgYcnLFxuICAgICc4JzogJ+GBiCcsXG4gICAgJzknOiAn4YGJJyxcbiAgICAnMCc6ICfhgYAnXG59O1xudmFyIG51bWJlck1hcCA9IHtcbiAgICAn4YGBJzogJzEnLFxuICAgICfhgYInOiAnMicsXG4gICAgJ+GBgyc6ICczJyxcbiAgICAn4YGEJzogJzQnLFxuICAgICfhgYUnOiAnNScsXG4gICAgJ+GBhic6ICc2JyxcbiAgICAn4YGHJzogJzcnLFxuICAgICfhgYgnOiAnOCcsXG4gICAgJ+GBiSc6ICc5JyxcbiAgICAn4YGAJzogJzAnXG59O1xuXG52YXIgbXkgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdteScsIHtcbiAgICBtb250aHM6ICfhgIfhgJThgLrhgJThgJ3hgKvhgJvhgK5f4YCW4YCx4YCW4YCx4YCs4YC64YCd4YCr4YCb4YCuX+GAmeGAkOGAul/hgKfhgJXhgLzhgK5f4YCZ4YCxX+GAh+GAveGAlOGAul/hgIfhgLDhgJzhgK3hgK/hgIThgLpf4YCe4YC84YCC4YCv4YCQ4YC6X+GAheGAgOGAuuGAkOGAhOGAuuGAmOGArF/hgKHhgLHhgKzhgIDhgLrhgJDhgK3hgK/hgJjhgKxf4YCU4YCt4YCv4YCd4YCE4YC64YCY4YCsX+GAkuGAruGAh+GAhOGAuuGAmOGArCcuc3BsaXQoJ18nKSxcbiAgICBtb250aHNTaG9ydDogJ+GAh+GAlOGAul/hgJbhgLFf4YCZ4YCQ4YC6X+GAleGAvOGArl/hgJnhgLFf4YCH4YC94YCU4YC6X+GAnOGAreGAr+GAhOGAul/hgJ7hgLxf4YCF4YCA4YC6X+GAoeGAseGArOGAgOGAul/hgJThgK3hgK9f4YCS4YCuJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzOiAn4YCQ4YCU4YCE4YC64YC54YCC4YCU4YC94YCxX+GAkOGAlOGAhOGAuuGAueGAnOGArF/hgKHhgIThgLrhgLnhgILhgKtf4YCX4YCv4YCS4YC54YCT4YCf4YCw4YC4X+GAgOGAvOGArOGAnuGAleGAkOGAseGAuF/hgJ7hgLHhgKzhgIDhgLzhgKxf4YCF4YCU4YCxJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzU2hvcnQ6ICfhgJThgL3hgLFf4YCc4YCsX+GAguGAq1/hgJ/hgLDhgLhf4YCA4YC84YCsX+GAnuGAseGArF/hgJThgLEnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNNaW46ICfhgJThgL3hgLFf4YCc4YCsX+GAguGAq1/hgJ/hgLDhgLhf4YCA4YC84YCsX+GAnuGAseGArF/hgJThgLEnLnNwbGl0KCdfJyksXG5cbiAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICBMOiAnREQvTU0vWVlZWScsXG4gICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgIExMTEw6ICdkZGRkIEQgTU1NTSBZWVlZIEhIOm1tJ1xuICAgIH0sXG4gICAgY2FsZW5kYXI6IHtcbiAgICAgICAgc2FtZURheTogJ1vhgJrhgJThgLEuXSBMVCBb4YCZ4YC+4YCsXScsXG4gICAgICAgIG5leHREYXk6ICdb4YCZ4YCU4YCA4YC64YCW4YC84YCU4YC6XSBMVCBb4YCZ4YC+4YCsXScsXG4gICAgICAgIG5leHRXZWVrOiAnZGRkZCBMVCBb4YCZ4YC+4YCsXScsXG4gICAgICAgIGxhc3REYXk6ICdb4YCZ4YCU4YCxLuGAgF0gTFQgW+GAmeGAvuGArF0nLFxuICAgICAgICBsYXN0V2VlazogJ1vhgJXhgLzhgK7hgLjhgIHhgLLhgLfhgJ7hgLHhgKxdIGRkZGQgTFQgW+GAmeGAvuGArF0nLFxuICAgICAgICBzYW1lRWxzZTogJ0wnXG4gICAgfSxcbiAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgZnV0dXJlOiAn4YCc4YCs4YCZ4YCK4YC64YC3ICVzIOGAmeGAvuGArCcsXG4gICAgICAgIHBhc3Q6ICfhgJzhgL3hgJThgLrhgIHhgLLhgLfhgJ7hgLHhgKwgJXMg4YCAJyxcbiAgICAgICAgczogJ+GAheGAgOGAueGAgOGAlOGAui7hgKHhgJThgIrhgLrhgLjhgIThgJrhgLonLFxuICAgICAgICBtOiAn4YCQ4YCF4YC64YCZ4YCt4YCU4YCF4YC6JyxcbiAgICAgICAgbW06ICclZCDhgJnhgK3hgJThgIXhgLonLFxuICAgICAgICBoOiAn4YCQ4YCF4YC64YCU4YCs4YCb4YCuJyxcbiAgICAgICAgaGg6ICclZCDhgJThgKzhgJvhgK4nLFxuICAgICAgICBkOiAn4YCQ4YCF4YC64YCb4YCA4YC6JyxcbiAgICAgICAgZGQ6ICclZCDhgJvhgIDhgLonLFxuICAgICAgICBNOiAn4YCQ4YCF4YC64YCcJyxcbiAgICAgICAgTU06ICclZCDhgJwnLFxuICAgICAgICB5OiAn4YCQ4YCF4YC64YCU4YC+4YCF4YC6JyxcbiAgICAgICAgeXk6ICclZCDhgJThgL7hgIXhgLonXG4gICAgfSxcbiAgICBwcmVwYXJzZTogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1vhgYHhgYLhgYPhgYThgYXhgYbhgYfhgYjhgYnhgYBdL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlck1hcFttYXRjaF07XG4gICAgICAgIH0pO1xuICAgIH0sXG4gICAgcG9zdGZvcm1hdDogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1xcZC9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgIHJldHVybiBzeW1ib2xNYXBbbWF0Y2hdO1xuICAgICAgICB9KTtcbiAgICB9LFxuICAgIHdlZWs6IHtcbiAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgZG95OiA0IC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDFzdCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICB9XG59KTtcblxucmV0dXJuIG15O1xuXG59KSkpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvbXkuanMiLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogTm9yd2VnaWFuIEJva23DpWwgW25iXVxuLy8hIGF1dGhvcnMgOiBFc3BlbiBIb3ZsYW5kc2RhbCA6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZXh4YXJzXG4vLyEgICAgICAgICAgIFNpZ3VyZCBHYXJ0bWFubiA6IGh0dHBzOi8vZ2l0aHViLmNvbS9zaWd1cmRnYVxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciBuYiA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ25iJywge1xuICAgIG1vbnRocyA6ICdqYW51YXJfZmVicnVhcl9tYXJzX2FwcmlsX21haV9qdW5pX2p1bGlfYXVndXN0X3NlcHRlbWJlcl9va3RvYmVyX25vdmVtYmVyX2Rlc2VtYmVyJy5zcGxpdCgnXycpLFxuICAgIG1vbnRoc1Nob3J0IDogJ2phbi5fZmViLl9tYXJzX2FwcmlsX21haV9qdW5pX2p1bGlfYXVnLl9zZXAuX29rdC5fbm92Ll9kZXMuJy5zcGxpdCgnXycpLFxuICAgIG1vbnRoc1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgIHdlZWtkYXlzIDogJ3PDuG5kYWdfbWFuZGFnX3RpcnNkYWdfb25zZGFnX3RvcnNkYWdfZnJlZGFnX2zDuHJkYWcnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNTaG9ydCA6ICdzw7guX21hLl90aS5fb24uX3RvLl9mci5fbMO4Licuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c01pbiA6ICdzw7hfbWFfdGlfb25fdG9fZnJfbMO4Jy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgTCA6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgTEwgOiAnRC4gTU1NTSBZWVlZJyxcbiAgICAgICAgTExMIDogJ0QuIE1NTU0gWVlZWSBba2wuXSBISDptbScsXG4gICAgICAgIExMTEwgOiAnZGRkZCBELiBNTU1NIFlZWVkgW2tsLl0gSEg6bW0nXG4gICAgfSxcbiAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgc2FtZURheTogJ1tpIGRhZyBrbC5dIExUJyxcbiAgICAgICAgbmV4dERheTogJ1tpIG1vcmdlbiBrbC5dIExUJyxcbiAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFtrbC5dIExUJyxcbiAgICAgICAgbGFzdERheTogJ1tpIGfDpXIga2wuXSBMVCcsXG4gICAgICAgIGxhc3RXZWVrOiAnW2ZvcnJpZ2VdIGRkZGQgW2tsLl0gTFQnLFxuICAgICAgICBzYW1lRWxzZTogJ0wnXG4gICAgfSxcbiAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgIGZ1dHVyZSA6ICdvbSAlcycsXG4gICAgICAgIHBhc3QgOiAnJXMgc2lkZW4nLFxuICAgICAgICBzIDogJ25vZW4gc2VrdW5kZXInLFxuICAgICAgICBtIDogJ2V0dCBtaW51dHQnLFxuICAgICAgICBtbSA6ICclZCBtaW51dHRlcicsXG4gICAgICAgIGggOiAnZW4gdGltZScsXG4gICAgICAgIGhoIDogJyVkIHRpbWVyJyxcbiAgICAgICAgZCA6ICdlbiBkYWcnLFxuICAgICAgICBkZCA6ICclZCBkYWdlcicsXG4gICAgICAgIE0gOiAnZW4gbcOlbmVkJyxcbiAgICAgICAgTU0gOiAnJWQgbcOlbmVkZXInLFxuICAgICAgICB5IDogJ2V0dCDDpXInLFxuICAgICAgICB5eSA6ICclZCDDpXInXG4gICAgfSxcbiAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn1cXC4vLFxuICAgIG9yZGluYWwgOiAnJWQuJyxcbiAgICB3ZWVrIDoge1xuICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgZG95IDogNCAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgIH1cbn0pO1xuXG5yZXR1cm4gbmI7XG5cbn0pKSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9uYi5qcyIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBOZXBhbGVzZSBbbmVdXG4vLyEgYXV0aG9yIDogc3V2YXNoIDogaHR0cHM6Ly9naXRodWIuY29tL3N1dmFzaFxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciBzeW1ib2xNYXAgPSB7XG4gICAgJzEnOiAn4KWnJyxcbiAgICAnMic6ICfgpagnLFxuICAgICczJzogJ+ClqScsXG4gICAgJzQnOiAn4KWqJyxcbiAgICAnNSc6ICfgpasnLFxuICAgICc2JzogJ+ClrCcsXG4gICAgJzcnOiAn4KWtJyxcbiAgICAnOCc6ICfgpa4nLFxuICAgICc5JzogJ+ClrycsXG4gICAgJzAnOiAn4KWmJ1xufTtcbnZhciBudW1iZXJNYXAgPSB7XG4gICAgJ+Clpyc6ICcxJyxcbiAgICAn4KWoJzogJzInLFxuICAgICfgpaknOiAnMycsXG4gICAgJ+Clqic6ICc0JyxcbiAgICAn4KWrJzogJzUnLFxuICAgICfgpawnOiAnNicsXG4gICAgJ+ClrSc6ICc3JyxcbiAgICAn4KWuJzogJzgnLFxuICAgICfgpa8nOiAnOScsXG4gICAgJ+Clpic6ICcwJ1xufTtcblxudmFyIG5lID0gbW9tZW50LmRlZmluZUxvY2FsZSgnbmUnLCB7XG4gICAgbW9udGhzIDogJ+CknOCkqOCkteCksOClgF/gpKvgpYfgpKzgpY3gpLDgpYHgpLXgpLDgpYBf4KSu4KS+4KSw4KWN4KSaX+CkheCkquCljeCksOCkv+Cksl/gpK7gpIhf4KSc4KWB4KSoX+CknOClgeCksuCkvuCkiF/gpIXgpJfgpLfgpY3gpJ9f4KS44KWH4KSq4KWN4KSf4KWH4KSu4KWN4KSs4KSwX+CkheCkleCljeCkn+Cli+CkrOCksF/gpKjgpYvgpK3gpYfgpK7gpY3gpKzgpLBf4KSh4KS/4KS44KWH4KSu4KWN4KSs4KSwJy5zcGxpdCgnXycpLFxuICAgIG1vbnRoc1Nob3J0IDogJ+CknOCkqC5f4KSr4KWH4KSs4KWN4KSw4KWBLl/gpK7gpL7gpLDgpY3gpJpf4KSF4KSq4KWN4KSw4KS/Ll/gpK7gpIhf4KSc4KWB4KSoX+CknOClgeCksuCkvuCkiC5f4KSF4KSXLl/gpLjgpYfgpKrgpY3gpJ8uX+CkheCkleCljeCkn+Cliy5f4KSo4KWL4KSt4KWHLl/gpKHgpL/gpLjgpYcuJy5zcGxpdCgnXycpLFxuICAgIG1vbnRoc1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgIHdlZWtkYXlzIDogJ+CkhuCkh+CkpOCkrOCkvuCksF/gpLjgpYvgpK7gpKzgpL7gpLBf4KSu4KSZ4KWN4KSX4KSy4KSs4KS+4KSwX+CkrOClgeCkp+CkrOCkvuCksF/gpKzgpL/gpLngpL/gpKzgpL7gpLBf4KS24KWB4KSV4KWN4KSw4KSs4KS+4KSwX+CktuCkqOCkv+CkrOCkvuCksCcuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1Nob3J0IDogJ+CkhuCkh+CkpC5f4KS44KWL4KSuLl/gpK7gpJngpY3gpJfgpLIuX+CkrOClgeCkpy5f4KSs4KS/4KS54KS/Ll/gpLbgpYHgpJXgpY3gpLAuX+CktuCkqOCkvy4nLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNNaW4gOiAn4KSGLl/gpLjgpYsuX+CkruCkgi5f4KSs4KWBLl/gpKzgpL8uX+CktuClgS5f4KS2Licuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICBMVCA6ICdB4KSV4KWLIGg6bW0g4KSs4KSc4KWHJyxcbiAgICAgICAgTFRTIDogJ0HgpJXgpYsgaDptbTpzcyDgpKzgpJzgpYcnLFxuICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSwgQeCkleCliyBoOm1tIOCkrOCknOClhycsXG4gICAgICAgIExMTEwgOiAnZGRkZCwgRCBNTU1NIFlZWVksIEHgpJXgpYsgaDptbSDgpKzgpJzgpYcnXG4gICAgfSxcbiAgICBwcmVwYXJzZTogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1vgpafgpajgpangpargpavgpazgpa3gpa7gpa/gpaZdL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlck1hcFttYXRjaF07XG4gICAgICAgIH0pO1xuICAgIH0sXG4gICAgcG9zdGZvcm1hdDogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1xcZC9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgIHJldHVybiBzeW1ib2xNYXBbbWF0Y2hdO1xuICAgICAgICB9KTtcbiAgICB9LFxuICAgIG1lcmlkaWVtUGFyc2U6IC/gpLDgpL7gpKTgpL984KSs4KS/4KS54KS+4KSofOCkpuCkv+CkieCkgeCkuOCli3zgpLjgpL7gpIHgpJ0vLFxuICAgIG1lcmlkaWVtSG91ciA6IGZ1bmN0aW9uIChob3VyLCBtZXJpZGllbSkge1xuICAgICAgICBpZiAoaG91ciA9PT0gMTIpIHtcbiAgICAgICAgICAgIGhvdXIgPSAwO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXJpZGllbSA9PT0gJ+CksOCkvuCkpOCkvycpIHtcbiAgICAgICAgICAgIHJldHVybiBob3VyIDwgNCA/IGhvdXIgOiBob3VyICsgMTI7XG4gICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfgpKzgpL/gpLngpL7gpKgnKSB7XG4gICAgICAgICAgICByZXR1cm4gaG91cjtcbiAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ+CkpuCkv+CkieCkgeCkuOCliycpIHtcbiAgICAgICAgICAgIHJldHVybiBob3VyID49IDEwID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ+CkuOCkvuCkgeCknScpIHtcbiAgICAgICAgICAgIHJldHVybiBob3VyICsgMTI7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIG1lcmlkaWVtIDogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICBpZiAoaG91ciA8IDMpIHtcbiAgICAgICAgICAgIHJldHVybiAn4KSw4KS+4KSk4KS/JztcbiAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTIpIHtcbiAgICAgICAgICAgIHJldHVybiAn4KSs4KS/4KS54KS+4KSoJztcbiAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTYpIHtcbiAgICAgICAgICAgIHJldHVybiAn4KSm4KS/4KSJ4KSB4KS44KWLJztcbiAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMjApIHtcbiAgICAgICAgICAgIHJldHVybiAn4KS44KS+4KSB4KSdJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAn4KSw4KS+4KSk4KS/JztcbiAgICAgICAgfVxuICAgIH0sXG4gICAgY2FsZW5kYXIgOiB7XG4gICAgICAgIHNhbWVEYXkgOiAnW+CkhuCknF0gTFQnLFxuICAgICAgICBuZXh0RGF5IDogJ1vgpK3gpYvgpLLgpL9dIExUJyxcbiAgICAgICAgbmV4dFdlZWsgOiAnW+CkhuCkieCkgeCkpuCli10gZGRkZFssXSBMVCcsXG4gICAgICAgIGxhc3REYXkgOiAnW+CkueCkv+CknOCli10gTFQnLFxuICAgICAgICBsYXN0V2VlayA6ICdb4KSX4KSP4KSV4KWLXSBkZGRkWyxdIExUJyxcbiAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICB9LFxuICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgZnV0dXJlIDogJyVz4KSu4KS+JyxcbiAgICAgICAgcGFzdCA6ICclcyDgpIXgpJfgpL7gpKHgpL8nLFxuICAgICAgICBzIDogJ+CkleClh+CkueClgCDgpJXgpY3gpLfgpKMnLFxuICAgICAgICBtIDogJ+Ckj+CklSDgpK7gpL/gpKjgpYfgpJ8nLFxuICAgICAgICBtbSA6ICclZCDgpK7gpL/gpKjgpYfgpJ8nLFxuICAgICAgICBoIDogJ+Ckj+CklSDgpJjgpKPgpY3gpJ/gpL4nLFxuICAgICAgICBoaCA6ICclZCDgpJjgpKPgpY3gpJ/gpL4nLFxuICAgICAgICBkIDogJ+Ckj+CklSDgpKbgpL/gpKgnLFxuICAgICAgICBkZCA6ICclZCDgpKbgpL/gpKgnLFxuICAgICAgICBNIDogJ+Ckj+CklSDgpK7gpLngpL/gpKjgpL4nLFxuICAgICAgICBNTSA6ICclZCDgpK7gpLngpL/gpKjgpL4nLFxuICAgICAgICB5IDogJ+Ckj+CklSDgpKzgpLDgpY3gpLcnLFxuICAgICAgICB5eSA6ICclZCDgpKzgpLDgpY3gpLcnXG4gICAgfSxcbiAgICB3ZWVrIDoge1xuICAgICAgICBkb3cgOiAwLCAvLyBTdW5kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgZG95IDogNiAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gMXN0IGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgIH1cbn0pO1xuXG5yZXR1cm4gbmU7XG5cbn0pKSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9uZS5qcyIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBEdXRjaCBbbmxdXG4vLyEgYXV0aG9yIDogSm9yaXMgUsO2bGluZyA6IGh0dHBzOi8vZ2l0aHViLmNvbS9qb3Jpc3JvbGluZ1xuLy8hIGF1dGhvciA6IEphY29iIE1pZGRhZyA6IGh0dHBzOi8vZ2l0aHViLmNvbS9taWRkYWdqXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxudmFyIG1vbnRoc1Nob3J0V2l0aERvdHMgPSAnamFuLl9mZWIuX21ydC5fYXByLl9tZWlfanVuLl9qdWwuX2F1Zy5fc2VwLl9va3QuX25vdi5fZGVjLicuc3BsaXQoJ18nKTtcbnZhciBtb250aHNTaG9ydFdpdGhvdXREb3RzID0gJ2phbl9mZWJfbXJ0X2Fwcl9tZWlfanVuX2p1bF9hdWdfc2VwX29rdF9ub3ZfZGVjJy5zcGxpdCgnXycpO1xuXG52YXIgbW9udGhzUGFyc2UgPSBbL15qYW4vaSwgL15mZWIvaSwgL15tYWFydHxtcnQuPyQvaSwgL15hcHIvaSwgL15tZWkkL2ksIC9eanVuW2kuXT8kL2ksIC9eanVsW2kuXT8kL2ksIC9eYXVnL2ksIC9ec2VwL2ksIC9eb2t0L2ksIC9ebm92L2ksIC9eZGVjL2ldO1xudmFyIG1vbnRoc1JlZ2V4ID0gL14oamFudWFyaXxmZWJydWFyaXxtYWFydHxhcHJpbHxtZWl8YXByaWx8anVbbmxdaXxhdWd1c3R1c3xzZXB0ZW1iZXJ8b2t0b2Jlcnxub3ZlbWJlcnxkZWNlbWJlcnxqYW5cXC4/fGZlYlxcLj98bXJ0XFwuP3xhcHJcXC4/fGp1W25sXVxcLj98YXVnXFwuP3xzZXBcXC4/fG9rdFxcLj98bm92XFwuP3xkZWNcXC4/KS9pO1xuXG52YXIgbmwgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdubCcsIHtcbiAgICBtb250aHMgOiAnamFudWFyaV9mZWJydWFyaV9tYWFydF9hcHJpbF9tZWlfanVuaV9qdWxpX2F1Z3VzdHVzX3NlcHRlbWJlcl9va3RvYmVyX25vdmVtYmVyX2RlY2VtYmVyJy5zcGxpdCgnXycpLFxuICAgIG1vbnRoc1Nob3J0IDogZnVuY3Rpb24gKG0sIGZvcm1hdCkge1xuICAgICAgICBpZiAoIW0pIHtcbiAgICAgICAgICAgIHJldHVybiBtb250aHNTaG9ydFdpdGhEb3RzO1xuICAgICAgICB9IGVsc2UgaWYgKC8tTU1NLS8udGVzdChmb3JtYXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gbW9udGhzU2hvcnRXaXRob3V0RG90c1ttLm1vbnRoKCldO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG1vbnRoc1Nob3J0V2l0aERvdHNbbS5tb250aCgpXTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBtb250aHNSZWdleDogbW9udGhzUmVnZXgsXG4gICAgbW9udGhzU2hvcnRSZWdleDogbW9udGhzUmVnZXgsXG4gICAgbW9udGhzU3RyaWN0UmVnZXg6IC9eKGphbnVhcml8ZmVicnVhcml8bWFhcnR8bWVpfGp1W25sXWl8YXByaWx8YXVndXN0dXN8c2VwdGVtYmVyfG9rdG9iZXJ8bm92ZW1iZXJ8ZGVjZW1iZXIpL2ksXG4gICAgbW9udGhzU2hvcnRTdHJpY3RSZWdleDogL14oamFuXFwuP3xmZWJcXC4/fG1ydFxcLj98YXByXFwuP3xtZWl8anVbbmxdXFwuP3xhdWdcXC4/fHNlcFxcLj98b2t0XFwuP3xub3ZcXC4/fGRlY1xcLj8pL2ksXG5cbiAgICBtb250aHNQYXJzZSA6IG1vbnRoc1BhcnNlLFxuICAgIGxvbmdNb250aHNQYXJzZSA6IG1vbnRoc1BhcnNlLFxuICAgIHNob3J0TW9udGhzUGFyc2UgOiBtb250aHNQYXJzZSxcblxuICAgIHdlZWtkYXlzIDogJ3pvbmRhZ19tYWFuZGFnX2RpbnNkYWdfd29lbnNkYWdfZG9uZGVyZGFnX3ZyaWpkYWdfemF0ZXJkYWcnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNTaG9ydCA6ICd6by5fbWEuX2RpLl93by5fZG8uX3ZyLl96YS4nLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNNaW4gOiAnem9fbWFfZGlfd29fZG9fdnJfemEnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICBMIDogJ0RELU1NLVlZWVknLFxuICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgIExMTEwgOiAnZGRkZCBEIE1NTU0gWVlZWSBISDptbSdcbiAgICB9LFxuICAgIGNhbGVuZGFyIDoge1xuICAgICAgICBzYW1lRGF5OiAnW3ZhbmRhYWcgb21dIExUJyxcbiAgICAgICAgbmV4dERheTogJ1ttb3JnZW4gb21dIExUJyxcbiAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFtvbV0gTFQnLFxuICAgICAgICBsYXN0RGF5OiAnW2dpc3RlcmVuIG9tXSBMVCcsXG4gICAgICAgIGxhc3RXZWVrOiAnW2FmZ2Vsb3Blbl0gZGRkZCBbb21dIExUJyxcbiAgICAgICAgc2FtZUVsc2U6ICdMJ1xuICAgIH0sXG4gICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICBmdXR1cmUgOiAnb3ZlciAlcycsXG4gICAgICAgIHBhc3QgOiAnJXMgZ2VsZWRlbicsXG4gICAgICAgIHMgOiAnZWVuIHBhYXIgc2Vjb25kZW4nLFxuICAgICAgICBtIDogJ8Opw6luIG1pbnV1dCcsXG4gICAgICAgIG1tIDogJyVkIG1pbnV0ZW4nLFxuICAgICAgICBoIDogJ8Opw6luIHV1cicsXG4gICAgICAgIGhoIDogJyVkIHV1cicsXG4gICAgICAgIGQgOiAnw6nDqW4gZGFnJyxcbiAgICAgICAgZGQgOiAnJWQgZGFnZW4nLFxuICAgICAgICBNIDogJ8Opw6luIG1hYW5kJyxcbiAgICAgICAgTU0gOiAnJWQgbWFhbmRlbicsXG4gICAgICAgIHkgOiAnw6nDqW4gamFhcicsXG4gICAgICAgIHl5IDogJyVkIGphYXInXG4gICAgfSxcbiAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0oc3RlfGRlKS8sXG4gICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgcmV0dXJuIG51bWJlciArICgobnVtYmVyID09PSAxIHx8IG51bWJlciA9PT0gOCB8fCBudW1iZXIgPj0gMjApID8gJ3N0ZScgOiAnZGUnKTtcbiAgICB9LFxuICAgIHdlZWsgOiB7XG4gICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgfVxufSk7XG5cbnJldHVybiBubDtcblxufSkpKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL25sLmpzIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IER1dGNoIChCZWxnaXVtKSBbbmwtYmVdXG4vLyEgYXV0aG9yIDogSm9yaXMgUsO2bGluZyA6IGh0dHBzOi8vZ2l0aHViLmNvbS9qb3Jpc3JvbGluZ1xuLy8hIGF1dGhvciA6IEphY29iIE1pZGRhZyA6IGh0dHBzOi8vZ2l0aHViLmNvbS9taWRkYWdqXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxudmFyIG1vbnRoc1Nob3J0V2l0aERvdHMgPSAnamFuLl9mZWIuX21ydC5fYXByLl9tZWlfanVuLl9qdWwuX2F1Zy5fc2VwLl9va3QuX25vdi5fZGVjLicuc3BsaXQoJ18nKTtcbnZhciBtb250aHNTaG9ydFdpdGhvdXREb3RzID0gJ2phbl9mZWJfbXJ0X2Fwcl9tZWlfanVuX2p1bF9hdWdfc2VwX29rdF9ub3ZfZGVjJy5zcGxpdCgnXycpO1xuXG52YXIgbW9udGhzUGFyc2UgPSBbL15qYW4vaSwgL15mZWIvaSwgL15tYWFydHxtcnQuPyQvaSwgL15hcHIvaSwgL15tZWkkL2ksIC9eanVuW2kuXT8kL2ksIC9eanVsW2kuXT8kL2ksIC9eYXVnL2ksIC9ec2VwL2ksIC9eb2t0L2ksIC9ebm92L2ksIC9eZGVjL2ldO1xudmFyIG1vbnRoc1JlZ2V4ID0gL14oamFudWFyaXxmZWJydWFyaXxtYWFydHxhcHJpbHxtZWl8YXByaWx8anVbbmxdaXxhdWd1c3R1c3xzZXB0ZW1iZXJ8b2t0b2Jlcnxub3ZlbWJlcnxkZWNlbWJlcnxqYW5cXC4/fGZlYlxcLj98bXJ0XFwuP3xhcHJcXC4/fGp1W25sXVxcLj98YXVnXFwuP3xzZXBcXC4/fG9rdFxcLj98bm92XFwuP3xkZWNcXC4/KS9pO1xuXG52YXIgbmxCZSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ25sLWJlJywge1xuICAgIG1vbnRocyA6ICdqYW51YXJpX2ZlYnJ1YXJpX21hYXJ0X2FwcmlsX21laV9qdW5pX2p1bGlfYXVndXN0dXNfc2VwdGVtYmVyX29rdG9iZXJfbm92ZW1iZXJfZGVjZW1iZXInLnNwbGl0KCdfJyksXG4gICAgbW9udGhzU2hvcnQgOiBmdW5jdGlvbiAobSwgZm9ybWF0KSB7XG4gICAgICAgIGlmICghbSkge1xuICAgICAgICAgICAgcmV0dXJuIG1vbnRoc1Nob3J0V2l0aERvdHM7XG4gICAgICAgIH0gZWxzZSBpZiAoLy1NTU0tLy50ZXN0KGZvcm1hdCkpIHtcbiAgICAgICAgICAgIHJldHVybiBtb250aHNTaG9ydFdpdGhvdXREb3RzW20ubW9udGgoKV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbW9udGhzU2hvcnRXaXRoRG90c1ttLm1vbnRoKCldO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIG1vbnRoc1JlZ2V4OiBtb250aHNSZWdleCxcbiAgICBtb250aHNTaG9ydFJlZ2V4OiBtb250aHNSZWdleCxcbiAgICBtb250aHNTdHJpY3RSZWdleDogL14oamFudWFyaXxmZWJydWFyaXxtYWFydHxtZWl8anVbbmxdaXxhcHJpbHxhdWd1c3R1c3xzZXB0ZW1iZXJ8b2t0b2Jlcnxub3ZlbWJlcnxkZWNlbWJlcikvaSxcbiAgICBtb250aHNTaG9ydFN0cmljdFJlZ2V4OiAvXihqYW5cXC4/fGZlYlxcLj98bXJ0XFwuP3xhcHJcXC4/fG1laXxqdVtubF1cXC4/fGF1Z1xcLj98c2VwXFwuP3xva3RcXC4/fG5vdlxcLj98ZGVjXFwuPykvaSxcblxuICAgIG1vbnRoc1BhcnNlIDogbW9udGhzUGFyc2UsXG4gICAgbG9uZ01vbnRoc1BhcnNlIDogbW9udGhzUGFyc2UsXG4gICAgc2hvcnRNb250aHNQYXJzZSA6IG1vbnRoc1BhcnNlLFxuXG4gICAgd2Vla2RheXMgOiAnem9uZGFnX21hYW5kYWdfZGluc2RhZ193b2Vuc2RhZ19kb25kZXJkYWdfdnJpamRhZ196YXRlcmRhZycuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1Nob3J0IDogJ3pvLl9tYS5fZGkuX3dvLl9kby5fdnIuX3phLicuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c01pbiA6ICd6b19tYV9kaV93b19kb192cl96YScuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgTExMTCA6ICdkZGRkIEQgTU1NTSBZWVlZIEhIOm1tJ1xuICAgIH0sXG4gICAgY2FsZW5kYXIgOiB7XG4gICAgICAgIHNhbWVEYXk6ICdbdmFuZGFhZyBvbV0gTFQnLFxuICAgICAgICBuZXh0RGF5OiAnW21vcmdlbiBvbV0gTFQnLFxuICAgICAgICBuZXh0V2VlazogJ2RkZGQgW29tXSBMVCcsXG4gICAgICAgIGxhc3REYXk6ICdbZ2lzdGVyZW4gb21dIExUJyxcbiAgICAgICAgbGFzdFdlZWs6ICdbYWZnZWxvcGVuXSBkZGRkIFtvbV0gTFQnLFxuICAgICAgICBzYW1lRWxzZTogJ0wnXG4gICAgfSxcbiAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgIGZ1dHVyZSA6ICdvdmVyICVzJyxcbiAgICAgICAgcGFzdCA6ICclcyBnZWxlZGVuJyxcbiAgICAgICAgcyA6ICdlZW4gcGFhciBzZWNvbmRlbicsXG4gICAgICAgIG0gOiAnw6nDqW4gbWludXV0JyxcbiAgICAgICAgbW0gOiAnJWQgbWludXRlbicsXG4gICAgICAgIGggOiAnw6nDqW4gdXVyJyxcbiAgICAgICAgaGggOiAnJWQgdXVyJyxcbiAgICAgICAgZCA6ICfDqcOpbiBkYWcnLFxuICAgICAgICBkZCA6ICclZCBkYWdlbicsXG4gICAgICAgIE0gOiAnw6nDqW4gbWFhbmQnLFxuICAgICAgICBNTSA6ICclZCBtYWFuZGVuJyxcbiAgICAgICAgeSA6ICfDqcOpbiBqYWFyJyxcbiAgICAgICAgeXkgOiAnJWQgamFhcidcbiAgICB9LFxuICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfShzdGV8ZGUpLyxcbiAgICBvcmRpbmFsIDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICByZXR1cm4gbnVtYmVyICsgKChudW1iZXIgPT09IDEgfHwgbnVtYmVyID09PSA4IHx8IG51bWJlciA+PSAyMCkgPyAnc3RlJyA6ICdkZScpO1xuICAgIH0sXG4gICAgd2VlayA6IHtcbiAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICB9XG59KTtcblxucmV0dXJuIG5sQmU7XG5cbn0pKSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9ubC1iZS5qcyIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBOeW5vcnNrIFtubl1cbi8vISBhdXRob3IgOiBodHRwczovL2dpdGh1Yi5jb20vbWVjaHV3aW5kXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxudmFyIG5uID0gbW9tZW50LmRlZmluZUxvY2FsZSgnbm4nLCB7XG4gICAgbW9udGhzIDogJ2phbnVhcl9mZWJydWFyX21hcnNfYXByaWxfbWFpX2p1bmlfanVsaV9hdWd1c3Rfc2VwdGVtYmVyX29rdG9iZXJfbm92ZW1iZXJfZGVzZW1iZXInLnNwbGl0KCdfJyksXG4gICAgbW9udGhzU2hvcnQgOiAnamFuX2ZlYl9tYXJfYXByX21haV9qdW5fanVsX2F1Z19zZXBfb2t0X25vdl9kZXMnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXMgOiAnc3VuZGFnX23DpW5kYWdfdHlzZGFnX29uc2RhZ190b3JzZGFnX2ZyZWRhZ19sYXVyZGFnJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzU2hvcnQgOiAnc3VuX23DpW5fdHlzX29uc190b3JfZnJlX2xhdScuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c01pbiA6ICdzdV9tw6VfdHlfb25fdG9fZnJfbMO4Jy5zcGxpdCgnXycpLFxuICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgIEwgOiAnREQuTU0uWVlZWScsXG4gICAgICAgIExMIDogJ0QuIE1NTU0gWVlZWScsXG4gICAgICAgIExMTCA6ICdELiBNTU1NIFlZWVkgW2tsLl0gSDptbScsXG4gICAgICAgIExMTEwgOiAnZGRkZCBELiBNTU1NIFlZWVkgW2tsLl0gSEg6bW0nXG4gICAgfSxcbiAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgc2FtZURheTogJ1tJIGRhZyBrbG9ra2FdIExUJyxcbiAgICAgICAgbmV4dERheTogJ1tJIG1vcmdvbiBrbG9ra2FdIExUJyxcbiAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFtrbG9ra2FdIExUJyxcbiAgICAgICAgbGFzdERheTogJ1tJIGfDpXIga2xva2thXSBMVCcsXG4gICAgICAgIGxhc3RXZWVrOiAnW0bDuHJlZ8OlYW5kZV0gZGRkZCBba2xva2thXSBMVCcsXG4gICAgICAgIHNhbWVFbHNlOiAnTCdcbiAgICB9LFxuICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgZnV0dXJlIDogJ29tICVzJyxcbiAgICAgICAgcGFzdCA6ICclcyBzaWRhbicsXG4gICAgICAgIHMgOiAnbm9rcmUgc2VrdW5kJyxcbiAgICAgICAgbSA6ICdlaXQgbWludXR0JyxcbiAgICAgICAgbW0gOiAnJWQgbWludXR0JyxcbiAgICAgICAgaCA6ICdlaW4gdGltZScsXG4gICAgICAgIGhoIDogJyVkIHRpbWFyJyxcbiAgICAgICAgZCA6ICdlaW4gZGFnJyxcbiAgICAgICAgZGQgOiAnJWQgZGFnYXInLFxuICAgICAgICBNIDogJ2VpbiBtw6VuYWQnLFxuICAgICAgICBNTSA6ICclZCBtw6VuYWRlcicsXG4gICAgICAgIHkgOiAnZWl0IMOlcicsXG4gICAgICAgIHl5IDogJyVkIMOlcidcbiAgICB9LFxuICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfVxcLi8sXG4gICAgb3JkaW5hbCA6ICclZC4nLFxuICAgIHdlZWsgOiB7XG4gICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgfVxufSk7XG5cbnJldHVybiBubjtcblxufSkpKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL25uLmpzIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IFB1bmphYmkgKEluZGlhKSBbcGEtaW5dXG4vLyEgYXV0aG9yIDogSGFycHJlZXQgU2luZ2ggOiBodHRwczovL2dpdGh1Yi5jb20vaGFycHJlZXRraGFsc2FndGJpdFxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciBzeW1ib2xNYXAgPSB7XG4gICAgJzEnOiAn4KmnJyxcbiAgICAnMic6ICfgqagnLFxuICAgICczJzogJ+CpqScsXG4gICAgJzQnOiAn4KmqJyxcbiAgICAnNSc6ICfgqasnLFxuICAgICc2JzogJ+CprCcsXG4gICAgJzcnOiAn4KmtJyxcbiAgICAnOCc6ICfgqa4nLFxuICAgICc5JzogJ+CprycsXG4gICAgJzAnOiAn4KmmJ1xufTtcbnZhciBudW1iZXJNYXAgPSB7XG4gICAgJ+Cppyc6ICcxJyxcbiAgICAn4KmoJzogJzInLFxuICAgICfgqaknOiAnMycsXG4gICAgJ+Cpqic6ICc0JyxcbiAgICAn4KmrJzogJzUnLFxuICAgICfgqawnOiAnNicsXG4gICAgJ+CprSc6ICc3JyxcbiAgICAn4KmuJzogJzgnLFxuICAgICfgqa8nOiAnOScsXG4gICAgJ+Cppic6ICcwJ1xufTtcblxudmFyIHBhSW4gPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdwYS1pbicsIHtcbiAgICAvLyBUaGVyZSBhcmUgbW9udGhzIG5hbWUgYXMgcGVyIE5hbmFrc2hhaGkgQ2FsZW5kZXIgYnV0IHRoZXkgYXJlIG5vdCB1c2VkIGFzIHJpZ2lkbHkgaW4gbW9kZXJuIFB1bmphYmkuXG4gICAgbW9udGhzIDogJ+ConOCoqOCoteCosOCpgF/gqKvgqLzgqLDgqLXgqLDgqYBf4Kiu4Ki+4Kiw4KiaX+CoheCoquCpjeCosOCpiOCosl/gqK7gqIhf4Kic4KmC4KioX+ConOCpgeCosuCovuCoiF/gqIXgqJfgqLjgqKRf4Ki44Kik4Kmw4Kis4KiwX+CoheColeCopOCpguCorOCosF/gqKjgqLXgqbDgqKzgqLBf4Kim4Ki44Kmw4Kis4KiwJy5zcGxpdCgnXycpLFxuICAgIG1vbnRoc1Nob3J0IDogJ+ConOCoqOCoteCosOCpgF/gqKvgqLzgqLDgqLXgqLDgqYBf4Kiu4Ki+4Kiw4KiaX+CoheCoquCpjeCosOCpiOCosl/gqK7gqIhf4Kic4KmC4KioX+ConOCpgeCosuCovuCoiF/gqIXgqJfgqLjgqKRf4Ki44Kik4Kmw4Kis4KiwX+CoheColeCopOCpguCorOCosF/gqKjgqLXgqbDgqKzgqLBf4Kim4Ki44Kmw4Kis4KiwJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzIDogJ+CokOCopOCoteCovuCosF/gqLjgqYvgqK7gqLXgqL7gqLBf4Kiu4Kmw4KiX4Kiy4Ki14Ki+4KiwX+CorOCpgeCop+CoteCovuCosF/gqLXgqYDgqLDgqLXgqL7gqLBf4Ki44Ki84KmB4Kmx4KiV4Kiw4Ki14Ki+4KiwX+CouOCovOCoqOCpgOComuCosOCoteCovuCosCcuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1Nob3J0IDogJ+CokOCopF/gqLjgqYvgqK5f4Kiu4Kmw4KiX4KiyX+CorOCpgeCop1/gqLXgqYDgqLBf4Ki44Ki84KmB4KiV4KiwX+CouOCovOCoqOCpgCcuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c01pbiA6ICfgqJDgqKRf4Ki44KmL4KiuX+CoruCpsOCol+Cosl/gqKzgqYHgqKdf4Ki14KmA4KiwX+CouOCovOCpgeColeCosF/gqLjgqLzgqKjgqYAnLnNwbGl0KCdfJyksXG4gICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgIExUIDogJ0EgaDptbSDgqLXgqJzgqYcnLFxuICAgICAgICBMVFMgOiAnQSBoOm1tOnNzIOCoteConOCphycsXG4gICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZLCBBIGg6bW0g4Ki14Kic4KmHJyxcbiAgICAgICAgTExMTCA6ICdkZGRkLCBEIE1NTU0gWVlZWSwgQSBoOm1tIOCoteConOCphydcbiAgICB9LFxuICAgIGNhbGVuZGFyIDoge1xuICAgICAgICBzYW1lRGF5IDogJ1vgqIXgqJxdIExUJyxcbiAgICAgICAgbmV4dERheSA6ICdb4KiV4KiyXSBMVCcsXG4gICAgICAgIG5leHRXZWVrIDogJ2RkZGQsIExUJyxcbiAgICAgICAgbGFzdERheSA6ICdb4KiV4KiyXSBMVCcsXG4gICAgICAgIGxhc3RXZWVrIDogJ1vgqKrgqL/gqJvgqLLgqYddIGRkZGQsIExUJyxcbiAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICB9LFxuICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgZnV0dXJlIDogJyVzIOCoteCov+CpseComicsXG4gICAgICAgIHBhc3QgOiAnJXMg4Kiq4Ki/4Kib4Kiy4KmHJyxcbiAgICAgICAgcyA6ICfgqJXgqYHgqJ0g4Ki44KiV4Ki/4Kmw4KifJyxcbiAgICAgICAgbSA6ICfgqIfgqJUg4Kiu4Ki/4Kmw4KifJyxcbiAgICAgICAgbW0gOiAnJWQg4Kiu4Ki/4Kmw4KifJyxcbiAgICAgICAgaCA6ICfgqIfgqbHgqJUg4KiY4Kmw4Kif4Ki+JyxcbiAgICAgICAgaGggOiAnJWQg4KiY4Kmw4Kif4KmHJyxcbiAgICAgICAgZCA6ICfgqIfgqbHgqJUg4Kim4Ki/4KioJyxcbiAgICAgICAgZGQgOiAnJWQg4Kim4Ki/4KioJyxcbiAgICAgICAgTSA6ICfgqIfgqbHgqJUg4Kiu4Ki54KmA4Kio4Ki+JyxcbiAgICAgICAgTU0gOiAnJWQg4Kiu4Ki54KmA4Kio4KmHJyxcbiAgICAgICAgeSA6ICfgqIfgqbHgqJUg4Ki44Ki+4KiyJyxcbiAgICAgICAgeXkgOiAnJWQg4Ki44Ki+4KiyJ1xuICAgIH0sXG4gICAgcHJlcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9b4Kmn4Kmo4Kmp4Kmq4Kmr4Kms4Kmt4Kmu4Kmv4KmmXS9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgIHJldHVybiBudW1iZXJNYXBbbWF0Y2hdO1xuICAgICAgICB9KTtcbiAgICB9LFxuICAgIHBvc3Rmb3JtYXQ6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9cXGQvZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICByZXR1cm4gc3ltYm9sTWFwW21hdGNoXTtcbiAgICAgICAgfSk7XG4gICAgfSxcbiAgICAvLyBQdW5qYWJpIG5vdGF0aW9uIGZvciBtZXJpZGllbXMgYXJlIHF1aXRlIGZ1enp5IGluIHByYWN0aWNlLiBXaGlsZSB0aGVyZSBleGlzdHNcbiAgICAvLyBhIHJpZ2lkIG5vdGlvbiBvZiBhICdQYWhhcicgaXQgaXMgbm90IHVzZWQgYXMgcmlnaWRseSBpbiBtb2Rlcm4gUHVuamFiaS5cbiAgICBtZXJpZGllbVBhcnNlOiAv4Kiw4Ki+4KikfOCouOCoteCph+CosHzgqKbgqYHgqKrgqLngqL/gqLB84Ki44Ki84Ki+4KiuLyxcbiAgICBtZXJpZGllbUhvdXIgOiBmdW5jdGlvbiAoaG91ciwgbWVyaWRpZW0pIHtcbiAgICAgICAgaWYgKGhvdXIgPT09IDEyKSB7XG4gICAgICAgICAgICBob3VyID0gMDtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVyaWRpZW0gPT09ICfgqLDgqL7gqKQnKSB7XG4gICAgICAgICAgICByZXR1cm4gaG91ciA8IDQgPyBob3VyIDogaG91ciArIDEyO1xuICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn4Ki44Ki14KmH4KiwJykge1xuICAgICAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfgqKbgqYHgqKrgqLngqL/gqLAnKSB7XG4gICAgICAgICAgICByZXR1cm4gaG91ciA+PSAxMCA/IGhvdXIgOiBob3VyICsgMTI7XG4gICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfgqLjgqLzgqL7gqK4nKSB7XG4gICAgICAgICAgICByZXR1cm4gaG91ciArIDEyO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBtZXJpZGllbSA6IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgaWYgKGhvdXIgPCA0KSB7XG4gICAgICAgICAgICByZXR1cm4gJ+CosOCovuCopCc7XG4gICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDEwKSB7XG4gICAgICAgICAgICByZXR1cm4gJ+CouOCoteCph+CosCc7XG4gICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDE3KSB7XG4gICAgICAgICAgICByZXR1cm4gJ+CopuCpgeCoquCoueCov+CosCc7XG4gICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDIwKSB7XG4gICAgICAgICAgICByZXR1cm4gJ+CouOCovOCovuCoric7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gJ+CosOCovuCopCc7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIHdlZWsgOiB7XG4gICAgICAgIGRvdyA6IDAsIC8vIFN1bmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICBkb3kgOiA2ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiAxc3QgaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgfVxufSk7XG5cbnJldHVybiBwYUluO1xuXG59KSkpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvcGEtaW4uanMiLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogUG9saXNoIFtwbF1cbi8vISBhdXRob3IgOiBSYWZhbCBIaXJzeiA6IGh0dHBzOi8vZ2l0aHViLmNvbS9ldm9MXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxudmFyIG1vbnRoc05vbWluYXRpdmUgPSAnc3R5Y3plxYRfbHV0eV9tYXJ6ZWNfa3dpZWNpZcWEX21hal9jemVyd2llY19saXBpZWNfc2llcnBpZcWEX3dyemVzaWXFhF9wYcW6ZHppZXJuaWtfbGlzdG9wYWRfZ3J1ZHppZcWEJy5zcGxpdCgnXycpO1xudmFyIG1vbnRoc1N1YmplY3RpdmUgPSAnc3R5Y3puaWFfbHV0ZWdvX21hcmNhX2t3aWV0bmlhX21hamFfY3plcndjYV9saXBjYV9zaWVycG5pYV93cnplxZtuaWFfcGHFumR6aWVybmlrYV9saXN0b3BhZGFfZ3J1ZG5pYScuc3BsaXQoJ18nKTtcbmZ1bmN0aW9uIHBsdXJhbChuKSB7XG4gICAgcmV0dXJuIChuICUgMTAgPCA1KSAmJiAobiAlIDEwID4gMSkgJiYgKCh+fihuIC8gMTApICUgMTApICE9PSAxKTtcbn1cbmZ1bmN0aW9uIHRyYW5zbGF0ZShudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGtleSkge1xuICAgIHZhciByZXN1bHQgPSBudW1iZXIgKyAnICc7XG4gICAgc3dpdGNoIChrZXkpIHtcbiAgICAgICAgY2FzZSAnbSc6XG4gICAgICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCA/ICdtaW51dGEnIDogJ21pbnV0xJknO1xuICAgICAgICBjYXNlICdtbSc6XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgKHBsdXJhbChudW1iZXIpID8gJ21pbnV0eScgOiAnbWludXQnKTtcbiAgICAgICAgY2FzZSAnaCc6XG4gICAgICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCAgPyAnZ29kemluYScgIDogJ2dvZHppbsSZJztcbiAgICAgICAgY2FzZSAnaGgnOlxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArIChwbHVyYWwobnVtYmVyKSA/ICdnb2R6aW55JyA6ICdnb2R6aW4nKTtcbiAgICAgICAgY2FzZSAnTU0nOlxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArIChwbHVyYWwobnVtYmVyKSA/ICdtaWVzacSFY2UnIDogJ21pZXNpxJljeScpO1xuICAgICAgICBjYXNlICd5eSc6XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgKHBsdXJhbChudW1iZXIpID8gJ2xhdGEnIDogJ2xhdCcpO1xuICAgIH1cbn1cblxudmFyIHBsID0gbW9tZW50LmRlZmluZUxvY2FsZSgncGwnLCB7XG4gICAgbW9udGhzIDogZnVuY3Rpb24gKG1vbWVudFRvRm9ybWF0LCBmb3JtYXQpIHtcbiAgICAgICAgaWYgKCFtb21lbnRUb0Zvcm1hdCkge1xuICAgICAgICAgICAgcmV0dXJuIG1vbnRoc05vbWluYXRpdmU7XG4gICAgICAgIH0gZWxzZSBpZiAoZm9ybWF0ID09PSAnJykge1xuICAgICAgICAgICAgLy8gSGFjazogaWYgZm9ybWF0IGVtcHR5IHdlIGtub3cgdGhpcyBpcyB1c2VkIHRvIGdlbmVyYXRlXG4gICAgICAgICAgICAvLyBSZWdFeHAgYnkgbW9tZW50LiBHaXZlIHRoZW4gYmFjayBib3RoIHZhbGlkIGZvcm1zIG9mIG1vbnRoc1xuICAgICAgICAgICAgLy8gaW4gUmVnRXhwIHJlYWR5IGZvcm1hdC5cbiAgICAgICAgICAgIHJldHVybiAnKCcgKyBtb250aHNTdWJqZWN0aXZlW21vbWVudFRvRm9ybWF0Lm1vbnRoKCldICsgJ3wnICsgbW9udGhzTm9taW5hdGl2ZVttb21lbnRUb0Zvcm1hdC5tb250aCgpXSArICcpJztcbiAgICAgICAgfSBlbHNlIGlmICgvRCBNTU1NLy50ZXN0KGZvcm1hdCkpIHtcbiAgICAgICAgICAgIHJldHVybiBtb250aHNTdWJqZWN0aXZlW21vbWVudFRvRm9ybWF0Lm1vbnRoKCldO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG1vbnRoc05vbWluYXRpdmVbbW9tZW50VG9Gb3JtYXQubW9udGgoKV07XG4gICAgICAgIH1cbiAgICB9LFxuICAgIG1vbnRoc1Nob3J0IDogJ3N0eV9sdXRfbWFyX2t3aV9tYWpfY3plX2xpcF9zaWVfd3J6X3BhxbpfbGlzX2dydScuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5cyA6ICduaWVkemllbGFfcG9uaWVkemlhxYJla193dG9yZWtfxZtyb2RhX2N6d2FydGVrX3BpxIV0ZWtfc29ib3RhJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzU2hvcnQgOiAnbmR6X3Bvbl93dF/Fm3JfY3p3X3B0X3NvYicuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c01pbiA6ICdOZF9Qbl9XdF/FmnJfQ3pfUHRfU28nLnNwbGl0KCdfJyksXG4gICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgTCA6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICBMTExMIDogJ2RkZGQsIEQgTU1NTSBZWVlZIEhIOm1tJ1xuICAgIH0sXG4gICAgY2FsZW5kYXIgOiB7XG4gICAgICAgIHNhbWVEYXk6ICdbRHppxZsgb10gTFQnLFxuICAgICAgICBuZXh0RGF5OiAnW0p1dHJvIG9dIExUJyxcbiAgICAgICAgbmV4dFdlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHN3aXRjaCAodGhpcy5kYXkoKSkge1xuICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbVyBuaWVkemllbMSZIG9dIExUJztcblxuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbV2Ugd3RvcmVrIG9dIExUJztcblxuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbVyDFm3JvZMSZIG9dIExUJztcblxuICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbVyBzb2JvdMSZIG9dIExUJztcblxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnW1ddIGRkZGQgW29dIExUJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbGFzdERheTogJ1tXY3pvcmFqIG9dIExUJyxcbiAgICAgICAgbGFzdFdlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHN3aXRjaCAodGhpcy5kYXkoKSkge1xuICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbVyB6ZXN6xYLEhSBuaWVkemllbMSZIG9dIExUJztcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnW1cgemVzesWCxIUgxZtyb2TEmSBvXSBMVCc7XG4gICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1tXIHplc3rFgsSFIHNvYm90xJkgb10gTFQnO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnW1cgemVzesWCeV0gZGRkZCBbb10gTFQnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBzYW1lRWxzZTogJ0wnXG4gICAgfSxcbiAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgIGZ1dHVyZSA6ICd6YSAlcycsXG4gICAgICAgIHBhc3QgOiAnJXMgdGVtdScsXG4gICAgICAgIHMgOiAna2lsa2Egc2VrdW5kJyxcbiAgICAgICAgbSA6IHRyYW5zbGF0ZSxcbiAgICAgICAgbW0gOiB0cmFuc2xhdGUsXG4gICAgICAgIGggOiB0cmFuc2xhdGUsXG4gICAgICAgIGhoIDogdHJhbnNsYXRlLFxuICAgICAgICBkIDogJzEgZHppZcWEJyxcbiAgICAgICAgZGQgOiAnJWQgZG5pJyxcbiAgICAgICAgTSA6ICdtaWVzacSFYycsXG4gICAgICAgIE1NIDogdHJhbnNsYXRlLFxuICAgICAgICB5IDogJ3JvaycsXG4gICAgICAgIHl5IDogdHJhbnNsYXRlXG4gICAgfSxcbiAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn1cXC4vLFxuICAgIG9yZGluYWwgOiAnJWQuJyxcbiAgICB3ZWVrIDoge1xuICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgZG95IDogNCAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgIH1cbn0pO1xuXG5yZXR1cm4gcGw7XG5cbn0pKSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9wbC5qcyIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBQb3J0dWd1ZXNlIFtwdF1cbi8vISBhdXRob3IgOiBKZWZmZXJzb24gOiBodHRwczovL2dpdGh1Yi5jb20vamFsZXg3OVxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciBwdCA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3B0Jywge1xuICAgIG1vbnRocyA6ICdqYW5laXJvX2ZldmVyZWlyb19tYXLDp29fYWJyaWxfbWFpb19qdW5ob19qdWxob19hZ29zdG9fc2V0ZW1icm9fb3V0dWJyb19ub3ZlbWJyb19kZXplbWJybycuc3BsaXQoJ18nKSxcbiAgICBtb250aHNTaG9ydCA6ICdqYW5fZmV2X21hcl9hYnJfbWFpX2p1bl9qdWxfYWdvX3NldF9vdXRfbm92X2Rleicuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5cyA6ICdEb21pbmdvX1NlZ3VuZGEtZmVpcmFfVGVyw6dhLWZlaXJhX1F1YXJ0YS1mZWlyYV9RdWludGEtZmVpcmFfU2V4dGEtZmVpcmFfU8OhYmFkbycuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1Nob3J0IDogJ0RvbV9TZWdfVGVyX1F1YV9RdWlfU2V4X1PDoWInLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNNaW4gOiAnRG9fMsKqXzPCql80wqpfNcKqXzbCql9Tw6EnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICBMTCA6ICdEIFtkZV0gTU1NTSBbZGVdIFlZWVknLFxuICAgICAgICBMTEwgOiAnRCBbZGVdIE1NTU0gW2RlXSBZWVlZIEhIOm1tJyxcbiAgICAgICAgTExMTCA6ICdkZGRkLCBEIFtkZV0gTU1NTSBbZGVdIFlZWVkgSEg6bW0nXG4gICAgfSxcbiAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgc2FtZURheTogJ1tIb2plIMOgc10gTFQnLFxuICAgICAgICBuZXh0RGF5OiAnW0FtYW5ow6Mgw6BzXSBMVCcsXG4gICAgICAgIG5leHRXZWVrOiAnZGRkZCBbw6BzXSBMVCcsXG4gICAgICAgIGxhc3REYXk6ICdbT250ZW0gw6BzXSBMVCcsXG4gICAgICAgIGxhc3RXZWVrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gKHRoaXMuZGF5KCkgPT09IDAgfHwgdGhpcy5kYXkoKSA9PT0gNikgP1xuICAgICAgICAgICAgICAgICdbw5psdGltb10gZGRkZCBbw6BzXSBMVCcgOiAvLyBTYXR1cmRheSArIFN1bmRheVxuICAgICAgICAgICAgICAgICdbw5psdGltYV0gZGRkZCBbw6BzXSBMVCc7IC8vIE1vbmRheSAtIEZyaWRheVxuICAgICAgICB9LFxuICAgICAgICBzYW1lRWxzZTogJ0wnXG4gICAgfSxcbiAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgIGZ1dHVyZSA6ICdlbSAlcycsXG4gICAgICAgIHBhc3QgOiAnaMOhICVzJyxcbiAgICAgICAgcyA6ICdzZWd1bmRvcycsXG4gICAgICAgIG0gOiAndW0gbWludXRvJyxcbiAgICAgICAgbW0gOiAnJWQgbWludXRvcycsXG4gICAgICAgIGggOiAndW1hIGhvcmEnLFxuICAgICAgICBoaCA6ICclZCBob3JhcycsXG4gICAgICAgIGQgOiAndW0gZGlhJyxcbiAgICAgICAgZGQgOiAnJWQgZGlhcycsXG4gICAgICAgIE0gOiAndW0gbcOqcycsXG4gICAgICAgIE1NIDogJyVkIG1lc2VzJyxcbiAgICAgICAgeSA6ICd1bSBhbm8nLFxuICAgICAgICB5eSA6ICclZCBhbm9zJ1xuICAgIH0sXG4gICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9wrovLFxuICAgIG9yZGluYWwgOiAnJWTCuicsXG4gICAgd2VlayA6IHtcbiAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICB9XG59KTtcblxucmV0dXJuIHB0O1xuXG59KSkpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvcHQuanMiLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogUG9ydHVndWVzZSAoQnJhemlsKSBbcHQtYnJdXG4vLyEgYXV0aG9yIDogQ2FpbyBSaWJlaXJvIFBlcmVpcmEgOiBodHRwczovL2dpdGh1Yi5jb20vY2Fpby1yaWJlaXJvLXBlcmVpcmFcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG52YXIgcHRCciA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3B0LWJyJywge1xuICAgIG1vbnRocyA6ICdqYW5laXJvX2ZldmVyZWlyb19tYXLDp29fYWJyaWxfbWFpb19qdW5ob19qdWxob19hZ29zdG9fc2V0ZW1icm9fb3V0dWJyb19ub3ZlbWJyb19kZXplbWJybycuc3BsaXQoJ18nKSxcbiAgICBtb250aHNTaG9ydCA6ICdqYW5fZmV2X21hcl9hYnJfbWFpX2p1bl9qdWxfYWdvX3NldF9vdXRfbm92X2Rleicuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5cyA6ICdEb21pbmdvX1NlZ3VuZGEtZmVpcmFfVGVyw6dhLWZlaXJhX1F1YXJ0YS1mZWlyYV9RdWludGEtZmVpcmFfU2V4dGEtZmVpcmFfU8OhYmFkbycuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1Nob3J0IDogJ0RvbV9TZWdfVGVyX1F1YV9RdWlfU2V4X1PDoWInLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNNaW4gOiAnRG9fMsKqXzPCql80wqpfNcKqXzbCql9Tw6EnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICBMTCA6ICdEIFtkZV0gTU1NTSBbZGVdIFlZWVknLFxuICAgICAgICBMTEwgOiAnRCBbZGVdIE1NTU0gW2RlXSBZWVlZIFvDoHNdIEhIOm1tJyxcbiAgICAgICAgTExMTCA6ICdkZGRkLCBEIFtkZV0gTU1NTSBbZGVdIFlZWVkgW8Ogc10gSEg6bW0nXG4gICAgfSxcbiAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgc2FtZURheTogJ1tIb2plIMOgc10gTFQnLFxuICAgICAgICBuZXh0RGF5OiAnW0FtYW5ow6Mgw6BzXSBMVCcsXG4gICAgICAgIG5leHRXZWVrOiAnZGRkZCBbw6BzXSBMVCcsXG4gICAgICAgIGxhc3REYXk6ICdbT250ZW0gw6BzXSBMVCcsXG4gICAgICAgIGxhc3RXZWVrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gKHRoaXMuZGF5KCkgPT09IDAgfHwgdGhpcy5kYXkoKSA9PT0gNikgP1xuICAgICAgICAgICAgICAgICdbw5psdGltb10gZGRkZCBbw6BzXSBMVCcgOiAvLyBTYXR1cmRheSArIFN1bmRheVxuICAgICAgICAgICAgICAgICdbw5psdGltYV0gZGRkZCBbw6BzXSBMVCc7IC8vIE1vbmRheSAtIEZyaWRheVxuICAgICAgICB9LFxuICAgICAgICBzYW1lRWxzZTogJ0wnXG4gICAgfSxcbiAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgIGZ1dHVyZSA6ICdlbSAlcycsXG4gICAgICAgIHBhc3QgOiAnJXMgYXRyw6FzJyxcbiAgICAgICAgcyA6ICdwb3Vjb3Mgc2VndW5kb3MnLFxuICAgICAgICBzcyA6ICclZCBzZWd1bmRvcycsXG4gICAgICAgIG0gOiAndW0gbWludXRvJyxcbiAgICAgICAgbW0gOiAnJWQgbWludXRvcycsXG4gICAgICAgIGggOiAndW1hIGhvcmEnLFxuICAgICAgICBoaCA6ICclZCBob3JhcycsXG4gICAgICAgIGQgOiAndW0gZGlhJyxcbiAgICAgICAgZGQgOiAnJWQgZGlhcycsXG4gICAgICAgIE0gOiAndW0gbcOqcycsXG4gICAgICAgIE1NIDogJyVkIG1lc2VzJyxcbiAgICAgICAgeSA6ICd1bSBhbm8nLFxuICAgICAgICB5eSA6ICclZCBhbm9zJ1xuICAgIH0sXG4gICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9wrovLFxuICAgIG9yZGluYWwgOiAnJWTCuidcbn0pO1xuXG5yZXR1cm4gcHRCcjtcblxufSkpKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3B0LWJyLmpzIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IFJvbWFuaWFuIFtyb11cbi8vISBhdXRob3IgOiBWbGFkIEd1cmRpZ2EgOiBodHRwczovL2dpdGh1Yi5jb20vZ3VyZGlnYVxuLy8hIGF1dGhvciA6IFZhbGVudGluIEFnYWNoaSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9hdmFseVxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbmZ1bmN0aW9uIHJlbGF0aXZlVGltZVdpdGhQbHVyYWwobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXkpIHtcbiAgICB2YXIgZm9ybWF0ID0ge1xuICAgICAgICAgICAgJ21tJzogJ21pbnV0ZScsXG4gICAgICAgICAgICAnaGgnOiAnb3JlJyxcbiAgICAgICAgICAgICdkZCc6ICd6aWxlJyxcbiAgICAgICAgICAgICdNTSc6ICdsdW5pJyxcbiAgICAgICAgICAgICd5eSc6ICdhbmknXG4gICAgICAgIH0sXG4gICAgICAgIHNlcGFyYXRvciA9ICcgJztcbiAgICBpZiAobnVtYmVyICUgMTAwID49IDIwIHx8IChudW1iZXIgPj0gMTAwICYmIG51bWJlciAlIDEwMCA9PT0gMCkpIHtcbiAgICAgICAgc2VwYXJhdG9yID0gJyBkZSAnO1xuICAgIH1cbiAgICByZXR1cm4gbnVtYmVyICsgc2VwYXJhdG9yICsgZm9ybWF0W2tleV07XG59XG5cbnZhciBybyA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3JvJywge1xuICAgIG1vbnRocyA6ICdpYW51YXJpZV9mZWJydWFyaWVfbWFydGllX2FwcmlsaWVfbWFpX2l1bmllX2l1bGllX2F1Z3VzdF9zZXB0ZW1icmllX29jdG9tYnJpZV9ub2llbWJyaWVfZGVjZW1icmllJy5zcGxpdCgnXycpLFxuICAgIG1vbnRoc1Nob3J0IDogJ2lhbi5fZmVici5fbWFydC5fYXByLl9tYWlfaXVuLl9pdWwuX2F1Zy5fc2VwdC5fb2N0Ll9ub3YuX2RlYy4nLnNwbGl0KCdfJyksXG4gICAgbW9udGhzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICB3ZWVrZGF5cyA6ICdkdW1pbmljxINfbHVuaV9tYXLIm2lfbWllcmN1cmlfam9pX3ZpbmVyaV9zw6JtYsSDdMSDJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzU2hvcnQgOiAnRHVtX0x1bl9NYXJfTWllX0pvaV9WaW5fU8OibScuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c01pbiA6ICdEdV9MdV9NYV9NaV9Kb19WaV9Tw6InLnNwbGl0KCdfJyksXG4gICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgIExUIDogJ0g6bW0nLFxuICAgICAgICBMVFMgOiAnSDptbTpzcycsXG4gICAgICAgIEwgOiAnREQuTU0uWVlZWScsXG4gICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIEg6bW0nLFxuICAgICAgICBMTExMIDogJ2RkZGQsIEQgTU1NTSBZWVlZIEg6bW0nXG4gICAgfSxcbiAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgc2FtZURheTogJ1themkgbGFdIExUJyxcbiAgICAgICAgbmV4dERheTogJ1ttw6JpbmUgbGFdIExUJyxcbiAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFtsYV0gTFQnLFxuICAgICAgICBsYXN0RGF5OiAnW2llcmkgbGFdIExUJyxcbiAgICAgICAgbGFzdFdlZWs6ICdbZm9zdGFdIGRkZGQgW2xhXSBMVCcsXG4gICAgICAgIHNhbWVFbHNlOiAnTCdcbiAgICB9LFxuICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgZnV0dXJlIDogJ3Blc3RlICVzJyxcbiAgICAgICAgcGFzdCA6ICclcyDDrm4gdXJtxIMnLFxuICAgICAgICBzIDogJ2PDonRldmEgc2VjdW5kZScsXG4gICAgICAgIG0gOiAndW4gbWludXQnLFxuICAgICAgICBtbSA6IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgIGggOiAnbyBvcsSDJyxcbiAgICAgICAgaGggOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICBkIDogJ28gemknLFxuICAgICAgICBkZCA6IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgIE0gOiAnbyBsdW7EgycsXG4gICAgICAgIE1NIDogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgeSA6ICd1biBhbicsXG4gICAgICAgIHl5IDogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbFxuICAgIH0sXG4gICAgd2VlayA6IHtcbiAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgIGRveSA6IDcgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDFzdCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICB9XG59KTtcblxucmV0dXJuIHJvO1xuXG59KSkpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvcm8uanMiLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogUnVzc2lhbiBbcnVdXG4vLyEgYXV0aG9yIDogVmlrdG9ybWluYXRvciA6IGh0dHBzOi8vZ2l0aHViLmNvbS9WaWt0b3JtaW5hdG9yXG4vLyEgQXV0aG9yIDogTWVuZWxpb24gRWxlbnPDumxlIDogaHR0cHM6Ly9naXRodWIuY29tL09pcmVcbi8vISBhdXRob3IgOiDQmtC+0YDQtdC90LHQtdGA0LMg0JzQsNGA0LogOiBodHRwczovL2dpdGh1Yi5jb20vc29ja2V0cGFpclxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbmZ1bmN0aW9uIHBsdXJhbCh3b3JkLCBudW0pIHtcbiAgICB2YXIgZm9ybXMgPSB3b3JkLnNwbGl0KCdfJyk7XG4gICAgcmV0dXJuIG51bSAlIDEwID09PSAxICYmIG51bSAlIDEwMCAhPT0gMTEgPyBmb3Jtc1swXSA6IChudW0gJSAxMCA+PSAyICYmIG51bSAlIDEwIDw9IDQgJiYgKG51bSAlIDEwMCA8IDEwIHx8IG51bSAlIDEwMCA+PSAyMCkgPyBmb3Jtc1sxXSA6IGZvcm1zWzJdKTtcbn1cbmZ1bmN0aW9uIHJlbGF0aXZlVGltZVdpdGhQbHVyYWwobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXkpIHtcbiAgICB2YXIgZm9ybWF0ID0ge1xuICAgICAgICAnbW0nOiB3aXRob3V0U3VmZml4ID8gJ9C80LjQvdGD0YLQsF/QvNC40L3Rg9GC0Ytf0LzQuNC90YPRgicgOiAn0LzQuNC90YPRgtGDX9C80LjQvdGD0YLRi1/QvNC40L3Rg9GCJyxcbiAgICAgICAgJ2hoJzogJ9GH0LDRgV/Rh9Cw0YHQsF/Rh9Cw0YHQvtCyJyxcbiAgICAgICAgJ2RkJzogJ9C00LXQvdGMX9C00L3Rj1/QtNC90LXQuScsXG4gICAgICAgICdNTSc6ICfQvNC10YHRj9GGX9C80LXRgdGP0YbQsF/QvNC10YHRj9GG0LXQsicsXG4gICAgICAgICd5eSc6ICfQs9C+0LRf0LPQvtC00LBf0LvQtdGCJ1xuICAgIH07XG4gICAgaWYgKGtleSA9PT0gJ20nKSB7XG4gICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4ID8gJ9C80LjQvdGD0YLQsCcgOiAn0LzQuNC90YPRgtGDJztcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBudW1iZXIgKyAnICcgKyBwbHVyYWwoZm9ybWF0W2tleV0sICtudW1iZXIpO1xuICAgIH1cbn1cbnZhciBtb250aHNQYXJzZSA9IFsvXtGP0L3Qsi9pLCAvXtGE0LXQsi9pLCAvXtC80LDRgC9pLCAvXtCw0L/RgC9pLCAvXtC80LBb0LnRj10vaSwgL17QuNGO0L0vaSwgL17QuNGO0LsvaSwgL17QsNCy0LMvaSwgL17RgdC10L0vaSwgL17QvtC60YIvaSwgL17QvdC+0Y8vaSwgL17QtNC10LovaV07XG5cbi8vIGh0dHA6Ly9uZXcuZ3JhbW90YS5ydS9zcHJhdmthL3J1bGVzLzEzOS1wcm9wIDogwqcgMTAzXG4vLyDQodC+0LrRgNCw0YnQtdC90LjRjyDQvNC10YHRj9GG0LXQsjogaHR0cDovL25ldy5ncmFtb3RhLnJ1L3NwcmF2a2EvYnVyby9zZWFyY2gtYW5zd2VyP3M9MjQyNjM3XG4vLyBDTERSIGRhdGE6ICAgICAgICAgIGh0dHA6Ly93d3cudW5pY29kZS5vcmcvY2xkci9jaGFydHMvMjgvc3VtbWFyeS9ydS5odG1sIzE3NTNcbnZhciBydSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3J1Jywge1xuICAgIG1vbnRocyA6IHtcbiAgICAgICAgZm9ybWF0OiAn0Y/QvdCy0LDRgNGPX9GE0LXQstGA0LDQu9GPX9C80LDRgNGC0LBf0LDQv9GA0LXQu9GPX9C80LDRj1/QuNGO0L3Rj1/QuNGO0LvRj1/QsNCy0LPRg9GB0YLQsF/RgdC10L3RgtGP0LHRgNGPX9C+0LrRgtGP0LHRgNGPX9C90L7Rj9Cx0YDRj1/QtNC10LrQsNCx0YDRjycuc3BsaXQoJ18nKSxcbiAgICAgICAgc3RhbmRhbG9uZTogJ9GP0L3QstCw0YDRjF/RhNC10LLRgNCw0LvRjF/QvNCw0YDRgl/QsNC/0YDQtdC70Yxf0LzQsNC5X9C40Y7QvdGMX9C40Y7Qu9GMX9Cw0LLQs9GD0YHRgl/RgdC10L3RgtGP0LHRgNGMX9C+0LrRgtGP0LHRgNGMX9C90L7Rj9Cx0YDRjF/QtNC10LrQsNCx0YDRjCcuc3BsaXQoJ18nKVxuICAgIH0sXG4gICAgbW9udGhzU2hvcnQgOiB7XG4gICAgICAgIC8vINC/0L4gQ0xEUiDQuNC80LXQvdC90L4gXCLQuNGO0LsuXCIg0LggXCLQuNGO0L0uXCIsINC90L4g0LrQsNC60L7QuSDRgdC80YvRgdC7INC80LXQvdGP0YLRjCDQsdGD0LrQstGDINC90LAg0YLQvtGH0LrRgyA/XG4gICAgICAgIGZvcm1hdDogJ9GP0L3Qsi5f0YTQtdCy0YAuX9C80LDRgC5f0LDQv9GALl/QvNCw0Y9f0LjRjtC90Y9f0LjRjtC70Y9f0LDQstCzLl/RgdC10L3Rgi5f0L7QutGCLl/QvdC+0Y/QsS5f0LTQtdC6Licuc3BsaXQoJ18nKSxcbiAgICAgICAgc3RhbmRhbG9uZTogJ9GP0L3Qsi5f0YTQtdCy0YAuX9C80LDRgNGCX9Cw0L/RgC5f0LzQsNC5X9C40Y7QvdGMX9C40Y7Qu9GMX9Cw0LLQsy5f0YHQtdC90YIuX9C+0LrRgi5f0L3QvtGP0LEuX9C00LXQui4nLnNwbGl0KCdfJylcbiAgICB9LFxuICAgIHdlZWtkYXlzIDoge1xuICAgICAgICBzdGFuZGFsb25lOiAn0LLQvtGB0LrRgNC10YHQtdC90YzQtV/Qv9C+0L3QtdC00LXQu9GM0L3QuNC6X9Cy0YLQvtGA0L3QuNC6X9GB0YDQtdC00LBf0YfQtdGC0LLQtdGA0LNf0L/Rj9GC0L3QuNGG0LBf0YHRg9Cx0LHQvtGC0LAnLnNwbGl0KCdfJyksXG4gICAgICAgIGZvcm1hdDogJ9Cy0L7RgdC60YDQtdGB0LXQvdGM0LVf0L/QvtC90LXQtNC10LvRjNC90LjQul/QstGC0L7RgNC90LjQul/RgdGA0LXQtNGDX9GH0LXRgtCy0LXRgNCzX9C/0Y/RgtC90LjRhtGDX9GB0YPQsdCx0L7RgtGDJy5zcGxpdCgnXycpLFxuICAgICAgICBpc0Zvcm1hdDogL1xcWyA/W9CS0LJdID8oPzrQv9GA0L7RiNC70YPRjnzRgdC70LXQtNGD0Y7RidGD0Y580Y3RgtGDKT8gP1xcXSA/ZGRkZC9cbiAgICB9LFxuICAgIHdlZWtkYXlzU2hvcnQgOiAn0LLRgV/Qv9C9X9Cy0YJf0YHRgF/Rh9GCX9C/0YJf0YHQsScuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c01pbiA6ICfQstGBX9C/0L1f0LLRgl/RgdGAX9GH0YJf0L/Rgl/RgdCxJy5zcGxpdCgnXycpLFxuICAgIG1vbnRoc1BhcnNlIDogbW9udGhzUGFyc2UsXG4gICAgbG9uZ01vbnRoc1BhcnNlIDogbW9udGhzUGFyc2UsXG4gICAgc2hvcnRNb250aHNQYXJzZSA6IG1vbnRoc1BhcnNlLFxuXG4gICAgLy8g0L/QvtC70L3Ri9C1INC90LDQt9Cy0LDQvdC40Y8g0YEg0L/QsNC00LXQttCw0LzQuCwg0L/QviDRgtGA0Lgg0LHRg9C60LLRiywg0LTQu9GPINC90LXQutC+0YLQvtGA0YvRhSwg0L/QviA0INCx0YPQutCy0YssINGB0L7QutGA0LDRidC10L3QuNGPINGBINGC0L7Rh9C60L7QuSDQuCDQsdC10Lcg0YLQvtGH0LrQuFxuICAgIG1vbnRoc1JlZ2V4OiAvXijRj9C90LLQsNGAW9GM0Y9dfNGP0L3QslxcLj980YTQtdCy0YDQsNC7W9GM0Y9dfNGE0LXQstGAP1xcLj980LzQsNGA0YLQsD980LzQsNGAXFwuP3zQsNC/0YDQtdC7W9GM0Y9dfNCw0L/RgFxcLj980LzQsFvQudGPXXzQuNGO0L1b0YzRj1180LjRjtC9XFwuP3zQuNGO0Ltb0YzRj1180LjRjtC7XFwuP3zQsNCy0LPRg9GB0YLQsD980LDQstCzXFwuP3zRgdC10L3RgtGP0LHRgFvRjNGPXXzRgdC10L3Rgj9cXC4/fNC+0LrRgtGP0LHRgFvRjNGPXXzQvtC60YJcXC4/fNC90L7Rj9Cx0YBb0YzRj1180L3QvtGP0LE/XFwuP3zQtNC10LrQsNCx0YBb0YzRj1180LTQtdC6XFwuPykvaSxcblxuICAgIC8vINC60L7Qv9C40Y8g0L/RgNC10LTRi9C00YPRidC10LPQvlxuICAgIG1vbnRoc1Nob3J0UmVnZXg6IC9eKNGP0L3QstCw0YBb0YzRj1180Y/QvdCyXFwuP3zRhNC10LLRgNCw0Ltb0YzRj1180YTQtdCy0YA/XFwuP3zQvNCw0YDRgtCwP3zQvNCw0YBcXC4/fNCw0L/RgNC10Ltb0YzRj1180LDQv9GAXFwuP3zQvNCwW9C50Y9dfNC40Y7QvVvRjNGPXXzQuNGO0L1cXC4/fNC40Y7Qu1vRjNGPXXzQuNGO0LtcXC4/fNCw0LLQs9GD0YHRgtCwP3zQsNCy0LNcXC4/fNGB0LXQvdGC0Y/QsdGAW9GM0Y9dfNGB0LXQvdGCP1xcLj980L7QutGC0Y/QsdGAW9GM0Y9dfNC+0LrRglxcLj980L3QvtGP0LHRgFvRjNGPXXzQvdC+0Y/QsT9cXC4/fNC00LXQutCw0LHRgFvRjNGPXXzQtNC10LpcXC4/KS9pLFxuXG4gICAgLy8g0L/QvtC70L3Ri9C1INC90LDQt9Cy0LDQvdC40Y8g0YEg0L/QsNC00LXQttCw0LzQuFxuICAgIG1vbnRoc1N0cmljdFJlZ2V4OiAvXijRj9C90LLQsNGAW9GP0YxdfNGE0LXQstGA0LDQu1vRj9GMXXzQvNCw0YDRgtCwP3zQsNC/0YDQtdC7W9GP0YxdfNC80LBb0Y/QuV180LjRjtC9W9GP0YxdfNC40Y7Qu1vRj9GMXXzQsNCy0LPRg9GB0YLQsD980YHQtdC90YLRj9Cx0YBb0Y/RjF180L7QutGC0Y/QsdGAW9GP0YxdfNC90L7Rj9Cx0YBb0Y/RjF180LTQtdC60LDQsdGAW9GP0YxdKS9pLFxuXG4gICAgLy8g0JLRi9GA0LDQttC10L3QuNC1LCDQutC+0YLQvtGA0L7QtSDRgdC+0L7RgtCy0LXRgdGC0LLRg9C10YIg0YLQvtC70YzQutC+INGB0L7QutGA0LDRidGR0L3QvdGL0Lwg0YTQvtGA0LzQsNC8XG4gICAgbW9udGhzU2hvcnRTdHJpY3RSZWdleDogL14o0Y/QvdCyXFwufNGE0LXQstGAP1xcLnzQvNCw0YBb0YIuXXzQsNC/0YBcXC580LzQsFvRj9C5XXzQuNGO0L1b0YzRjy5dfNC40Y7Qu1vRjNGPLl180LDQstCzXFwufNGB0LXQvdGCP1xcLnzQvtC60YJcXC580L3QvtGP0LE/XFwufNC00LXQulxcLikvaSxcbiAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICBMIDogJ0RELk1NLllZWVknLFxuICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWSDQsy4nLFxuICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkg0LMuLCBISDptbScsXG4gICAgICAgIExMTEwgOiAnZGRkZCwgRCBNTU1NIFlZWVkg0LMuLCBISDptbSdcbiAgICB9LFxuICAgIGNhbGVuZGFyIDoge1xuICAgICAgICBzYW1lRGF5OiAnW9Ch0LXQs9C+0LTQvdGPINCyXSBMVCcsXG4gICAgICAgIG5leHREYXk6ICdb0JfQsNCy0YLRgNCwINCyXSBMVCcsXG4gICAgICAgIGxhc3REYXk6ICdb0JLRh9C10YDQsCDQsl0gTFQnLFxuICAgICAgICBuZXh0V2VlazogZnVuY3Rpb24gKG5vdykge1xuICAgICAgICAgICAgaWYgKG5vdy53ZWVrKCkgIT09IHRoaXMud2VlaygpKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLmRheSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW9CSINGB0LvQtdC00YPRjtGJ0LXQtV0gZGRkZCBb0LJdIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW9CSINGB0LvQtdC00YPRjtGJ0LjQuV0gZGRkZCBb0LJdIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW9CSINGB0LvQtdC00YPRjtGJ0YPRjl0gZGRkZCBb0LJdIExUJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmRheSgpID09PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnW9CS0L5dIGRkZGQgW9CyXSBMVCc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdb0JJdIGRkZGQgW9CyXSBMVCc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBsYXN0V2VlazogZnVuY3Rpb24gKG5vdykge1xuICAgICAgICAgICAgaWYgKG5vdy53ZWVrKCkgIT09IHRoaXMud2VlaygpKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLmRheSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW9CSINC/0YDQvtGI0LvQvtC1XSBkZGRkIFvQsl0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdb0JIg0L/RgNC+0YjQu9GL0LldIGRkZGQgW9CyXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1vQkiDQv9GA0L7RiNC70YPRjl0gZGRkZCBb0LJdIExUJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmRheSgpID09PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnW9CS0L5dIGRkZGQgW9CyXSBMVCc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdb0JJdIGRkZGQgW9CyXSBMVCc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBzYW1lRWxzZTogJ0wnXG4gICAgfSxcbiAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgIGZ1dHVyZSA6ICfRh9C10YDQtdC3ICVzJyxcbiAgICAgICAgcGFzdCA6ICclcyDQvdCw0LfQsNC0JyxcbiAgICAgICAgcyA6ICfQvdC10YHQutC+0LvRjNC60L4g0YHQtdC60YPQvdC0JyxcbiAgICAgICAgbSA6IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgIG1tIDogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgaCA6ICfRh9Cw0YEnLFxuICAgICAgICBoaCA6IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgIGQgOiAn0LTQtdC90YwnLFxuICAgICAgICBkZCA6IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgIE0gOiAn0LzQtdGB0Y/RhicsXG4gICAgICAgIE1NIDogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgeSA6ICfQs9C+0LQnLFxuICAgICAgICB5eSA6IHJlbGF0aXZlVGltZVdpdGhQbHVyYWxcbiAgICB9LFxuICAgIG1lcmlkaWVtUGFyc2U6IC/QvdC+0YfQuHzRg9GC0YDQsHzQtNC90Y980LLQtdGH0LXRgNCwL2ksXG4gICAgaXNQTSA6IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICByZXR1cm4gL14o0LTQvdGPfNCy0LXRh9C10YDQsCkkLy50ZXN0KGlucHV0KTtcbiAgICB9LFxuICAgIG1lcmlkaWVtIDogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICBpZiAoaG91ciA8IDQpIHtcbiAgICAgICAgICAgIHJldHVybiAn0L3QvtGH0LgnO1xuICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxMikge1xuICAgICAgICAgICAgcmV0dXJuICfRg9GC0YDQsCc7XG4gICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDE3KSB7XG4gICAgICAgICAgICByZXR1cm4gJ9C00L3Rjyc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gJ9Cy0LXRh9C10YDQsCc7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfS0o0Ll80LPQvnzRjykvLFxuICAgIG9yZGluYWw6IGZ1bmN0aW9uIChudW1iZXIsIHBlcmlvZCkge1xuICAgICAgICBzd2l0Y2ggKHBlcmlvZCkge1xuICAgICAgICAgICAgY2FzZSAnTSc6XG4gICAgICAgICAgICBjYXNlICdkJzpcbiAgICAgICAgICAgIGNhc2UgJ0RERCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICct0LknO1xuICAgICAgICAgICAgY2FzZSAnRCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICct0LPQvic7XG4gICAgICAgICAgICBjYXNlICd3JzpcbiAgICAgICAgICAgIGNhc2UgJ1cnOlxuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnLdGPJztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgd2VlayA6IHtcbiAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICB9XG59KTtcblxucmV0dXJuIHJ1O1xuXG59KSkpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvcnUuanMiLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogU2luZGhpIFtzZF1cbi8vISBhdXRob3IgOiBOYXJhaW4gU2FnYXIgOiBodHRwczovL2dpdGh1Yi5jb20vbmFyYWluc2FnYXJcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG52YXIgbW9udGhzID0gW1xuICAgICfYrNmG2YjYsdmKJyxcbiAgICAn2YHZitio2LHZiNix2YonLFxuICAgICfZhdin2LHahicsXG4gICAgJ9in2b7YsdmK2YQnLFxuICAgICfZhdim2YonLFxuICAgICfYrNmI2YYnLFxuICAgICfYrNmI2YTYp9ih2ZAnLFxuICAgICfYotqv2LPZvScsXG4gICAgJ9iz2YrZvtm92YXYqNixJyxcbiAgICAn2KLaqtm92YjYqNixJyxcbiAgICAn2YbZiNmF2KjYsScsXG4gICAgJ9qK2LPZhdio2LEnXG5dO1xudmFyIGRheXMgPSBbXG4gICAgJ9ii2obYsScsXG4gICAgJ9iz2YjZhdixJyxcbiAgICAn2Kfasdin2LHZiCcsXG4gICAgJ9in2LHYqNi5JyxcbiAgICAn2K7ZhdmK2LMnLFxuICAgICfYrNmF2LknLFxuICAgICfah9mG2ofYsSdcbl07XG5cbnZhciBzZCA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3NkJywge1xuICAgIG1vbnRocyA6IG1vbnRocyxcbiAgICBtb250aHNTaG9ydCA6IG1vbnRocyxcbiAgICB3ZWVrZGF5cyA6IGRheXMsXG4gICAgd2Vla2RheXNTaG9ydCA6IGRheXMsXG4gICAgd2Vla2RheXNNaW4gOiBkYXlzLFxuICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgTExMTCA6ICdkZGRk2IwgRCBNTU1NIFlZWVkgSEg6bW0nXG4gICAgfSxcbiAgICBtZXJpZGllbVBhcnNlOiAv2LXYqNitfNi02KfZhS8sXG4gICAgaXNQTSA6IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICByZXR1cm4gJ9i02KfZhScgPT09IGlucHV0O1xuICAgIH0sXG4gICAgbWVyaWRpZW0gOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgIGlmIChob3VyIDwgMTIpIHtcbiAgICAgICAgICAgIHJldHVybiAn2LXYqNitJztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJ9i02KfZhSc7XG4gICAgfSxcbiAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgc2FtZURheSA6ICdb2KfahF0gTFQnLFxuICAgICAgICBuZXh0RGF5IDogJ1vYs9qA2Kfau9mKXSBMVCcsXG4gICAgICAgIG5leHRXZWVrIDogJ2RkZGQgW9in2rPZitmGINmH2YHYqtmKINiq2YpdIExUJyxcbiAgICAgICAgbGFzdERheSA6ICdb2qrYp9mE2YfZh10gTFQnLFxuICAgICAgICBsYXN0V2VlayA6ICdb2q/Ystix2YrZhCDZh9mB2KrZil0gZGRkZCBb2KrZil0gTFQnLFxuICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgIH0sXG4gICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICBmdXR1cmUgOiAnJXMg2b7ZiNihJyxcbiAgICAgICAgcGFzdCA6ICclcyDYp9qzJyxcbiAgICAgICAgcyA6ICfahtmG2K8g2LPZitqq2YbaiicsXG4gICAgICAgIG0gOiAn2YfaqiDZhdmG2b0nLFxuICAgICAgICBtbSA6ICclZCDZhdmG2b0nLFxuICAgICAgICBoIDogJ9mH2qog2qrZhNin2qonLFxuICAgICAgICBoaCA6ICclZCDaqtmE2KfaqicsXG4gICAgICAgIGQgOiAn2YfaqiDaj9mK2YbZh9mGJyxcbiAgICAgICAgZGQgOiAnJWQg2o/ZitmG2YfZhicsXG4gICAgICAgIE0gOiAn2YfaqiDZhdmH2YrZhtmIJyxcbiAgICAgICAgTU0gOiAnJWQg2YXZh9mK2YbYpycsXG4gICAgICAgIHkgOiAn2YfaqiDYs9in2YQnLFxuICAgICAgICB5eSA6ICclZCDYs9in2YQnXG4gICAgfSxcbiAgICBwcmVwYXJzZTogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL9iML2csICcsJyk7XG4gICAgfSxcbiAgICBwb3N0Zm9ybWF0OiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvLC9nLCAn2IwnKTtcbiAgICB9LFxuICAgIHdlZWsgOiB7XG4gICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgfVxufSk7XG5cbnJldHVybiBzZDtcblxufSkpKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3NkLmpzIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IE5vcnRoZXJuIFNhbWkgW3NlXVxuLy8hIGF1dGhvcnMgOiBCw6VyZCBSb2xzdGFkIEhlbnJpa3NlbiA6IGh0dHBzOi8vZ2l0aHViLmNvbS9rYXJhbWVsbFxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cblxudmFyIHNlID0gbW9tZW50LmRlZmluZUxvY2FsZSgnc2UnLCB7XG4gICAgbW9udGhzIDogJ2/EkcSRYWphZ2Vtw6FubnVfZ3VvdnZhbcOhbm51X25qdWvEjWFtw6FubnVfY3VvxYtvbcOhbm51X21pZXNzZW3DoW5udV9nZWFzc2Vtw6FubnVfc3VvaWRuZW3DoW5udV9ib3JnZW3DoW5udV/EjWFrxI1hbcOhbm51X2dvbGdnb3Rtw6FubnVfc2vDoWJtYW3DoW5udV9qdW92bGFtw6FubnUnLnNwbGl0KCdfJyksXG4gICAgbW9udGhzU2hvcnQgOiAnb8SRxJFqX2d1b3Zfbmp1a19jdW9fbWllc19nZWFzX3N1b2lfYm9yZ1/EjWFrxI1fZ29sZ19za8OhYl9qdW92Jy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzIDogJ3NvdG5hYmVhaXZpX3Z1b3Nzw6FyZ2FfbWHFi8WLZWLDoXJnYV9nYXNrYXZhaGtrdV9kdW9yYXN0YXRfYmVhcmphZGF0X2zDoXZ2YXJkYXQnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNTaG9ydCA6ICdzb3RuX3Z1b3NfbWHFi19nYXNrX2R1b3JfYmVhcl9sw6F2Jy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzTWluIDogJ3Nfdl9tX2dfZF9iX0wnLnNwbGl0KCdfJyksXG4gICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgTCA6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgTEwgOiAnTU1NTSBELiBbYi5dIFlZWVknLFxuICAgICAgICBMTEwgOiAnTU1NTSBELiBbYi5dIFlZWVkgW3RpLl0gSEg6bW0nLFxuICAgICAgICBMTExMIDogJ2RkZGQsIE1NTU0gRC4gW2IuXSBZWVlZIFt0aS5dIEhIOm1tJ1xuICAgIH0sXG4gICAgY2FsZW5kYXIgOiB7XG4gICAgICAgIHNhbWVEYXk6ICdbb3RuZSB0aV0gTFQnLFxuICAgICAgICBuZXh0RGF5OiAnW2lodHRpbiB0aV0gTFQnLFxuICAgICAgICBuZXh0V2VlazogJ2RkZGQgW3RpXSBMVCcsXG4gICAgICAgIGxhc3REYXk6ICdbaWt0ZSB0aV0gTFQnLFxuICAgICAgICBsYXN0V2VlazogJ1tvdmRkaXRdIGRkZGQgW3RpXSBMVCcsXG4gICAgICAgIHNhbWVFbHNlOiAnTCdcbiAgICB9LFxuICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgZnV0dXJlIDogJyVzIGdlYcW+ZXMnLFxuICAgICAgICBwYXN0IDogJ21hxYtpdCAlcycsXG4gICAgICAgIHMgOiAnbW9hZGRlIHNla3VuZGRhdCcsXG4gICAgICAgIG0gOiAnb2t0YSBtaW51aHRhJyxcbiAgICAgICAgbW0gOiAnJWQgbWludWh0YXQnLFxuICAgICAgICBoIDogJ29rdGEgZGlpbW11JyxcbiAgICAgICAgaGggOiAnJWQgZGlpbW11dCcsXG4gICAgICAgIGQgOiAnb2t0YSBiZWFpdmknLFxuICAgICAgICBkZCA6ICclZCBiZWFpdnZpdCcsXG4gICAgICAgIE0gOiAnb2t0YSBtw6FubnUnLFxuICAgICAgICBNTSA6ICclZCBtw6FudXQnLFxuICAgICAgICB5IDogJ29rdGEgamFoa2knLFxuICAgICAgICB5eSA6ICclZCBqYWdpdCdcbiAgICB9LFxuICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfVxcLi8sXG4gICAgb3JkaW5hbCA6ICclZC4nLFxuICAgIHdlZWsgOiB7XG4gICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgfVxufSk7XG5cbnJldHVybiBzZTtcblxufSkpKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3NlLmpzIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IFNpbmhhbGVzZSBbc2ldXG4vLyEgYXV0aG9yIDogU2FtcGF0aCBTaXRpbmFtYWx1d2EgOiBodHRwczovL2dpdGh1Yi5jb20vc2FtcGF0aHNyaXNcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4vKmpzaGludCAtVzEwMCovXG52YXIgc2kgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdzaScsIHtcbiAgICBtb250aHMgOiAn4Lai4Lax4LeA4LeP4La74LeSX+C2tOC3meC2tuC2u+C3gOC3j+C2u+C3kl/gtrjgt4/gtrvgt4rgtq3gt5Rf4LaF4La04LeK4oCN4La74Lea4La94LeKX+C2uOC3kOC2uuC3kl/gtqLgt5bgtrHgt5Jf4Lai4LeW4La94LeSX+C2heC2nOC3neC3g+C3iuC2reC3lF/gt4Pgt5DgtrTgt4rgtq3gt5Dgtrjgt4rgtrbgtrvgt4pf4LaU4Laa4LeK4Lat4Led4La24La74LeKX+C2seC3nOC3gOC3kOC2uOC3iuC2tuC2u+C3il/gtq/gt5ngt4Pgt5Dgtrjgt4rgtrbgtrvgt4onLnNwbGl0KCdfJyksXG4gICAgbW9udGhzU2hvcnQgOiAn4Lai4LaxX+C2tOC3meC2tl/gtrjgt4/gtrvgt4pf4LaF4La04LeKX+C2uOC3kOC2uuC3kl/gtqLgt5bgtrHgt5Jf4Lai4LeW4La94LeSX+C2heC2nOC3nV/gt4Pgt5DgtrTgt4pf4LaU4Laa4LeKX+C2seC3nOC3gOC3kF/gtq/gt5ngt4Pgt5AnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXMgOiAn4LaJ4La74LeS4Lav4LePX+C3g+C2s+C3lOC2r+C3j1/gtoXgtp/gt4Tgtrvgt5Tgt4Dgt4/gtq/gt49f4La24Lav4LeP4Lav4LePX+C2tuC3iuKAjeC2u+C3hOC3g+C3iuC2tOC2reC3kuC2seC3iuC2r+C3j1/gt4Pgt5Lgtprgt5Tgtrvgt4/gtq/gt49f4LeD4LeZ4Lax4LeD4LeU4La74LeP4Lav4LePJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzU2hvcnQgOiAn4LaJ4La74LeSX+C3g+C2s+C3lF/gtoXgtp9f4La24Lav4LePX+C2tuC3iuKAjeC2u+C3hF/gt4Pgt5Lgtprgt5Rf4LeD4LeZ4LaxJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzTWluIDogJ+C2iV/gt4Nf4LaFX+C2tl/gtrbgt4rigI3gtrtf4LeD4LeSX+C3g+C3mScuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICBMVCA6ICdhIGg6bW0nLFxuICAgICAgICBMVFMgOiAnYSBoOm1tOnNzJyxcbiAgICAgICAgTCA6ICdZWVlZL01NL0REJyxcbiAgICAgICAgTEwgOiAnWVlZWSBNTU1NIEQnLFxuICAgICAgICBMTEwgOiAnWVlZWSBNTU1NIEQsIGEgaDptbScsXG4gICAgICAgIExMTEwgOiAnWVlZWSBNTU1NIEQgW+C3gOC3kOC2seC3kl0gZGRkZCwgYSBoOm1tOnNzJ1xuICAgIH0sXG4gICAgY2FsZW5kYXIgOiB7XG4gICAgICAgIHNhbWVEYXkgOiAnW+C2heC2r10gTFRb4LanXScsXG4gICAgICAgIG5leHREYXkgOiAnW+C3hOC3meC2p10gTFRb4LanXScsXG4gICAgICAgIG5leHRXZWVrIDogJ2RkZGQgTFRb4LanXScsXG4gICAgICAgIGxhc3REYXkgOiAnW+C2iuC2uuC3ml0gTFRb4LanXScsXG4gICAgICAgIGxhc3RXZWVrIDogJ1vgtrTgt4Pgt5Tgtpzgt5LgtrpdIGRkZGQgTFRb4LanXScsXG4gICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgfSxcbiAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgIGZ1dHVyZSA6ICclc+C2muC3kuC2seC3iicsXG4gICAgICAgIHBhc3QgOiAnJXPgtprgtqcg4La04LeZ4La7JyxcbiAgICAgICAgcyA6ICfgtq3gtq3gt4rgtrTgtrsg4Laa4LeS4LeE4LeS4La04La6JyxcbiAgICAgICAgbSA6ICfgtrjgt5LgtrHgt5Lgtq3gt4rgtq3gt5Tgt4AnLFxuICAgICAgICBtbSA6ICfgtrjgt5LgtrHgt5Lgtq3gt4rgtq3gt5QgJWQnLFxuICAgICAgICBoIDogJ+C2tOC3kOC2uicsXG4gICAgICAgIGhoIDogJ+C2tOC3kOC2uiAlZCcsXG4gICAgICAgIGQgOiAn4Lav4LeS4Lax4La6JyxcbiAgICAgICAgZGQgOiAn4Lav4LeS4LaxICVkJyxcbiAgICAgICAgTSA6ICfgtrjgt4/gt4PgtronLFxuICAgICAgICBNTSA6ICfgtrjgt4/gt4MgJWQnLFxuICAgICAgICB5IDogJ+C3gOC3g+C2uycsXG4gICAgICAgIHl5IDogJ+C3gOC3g+C2uyAlZCdcbiAgICB9LFxuICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfSDgt4Dgt5DgtrHgt5IvLFxuICAgIG9yZGluYWwgOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgIHJldHVybiBudW1iZXIgKyAnIOC3gOC3kOC2seC3kic7XG4gICAgfSxcbiAgICBtZXJpZGllbVBhcnNlIDogL+C2tOC3meC2uyDgt4Dgtrvgt5R84La04LeD4LeKIOC3gOC2u+C3lHzgtrTgt5ku4LeAfOC2tC7gt4AuLyxcbiAgICBpc1BNIDogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgIHJldHVybiBpbnB1dCA9PT0gJ+C2tC7gt4AuJyB8fCBpbnB1dCA9PT0gJ+C2tOC3g+C3iiDgt4Dgtrvgt5QnO1xuICAgIH0sXG4gICAgbWVyaWRpZW0gOiBmdW5jdGlvbiAoaG91cnMsIG1pbnV0ZXMsIGlzTG93ZXIpIHtcbiAgICAgICAgaWYgKGhvdXJzID4gMTEpIHtcbiAgICAgICAgICAgIHJldHVybiBpc0xvd2VyID8gJ+C2tC7gt4AuJyA6ICfgtrTgt4Pgt4og4LeA4La74LeUJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBpc0xvd2VyID8gJ+C2tOC3mS7gt4AuJyA6ICfgtrTgt5ngtrsg4LeA4La74LeUJztcbiAgICAgICAgfVxuICAgIH1cbn0pO1xuXG5yZXR1cm4gc2k7XG5cbn0pKSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9zaS5qcyIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBTbG92YWsgW3NrXVxuLy8hIGF1dGhvciA6IE1hcnRpbiBNaW5rYSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9rMnNcbi8vISBiYXNlZCBvbiB3b3JrIG9mIHBldHJiZWxhIDogaHR0cHM6Ly9naXRodWIuY29tL3BldHJiZWxhXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxudmFyIG1vbnRocyA9ICdqYW51w6FyX2ZlYnJ1w6FyX21hcmVjX2FwcsOtbF9tw6FqX2rDum5fasO6bF9hdWd1c3Rfc2VwdGVtYmVyX29rdMOzYmVyX25vdmVtYmVyX2RlY2VtYmVyJy5zcGxpdCgnXycpO1xudmFyIG1vbnRoc1Nob3J0ID0gJ2phbl9mZWJfbWFyX2Fwcl9tw6FqX2rDum5fasO6bF9hdWdfc2VwX29rdF9ub3ZfZGVjJy5zcGxpdCgnXycpO1xuZnVuY3Rpb24gcGx1cmFsKG4pIHtcbiAgICByZXR1cm4gKG4gPiAxKSAmJiAobiA8IDUpO1xufVxuZnVuY3Rpb24gdHJhbnNsYXRlKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5LCBpc0Z1dHVyZSkge1xuICAgIHZhciByZXN1bHQgPSBudW1iZXIgKyAnICc7XG4gICAgc3dpdGNoIChrZXkpIHtcbiAgICAgICAgY2FzZSAncyc6ICAvLyBhIGZldyBzZWNvbmRzIC8gaW4gYSBmZXcgc2Vjb25kcyAvIGEgZmV3IHNlY29uZHMgYWdvXG4gICAgICAgICAgICByZXR1cm4gKHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUpID8gJ3DDoXIgc2Vrw7puZCcgOiAncMOhciBzZWt1bmRhbWknO1xuICAgICAgICBjYXNlICdtJzogIC8vIGEgbWludXRlIC8gaW4gYSBtaW51dGUgLyBhIG1pbnV0ZSBhZ29cbiAgICAgICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4ID8gJ21pbsO6dGEnIDogKGlzRnV0dXJlID8gJ21pbsO6dHUnIDogJ21pbsO6dG91Jyk7XG4gICAgICAgIGNhc2UgJ21tJzogLy8gOSBtaW51dGVzIC8gaW4gOSBtaW51dGVzIC8gOSBtaW51dGVzIGFnb1xuICAgICAgICAgICAgaWYgKHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgKHBsdXJhbChudW1iZXIpID8gJ21pbsO6dHknIDogJ21pbsO6dCcpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgJ21pbsO6dGFtaSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnaCc6ICAvLyBhbiBob3VyIC8gaW4gYW4gaG91ciAvIGFuIGhvdXIgYWdvXG4gICAgICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCA/ICdob2RpbmEnIDogKGlzRnV0dXJlID8gJ2hvZGludScgOiAnaG9kaW5vdScpO1xuICAgICAgICBjYXNlICdoaCc6IC8vIDkgaG91cnMgLyBpbiA5IGhvdXJzIC8gOSBob3VycyBhZ29cbiAgICAgICAgICAgIGlmICh3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArIChwbHVyYWwobnVtYmVyKSA/ICdob2RpbnknIDogJ2hvZMOtbicpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgJ2hvZGluYW1pJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdkJzogIC8vIGEgZGF5IC8gaW4gYSBkYXkgLyBhIGRheSBhZ29cbiAgICAgICAgICAgIHJldHVybiAod2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSkgPyAnZGXFiCcgOiAnZMWIb20nO1xuICAgICAgICBjYXNlICdkZCc6IC8vIDkgZGF5cyAvIGluIDkgZGF5cyAvIDkgZGF5cyBhZ29cbiAgICAgICAgICAgIGlmICh3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArIChwbHVyYWwobnVtYmVyKSA/ICdkbmknIDogJ2Ruw60nKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArICdkxYhhbWknO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ00nOiAgLy8gYSBtb250aCAvIGluIGEgbW9udGggLyBhIG1vbnRoIGFnb1xuICAgICAgICAgICAgcmV0dXJuICh3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlKSA/ICdtZXNpYWMnIDogJ21lc2lhY29tJztcbiAgICAgICAgY2FzZSAnTU0nOiAvLyA5IG1vbnRocyAvIGluIDkgbW9udGhzIC8gOSBtb250aHMgYWdvXG4gICAgICAgICAgICBpZiAod2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAocGx1cmFsKG51bWJlcikgPyAnbWVzaWFjZScgOiAnbWVzaWFjb3YnKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArICdtZXNpYWNtaSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAneSc6ICAvLyBhIHllYXIgLyBpbiBhIHllYXIgLyBhIHllYXIgYWdvXG4gICAgICAgICAgICByZXR1cm4gKHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUpID8gJ3JvaycgOiAncm9rb20nO1xuICAgICAgICBjYXNlICd5eSc6IC8vIDkgeWVhcnMgLyBpbiA5IHllYXJzIC8gOSB5ZWFycyBhZ29cbiAgICAgICAgICAgIGlmICh3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArIChwbHVyYWwobnVtYmVyKSA/ICdyb2t5JyA6ICdyb2tvdicpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgJ3Jva21pJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgIH1cbn1cblxudmFyIHNrID0gbW9tZW50LmRlZmluZUxvY2FsZSgnc2snLCB7XG4gICAgbW9udGhzIDogbW9udGhzLFxuICAgIG1vbnRoc1Nob3J0IDogbW9udGhzU2hvcnQsXG4gICAgd2Vla2RheXMgOiAnbmVkZcS+YV9wb25kZWxva191dG9yb2tfc3RyZWRhX8WhdHZydG9rX3BpYXRva19zb2JvdGEnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNTaG9ydCA6ICduZV9wb191dF9zdF/FoXRfcGlfc28nLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNNaW4gOiAnbmVfcG9fdXRfc3RfxaF0X3BpX3NvJy5zcGxpdCgnXycpLFxuICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICBMVDogJ0g6bW0nLFxuICAgICAgICBMVFMgOiAnSDptbTpzcycsXG4gICAgICAgIEwgOiAnREQuTU0uWVlZWScsXG4gICAgICAgIExMIDogJ0QuIE1NTU0gWVlZWScsXG4gICAgICAgIExMTCA6ICdELiBNTU1NIFlZWVkgSDptbScsXG4gICAgICAgIExMTEwgOiAnZGRkZCBELiBNTU1NIFlZWVkgSDptbSdcbiAgICB9LFxuICAgIGNhbGVuZGFyIDoge1xuICAgICAgICBzYW1lRGF5OiAnW2RuZXMgb10gTFQnLFxuICAgICAgICBuZXh0RGF5OiAnW3phanRyYSBvXSBMVCcsXG4gICAgICAgIG5leHRXZWVrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHRoaXMuZGF5KCkpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3YgbmVkZcS+dSBvXSBMVCc7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbdl0gZGRkZCBbb10gTFQnO1xuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbdiBzdHJlZHUgb10gTFQnO1xuICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbdm8gxaF0dnJ0b2sgb10gTFQnO1xuICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbdiBwaWF0b2sgb10gTFQnO1xuICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbdiBzb2JvdHUgb10gTFQnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBsYXN0RGF5OiAnW3bEjWVyYSBvXSBMVCcsXG4gICAgICAgIGxhc3RXZWVrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHRoaXMuZGF5KCkpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnW21pbnVsw7ogbmVkZcS+dSBvXSBMVCc7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbbWludWzDvV0gZGRkZCBbb10gTFQnO1xuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbbWludWzDuiBzdHJlZHUgb10gTFQnO1xuICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnW21pbnVsw71dIGRkZGQgW29dIExUJztcbiAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnW21pbnVsw7ogc29ib3R1IG9dIExUJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgc2FtZUVsc2U6ICdMJ1xuICAgIH0sXG4gICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICBmdXR1cmUgOiAnemEgJXMnLFxuICAgICAgICBwYXN0IDogJ3ByZWQgJXMnLFxuICAgICAgICBzIDogdHJhbnNsYXRlLFxuICAgICAgICBtIDogdHJhbnNsYXRlLFxuICAgICAgICBtbSA6IHRyYW5zbGF0ZSxcbiAgICAgICAgaCA6IHRyYW5zbGF0ZSxcbiAgICAgICAgaGggOiB0cmFuc2xhdGUsXG4gICAgICAgIGQgOiB0cmFuc2xhdGUsXG4gICAgICAgIGRkIDogdHJhbnNsYXRlLFxuICAgICAgICBNIDogdHJhbnNsYXRlLFxuICAgICAgICBNTSA6IHRyYW5zbGF0ZSxcbiAgICAgICAgeSA6IHRyYW5zbGF0ZSxcbiAgICAgICAgeXkgOiB0cmFuc2xhdGVcbiAgICB9LFxuICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfVxcLi8sXG4gICAgb3JkaW5hbCA6ICclZC4nLFxuICAgIHdlZWsgOiB7XG4gICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgfVxufSk7XG5cbnJldHVybiBzaztcblxufSkpKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3NrLmpzIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IFNsb3ZlbmlhbiBbc2xdXG4vLyEgYXV0aG9yIDogUm9iZXJ0IFNlZG92xaFlayA6IGh0dHBzOi8vZ2l0aHViLmNvbS9zZWRvdnNla1xuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbmZ1bmN0aW9uIHByb2Nlc3NSZWxhdGl2ZVRpbWUobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXksIGlzRnV0dXJlKSB7XG4gICAgdmFyIHJlc3VsdCA9IG51bWJlciArICcgJztcbiAgICBzd2l0Y2ggKGtleSkge1xuICAgICAgICBjYXNlICdzJzpcbiAgICAgICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlID8gJ25la2FqIHNla3VuZCcgOiAnbmVrYWogc2VrdW5kYW1pJztcbiAgICAgICAgY2FzZSAnbSc6XG4gICAgICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCA/ICdlbmEgbWludXRhJyA6ICdlbm8gbWludXRvJztcbiAgICAgICAgY2FzZSAnbW0nOlxuICAgICAgICAgICAgaWYgKG51bWJlciA9PT0gMSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCArPSB3aXRob3V0U3VmZml4ID8gJ21pbnV0YScgOiAnbWludXRvJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobnVtYmVyID09PSAyKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9IHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAnbWludXRpJyA6ICdtaW51dGFtYSc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG51bWJlciA8IDUpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgKz0gd2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICdtaW51dGUnIDogJ21pbnV0YW1pJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9IHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAnbWludXQnIDogJ21pbnV0YW1pJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIGNhc2UgJ2gnOlxuICAgICAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggPyAnZW5hIHVyYScgOiAnZW5vIHVybyc7XG4gICAgICAgIGNhc2UgJ2hoJzpcbiAgICAgICAgICAgIGlmIChudW1iZXIgPT09IDEpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgKz0gd2l0aG91dFN1ZmZpeCA/ICd1cmEnIDogJ3Vybyc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG51bWJlciA9PT0gMikge1xuICAgICAgICAgICAgICAgIHJlc3VsdCArPSB3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlID8gJ3VyaScgOiAndXJhbWEnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChudW1iZXIgPCA1KSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9IHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAndXJlJyA6ICd1cmFtaSc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlc3VsdCArPSB3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlID8gJ3VyJyA6ICd1cmFtaSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICBjYXNlICdkJzpcbiAgICAgICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlID8gJ2VuIGRhbicgOiAnZW5pbSBkbmVtJztcbiAgICAgICAgY2FzZSAnZGQnOlxuICAgICAgICAgICAgaWYgKG51bWJlciA9PT0gMSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCArPSB3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlID8gJ2RhbicgOiAnZG5lbSc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG51bWJlciA9PT0gMikge1xuICAgICAgICAgICAgICAgIHJlc3VsdCArPSB3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlID8gJ2RuaScgOiAnZG5ldm9tYSc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlc3VsdCArPSB3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlID8gJ2RuaScgOiAnZG5ldmknO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgY2FzZSAnTSc6XG4gICAgICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICdlbiBtZXNlYycgOiAnZW5pbSBtZXNlY2VtJztcbiAgICAgICAgY2FzZSAnTU0nOlxuICAgICAgICAgICAgaWYgKG51bWJlciA9PT0gMSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCArPSB3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlID8gJ21lc2VjJyA6ICdtZXNlY2VtJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobnVtYmVyID09PSAyKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9IHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAnbWVzZWNhJyA6ICdtZXNlY2VtYSc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG51bWJlciA8IDUpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgKz0gd2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICdtZXNlY2UnIDogJ21lc2VjaSc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlc3VsdCArPSB3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlID8gJ21lc2VjZXYnIDogJ21lc2VjaSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICBjYXNlICd5JzpcbiAgICAgICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlID8gJ2VubyBsZXRvJyA6ICdlbmltIGxldG9tJztcbiAgICAgICAgY2FzZSAneXknOlxuICAgICAgICAgICAgaWYgKG51bWJlciA9PT0gMSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCArPSB3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlID8gJ2xldG8nIDogJ2xldG9tJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobnVtYmVyID09PSAyKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9IHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAnbGV0aScgOiAnbGV0b21hJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobnVtYmVyIDwgNSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCArPSB3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlID8gJ2xldGEnIDogJ2xldGknO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgKz0gd2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICdsZXQnIDogJ2xldGknO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59XG5cbnZhciBzbCA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3NsJywge1xuICAgIG1vbnRocyA6ICdqYW51YXJfZmVicnVhcl9tYXJlY19hcHJpbF9tYWpfanVuaWpfanVsaWpfYXZndXN0X3NlcHRlbWJlcl9va3RvYmVyX25vdmVtYmVyX2RlY2VtYmVyJy5zcGxpdCgnXycpLFxuICAgIG1vbnRoc1Nob3J0IDogJ2phbi5fZmViLl9tYXIuX2Fwci5fbWFqLl9qdW4uX2p1bC5fYXZnLl9zZXAuX29rdC5fbm92Ll9kZWMuJy5zcGxpdCgnXycpLFxuICAgIG1vbnRoc1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgd2Vla2RheXMgOiAnbmVkZWxqYV9wb25lZGVsamVrX3RvcmVrX3NyZWRhX8SNZXRydGVrX3BldGVrX3NvYm90YScuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1Nob3J0IDogJ25lZC5fcG9uLl90b3IuX3NyZS5fxI1ldC5fcGV0Ll9zb2IuJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzTWluIDogJ25lX3BvX3RvX3NyX8SNZV9wZV9zbycuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICBMVCA6ICdIOm1tJyxcbiAgICAgICAgTFRTIDogJ0g6bW06c3MnLFxuICAgICAgICBMIDogJ0RELk1NLllZWVknLFxuICAgICAgICBMTCA6ICdELiBNTU1NIFlZWVknLFxuICAgICAgICBMTEwgOiAnRC4gTU1NTSBZWVlZIEg6bW0nLFxuICAgICAgICBMTExMIDogJ2RkZGQsIEQuIE1NTU0gWVlZWSBIOm1tJ1xuICAgIH0sXG4gICAgY2FsZW5kYXIgOiB7XG4gICAgICAgIHNhbWVEYXkgIDogJ1tkYW5lcyBvYl0gTFQnLFxuICAgICAgICBuZXh0RGF5ICA6ICdbanV0cmkgb2JdIExUJyxcblxuICAgICAgICBuZXh0V2VlayA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHN3aXRjaCAodGhpcy5kYXkoKSkge1xuICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbdl0gW25lZGVsam9dIFtvYl0gTFQnO1xuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbdl0gW3NyZWRvXSBbb2JdIExUJztcbiAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3ZdIFtzb2JvdG9dIFtvYl0gTFQnO1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbdl0gZGRkZCBbb2JdIExUJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbGFzdERheSAgOiAnW3bEjWVyYWogb2JdIExUJyxcbiAgICAgICAgbGFzdFdlZWsgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHRoaXMuZGF5KCkpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3ByZWrFoW5qb10gW25lZGVsam9dIFtvYl0gTFQnO1xuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbcHJlasWhbmpvXSBbc3JlZG9dIFtvYl0gTFQnO1xuICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbcHJlasWhbmpvXSBbc29ib3RvXSBbb2JdIExUJztcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3ByZWrFoW5qaV0gZGRkZCBbb2JdIExUJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICB9LFxuICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgZnV0dXJlIDogJ8SNZXogJXMnLFxuICAgICAgICBwYXN0ICAgOiAncHJlZCAlcycsXG4gICAgICAgIHMgICAgICA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgIG0gICAgICA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgIG1tICAgICA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgIGggICAgICA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgIGhoICAgICA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgIGQgICAgICA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgIGRkICAgICA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgIE0gICAgICA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgIE1NICAgICA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgIHkgICAgICA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgIHl5ICAgICA6IHByb2Nlc3NSZWxhdGl2ZVRpbWVcbiAgICB9LFxuICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfVxcLi8sXG4gICAgb3JkaW5hbCA6ICclZC4nLFxuICAgIHdlZWsgOiB7XG4gICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICBkb3kgOiA3ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiAxc3QgaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgfVxufSk7XG5cbnJldHVybiBzbDtcblxufSkpKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3NsLmpzIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEFsYmFuaWFuIFtzcV1cbi8vISBhdXRob3IgOiBGbGFrw6tyaW0gSXNtYW5pIDogaHR0cHM6Ly9naXRodWIuY29tL2ZsYWtlcmltaVxuLy8hIGF1dGhvciA6IE1lbmVsaW9uIEVsZW5zw7psZSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9PaXJlXG4vLyEgYXV0aG9yIDogT2VyZCBDdWthbGxhIDogaHR0cHM6Ly9naXRodWIuY29tL29lcmRcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG52YXIgc3EgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdzcScsIHtcbiAgICBtb250aHMgOiAnSmFuYXJfU2hrdXJ0X01hcnNfUHJpbGxfTWFqX1FlcnNob3JfS29ycmlrX0d1c2h0X1NodGF0b3JfVGV0b3JfTsOrbnRvcl9EaGpldG9yJy5zcGxpdCgnXycpLFxuICAgIG1vbnRoc1Nob3J0IDogJ0phbl9TaGtfTWFyX1ByaV9NYWpfUWVyX0tvcl9HdXNfU2h0X1RldF9Ow6tuX0Roaicuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5cyA6ICdFIERpZWxfRSBIw6tuw6tfRSBNYXJ0w6tfRSBNw6tya3Vyw6tfRSBFbmp0ZV9FIFByZW10ZV9FIFNodHVuw6snLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNTaG9ydCA6ICdEaWVfSMOrbl9NYXJfTcOrcl9FbmpfUHJlX1NodCcuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c01pbiA6ICdEX0hfTWFfTcOrX0VfUF9TaCcuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgIG1lcmlkaWVtUGFyc2U6IC9QRHxNRC8sXG4gICAgaXNQTTogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgIHJldHVybiBpbnB1dC5jaGFyQXQoMCkgPT09ICdNJztcbiAgICB9LFxuICAgIG1lcmlkaWVtIDogZnVuY3Rpb24gKGhvdXJzLCBtaW51dGVzLCBpc0xvd2VyKSB7XG4gICAgICAgIHJldHVybiBob3VycyA8IDEyID8gJ1BEJyA6ICdNRCc7XG4gICAgfSxcbiAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgIExMTEwgOiAnZGRkZCwgRCBNTU1NIFlZWVkgSEg6bW0nXG4gICAgfSxcbiAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgc2FtZURheSA6ICdbU290IG7Dq10gTFQnLFxuICAgICAgICBuZXh0RGF5IDogJ1tOZXPDq3IgbsOrXSBMVCcsXG4gICAgICAgIG5leHRXZWVrIDogJ2RkZGQgW27Dq10gTFQnLFxuICAgICAgICBsYXN0RGF5IDogJ1tEamUgbsOrXSBMVCcsXG4gICAgICAgIGxhc3RXZWVrIDogJ2RkZGQgW2Uga2FsdWFyIG7Dq10gTFQnLFxuICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgIH0sXG4gICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICBmdXR1cmUgOiAnbsOrICVzJyxcbiAgICAgICAgcGFzdCA6ICclcyBtw6sgcGFyw6snLFxuICAgICAgICBzIDogJ2Rpc2Egc2Vrb25kYScsXG4gICAgICAgIG0gOiAnbmrDqyBtaW51dMOrJyxcbiAgICAgICAgbW0gOiAnJWQgbWludXRhJyxcbiAgICAgICAgaCA6ICduasOrIG9yw6snLFxuICAgICAgICBoaCA6ICclZCBvcsOrJyxcbiAgICAgICAgZCA6ICduasOrIGRpdMOrJyxcbiAgICAgICAgZGQgOiAnJWQgZGl0w6snLFxuICAgICAgICBNIDogJ25qw6sgbXVhaicsXG4gICAgICAgIE1NIDogJyVkIG11YWonLFxuICAgICAgICB5IDogJ25qw6sgdml0JyxcbiAgICAgICAgeXkgOiAnJWQgdml0ZSdcbiAgICB9LFxuICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfVxcLi8sXG4gICAgb3JkaW5hbCA6ICclZC4nLFxuICAgIHdlZWsgOiB7XG4gICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgfVxufSk7XG5cbnJldHVybiBzcTtcblxufSkpKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3NxLmpzIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IFNlcmJpYW4gW3NyXVxuLy8hIGF1dGhvciA6IE1pbGFuIEphbmHEjWtvdmnEhzxtaWxhbmphbmFja292aWNAZ21haWwuY29tPiA6IGh0dHBzOi8vZ2l0aHViLmNvbS9taWxhbi1qXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxudmFyIHRyYW5zbGF0b3IgPSB7XG4gICAgd29yZHM6IHsgLy9EaWZmZXJlbnQgZ3JhbW1hdGljYWwgY2FzZXNcbiAgICAgICAgbTogWydqZWRhbiBtaW51dCcsICdqZWRuZSBtaW51dGUnXSxcbiAgICAgICAgbW06IFsnbWludXQnLCAnbWludXRlJywgJ21pbnV0YSddLFxuICAgICAgICBoOiBbJ2plZGFuIHNhdCcsICdqZWRub2cgc2F0YSddLFxuICAgICAgICBoaDogWydzYXQnLCAnc2F0YScsICdzYXRpJ10sXG4gICAgICAgIGRkOiBbJ2RhbicsICdkYW5hJywgJ2RhbmEnXSxcbiAgICAgICAgTU06IFsnbWVzZWMnLCAnbWVzZWNhJywgJ21lc2VjaSddLFxuICAgICAgICB5eTogWydnb2RpbmEnLCAnZ29kaW5lJywgJ2dvZGluYSddXG4gICAgfSxcbiAgICBjb3JyZWN0R3JhbW1hdGljYWxDYXNlOiBmdW5jdGlvbiAobnVtYmVyLCB3b3JkS2V5KSB7XG4gICAgICAgIHJldHVybiBudW1iZXIgPT09IDEgPyB3b3JkS2V5WzBdIDogKG51bWJlciA+PSAyICYmIG51bWJlciA8PSA0ID8gd29yZEtleVsxXSA6IHdvcmRLZXlbMl0pO1xuICAgIH0sXG4gICAgdHJhbnNsYXRlOiBmdW5jdGlvbiAobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXkpIHtcbiAgICAgICAgdmFyIHdvcmRLZXkgPSB0cmFuc2xhdG9yLndvcmRzW2tleV07XG4gICAgICAgIGlmIChrZXkubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCA/IHdvcmRLZXlbMF0gOiB3b3JkS2V5WzFdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICcgJyArIHRyYW5zbGF0b3IuY29ycmVjdEdyYW1tYXRpY2FsQ2FzZShudW1iZXIsIHdvcmRLZXkpO1xuICAgICAgICB9XG4gICAgfVxufTtcblxudmFyIHNyID0gbW9tZW50LmRlZmluZUxvY2FsZSgnc3InLCB7XG4gICAgbW9udGhzOiAnamFudWFyX2ZlYnJ1YXJfbWFydF9hcHJpbF9tYWpfanVuX2p1bF9hdmd1c3Rfc2VwdGVtYmFyX29rdG9iYXJfbm92ZW1iYXJfZGVjZW1iYXInLnNwbGl0KCdfJyksXG4gICAgbW9udGhzU2hvcnQ6ICdqYW4uX2ZlYi5fbWFyLl9hcHIuX21hal9qdW5fanVsX2F2Zy5fc2VwLl9va3QuX25vdi5fZGVjLicuc3BsaXQoJ18nKSxcbiAgICBtb250aHNQYXJzZUV4YWN0OiB0cnVlLFxuICAgIHdlZWtkYXlzOiAnbmVkZWxqYV9wb25lZGVsamFrX3V0b3Jha19zcmVkYV/EjWV0dnJ0YWtfcGV0YWtfc3Vib3RhJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzU2hvcnQ6ICduZWQuX3Bvbi5fdXRvLl9zcmUuX8SNZXQuX3BldC5fc3ViLicuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c01pbjogJ25lX3BvX3V0X3NyX8SNZV9wZV9zdScuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgIExUOiAnSDptbScsXG4gICAgICAgIExUUyA6ICdIOm1tOnNzJyxcbiAgICAgICAgTDogJ0RELk1NLllZWVknLFxuICAgICAgICBMTDogJ0QuIE1NTU0gWVlZWScsXG4gICAgICAgIExMTDogJ0QuIE1NTU0gWVlZWSBIOm1tJyxcbiAgICAgICAgTExMTDogJ2RkZGQsIEQuIE1NTU0gWVlZWSBIOm1tJ1xuICAgIH0sXG4gICAgY2FsZW5kYXI6IHtcbiAgICAgICAgc2FtZURheTogJ1tkYW5hcyB1XSBMVCcsXG4gICAgICAgIG5leHREYXk6ICdbc3V0cmEgdV0gTFQnLFxuICAgICAgICBuZXh0V2VlazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgc3dpdGNoICh0aGlzLmRheSgpKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t1XSBbbmVkZWxqdV0gW3VdIExUJztcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3VdIFtzcmVkdV0gW3VdIExUJztcbiAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3VdIFtzdWJvdHVdIFt1XSBMVCc7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t1XSBkZGRkIFt1XSBMVCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGxhc3REYXkgIDogJ1tqdcSNZSB1XSBMVCcsXG4gICAgICAgIGxhc3RXZWVrIDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGxhc3RXZWVrRGF5cyA9IFtcbiAgICAgICAgICAgICAgICAnW3Byb8WhbGVdIFtuZWRlbGplXSBbdV0gTFQnLFxuICAgICAgICAgICAgICAgICdbcHJvxaFsb2ddIFtwb25lZGVsamthXSBbdV0gTFQnLFxuICAgICAgICAgICAgICAgICdbcHJvxaFsb2ddIFt1dG9ya2FdIFt1XSBMVCcsXG4gICAgICAgICAgICAgICAgJ1twcm/FoWxlXSBbc3JlZGVdIFt1XSBMVCcsXG4gICAgICAgICAgICAgICAgJ1twcm/FoWxvZ10gW8SNZXR2cnRrYV0gW3VdIExUJyxcbiAgICAgICAgICAgICAgICAnW3Byb8WhbG9nXSBbcGV0a2FdIFt1XSBMVCcsXG4gICAgICAgICAgICAgICAgJ1twcm/FoWxlXSBbc3Vib3RlXSBbdV0gTFQnXG4gICAgICAgICAgICBdO1xuICAgICAgICAgICAgcmV0dXJuIGxhc3RXZWVrRGF5c1t0aGlzLmRheSgpXTtcbiAgICAgICAgfSxcbiAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICB9LFxuICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgZnV0dXJlIDogJ3phICVzJyxcbiAgICAgICAgcGFzdCAgIDogJ3ByZSAlcycsXG4gICAgICAgIHMgICAgICA6ICduZWtvbGlrbyBzZWt1bmRpJyxcbiAgICAgICAgbSAgICAgIDogdHJhbnNsYXRvci50cmFuc2xhdGUsXG4gICAgICAgIG1tICAgICA6IHRyYW5zbGF0b3IudHJhbnNsYXRlLFxuICAgICAgICBoICAgICAgOiB0cmFuc2xhdG9yLnRyYW5zbGF0ZSxcbiAgICAgICAgaGggICAgIDogdHJhbnNsYXRvci50cmFuc2xhdGUsXG4gICAgICAgIGQgICAgICA6ICdkYW4nLFxuICAgICAgICBkZCAgICAgOiB0cmFuc2xhdG9yLnRyYW5zbGF0ZSxcbiAgICAgICAgTSAgICAgIDogJ21lc2VjJyxcbiAgICAgICAgTU0gICAgIDogdHJhbnNsYXRvci50cmFuc2xhdGUsXG4gICAgICAgIHkgICAgICA6ICdnb2RpbnUnLFxuICAgICAgICB5eSAgICAgOiB0cmFuc2xhdG9yLnRyYW5zbGF0ZVxuICAgIH0sXG4gICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9XFwuLyxcbiAgICBvcmRpbmFsIDogJyVkLicsXG4gICAgd2VlayA6IHtcbiAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgIGRveSA6IDcgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDFzdCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICB9XG59KTtcblxucmV0dXJuIHNyO1xuXG59KSkpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvc3IuanMiLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogU2VyYmlhbiBDeXJpbGxpYyBbc3ItY3lybF1cbi8vISBhdXRob3IgOiBNaWxhbiBKYW5hxI1rb3ZpxIc8bWlsYW5qYW5hY2tvdmljQGdtYWlsLmNvbT4gOiBodHRwczovL2dpdGh1Yi5jb20vbWlsYW4talxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciB0cmFuc2xhdG9yID0ge1xuICAgIHdvcmRzOiB7IC8vRGlmZmVyZW50IGdyYW1tYXRpY2FsIGNhc2VzXG4gICAgICAgIG06IFsn0ZjQtdC00LDQvSDQvNC40L3Rg9GCJywgJ9GY0LXQtNC90LUg0LzQuNC90YPRgtC1J10sXG4gICAgICAgIG1tOiBbJ9C80LjQvdGD0YInLCAn0LzQuNC90YPRgtC1JywgJ9C80LjQvdGD0YLQsCddLFxuICAgICAgICBoOiBbJ9GY0LXQtNCw0L0g0YHQsNGCJywgJ9GY0LXQtNC90L7QsyDRgdCw0YLQsCddLFxuICAgICAgICBoaDogWyfRgdCw0YInLCAn0YHQsNGC0LAnLCAn0YHQsNGC0LgnXSxcbiAgICAgICAgZGQ6IFsn0LTQsNC9JywgJ9C00LDQvdCwJywgJ9C00LDQvdCwJ10sXG4gICAgICAgIE1NOiBbJ9C80LXRgdC10YYnLCAn0LzQtdGB0LXRhtCwJywgJ9C80LXRgdC10YbQuCddLFxuICAgICAgICB5eTogWyfQs9C+0LTQuNC90LAnLCAn0LPQvtC00LjQvdC1JywgJ9Cz0L7QtNC40L3QsCddXG4gICAgfSxcbiAgICBjb3JyZWN0R3JhbW1hdGljYWxDYXNlOiBmdW5jdGlvbiAobnVtYmVyLCB3b3JkS2V5KSB7XG4gICAgICAgIHJldHVybiBudW1iZXIgPT09IDEgPyB3b3JkS2V5WzBdIDogKG51bWJlciA+PSAyICYmIG51bWJlciA8PSA0ID8gd29yZEtleVsxXSA6IHdvcmRLZXlbMl0pO1xuICAgIH0sXG4gICAgdHJhbnNsYXRlOiBmdW5jdGlvbiAobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXkpIHtcbiAgICAgICAgdmFyIHdvcmRLZXkgPSB0cmFuc2xhdG9yLndvcmRzW2tleV07XG4gICAgICAgIGlmIChrZXkubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCA/IHdvcmRLZXlbMF0gOiB3b3JkS2V5WzFdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICcgJyArIHRyYW5zbGF0b3IuY29ycmVjdEdyYW1tYXRpY2FsQ2FzZShudW1iZXIsIHdvcmRLZXkpO1xuICAgICAgICB9XG4gICAgfVxufTtcblxudmFyIHNyQ3lybCA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3NyLWN5cmwnLCB7XG4gICAgbW9udGhzOiAn0ZjQsNC90YPQsNGAX9GE0LXQsdGA0YPQsNGAX9C80LDRgNGCX9Cw0L/RgNC40Ltf0LzQsNGYX9GY0YPQvV/RmNGD0Ltf0LDQstCz0YPRgdGCX9GB0LXQv9GC0LXQvNCx0LDRgF/QvtC60YLQvtCx0LDRgF/QvdC+0LLQtdC80LHQsNGAX9C00LXRhtC10LzQsdCw0YAnLnNwbGl0KCdfJyksXG4gICAgbW9udGhzU2hvcnQ6ICfRmNCw0L0uX9GE0LXQsS5f0LzQsNGALl/QsNC/0YAuX9C80LDRmF/RmNGD0L1f0ZjRg9C7X9Cw0LLQsy5f0YHQtdC/Ll/QvtC60YIuX9C90L7Qsi5f0LTQtdGGLicuc3BsaXQoJ18nKSxcbiAgICBtb250aHNQYXJzZUV4YWN0OiB0cnVlLFxuICAgIHdlZWtkYXlzOiAn0L3QtdC00LXRmdCwX9C/0L7QvdC10LTQtdGZ0LDQul/Rg9GC0L7RgNCw0Lpf0YHRgNC10LTQsF/Rh9C10YLQstGA0YLQsNC6X9C/0LXRgtCw0Lpf0YHRg9Cx0L7RgtCwJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzU2hvcnQ6ICfQvdC10LQuX9C/0L7QvS5f0YPRgtC+Ll/RgdGA0LUuX9GH0LXRgi5f0L/QtdGCLl/RgdGD0LEuJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzTWluOiAn0L3QtV/Qv9C+X9GD0YJf0YHRgF/Rh9C1X9C/0LVf0YHRgycuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgIExUOiAnSDptbScsXG4gICAgICAgIExUUyA6ICdIOm1tOnNzJyxcbiAgICAgICAgTDogJ0RELk1NLllZWVknLFxuICAgICAgICBMTDogJ0QuIE1NTU0gWVlZWScsXG4gICAgICAgIExMTDogJ0QuIE1NTU0gWVlZWSBIOm1tJyxcbiAgICAgICAgTExMTDogJ2RkZGQsIEQuIE1NTU0gWVlZWSBIOm1tJ1xuICAgIH0sXG4gICAgY2FsZW5kYXI6IHtcbiAgICAgICAgc2FtZURheTogJ1vQtNCw0L3QsNGBINGDXSBMVCcsXG4gICAgICAgIG5leHREYXk6ICdb0YHRg9GC0YDQsCDRg10gTFQnLFxuICAgICAgICBuZXh0V2VlazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgc3dpdGNoICh0aGlzLmRheSgpKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1vRg10gW9C90LXQtNC10ZnRg10gW9GDXSBMVCc7XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1vRg10gW9GB0YDQtdC00YNdIFvRg10gTFQnO1xuICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdb0YNdIFvRgdGD0LHQvtGC0YNdIFvRg10gTFQnO1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdb0YNdIGRkZGQgW9GDXSBMVCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGxhc3REYXkgIDogJ1vRmNGD0YfQtSDRg10gTFQnLFxuICAgICAgICBsYXN0V2VlayA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBsYXN0V2Vla0RheXMgPSBbXG4gICAgICAgICAgICAgICAgJ1vQv9GA0L7RiNC70LVdIFvQvdC10LTQtdGZ0LVdIFvRg10gTFQnLFxuICAgICAgICAgICAgICAgICdb0L/RgNC+0YjQu9C+0LNdIFvQv9C+0L3QtdC00LXRmdC60LBdIFvRg10gTFQnLFxuICAgICAgICAgICAgICAgICdb0L/RgNC+0YjQu9C+0LNdIFvRg9GC0L7RgNC60LBdIFvRg10gTFQnLFxuICAgICAgICAgICAgICAgICdb0L/RgNC+0YjQu9C1XSBb0YHRgNC10LTQtV0gW9GDXSBMVCcsXG4gICAgICAgICAgICAgICAgJ1vQv9GA0L7RiNC70L7Qs10gW9GH0LXRgtCy0YDRgtC60LBdIFvRg10gTFQnLFxuICAgICAgICAgICAgICAgICdb0L/RgNC+0YjQu9C+0LNdIFvQv9C10YLQutCwXSBb0YNdIExUJyxcbiAgICAgICAgICAgICAgICAnW9C/0YDQvtGI0LvQtV0gW9GB0YPQsdC+0YLQtV0gW9GDXSBMVCdcbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICByZXR1cm4gbGFzdFdlZWtEYXlzW3RoaXMuZGF5KCldO1xuICAgICAgICB9LFxuICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgIH0sXG4gICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICBmdXR1cmUgOiAn0LfQsCAlcycsXG4gICAgICAgIHBhc3QgICA6ICfQv9GA0LUgJXMnLFxuICAgICAgICBzICAgICAgOiAn0L3QtdC60L7Qu9C40LrQviDRgdC10LrRg9C90LTQuCcsXG4gICAgICAgIG0gICAgICA6IHRyYW5zbGF0b3IudHJhbnNsYXRlLFxuICAgICAgICBtbSAgICAgOiB0cmFuc2xhdG9yLnRyYW5zbGF0ZSxcbiAgICAgICAgaCAgICAgIDogdHJhbnNsYXRvci50cmFuc2xhdGUsXG4gICAgICAgIGhoICAgICA6IHRyYW5zbGF0b3IudHJhbnNsYXRlLFxuICAgICAgICBkICAgICAgOiAn0LTQsNC9JyxcbiAgICAgICAgZGQgICAgIDogdHJhbnNsYXRvci50cmFuc2xhdGUsXG4gICAgICAgIE0gICAgICA6ICfQvNC10YHQtdGGJyxcbiAgICAgICAgTU0gICAgIDogdHJhbnNsYXRvci50cmFuc2xhdGUsXG4gICAgICAgIHkgICAgICA6ICfQs9C+0LTQuNC90YMnLFxuICAgICAgICB5eSAgICAgOiB0cmFuc2xhdG9yLnRyYW5zbGF0ZVxuICAgIH0sXG4gICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9XFwuLyxcbiAgICBvcmRpbmFsIDogJyVkLicsXG4gICAgd2VlayA6IHtcbiAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgIGRveSA6IDcgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDFzdCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICB9XG59KTtcblxucmV0dXJuIHNyQ3lybDtcblxufSkpKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3NyLWN5cmwuanMiLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogc2lTd2F0aSBbc3NdXG4vLyEgYXV0aG9yIDogTmljb2xhaSBEYXZpZXM8bWFpbEBuaWNvbGFpLmlvPiA6IGh0dHBzOi8vZ2l0aHViLmNvbS9uaWNvbGFpZGF2aWVzXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuXG52YXIgc3MgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdzcycsIHtcbiAgICBtb250aHMgOiBcIkJoaW1iaWR2d2FuZV9JbmRsb3ZhbmFfSW5kbG92J2xlbmtodWx1X01hYmFzYV9Jbmtod2VraHdldGlfSW5obGFiYV9LaG9sd2FuZV9JbmdjaV9JbnlvbmlfSW1waGFsYV9Md2V0aV9JbmdvbmdvbmlcIi5zcGxpdCgnXycpLFxuICAgIG1vbnRoc1Nob3J0IDogJ0JoaV9JbmFfSW51X01hYl9JbmtfSW5oX0tob19JZ2NfSW55X0ltcF9Md2VfSWdvJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzIDogJ0xpc29udGZvX1Vtc29tYnVsdWtvX0xlc2liaWxpX0xlc2l0c2F0ZnVfTGVzaW5lX0xlc2lobGFudV9VbWdjaWJlbG8nLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNTaG9ydCA6ICdMaXNfVW1iX0xzYl9MZXNfTHNpX0xzaF9VbWcnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNNaW4gOiAnTGlfVXNfTGJfTHRfTHNfTGhfVWcnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgTFQgOiAnaDptbSBBJyxcbiAgICAgICAgTFRTIDogJ2g6bW06c3MgQScsXG4gICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIGg6bW0gQScsXG4gICAgICAgIExMTEwgOiAnZGRkZCwgRCBNTU1NIFlZWVkgaDptbSBBJ1xuICAgIH0sXG4gICAgY2FsZW5kYXIgOiB7XG4gICAgICAgIHNhbWVEYXkgOiAnW05hbXVobGEgbmdhXSBMVCcsXG4gICAgICAgIG5leHREYXkgOiAnW0t1c2FzYSBuZ2FdIExUJyxcbiAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCBbbmdhXSBMVCcsXG4gICAgICAgIGxhc3REYXkgOiAnW0l0b2xvIG5nYV0gTFQnLFxuICAgICAgICBsYXN0V2VlayA6ICdkZGRkIFtsZWxpcGhlbGlsZV0gW25nYV0gTFQnLFxuICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgIH0sXG4gICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICBmdXR1cmUgOiAnbmdhICVzJyxcbiAgICAgICAgcGFzdCA6ICd3ZW50ZWthIG5nYSAlcycsXG4gICAgICAgIHMgOiAnZW1penV6d2FuYSBsb21jYW5lJyxcbiAgICAgICAgbSA6ICd1bXp1enUnLFxuICAgICAgICBtbSA6ICclZCBlbWl6dXp1JyxcbiAgICAgICAgaCA6ICdsaWhvcmEnLFxuICAgICAgICBoaCA6ICclZCBlbWFob3JhJyxcbiAgICAgICAgZCA6ICdsaWxhbmdhJyxcbiAgICAgICAgZGQgOiAnJWQgZW1hbGFuZ2EnLFxuICAgICAgICBNIDogJ2lueWFuZ2EnLFxuICAgICAgICBNTSA6ICclZCB0aW55YW5nYScsXG4gICAgICAgIHkgOiAndW1ueWFrYScsXG4gICAgICAgIHl5IDogJyVkIGltaW55YWthJ1xuICAgIH0sXG4gICAgbWVyaWRpZW1QYXJzZTogL2VrdXNlbml8ZW1pbml8ZW50c2FtYmFtYXxlYnVzdWt1LyxcbiAgICBtZXJpZGllbSA6IGZ1bmN0aW9uIChob3VycywgbWludXRlcywgaXNMb3dlcikge1xuICAgICAgICBpZiAoaG91cnMgPCAxMSkge1xuICAgICAgICAgICAgcmV0dXJuICdla3VzZW5pJztcbiAgICAgICAgfSBlbHNlIGlmIChob3VycyA8IDE1KSB7XG4gICAgICAgICAgICByZXR1cm4gJ2VtaW5pJztcbiAgICAgICAgfSBlbHNlIGlmIChob3VycyA8IDE5KSB7XG4gICAgICAgICAgICByZXR1cm4gJ2VudHNhbWJhbWEnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuICdlYnVzdWt1JztcbiAgICAgICAgfVxuICAgIH0sXG4gICAgbWVyaWRpZW1Ib3VyIDogZnVuY3Rpb24gKGhvdXIsIG1lcmlkaWVtKSB7XG4gICAgICAgIGlmIChob3VyID09PSAxMikge1xuICAgICAgICAgICAgaG91ciA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lcmlkaWVtID09PSAnZWt1c2VuaScpIHtcbiAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAnZW1pbmknKSB7XG4gICAgICAgICAgICByZXR1cm4gaG91ciA+PSAxMSA/IGhvdXIgOiBob3VyICsgMTI7XG4gICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICdlbnRzYW1iYW1hJyB8fCBtZXJpZGllbSA9PT0gJ2VidXN1a3UnKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGhvdXIgKyAxMjtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9LyxcbiAgICBvcmRpbmFsIDogJyVkJyxcbiAgICB3ZWVrIDoge1xuICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgZG95IDogNCAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgIH1cbn0pO1xuXG5yZXR1cm4gc3M7XG5cbn0pKSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9zcy5qcyIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBTd2VkaXNoIFtzdl1cbi8vISBhdXRob3IgOiBKZW5zIEFsbSA6IGh0dHBzOi8vZ2l0aHViLmNvbS91bG11c1xuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciBzdiA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3N2Jywge1xuICAgIG1vbnRocyA6ICdqYW51YXJpX2ZlYnJ1YXJpX21hcnNfYXByaWxfbWFqX2p1bmlfanVsaV9hdWd1c3RpX3NlcHRlbWJlcl9va3RvYmVyX25vdmVtYmVyX2RlY2VtYmVyJy5zcGxpdCgnXycpLFxuICAgIG1vbnRoc1Nob3J0IDogJ2phbl9mZWJfbWFyX2Fwcl9tYWpfanVuX2p1bF9hdWdfc2VwX29rdF9ub3ZfZGVjJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzIDogJ3PDtm5kYWdfbcOlbmRhZ190aXNkYWdfb25zZGFnX3RvcnNkYWdfZnJlZGFnX2zDtnJkYWcnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNTaG9ydCA6ICdzw7ZuX23DpW5fdGlzX29uc190b3JfZnJlX2zDtnInLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNNaW4gOiAnc8O2X23DpV90aV9vbl90b19mcl9sw7YnLnNwbGl0KCdfJyksXG4gICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgTCA6ICdZWVlZLU1NLUREJyxcbiAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgW2tsLl0gSEg6bW0nLFxuICAgICAgICBMTExMIDogJ2RkZGQgRCBNTU1NIFlZWVkgW2tsLl0gSEg6bW0nLFxuICAgICAgICBsbGwgOiAnRCBNTU0gWVlZWSBISDptbScsXG4gICAgICAgIGxsbGwgOiAnZGRkIEQgTU1NIFlZWVkgSEg6bW0nXG4gICAgfSxcbiAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgc2FtZURheTogJ1tJZGFnXSBMVCcsXG4gICAgICAgIG5leHREYXk6ICdbSW1vcmdvbl0gTFQnLFxuICAgICAgICBsYXN0RGF5OiAnW0lnw6VyXSBMVCcsXG4gICAgICAgIG5leHRXZWVrOiAnW1DDpV0gZGRkZCBMVCcsXG4gICAgICAgIGxhc3RXZWVrOiAnW0ldIGRkZGRbc10gTFQnLFxuICAgICAgICBzYW1lRWxzZTogJ0wnXG4gICAgfSxcbiAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgIGZ1dHVyZSA6ICdvbSAlcycsXG4gICAgICAgIHBhc3QgOiAnZsO2ciAlcyBzZWRhbicsXG4gICAgICAgIHMgOiAnbsOlZ3JhIHNla3VuZGVyJyxcbiAgICAgICAgbSA6ICdlbiBtaW51dCcsXG4gICAgICAgIG1tIDogJyVkIG1pbnV0ZXInLFxuICAgICAgICBoIDogJ2VuIHRpbW1lJyxcbiAgICAgICAgaGggOiAnJWQgdGltbWFyJyxcbiAgICAgICAgZCA6ICdlbiBkYWcnLFxuICAgICAgICBkZCA6ICclZCBkYWdhcicsXG4gICAgICAgIE0gOiAnZW4gbcOlbmFkJyxcbiAgICAgICAgTU0gOiAnJWQgbcOlbmFkZXInLFxuICAgICAgICB5IDogJ2V0dCDDpXInLFxuICAgICAgICB5eSA6ICclZCDDpXInXG4gICAgfSxcbiAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0oZXxhKS8sXG4gICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgdmFyIGIgPSBudW1iZXIgJSAxMCxcbiAgICAgICAgICAgIG91dHB1dCA9ICh+fihudW1iZXIgJSAxMDAgLyAxMCkgPT09IDEpID8gJ2UnIDpcbiAgICAgICAgICAgIChiID09PSAxKSA/ICdhJyA6XG4gICAgICAgICAgICAoYiA9PT0gMikgPyAnYScgOlxuICAgICAgICAgICAgKGIgPT09IDMpID8gJ2UnIDogJ2UnO1xuICAgICAgICByZXR1cm4gbnVtYmVyICsgb3V0cHV0O1xuICAgIH0sXG4gICAgd2VlayA6IHtcbiAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICB9XG59KTtcblxucmV0dXJuIHN2O1xuXG59KSkpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvc3YuanMiLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogU3dhaGlsaSBbc3ddXG4vLyEgYXV0aG9yIDogRmFoYWQgS2Fzc2ltIDogaHR0cHM6Ly9naXRodWIuY29tL2ZhZHNlbFxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciBzdyA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3N3Jywge1xuICAgIG1vbnRocyA6ICdKYW51YXJpX0ZlYnJ1YXJpX01hY2hpX0FwcmlsaV9NZWlfSnVuaV9KdWxhaV9BZ29zdGlfU2VwdGVtYmFfT2t0b2JhX05vdmVtYmFfRGVzZW1iYScuc3BsaXQoJ18nKSxcbiAgICBtb250aHNTaG9ydCA6ICdKYW5fRmViX01hY19BcHJfTWVpX0p1bl9KdWxfQWdvX1NlcF9Pa3RfTm92X0Rlcycuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5cyA6ICdKdW1hcGlsaV9KdW1hdGF0dV9KdW1hbm5lX0p1bWF0YW5vX0FsaGFtaXNpX0lqdW1hYV9KdW1hbW9zaScuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1Nob3J0IDogJ0pwbF9KdGF0X0pubmVfSnRhbl9BbGhfSWptX0ptb3MnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNNaW4gOiAnSjJfSjNfSjRfSjVfQWxfSWpfSjEnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICBMIDogJ0RELk1NLllZWVknLFxuICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgIExMTEwgOiAnZGRkZCwgRCBNTU1NIFlZWVkgSEg6bW0nXG4gICAgfSxcbiAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgc2FtZURheSA6ICdbbGVvIHNhYV0gTFQnLFxuICAgICAgICBuZXh0RGF5IDogJ1trZXNobyBzYWFdIExUJyxcbiAgICAgICAgbmV4dFdlZWsgOiAnW3dpa2kgaWpheW9dIGRkZGQgW3NhYXRdIExUJyxcbiAgICAgICAgbGFzdERheSA6ICdbamFuYV0gTFQnLFxuICAgICAgICBsYXN0V2VlayA6ICdbd2lraSBpbGl5b3BpdGFdIGRkZGQgW3NhYXRdIExUJyxcbiAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICB9LFxuICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgZnV0dXJlIDogJyVzIGJhYWRheWUnLFxuICAgICAgICBwYXN0IDogJ3Rva2VhICVzJyxcbiAgICAgICAgcyA6ICdoaXZpIHB1bmRlJyxcbiAgICAgICAgbSA6ICdkYWtpa2EgbW9qYScsXG4gICAgICAgIG1tIDogJ2Rha2lrYSAlZCcsXG4gICAgICAgIGggOiAnc2FhIGxpbW9qYScsXG4gICAgICAgIGhoIDogJ21hc2FhICVkJyxcbiAgICAgICAgZCA6ICdzaWt1IG1vamEnLFxuICAgICAgICBkZCA6ICdtYXNpa3UgJWQnLFxuICAgICAgICBNIDogJ213ZXppIG1tb2phJyxcbiAgICAgICAgTU0gOiAnbWllemkgJWQnLFxuICAgICAgICB5IDogJ213YWthIG1tb2phJyxcbiAgICAgICAgeXkgOiAnbWlha2EgJWQnXG4gICAgfSxcbiAgICB3ZWVrIDoge1xuICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgZG95IDogNyAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gMXN0IGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgIH1cbn0pO1xuXG5yZXR1cm4gc3c7XG5cbn0pKSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9zdy5qcyIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBUYW1pbCBbdGFdXG4vLyEgYXV0aG9yIDogQXJqdW5rdW1hciBLcmlzaG5hbW9vcnRoeSA6IGh0dHBzOi8vZ2l0aHViLmNvbS90azEyMDQwNFxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciBzeW1ib2xNYXAgPSB7XG4gICAgJzEnOiAn4K+nJyxcbiAgICAnMic6ICfgr6gnLFxuICAgICczJzogJ+CvqScsXG4gICAgJzQnOiAn4K+qJyxcbiAgICAnNSc6ICfgr6snLFxuICAgICc2JzogJ+CvrCcsXG4gICAgJzcnOiAn4K+tJyxcbiAgICAnOCc6ICfgr64nLFxuICAgICc5JzogJ+CvrycsXG4gICAgJzAnOiAn4K+mJ1xufTtcbnZhciBudW1iZXJNYXAgPSB7XG4gICAgJ+Cvpyc6ICcxJyxcbiAgICAn4K+oJzogJzInLFxuICAgICfgr6knOiAnMycsXG4gICAgJ+Cvqic6ICc0JyxcbiAgICAn4K+rJzogJzUnLFxuICAgICfgr6wnOiAnNicsXG4gICAgJ+CvrSc6ICc3JyxcbiAgICAn4K+uJzogJzgnLFxuICAgICfgr68nOiAnOScsXG4gICAgJ+Cvpic6ICcwJ1xufTtcblxudmFyIHRhID0gbW9tZW50LmRlZmluZUxvY2FsZSgndGEnLCB7XG4gICAgbW9udGhzIDogJ+CunOCuqeCuteCusOCuv1/grqrgrr/grqrgr43grrDgrrXgrrDgrr9f4K6u4K6+4K6w4K+N4K6a4K+NX+Cuj+CuquCvjeCusOCusuCvjV/grq7gr4df4K6c4K+C4K6p4K+NX+CunOCvguCusuCviF/grobgrpXgrrjgr43grp/gr41f4K6a4K+G4K6q4K+N4K6f4K+G4K6u4K+N4K6q4K6w4K+NX+CuheCuleCvjeCun+Cvh+CuvuCuquCusOCvjV/grqjgrrXgrq7gr43grqrgrrDgr41f4K6f4K6/4K6a4K6u4K+N4K6q4K6w4K+NJy5zcGxpdCgnXycpLFxuICAgIG1vbnRoc1Nob3J0IDogJ+CunOCuqeCuteCusOCuv1/grqrgrr/grqrgr43grrDgrrXgrrDgrr9f4K6u4K6+4K6w4K+N4K6a4K+NX+Cuj+CuquCvjeCusOCusuCvjV/grq7gr4df4K6c4K+C4K6p4K+NX+CunOCvguCusuCviF/grobgrpXgrrjgr43grp/gr41f4K6a4K+G4K6q4K+N4K6f4K+G4K6u4K+N4K6q4K6w4K+NX+CuheCuleCvjeCun+Cvh+CuvuCuquCusOCvjV/grqjgrrXgrq7gr43grqrgrrDgr41f4K6f4K6/4K6a4K6u4K+N4K6q4K6w4K+NJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzIDogJ+CunuCuvuCur+Cuv+CuseCvjeCuseCvgeCuleCvjeCuleCuv+CutOCuruCviF/grqTgrr/grpngr43grpXgrp/gr43grpXgrr/grrTgrq7gr4hf4K6a4K+G4K614K+N4K614K6+4K6v4K+N4K6V4K6/4K604K6u4K+IX+CuquCvgeCupOCuqeCvjeCuleCuv+CutOCuruCviF/grrXgrr/grq/grr7grrTgrpXgr43grpXgrr/grrTgrq7gr4hf4K614K+G4K6z4K+N4K6z4K6/4K6V4K+N4K6V4K6/4K604K6u4K+IX+CumuCuqeCuv+CuleCvjeCuleCuv+CutOCuruCviCcuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1Nob3J0IDogJ+CunuCuvuCur+Cuv+CuseCvgV/grqTgrr/grpngr43grpXgrrPgr41f4K6a4K+G4K614K+N4K614K6+4K6v4K+NX+CuquCvgeCupOCuqeCvjV/grrXgrr/grq/grr7grrTgrqngr41f4K614K+G4K6z4K+N4K6z4K6/X+CumuCuqeCuvycuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c01pbiA6ICfgrp7grr5f4K6k4K6/X+CumuCvhl/grqrgr4Ff4K614K6/X+CuteCvhl/grponLnNwbGl0KCdfJyksXG4gICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVksIEhIOm1tJyxcbiAgICAgICAgTExMTCA6ICdkZGRkLCBEIE1NTU0gWVlZWSwgSEg6bW0nXG4gICAgfSxcbiAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgc2FtZURheSA6ICdb4K6H4K6p4K+N4K6x4K+BXSBMVCcsXG4gICAgICAgIG5leHREYXkgOiAnW+CuqOCuvuCus+CviF0gTFQnLFxuICAgICAgICBuZXh0V2VlayA6ICdkZGRkLCBMVCcsXG4gICAgICAgIGxhc3REYXkgOiAnW+CuqOCvh+CuseCvjeCuseCvgV0gTFQnLFxuICAgICAgICBsYXN0V2VlayA6ICdb4K6V4K6f4K6o4K+N4K6kIOCuteCuvuCusOCuruCvjV0gZGRkZCwgTFQnLFxuICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgIH0sXG4gICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICBmdXR1cmUgOiAnJXMg4K6H4K6y4K+NJyxcbiAgICAgICAgcGFzdCA6ICclcyDgrq7gr4Hgrqngr40nLFxuICAgICAgICBzIDogJ+CukuCusOCvgSDgrprgrr/grrIg4K614K6/4K6o4K6+4K6f4K6/4K6V4K6z4K+NJyxcbiAgICAgICAgbSA6ICfgrpLgrrDgr4Eg4K6o4K6/4K6u4K6/4K6f4K6u4K+NJyxcbiAgICAgICAgbW0gOiAnJWQg4K6o4K6/4K6u4K6/4K6f4K6Z4K+N4K6V4K6z4K+NJyxcbiAgICAgICAgaCA6ICfgrpLgrrDgr4Eg4K6u4K6j4K6/IOCuqOCvh+CusOCuruCvjScsXG4gICAgICAgIGhoIDogJyVkIOCuruCuo+CuvyDgrqjgr4fgrrDgrq7gr40nLFxuICAgICAgICBkIDogJ+CukuCusOCvgSDgrqjgrr7grrPgr40nLFxuICAgICAgICBkZCA6ICclZCDgrqjgrr7grp/gr43grpXgrrPgr40nLFxuICAgICAgICBNIDogJ+CukuCusOCvgSDgrq7grr7grqTgrq7gr40nLFxuICAgICAgICBNTSA6ICclZCDgrq7grr7grqTgrpngr43grpXgrrPgr40nLFxuICAgICAgICB5IDogJ+CukuCusOCvgSDgrrXgrrDgr4Hgrp/grq7gr40nLFxuICAgICAgICB5eSA6ICclZCDgrobgrqPgr43grp/gr4HgrpXgrrPgr40nXG4gICAgfSxcbiAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn3grrXgrqTgr4EvLFxuICAgIG9yZGluYWwgOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgIHJldHVybiBudW1iZXIgKyAn4K614K6k4K+BJztcbiAgICB9LFxuICAgIHByZXBhcnNlOiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvW+Cvp+CvqOCvqeCvquCvq+CvrOCvreCvruCvr+Cvpl0vZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyTWFwW21hdGNoXTtcbiAgICAgICAgfSk7XG4gICAgfSxcbiAgICBwb3N0Zm9ybWF0OiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvXFxkL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgcmV0dXJuIHN5bWJvbE1hcFttYXRjaF07XG4gICAgICAgIH0pO1xuICAgIH0sXG4gICAgLy8gcmVmZXIgaHR0cDovL3RhLndpa2lwZWRpYS5vcmcvcy8xZXIxXG4gICAgbWVyaWRpZW1QYXJzZTogL+Cur+CuvuCuruCuruCvjXzgrrXgr4jgrpXgrrHgr4h84K6V4K6+4K6y4K+IfOCuqOCuo+CvjeCuquCuleCusuCvjXzgro7grrHgr43grqrgrr7grp/gr4F84K6u4K6+4K6y4K+ILyxcbiAgICBtZXJpZGllbSA6IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgaWYgKGhvdXIgPCAyKSB7XG4gICAgICAgICAgICByZXR1cm4gJyDgrq/grr7grq7grq7gr40nO1xuICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCA2KSB7XG4gICAgICAgICAgICByZXR1cm4gJyDgrrXgr4jgrpXgrrHgr4gnOyAgLy8g4K614K+I4K6V4K6x4K+IXG4gICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDEwKSB7XG4gICAgICAgICAgICByZXR1cm4gJyDgrpXgrr7grrLgr4gnOyAvLyDgrpXgrr7grrLgr4hcbiAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTQpIHtcbiAgICAgICAgICAgIHJldHVybiAnIOCuqOCuo+CvjeCuquCuleCusuCvjSc7IC8vIOCuqOCuo+CvjeCuquCuleCusuCvjVxuICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxOCkge1xuICAgICAgICAgICAgcmV0dXJuICcg4K6O4K6x4K+N4K6q4K6+4K6f4K+BJzsgLy8g4K6O4K6x4K+N4K6q4K6+4K6f4K+BXG4gICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDIyKSB7XG4gICAgICAgICAgICByZXR1cm4gJyDgrq7grr7grrLgr4gnOyAvLyDgrq7grr7grrLgr4hcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAnIOCur+CuvuCuruCuruCvjSc7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIG1lcmlkaWVtSG91ciA6IGZ1bmN0aW9uIChob3VyLCBtZXJpZGllbSkge1xuICAgICAgICBpZiAoaG91ciA9PT0gMTIpIHtcbiAgICAgICAgICAgIGhvdXIgPSAwO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXJpZGllbSA9PT0gJ+Cur+CuvuCuruCuruCvjScpIHtcbiAgICAgICAgICAgIHJldHVybiBob3VyIDwgMiA/IGhvdXIgOiBob3VyICsgMTI7XG4gICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfgrrXgr4jgrpXgrrHgr4gnIHx8IG1lcmlkaWVtID09PSAn4K6V4K6+4K6y4K+IJykge1xuICAgICAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfgrqjgrqPgr43grqrgrpXgrrLgr40nKSB7XG4gICAgICAgICAgICByZXR1cm4gaG91ciA+PSAxMCA/IGhvdXIgOiBob3VyICsgMTI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gaG91ciArIDEyO1xuICAgICAgICB9XG4gICAgfSxcbiAgICB3ZWVrIDoge1xuICAgICAgICBkb3cgOiAwLCAvLyBTdW5kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgZG95IDogNiAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gMXN0IGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgIH1cbn0pO1xuXG5yZXR1cm4gdGE7XG5cbn0pKSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS90YS5qcyIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBUZWx1Z3UgW3RlXVxuLy8hIGF1dGhvciA6IEtyaXNobmEgQ2hhaXRhbnlhIFRob3RhIDogaHR0cHM6Ly9naXRodWIuY29tL2tjdGhvdGFcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG52YXIgdGUgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCd0ZScsIHtcbiAgICBtb250aHMgOiAn4LCc4LCo4LC14LCw4LC/X+Cwq+Cwv+CwrOCxjeCwsOCwteCwsOCwv1/gsK7gsL7gsLDgsY3gsJrgsL9f4LCP4LCq4LGN4LCw4LC/4LCy4LGNX+CwruCxh1/gsJzgsYLgsKjgsY1f4LCc4LGC4LCy4LGG4LGWX+CwhuCwl+CwuOCxjeCwn+CxgV/gsLjgsYbgsKrgsY3gsJ/gsYbgsILgsKzgsLDgsY1f4LCF4LCV4LGN4LCf4LGL4LCs4LCw4LGNX+CwqOCwteCwguCwrOCwsOCxjV/gsKHgsL/gsLjgsYbgsILgsKzgsLDgsY0nLnNwbGl0KCdfJyksXG4gICAgbW9udGhzU2hvcnQgOiAn4LCc4LCoLl/gsKvgsL/gsKzgsY3gsLAuX+CwruCwvuCwsOCxjeCwmuCwv1/gsI/gsKrgsY3gsLDgsL8uX+CwruCxh1/gsJzgsYLgsKjgsY1f4LCc4LGC4LCy4LGG4LGWX+CwhuCwly5f4LC44LGG4LCq4LGNLl/gsIXgsJXgsY3gsJ/gsYsuX+CwqOCwtS5f4LCh4LC/4LC44LGGLicuc3BsaXQoJ18nKSxcbiAgICBtb250aHNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICB3ZWVrZGF5cyA6ICfgsIbgsKbgsL/gsLXgsL7gsLDgsIJf4LC44LGL4LCu4LC14LC+4LCw4LCCX+CwruCwguCwl+Cws+CwteCwvuCwsOCwgl/gsKzgsYHgsKfgsLXgsL7gsLDgsIJf4LCX4LGB4LCw4LGB4LC14LC+4LCw4LCCX+CwtuCxgeCwleCxjeCwsOCwteCwvuCwsOCwgl/gsLbgsKjgsL/gsLXgsL7gsLDgsIInLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNTaG9ydCA6ICfgsIbgsKbgsL9f4LC44LGL4LCuX+CwruCwguCwl+Cws1/gsKzgsYHgsKdf4LCX4LGB4LCw4LGBX+CwtuCxgeCwleCxjeCwsF/gsLbgsKjgsL8nLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNNaW4gOiAn4LCGX+CwuOCxi1/gsK7gsIJf4LCs4LGBX+Cwl+CxgV/gsLbgsYFf4LC2Jy5zcGxpdCgnXycpLFxuICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICBMVCA6ICdBIGg6bW0nLFxuICAgICAgICBMVFMgOiAnQSBoOm1tOnNzJyxcbiAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVksIEEgaDptbScsXG4gICAgICAgIExMTEwgOiAnZGRkZCwgRCBNTU1NIFlZWVksIEEgaDptbSdcbiAgICB9LFxuICAgIGNhbGVuZGFyIDoge1xuICAgICAgICBzYW1lRGF5IDogJ1vgsKjgsYfgsKHgsYFdIExUJyxcbiAgICAgICAgbmV4dERheSA6ICdb4LCw4LGH4LCq4LGBXSBMVCcsXG4gICAgICAgIG5leHRXZWVrIDogJ2RkZGQsIExUJyxcbiAgICAgICAgbGFzdERheSA6ICdb4LCo4LC/4LCo4LGN4LCoXSBMVCcsXG4gICAgICAgIGxhc3RXZWVrIDogJ1vgsJfgsKRdIGRkZGQsIExUJyxcbiAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICB9LFxuICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgZnV0dXJlIDogJyVzIOCwsuCxiycsXG4gICAgICAgIHBhc3QgOiAnJXMg4LCV4LGN4LCw4LC/4LCk4LCCJyxcbiAgICAgICAgcyA6ICfgsJXgsYrgsKjgsY3gsKjgsL8g4LCV4LGN4LC34LCj4LC+4LCy4LGBJyxcbiAgICAgICAgbSA6ICfgsJLgsJUg4LCo4LC/4LCu4LC/4LC34LCCJyxcbiAgICAgICAgbW0gOiAnJWQg4LCo4LC/4LCu4LC/4LC34LC+4LCy4LGBJyxcbiAgICAgICAgaCA6ICfgsJLgsJUg4LCX4LCC4LCfJyxcbiAgICAgICAgaGggOiAnJWQg4LCX4LCC4LCf4LCy4LGBJyxcbiAgICAgICAgZCA6ICfgsJLgsJUg4LCw4LGL4LCc4LGBJyxcbiAgICAgICAgZGQgOiAnJWQg4LCw4LGL4LCc4LGB4LCy4LGBJyxcbiAgICAgICAgTSA6ICfgsJLgsJUg4LCo4LGG4LCyJyxcbiAgICAgICAgTU0gOiAnJWQg4LCo4LGG4LCy4LCy4LGBJyxcbiAgICAgICAgeSA6ICfgsJLgsJUg4LC44LCC4LC14LCk4LGN4LC44LCw4LCCJyxcbiAgICAgICAgeXkgOiAnJWQg4LC44LCC4LC14LCk4LGN4LC44LCw4LC+4LCy4LGBJ1xuICAgIH0sXG4gICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZSA6IC9cXGR7MSwyfeCwtS8sXG4gICAgb3JkaW5hbCA6ICclZOCwtScsXG4gICAgbWVyaWRpZW1QYXJzZTogL+CwsOCwvuCwpOCxjeCwsOCwv3zgsIngsKbgsK/gsIJ84LCu4LCn4LGN4LCv4LC+4LC54LGN4LCo4LCCfOCwuOCwvuCwr+CwguCwpOCxjeCwsOCwgi8sXG4gICAgbWVyaWRpZW1Ib3VyIDogZnVuY3Rpb24gKGhvdXIsIG1lcmlkaWVtKSB7XG4gICAgICAgIGlmIChob3VyID09PSAxMikge1xuICAgICAgICAgICAgaG91ciA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lcmlkaWVtID09PSAn4LCw4LC+4LCk4LGN4LCw4LC/Jykge1xuICAgICAgICAgICAgcmV0dXJuIGhvdXIgPCA0ID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ+CwieCwpuCwr+CwgicpIHtcbiAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn4LCu4LCn4LGN4LCv4LC+4LC54LGN4LCo4LCCJykge1xuICAgICAgICAgICAgcmV0dXJuIGhvdXIgPj0gMTAgPyBob3VyIDogaG91ciArIDEyO1xuICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn4LC44LC+4LCv4LCC4LCk4LGN4LCw4LCCJykge1xuICAgICAgICAgICAgcmV0dXJuIGhvdXIgKyAxMjtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgbWVyaWRpZW0gOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgIGlmIChob3VyIDwgNCkge1xuICAgICAgICAgICAgcmV0dXJuICfgsLDgsL7gsKTgsY3gsLDgsL8nO1xuICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxMCkge1xuICAgICAgICAgICAgcmV0dXJuICfgsIngsKbgsK/gsIInO1xuICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxNykge1xuICAgICAgICAgICAgcmV0dXJuICfgsK7gsKfgsY3gsK/gsL7gsLngsY3gsKjgsIInO1xuICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAyMCkge1xuICAgICAgICAgICAgcmV0dXJuICfgsLjgsL7gsK/gsILgsKTgsY3gsLDgsIInO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuICfgsLDgsL7gsKTgsY3gsLDgsL8nO1xuICAgICAgICB9XG4gICAgfSxcbiAgICB3ZWVrIDoge1xuICAgICAgICBkb3cgOiAwLCAvLyBTdW5kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgZG95IDogNiAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gMXN0IGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgIH1cbn0pO1xuXG5yZXR1cm4gdGU7XG5cbn0pKSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS90ZS5qcyIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBUZXR1biBEaWxpIChFYXN0IFRpbW9yKSBbdGV0XVxuLy8hIGF1dGhvciA6IEpvc2h1YSBCcm9va3MgOiBodHRwczovL2dpdGh1Yi5jb20vam9zaGJyb29rc1xuLy8hIGF1dGhvciA6IE9ub3JpbyBEZSBKLiBBZm9uc28gOiBodHRwczovL2dpdGh1Yi5jb20vbWFyb2JvXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxudmFyIHRldCA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3RldCcsIHtcbiAgICBtb250aHMgOiAnSmFuZWlydV9GZXZlcmVpcnVfTWFyc3VfQWJyaWxfTWFpdV9KdW5pdV9KdWxpdV9BdWd1c3R1X1NldGVtYnJ1X091dHVicnVfTm92ZW1icnVfRGV6ZW1icnUnLnNwbGl0KCdfJyksXG4gICAgbW9udGhzU2hvcnQgOiAnSmFuX0Zldl9NYXJfQWJyX01haV9KdW5fSnVsX0F1Z19TZXRfT3V0X05vdl9EZXonLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXMgOiAnRG9taW5ndV9TZWd1bmRhX1RlcnNhX0t1YXJ0YV9LaW50YV9TZXh0YV9TYWJhZHUnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNTaG9ydCA6ICdEb21fU2VnX1RlcnNfS3VhX0tpbnRfU2V4dF9TYWInLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNNaW4gOiAnRG9fU2VnX1RlX0t1X0tpX1NleF9TYScuc3BsaXQoJ18nKSxcbiAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgIExMTEwgOiAnZGRkZCwgRCBNTU1NIFlZWVkgSEg6bW0nXG4gICAgfSxcbiAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgc2FtZURheTogJ1tPaGluIGloYV0gTFQnLFxuICAgICAgICBuZXh0RGF5OiAnW0FiYW4gaWhhXSBMVCcsXG4gICAgICAgIG5leHRXZWVrOiAnZGRkZCBbaWhhXSBMVCcsXG4gICAgICAgIGxhc3REYXk6ICdbSG9yaXNlaWsgaWhhXSBMVCcsXG4gICAgICAgIGxhc3RXZWVrOiAnZGRkZCBbc2VtYW5hIGtvdHVrXSBbaWhhXSBMVCcsXG4gICAgICAgIHNhbWVFbHNlOiAnTCdcbiAgICB9LFxuICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgZnV0dXJlIDogJ2loYSAlcycsXG4gICAgICAgIHBhc3QgOiAnJXMgbGl1YmEnLFxuICAgICAgICBzIDogJ21pbnV0dSBiYWx1bicsXG4gICAgICAgIG0gOiAnbWludXR1IGlkYScsXG4gICAgICAgIG1tIDogJ21pbnV0dXMgJWQnLFxuICAgICAgICBoIDogJ2hvcmFzIGlkYScsXG4gICAgICAgIGhoIDogJ2hvcmFzICVkJyxcbiAgICAgICAgZCA6ICdsb3JvbiBpZGEnLFxuICAgICAgICBkZCA6ICdsb3JvbiAlZCcsXG4gICAgICAgIE0gOiAnZnVsYW4gaWRhJyxcbiAgICAgICAgTU0gOiAnZnVsYW4gJWQnLFxuICAgICAgICB5IDogJ3RpbmFuIGlkYScsXG4gICAgICAgIHl5IDogJ3RpbmFuICVkJ1xuICAgIH0sXG4gICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9KHN0fG5kfHJkfHRoKS8sXG4gICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgdmFyIGIgPSBudW1iZXIgJSAxMCxcbiAgICAgICAgICAgIG91dHB1dCA9ICh+fihudW1iZXIgJSAxMDAgLyAxMCkgPT09IDEpID8gJ3RoJyA6XG4gICAgICAgICAgICAoYiA9PT0gMSkgPyAnc3QnIDpcbiAgICAgICAgICAgIChiID09PSAyKSA/ICduZCcgOlxuICAgICAgICAgICAgKGIgPT09IDMpID8gJ3JkJyA6ICd0aCc7XG4gICAgICAgIHJldHVybiBudW1iZXIgKyBvdXRwdXQ7XG4gICAgfSxcbiAgICB3ZWVrIDoge1xuICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgZG95IDogNCAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgIH1cbn0pO1xuXG5yZXR1cm4gdGV0O1xuXG59KSkpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvdGV0LmpzIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IFRoYWkgW3RoXVxuLy8hIGF1dGhvciA6IEtyaWRzYWRhIFRoYW5hYnVscG9uZyA6IGh0dHBzOi8vZ2l0aHViLmNvbS9zaXJuXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxudmFyIHRoID0gbW9tZW50LmRlZmluZUxvY2FsZSgndGgnLCB7XG4gICAgbW9udGhzIDogJ+C4oeC4geC4o+C4suC4hOC4oV/guIHguLjguKHguKDguLLguJ7guLHguJnguJjguYxf4Lih4Li14LiZ4Liy4LiE4LihX+C5gOC4oeC4qeC4suC4ouC4mV/guJ7guKTguKnguKDguLLguITguKFf4Lih4Li04LiW4Li44LiZ4Liy4Lii4LiZX+C4geC4o+C4geC4juC4suC4hOC4oV/guKrguLTguIfguKvguLLguITguKFf4LiB4Lix4LiZ4Lii4Liy4Lii4LiZX+C4leC4uOC4peC4suC4hOC4oV/guJ7guKTguKjguIjguLTguIHguLLguKLguJlf4LiY4Lix4LiZ4Lin4Liy4LiE4LihJy5zcGxpdCgnXycpLFxuICAgIG1vbnRoc1Nob3J0IDogJ+C4oS7guIQuX+C4gS7guJ4uX+C4oeC4tS7guIQuX+C5gOC4oS7guKIuX+C4ni7guIQuX+C4oeC4tC7guKIuX+C4gS7guIQuX+C4qi7guIQuX+C4gS7guKIuX+C4lS7guIQuX+C4ni7guKIuX+C4mC7guIQuJy5zcGxpdCgnXycpLFxuICAgIG1vbnRoc1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgd2Vla2RheXMgOiAn4Lit4Liy4LiX4Li04LiV4Lii4LmMX+C4iOC4seC4meC4l+C4o+C5jF/guK3guLHguIfguITguLLguKNf4Lie4Li44LiYX+C4nuC4pOC4q+C4seC4quC4muC4lOC4tV/guKjguLjguIHguKPguYxf4LmA4Liq4Liy4Lij4LmMJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzU2hvcnQgOiAn4Lit4Liy4LiX4Li04LiV4Lii4LmMX+C4iOC4seC4meC4l+C4o+C5jF/guK3guLHguIfguITguLLguKNf4Lie4Li44LiYX+C4nuC4pOC4q+C4seC4ql/guKjguLjguIHguKPguYxf4LmA4Liq4Liy4Lij4LmMJy5zcGxpdCgnXycpLCAvLyB5ZXMsIHRocmVlIGNoYXJhY3RlcnMgZGlmZmVyZW5jZVxuICAgIHdlZWtkYXlzTWluIDogJ+C4reC4si5f4LiILl/guK0uX+C4ni5f4Lie4LikLl/guKguX+C4qi4nLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgTFQgOiAnSDptbScsXG4gICAgICAgIExUUyA6ICdIOm1tOnNzJyxcbiAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkg4LmA4Lin4Lil4LiyIEg6bW0nLFxuICAgICAgICBMTExMIDogJ+C4p+C4seC4mWRkZGTguJfguLXguYggRCBNTU1NIFlZWVkg4LmA4Lin4Lil4LiyIEg6bW0nXG4gICAgfSxcbiAgICBtZXJpZGllbVBhcnNlOiAv4LiB4LmI4Lit4LiZ4LmA4LiX4Li14LmI4Lii4LiHfOC4q+C4peC4seC4h+C5gOC4l+C4teC5iOC4ouC4hy8sXG4gICAgaXNQTTogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgIHJldHVybiBpbnB1dCA9PT0gJ+C4q+C4peC4seC4h+C5gOC4l+C4teC5iOC4ouC4hyc7XG4gICAgfSxcbiAgICBtZXJpZGllbSA6IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgaWYgKGhvdXIgPCAxMikge1xuICAgICAgICAgICAgcmV0dXJuICfguIHguYjguK3guJnguYDguJfguLXguYjguKLguIcnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuICfguKvguKXguLHguIfguYDguJfguLXguYjguKLguIcnO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgc2FtZURheSA6ICdb4Lin4Lix4LiZ4LiZ4Li14LmJIOC5gOC4p+C4peC4sl0gTFQnLFxuICAgICAgICBuZXh0RGF5IDogJ1vguJ7guKPguLjguYjguIfguJnguLXguYkg4LmA4Lin4Lil4LiyXSBMVCcsXG4gICAgICAgIG5leHRXZWVrIDogJ2RkZGRb4Lir4LiZ4LmJ4LiyIOC5gOC4p+C4peC4sl0gTFQnLFxuICAgICAgICBsYXN0RGF5IDogJ1vguYDguKHguLfguYjguK3guKfguLLguJnguJnguLXguYkg4LmA4Lin4Lil4LiyXSBMVCcsXG4gICAgICAgIGxhc3RXZWVrIDogJ1vguKfguLHguJldZGRkZFvguJfguLXguYjguYHguKXguYnguKcg4LmA4Lin4Lil4LiyXSBMVCcsXG4gICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgfSxcbiAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgIGZ1dHVyZSA6ICfguK3guLXguIEgJXMnLFxuICAgICAgICBwYXN0IDogJyVz4LiX4Li14LmI4LmB4Lil4LmJ4LinJyxcbiAgICAgICAgcyA6ICfguYTguKHguYjguIHguLXguYjguKfguLTguJnguLLguJfguLUnLFxuICAgICAgICBtIDogJzEg4LiZ4Liy4LiX4Li1JyxcbiAgICAgICAgbW0gOiAnJWQg4LiZ4Liy4LiX4Li1JyxcbiAgICAgICAgaCA6ICcxIOC4iuC4seC5iOC4p+C5guC4oeC4hycsXG4gICAgICAgIGhoIDogJyVkIOC4iuC4seC5iOC4p+C5guC4oeC4hycsXG4gICAgICAgIGQgOiAnMSDguKfguLHguJknLFxuICAgICAgICBkZCA6ICclZCDguKfguLHguJknLFxuICAgICAgICBNIDogJzEg4LmA4LiU4Li34Lit4LiZJyxcbiAgICAgICAgTU0gOiAnJWQg4LmA4LiU4Li34Lit4LiZJyxcbiAgICAgICAgeSA6ICcxIOC4m+C4tScsXG4gICAgICAgIHl5IDogJyVkIOC4m+C4tSdcbiAgICB9XG59KTtcblxucmV0dXJuIHRoO1xuXG59KSkpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvdGguanMiLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogVGFnYWxvZyAoUGhpbGlwcGluZXMpIFt0bC1waF1cbi8vISBhdXRob3IgOiBEYW4gSGFnbWFuIDogaHR0cHM6Ly9naXRodWIuY29tL2hhZ21hbmRhblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciB0bFBoID0gbW9tZW50LmRlZmluZUxvY2FsZSgndGwtcGgnLCB7XG4gICAgbW9udGhzIDogJ0VuZXJvX1BlYnJlcm9fTWFyc29fQWJyaWxfTWF5b19IdW55b19IdWx5b19BZ29zdG9fU2V0eWVtYnJlX09rdHVicmVfTm9ieWVtYnJlX0Rpc3llbWJyZScuc3BsaXQoJ18nKSxcbiAgICBtb250aHNTaG9ydCA6ICdFbmVfUGViX01hcl9BYnJfTWF5X0h1bl9IdWxfQWdvX1NldF9Pa3RfTm9iX0Rpcycuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5cyA6ICdMaW5nZ29fTHVuZXNfTWFydGVzX01peWVya3VsZXNfSHV3ZWJlc19CaXllcm5lc19TYWJhZG8nLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNTaG9ydCA6ICdMaW5fTHVuX01hcl9NaXlfSHV3X0JpeV9TYWInLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNNaW4gOiAnTGlfTHVfTWFfTWlfSHVfQmlfU2FiJy5zcGxpdCgnXycpLFxuICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgIEwgOiAnTU0vRC9ZWVlZJyxcbiAgICAgICAgTEwgOiAnTU1NTSBELCBZWVlZJyxcbiAgICAgICAgTExMIDogJ01NTU0gRCwgWVlZWSBISDptbScsXG4gICAgICAgIExMTEwgOiAnZGRkZCwgTU1NTSBERCwgWVlZWSBISDptbSdcbiAgICB9LFxuICAgIGNhbGVuZGFyIDoge1xuICAgICAgICBzYW1lRGF5OiAnTFQgW25nYXlvbmcgYXJhd10nLFxuICAgICAgICBuZXh0RGF5OiAnW0J1a2FzIG5nXSBMVCcsXG4gICAgICAgIG5leHRXZWVrOiAnTFQgW3NhIHN1c3Vub2QgbmFdIGRkZGQnLFxuICAgICAgICBsYXN0RGF5OiAnTFQgW2thaGFwb25dJyxcbiAgICAgICAgbGFzdFdlZWs6ICdMVCBbbm9vbmcgbmFrYXJhYW5nXSBkZGRkJyxcbiAgICAgICAgc2FtZUVsc2U6ICdMJ1xuICAgIH0sXG4gICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICBmdXR1cmUgOiAnc2EgbG9vYiBuZyAlcycsXG4gICAgICAgIHBhc3QgOiAnJXMgYW5nIG5ha2FsaXBhcycsXG4gICAgICAgIHMgOiAnaWxhbmcgc2VndW5kbycsXG4gICAgICAgIG0gOiAnaXNhbmcgbWludXRvJyxcbiAgICAgICAgbW0gOiAnJWQgbWludXRvJyxcbiAgICAgICAgaCA6ICdpc2FuZyBvcmFzJyxcbiAgICAgICAgaGggOiAnJWQgb3JhcycsXG4gICAgICAgIGQgOiAnaXNhbmcgYXJhdycsXG4gICAgICAgIGRkIDogJyVkIGFyYXcnLFxuICAgICAgICBNIDogJ2lzYW5nIGJ1d2FuJyxcbiAgICAgICAgTU0gOiAnJWQgYnV3YW4nLFxuICAgICAgICB5IDogJ2lzYW5nIHRhb24nLFxuICAgICAgICB5eSA6ICclZCB0YW9uJ1xuICAgIH0sXG4gICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9LyxcbiAgICBvcmRpbmFsIDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICByZXR1cm4gbnVtYmVyO1xuICAgIH0sXG4gICAgd2VlayA6IHtcbiAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICB9XG59KTtcblxucmV0dXJuIHRsUGg7XG5cbn0pKSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS90bC1waC5qcyIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBLbGluZ29uIFt0bGhdXG4vLyEgYXV0aG9yIDogRG9taW5pa2EgS3J1ayA6IGh0dHBzOi8vZ2l0aHViLmNvbS9hbWFyYW50aHJvc2VcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG52YXIgbnVtYmVyc05vdW5zID0gJ3BhZ2hfd2HigJlfY2hh4oCZX3dlal9sb1NfdmFnaF9qYXZfU29jaF9jaG9yZ2hfSHV0Jy5zcGxpdCgnXycpO1xuXG5mdW5jdGlvbiB0cmFuc2xhdGVGdXR1cmUob3V0cHV0KSB7XG4gICAgdmFyIHRpbWUgPSBvdXRwdXQ7XG4gICAgdGltZSA9IChvdXRwdXQuaW5kZXhPZignamFqJykgIT09IC0xKSA/XG4gICAgdGltZS5zbGljZSgwLCAtMykgKyAnbGVTJyA6XG4gICAgKG91dHB1dC5pbmRleE9mKCdqYXInKSAhPT0gLTEpID9cbiAgICB0aW1lLnNsaWNlKDAsIC0zKSArICd3YVEnIDpcbiAgICAob3V0cHV0LmluZGV4T2YoJ0RJUycpICE9PSAtMSkgP1xuICAgIHRpbWUuc2xpY2UoMCwgLTMpICsgJ25lbScgOlxuICAgIHRpbWUgKyAnIHBJcSc7XG4gICAgcmV0dXJuIHRpbWU7XG59XG5cbmZ1bmN0aW9uIHRyYW5zbGF0ZVBhc3Qob3V0cHV0KSB7XG4gICAgdmFyIHRpbWUgPSBvdXRwdXQ7XG4gICAgdGltZSA9IChvdXRwdXQuaW5kZXhPZignamFqJykgIT09IC0xKSA/XG4gICAgdGltZS5zbGljZSgwLCAtMykgKyAnSHXigJknIDpcbiAgICAob3V0cHV0LmluZGV4T2YoJ2phcicpICE9PSAtMSkgP1xuICAgIHRpbWUuc2xpY2UoMCwgLTMpICsgJ3dlbicgOlxuICAgIChvdXRwdXQuaW5kZXhPZignRElTJykgIT09IC0xKSA/XG4gICAgdGltZS5zbGljZSgwLCAtMykgKyAnYmVuJyA6XG4gICAgdGltZSArICcgcmV0JztcbiAgICByZXR1cm4gdGltZTtcbn1cblxuZnVuY3Rpb24gdHJhbnNsYXRlKG51bWJlciwgd2l0aG91dFN1ZmZpeCwgc3RyaW5nLCBpc0Z1dHVyZSkge1xuICAgIHZhciBudW1iZXJOb3VuID0gbnVtYmVyQXNOb3VuKG51bWJlcik7XG4gICAgc3dpdGNoIChzdHJpbmcpIHtcbiAgICAgICAgY2FzZSAnbW0nOlxuICAgICAgICAgICAgcmV0dXJuIG51bWJlck5vdW4gKyAnIHR1cCc7XG4gICAgICAgIGNhc2UgJ2hoJzpcbiAgICAgICAgICAgIHJldHVybiBudW1iZXJOb3VuICsgJyByZXAnO1xuICAgICAgICBjYXNlICdkZCc6XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyTm91biArICcgamFqJztcbiAgICAgICAgY2FzZSAnTU0nOlxuICAgICAgICAgICAgcmV0dXJuIG51bWJlck5vdW4gKyAnIGphcic7XG4gICAgICAgIGNhc2UgJ3l5JzpcbiAgICAgICAgICAgIHJldHVybiBudW1iZXJOb3VuICsgJyBESVMnO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gbnVtYmVyQXNOb3VuKG51bWJlcikge1xuICAgIHZhciBodW5kcmVkID0gTWF0aC5mbG9vcigobnVtYmVyICUgMTAwMCkgLyAxMDApLFxuICAgIHRlbiA9IE1hdGguZmxvb3IoKG51bWJlciAlIDEwMCkgLyAxMCksXG4gICAgb25lID0gbnVtYmVyICUgMTAsXG4gICAgd29yZCA9ICcnO1xuICAgIGlmIChodW5kcmVkID4gMCkge1xuICAgICAgICB3b3JkICs9IG51bWJlcnNOb3Vuc1todW5kcmVkXSArICd2YXRsaCc7XG4gICAgfVxuICAgIGlmICh0ZW4gPiAwKSB7XG4gICAgICAgIHdvcmQgKz0gKCh3b3JkICE9PSAnJykgPyAnICcgOiAnJykgKyBudW1iZXJzTm91bnNbdGVuXSArICdtYUgnO1xuICAgIH1cbiAgICBpZiAob25lID4gMCkge1xuICAgICAgICB3b3JkICs9ICgod29yZCAhPT0gJycpID8gJyAnIDogJycpICsgbnVtYmVyc05vdW5zW29uZV07XG4gICAgfVxuICAgIHJldHVybiAod29yZCA9PT0gJycpID8gJ3BhZ2gnIDogd29yZDtcbn1cblxudmFyIHRsaCA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3RsaCcsIHtcbiAgICBtb250aHMgOiAndGVyYeKAmSBqYXIgd2HigJlfdGVyYeKAmSBqYXIgY2hh4oCZX3RlcmHigJkgamFyIHdlal90ZXJh4oCZIGphciBsb1NfdGVyYeKAmSBqYXIgdmFnaF90ZXJh4oCZIGphciBqYXZfdGVyYeKAmSBqYXIgU29jaF90ZXJh4oCZIGphciBjaG9yZ2hfdGVyYeKAmSBqYXIgSHV0X3RlcmHigJkgamFyIHdh4oCZbWFIX3RlcmHigJkgamFyIHdh4oCZbWFIIHdh4oCZX3RlcmHigJkgamFyIHdh4oCZbWFIIGNoYeKAmScuc3BsaXQoJ18nKSxcbiAgICBtb250aHNTaG9ydCA6ICdqYXIgd2HigJlfamFyIGNoYeKAmV9qYXIgd2VqX2phciBsb1NfamFyIHZhZ2hfamFyIGphdl9qYXIgU29jaF9qYXIgY2hvcmdoX2phciBIdXRfamFyIHdh4oCZbWFIX2phciB3YeKAmW1hSCB3YeKAmV9qYXIgd2HigJltYUggY2hh4oCZJy5zcGxpdCgnXycpLFxuICAgIG1vbnRoc1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgIHdlZWtkYXlzIDogJ2xvam1JdGphal9EYVNqYWpfcG92amFqX2doSXRsaGphal9sb2doamFqX2J1cWphal9naEluamFqJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzU2hvcnQgOiAnbG9qbUl0amFqX0RhU2phal9wb3ZqYWpfZ2hJdGxoamFqX2xvZ2hqYWpfYnVxamFqX2doSW5qYWonLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNNaW4gOiAnbG9qbUl0amFqX0RhU2phal9wb3ZqYWpfZ2hJdGxoamFqX2xvZ2hqYWpfYnVxamFqX2doSW5qYWonLnNwbGl0KCdfJyksXG4gICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgTCA6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICBMTExMIDogJ2RkZGQsIEQgTU1NTSBZWVlZIEhIOm1tJ1xuICAgIH0sXG4gICAgY2FsZW5kYXIgOiB7XG4gICAgICAgIHNhbWVEYXk6ICdbRGFIamFqXSBMVCcsXG4gICAgICAgIG5leHREYXk6ICdbd2HigJlsZVNdIExUJyxcbiAgICAgICAgbmV4dFdlZWs6ICdMTEwnLFxuICAgICAgICBsYXN0RGF5OiAnW3dh4oCZSHXigJldIExUJyxcbiAgICAgICAgbGFzdFdlZWs6ICdMTEwnLFxuICAgICAgICBzYW1lRWxzZTogJ0wnXG4gICAgfSxcbiAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgIGZ1dHVyZSA6IHRyYW5zbGF0ZUZ1dHVyZSxcbiAgICAgICAgcGFzdCA6IHRyYW5zbGF0ZVBhc3QsXG4gICAgICAgIHMgOiAncHVTIGx1cCcsXG4gICAgICAgIG0gOiAnd2HigJkgdHVwJyxcbiAgICAgICAgbW0gOiB0cmFuc2xhdGUsXG4gICAgICAgIGggOiAnd2HigJkgcmVwJyxcbiAgICAgICAgaGggOiB0cmFuc2xhdGUsXG4gICAgICAgIGQgOiAnd2HigJkgamFqJyxcbiAgICAgICAgZGQgOiB0cmFuc2xhdGUsXG4gICAgICAgIE0gOiAnd2HigJkgamFyJyxcbiAgICAgICAgTU0gOiB0cmFuc2xhdGUsXG4gICAgICAgIHkgOiAnd2HigJkgRElTJyxcbiAgICAgICAgeXkgOiB0cmFuc2xhdGVcbiAgICB9LFxuICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfVxcLi8sXG4gICAgb3JkaW5hbCA6ICclZC4nLFxuICAgIHdlZWsgOiB7XG4gICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgfVxufSk7XG5cbnJldHVybiB0bGg7XG5cbn0pKSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS90bGguanMiLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogVHVya2lzaCBbdHJdXG4vLyEgYXV0aG9ycyA6IEVyaGFuIEd1bmRvZ2FuIDogaHR0cHM6Ly9naXRodWIuY29tL2VyaGFuZ3VuZG9nYW4sXG4vLyEgICAgICAgICAgIEJ1cmFrIFlpxJ9pdCBLYXlhOiBodHRwczovL2dpdGh1Yi5jb20vQllLXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxudmFyIHN1ZmZpeGVzID0ge1xuICAgIDE6ICdcXCdpbmNpJyxcbiAgICA1OiAnXFwnaW5jaScsXG4gICAgODogJ1xcJ2luY2knLFxuICAgIDcwOiAnXFwnaW5jaScsXG4gICAgODA6ICdcXCdpbmNpJyxcbiAgICAyOiAnXFwnbmNpJyxcbiAgICA3OiAnXFwnbmNpJyxcbiAgICAyMDogJ1xcJ25jaScsXG4gICAgNTA6ICdcXCduY2knLFxuICAgIDM6ICdcXCfDvG5jw7wnLFxuICAgIDQ6ICdcXCfDvG5jw7wnLFxuICAgIDEwMDogJ1xcJ8O8bmPDvCcsXG4gICAgNjogJ1xcJ25jxLEnLFxuICAgIDk6ICdcXCd1bmN1JyxcbiAgICAxMDogJ1xcJ3VuY3UnLFxuICAgIDMwOiAnXFwndW5jdScsXG4gICAgNjA6ICdcXCfEsW5jxLEnLFxuICAgIDkwOiAnXFwnxLFuY8SxJ1xufTtcblxudmFyIHRyID0gbW9tZW50LmRlZmluZUxvY2FsZSgndHInLCB7XG4gICAgbW9udGhzIDogJ09jYWtfxZ51YmF0X01hcnRfTmlzYW5fTWF5xLFzX0hhemlyYW5fVGVtbXV6X0HEn3VzdG9zX0V5bMO8bF9Fa2ltX0thc8SxbV9BcmFsxLFrJy5zcGxpdCgnXycpLFxuICAgIG1vbnRoc1Nob3J0IDogJ09jYV/FnnViX01hcl9OaXNfTWF5X0hhel9UZW1fQcSfdV9FeWxfRWtpX0thc19BcmEnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXMgOiAnUGF6YXJfUGF6YXJ0ZXNpX1NhbMSxX8OHYXLFn2FtYmFfUGVyxZ9lbWJlX0N1bWFfQ3VtYXJ0ZXNpJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzU2hvcnQgOiAnUGF6X1B0c19TYWxfw4dhcl9QZXJfQ3VtX0N0cycuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c01pbiA6ICdQel9QdF9TYV/Dh2FfUGVfQ3VfQ3QnLnNwbGl0KCdfJyksXG4gICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgTCA6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICBMTExMIDogJ2RkZGQsIEQgTU1NTSBZWVlZIEhIOm1tJ1xuICAgIH0sXG4gICAgY2FsZW5kYXIgOiB7XG4gICAgICAgIHNhbWVEYXkgOiAnW2J1Z8O8biBzYWF0XSBMVCcsXG4gICAgICAgIG5leHREYXkgOiAnW3lhcsSxbiBzYWF0XSBMVCcsXG4gICAgICAgIG5leHRXZWVrIDogJ1tnZWxlY2VrXSBkZGRkIFtzYWF0XSBMVCcsXG4gICAgICAgIGxhc3REYXkgOiAnW2TDvG5dIExUJyxcbiAgICAgICAgbGFzdFdlZWsgOiAnW2dlw6dlbl0gZGRkZCBbc2FhdF0gTFQnLFxuICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgIH0sXG4gICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICBmdXR1cmUgOiAnJXMgc29ucmEnLFxuICAgICAgICBwYXN0IDogJyVzIMO2bmNlJyxcbiAgICAgICAgcyA6ICdiaXJrYcOnIHNhbml5ZScsXG4gICAgICAgIG0gOiAnYmlyIGRha2lrYScsXG4gICAgICAgIG1tIDogJyVkIGRha2lrYScsXG4gICAgICAgIGggOiAnYmlyIHNhYXQnLFxuICAgICAgICBoaCA6ICclZCBzYWF0JyxcbiAgICAgICAgZCA6ICdiaXIgZ8O8bicsXG4gICAgICAgIGRkIDogJyVkIGfDvG4nLFxuICAgICAgICBNIDogJ2JpciBheScsXG4gICAgICAgIE1NIDogJyVkIGF5JyxcbiAgICAgICAgeSA6ICdiaXIgecSxbCcsXG4gICAgICAgIHl5IDogJyVkIHnEsWwnXG4gICAgfSxcbiAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0nKGluY2l8bmNpfMO8bmPDvHxuY8SxfHVuY3V8xLFuY8SxKS8sXG4gICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgaWYgKG51bWJlciA9PT0gMCkgeyAgLy8gc3BlY2lhbCBjYXNlIGZvciB6ZXJvXG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJ1xcJ8SxbmPEsSc7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGEgPSBudW1iZXIgJSAxMCxcbiAgICAgICAgICAgIGIgPSBudW1iZXIgJSAxMDAgLSBhLFxuICAgICAgICAgICAgYyA9IG51bWJlciA+PSAxMDAgPyAxMDAgOiBudWxsO1xuICAgICAgICByZXR1cm4gbnVtYmVyICsgKHN1ZmZpeGVzW2FdIHx8IHN1ZmZpeGVzW2JdIHx8IHN1ZmZpeGVzW2NdKTtcbiAgICB9LFxuICAgIHdlZWsgOiB7XG4gICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICBkb3kgOiA3ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiAxc3QgaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgfVxufSk7XG5cbnJldHVybiB0cjtcblxufSkpKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3RyLmpzIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IFRhbG9zc2FuIFt0emxdXG4vLyEgYXV0aG9yIDogUm9iaW4gdmFuIGRlciBWbGlldCA6IGh0dHBzOi8vZ2l0aHViLmNvbS9yb2JpbjB2YW4wZGVyMHZcbi8vISBhdXRob3IgOiBJdXN0w6wgQ2FudW5cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4vLyBBZnRlciB0aGUgeWVhciB0aGVyZSBzaG91bGQgYmUgYSBzbGFzaCBhbmQgdGhlIGFtb3VudCBvZiB5ZWFycyBzaW5jZSBEZWNlbWJlciAyNiwgMTk3OSBpbiBSb21hbiBudW1lcmFscy5cbi8vIFRoaXMgaXMgY3VycmVudGx5IHRvbyBkaWZmaWN1bHQgKG1heWJlIGV2ZW4gaW1wb3NzaWJsZSkgdG8gYWRkLlxudmFyIHR6bCA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3R6bCcsIHtcbiAgICBtb250aHMgOiAnSmFudWFyX0ZldnJhZ2xoX01hcsOnX0F2csOvdV9NYWlfR8O8bl9KdWxpYV9HdXNjaHRfU2V0ZW12YXJfTGlzdG9ww6R0c19Ob2VtdmFyX1plY2VtdmFyJy5zcGxpdCgnXycpLFxuICAgIG1vbnRoc1Nob3J0IDogJ0phbl9GZXZfTWFyX0F2cl9NYWlfR8O8bl9KdWxfR3VzX1NldF9MaXNfTm9lX1plYycuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5cyA6ICdTw7psYWRpX0zDum5lw6dpX01haXR6aV9Nw6FyY3VyaV9YaMO6YWRpX1Zpw6luZXLDp2lfU8OhdHVyaScuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1Nob3J0IDogJ1PDumxfTMO6bl9NYWlfTcOhcl9YaMO6X1Zpw6lfU8OhdCcuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c01pbiA6ICdTw7pfTMO6X01hX03DoV9YaF9WaV9Tw6EnLnNwbGl0KCdfJyksXG4gICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgIExUIDogJ0hILm1tJyxcbiAgICAgICAgTFRTIDogJ0hILm1tLnNzJyxcbiAgICAgICAgTCA6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgTEwgOiAnRC4gTU1NTSBbZGFsbGFzXSBZWVlZJyxcbiAgICAgICAgTExMIDogJ0QuIE1NTU0gW2RhbGxhc10gWVlZWSBISC5tbScsXG4gICAgICAgIExMTEwgOiAnZGRkZCwgW2xpXSBELiBNTU1NIFtkYWxsYXNdIFlZWVkgSEgubW0nXG4gICAgfSxcbiAgICBtZXJpZGllbVBhcnNlOiAvZFxcJ298ZFxcJ2EvaSxcbiAgICBpc1BNIDogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgIHJldHVybiAnZFxcJ28nID09PSBpbnB1dC50b0xvd2VyQ2FzZSgpO1xuICAgIH0sXG4gICAgbWVyaWRpZW0gOiBmdW5jdGlvbiAoaG91cnMsIG1pbnV0ZXMsIGlzTG93ZXIpIHtcbiAgICAgICAgaWYgKGhvdXJzID4gMTEpIHtcbiAgICAgICAgICAgIHJldHVybiBpc0xvd2VyID8gJ2RcXCdvJyA6ICdEXFwnTyc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gaXNMb3dlciA/ICdkXFwnYScgOiAnRFxcJ0EnO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgc2FtZURheSA6ICdbb3hoaSDDoF0gTFQnLFxuICAgICAgICBuZXh0RGF5IDogJ1tkZW3DoCDDoF0gTFQnLFxuICAgICAgICBuZXh0V2VlayA6ICdkZGRkIFvDoF0gTFQnLFxuICAgICAgICBsYXN0RGF5IDogJ1tpZWlyaSDDoF0gTFQnLFxuICAgICAgICBsYXN0V2VlayA6ICdbc8O8ciBlbF0gZGRkZCBbbGFzdGV1IMOgXSBMVCcsXG4gICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgfSxcbiAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgIGZ1dHVyZSA6ICdvc3ByZWkgJXMnLFxuICAgICAgICBwYXN0IDogJ2phJXMnLFxuICAgICAgICBzIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgbSA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgIG1tIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgaCA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgIGhoIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgZCA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgIGRkIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgTSA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgIE1NIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgeSA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgIHl5IDogcHJvY2Vzc1JlbGF0aXZlVGltZVxuICAgIH0sXG4gICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9XFwuLyxcbiAgICBvcmRpbmFsIDogJyVkLicsXG4gICAgd2VlayA6IHtcbiAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICB9XG59KTtcblxuZnVuY3Rpb24gcHJvY2Vzc1JlbGF0aXZlVGltZShudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGtleSwgaXNGdXR1cmUpIHtcbiAgICB2YXIgZm9ybWF0ID0ge1xuICAgICAgICAncyc6IFsndmllbnNhcyBzZWN1bmRzJywgJ1xcJ2llbnNhcyBzZWN1bmRzJ10sXG4gICAgICAgICdtJzogWydcXCduIG3DrXV0JywgJ1xcJ2llbnMgbcOtdXQnXSxcbiAgICAgICAgJ21tJzogW251bWJlciArICcgbcOtdXRzJywgJycgKyBudW1iZXIgKyAnIG3DrXV0cyddLFxuICAgICAgICAnaCc6IFsnXFwnbiDDvm9yYScsICdcXCdpZW5zYSDDvm9yYSddLFxuICAgICAgICAnaGgnOiBbbnVtYmVyICsgJyDDvm9yYXMnLCAnJyArIG51bWJlciArICcgw75vcmFzJ10sXG4gICAgICAgICdkJzogWydcXCduIHppdWEnLCAnXFwnaWVuc2Egeml1YSddLFxuICAgICAgICAnZGQnOiBbbnVtYmVyICsgJyB6aXVhcycsICcnICsgbnVtYmVyICsgJyB6aXVhcyddLFxuICAgICAgICAnTSc6IFsnXFwnbiBtZXMnLCAnXFwnaWVucyBtZXMnXSxcbiAgICAgICAgJ01NJzogW251bWJlciArICcgbWVzZW4nLCAnJyArIG51bWJlciArICcgbWVzZW4nXSxcbiAgICAgICAgJ3knOiBbJ1xcJ24gYXInLCAnXFwnaWVucyBhciddLFxuICAgICAgICAneXknOiBbbnVtYmVyICsgJyBhcnMnLCAnJyArIG51bWJlciArICcgYXJzJ11cbiAgICB9O1xuICAgIHJldHVybiBpc0Z1dHVyZSA/IGZvcm1hdFtrZXldWzBdIDogKHdpdGhvdXRTdWZmaXggPyBmb3JtYXRba2V5XVswXSA6IGZvcm1hdFtrZXldWzFdKTtcbn1cblxucmV0dXJuIHR6bDtcblxufSkpKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3R6bC5qcyIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBDZW50cmFsIEF0bGFzIFRhbWF6aWdodCBbdHptXVxuLy8hIGF1dGhvciA6IEFiZGVsIFNhaWQgOiBodHRwczovL2dpdGh1Yi5jb20vYWJkZWxzYWlkXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxudmFyIHR6bSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3R6bScsIHtcbiAgICBtb250aHMgOiAn4rWJ4rWP4rWP4rSw4rWi4rWUX+K0seK1leK0sOK1ouK1lV/itY7itLDitZXitZpf4rWJ4rSx4rWU4rWJ4rWUX+K1juK0sOK1ouK1ouK1k1/itaLitZPitY/itaLitZNf4rWi4rWT4rWN4rWi4rWT4rWjX+K1luK1k+K1m+K1nF/itZvitZPitZzitLDitY/itLHitYnitZRf4rS94rWf4rWT4rSx4rWVX+K1j+K1k+K1oeK0sOK1j+K0seK1ieK1lF/itLfitZPitYritY/itLHitYnitZQnLnNwbGl0KCdfJyksXG4gICAgbW9udGhzU2hvcnQgOiAn4rWJ4rWP4rWP4rSw4rWi4rWUX+K0seK1leK0sOK1ouK1lV/itY7itLDitZXitZpf4rWJ4rSx4rWU4rWJ4rWUX+K1juK0sOK1ouK1ouK1k1/itaLitZPitY/itaLitZNf4rWi4rWT4rWN4rWi4rWT4rWjX+K1luK1k+K1m+K1nF/itZvitZPitZzitLDitY/itLHitYnitZRf4rS94rWf4rWT4rSx4rWVX+K1j+K1k+K1oeK0sOK1j+K0seK1ieK1lF/itLfitZPitYritY/itLHitYnitZQnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXMgOiAn4rSw4rWZ4rSw4rWO4rSw4rWZX+K0sOK1ouK1j+K0sOK1mV/itLDitZnitYnitY/itLDitZlf4rSw4rS94rWU4rSw4rWZX+K0sOK0veK1oeK0sOK1mV/itLDitZnitYnitY7itaHitLDitZlf4rSw4rWZ4rWJ4rS54rWi4rSw4rWZJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzU2hvcnQgOiAn4rSw4rWZ4rSw4rWO4rSw4rWZX+K0sOK1ouK1j+K0sOK1mV/itLDitZnitYnitY/itLDitZlf4rSw4rS94rWU4rSw4rWZX+K0sOK0veK1oeK0sOK1mV/itLDitZnitYnitY7itaHitLDitZlf4rSw4rWZ4rWJ4rS54rWi4rSw4rWZJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzTWluIDogJ+K0sOK1meK0sOK1juK0sOK1mV/itLDitaLitY/itLDitZlf4rSw4rWZ4rWJ4rWP4rSw4rWZX+K0sOK0veK1lOK0sOK1mV/itLDitL3itaHitLDitZlf4rSw4rWZ4rWJ4rWO4rWh4rSw4rWZX+K0sOK1meK1ieK0ueK1ouK0sOK1mScuc3BsaXQoJ18nKSxcbiAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgTExMTCA6ICdkZGRkIEQgTU1NTSBZWVlZIEhIOm1tJ1xuICAgIH0sXG4gICAgY2FsZW5kYXIgOiB7XG4gICAgICAgIHNhbWVEYXk6ICdb4rSw4rWZ4rS34rWFIOK0tF0gTFQnLFxuICAgICAgICBuZXh0RGF5OiAnW+K0sOK1meK0veK0sCDitLRdIExUJyxcbiAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFvitLRdIExUJyxcbiAgICAgICAgbGFzdERheTogJ1vitLDitZritLDitY/itZwg4rS0XSBMVCcsXG4gICAgICAgIGxhc3RXZWVrOiAnZGRkZCBb4rS0XSBMVCcsXG4gICAgICAgIHNhbWVFbHNlOiAnTCdcbiAgICB9LFxuICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgZnV0dXJlIDogJ+K0t+K0sOK0t+K1hSDitZkg4rWi4rSw4rWPICVzJyxcbiAgICAgICAgcGFzdCA6ICfitaLitLDitY8gJXMnLFxuICAgICAgICBzIDogJ+K1ieK1juK1ieK0vScsXG4gICAgICAgIG0gOiAn4rWO4rWJ4rWP4rWT4rS6JyxcbiAgICAgICAgbW0gOiAnJWQg4rWO4rWJ4rWP4rWT4rS6JyxcbiAgICAgICAgaCA6ICfitZnitLDitYTitLAnLFxuICAgICAgICBoaCA6ICclZCDitZzitLDitZnitZnitLDitYTitYnitY8nLFxuICAgICAgICBkIDogJ+K0sOK1meK1mScsXG4gICAgICAgIGRkIDogJyVkIG/itZnitZnitLDitY8nLFxuICAgICAgICBNIDogJ+K0sOK1om/itZPitZQnLFxuICAgICAgICBNTSA6ICclZCDitYnitaLitaLitYnitZTitY8nLFxuICAgICAgICB5IDogJ+K0sOK1meK0s+K0sOK1mScsXG4gICAgICAgIHl5IDogJyVkIOK1ieK1meK0s+K0sOK1meK1jydcbiAgICB9LFxuICAgIHdlZWsgOiB7XG4gICAgICAgIGRvdyA6IDYsIC8vIFNhdHVyZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgIGRveSA6IDEyICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiAxc3QgaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgfVxufSk7XG5cbnJldHVybiB0em07XG5cbn0pKSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS90em0uanMiLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogQ2VudHJhbCBBdGxhcyBUYW1hemlnaHQgTGF0aW4gW3R6bS1sYXRuXVxuLy8hIGF1dGhvciA6IEFiZGVsIFNhaWQgOiBodHRwczovL2dpdGh1Yi5jb20vYWJkZWxzYWlkXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxudmFyIHR6bUxhdG4gPSBtb21lbnQuZGVmaW5lTG9jYWxlKCd0em0tbGF0bicsIHtcbiAgICBtb250aHMgOiAnaW5uYXlyX2Jyy6RheXLLpF9tYXLLpHPLpF9pYnJpcl9tYXl5d195d255d195d2x5d3pfyaN3xaF0X8Whd3RhbmJpcl9rdMukd2Jyy6Rfbnd3YW5iaXJfZHdqbmJpcicuc3BsaXQoJ18nKSxcbiAgICBtb250aHNTaG9ydCA6ICdpbm5heXJfYnLLpGF5csukX21hcsukc8ukX2licmlyX21heXl3X3l3bnl3X3l3bHl3el/Jo3fFoXRfxaF3dGFuYmlyX2t0y6R3YnLLpF9ud3dhbmJpcl9kd2puYmlyJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzIDogJ2FzYW1hc19heW5hc19hc2luYXNfYWtyYXNfYWt3YXNfYXNpbXdhc19hc2nhuI15YXMnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNTaG9ydCA6ICdhc2FtYXNfYXluYXNfYXNpbmFzX2FrcmFzX2Frd2FzX2FzaW13YXNfYXNp4biNeWFzJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzTWluIDogJ2FzYW1hc19heW5hc19hc2luYXNfYWtyYXNfYWt3YXNfYXNpbXdhc19hc2nhuI15YXMnLnNwbGl0KCdfJyksXG4gICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICBMTExMIDogJ2RkZGQgRCBNTU1NIFlZWVkgSEg6bW0nXG4gICAgfSxcbiAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgc2FtZURheTogJ1thc2RraCBnXSBMVCcsXG4gICAgICAgIG5leHREYXk6ICdbYXNrYSBnXSBMVCcsXG4gICAgICAgIG5leHRXZWVrOiAnZGRkZCBbZ10gTFQnLFxuICAgICAgICBsYXN0RGF5OiAnW2Fzc2FudCBnXSBMVCcsXG4gICAgICAgIGxhc3RXZWVrOiAnZGRkZCBbZ10gTFQnLFxuICAgICAgICBzYW1lRWxzZTogJ0wnXG4gICAgfSxcbiAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgIGZ1dHVyZSA6ICdkYWRraCBzIHlhbiAlcycsXG4gICAgICAgIHBhc3QgOiAneWFuICVzJyxcbiAgICAgICAgcyA6ICdpbWlrJyxcbiAgICAgICAgbSA6ICdtaW514biNJyxcbiAgICAgICAgbW0gOiAnJWQgbWludeG4jScsXG4gICAgICAgIGggOiAnc2HJm2EnLFxuICAgICAgICBoaCA6ICclZCB0YXNzYcmbaW4nLFxuICAgICAgICBkIDogJ2FzcycsXG4gICAgICAgIGRkIDogJyVkIG9zc2FuJyxcbiAgICAgICAgTSA6ICdheW93cicsXG4gICAgICAgIE1NIDogJyVkIGl5eWlybicsXG4gICAgICAgIHkgOiAnYXNnYXMnLFxuICAgICAgICB5eSA6ICclZCBpc2dhc24nXG4gICAgfSxcbiAgICB3ZWVrIDoge1xuICAgICAgICBkb3cgOiA2LCAvLyBTYXR1cmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICBkb3kgOiAxMiAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gMXN0IGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgIH1cbn0pO1xuXG5yZXR1cm4gdHptTGF0bjtcblxufSkpKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3R6bS1sYXRuLmpzIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IFVrcmFpbmlhbiBbdWtdXG4vLyEgYXV0aG9yIDogemVtbGFuaW4gOiBodHRwczovL2dpdGh1Yi5jb20vemVtbGFuaW5cbi8vISBBdXRob3IgOiBNZW5lbGlvbiBFbGVuc8O6bGUgOiBodHRwczovL2dpdGh1Yi5jb20vT2lyZVxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbmZ1bmN0aW9uIHBsdXJhbCh3b3JkLCBudW0pIHtcbiAgICB2YXIgZm9ybXMgPSB3b3JkLnNwbGl0KCdfJyk7XG4gICAgcmV0dXJuIG51bSAlIDEwID09PSAxICYmIG51bSAlIDEwMCAhPT0gMTEgPyBmb3Jtc1swXSA6IChudW0gJSAxMCA+PSAyICYmIG51bSAlIDEwIDw9IDQgJiYgKG51bSAlIDEwMCA8IDEwIHx8IG51bSAlIDEwMCA+PSAyMCkgPyBmb3Jtc1sxXSA6IGZvcm1zWzJdKTtcbn1cbmZ1bmN0aW9uIHJlbGF0aXZlVGltZVdpdGhQbHVyYWwobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXkpIHtcbiAgICB2YXIgZm9ybWF0ID0ge1xuICAgICAgICAnbW0nOiB3aXRob3V0U3VmZml4ID8gJ9GF0LLQuNC70LjQvdCwX9GF0LLQuNC70LjQvdC4X9GF0LLQuNC70LjQvScgOiAn0YXQstC40LvQuNC90YNf0YXQstC40LvQuNC90Lhf0YXQstC40LvQuNC9JyxcbiAgICAgICAgJ2hoJzogd2l0aG91dFN1ZmZpeCA/ICfQs9C+0LTQuNC90LBf0LPQvtC00LjQvdC4X9Cz0L7QtNC40L0nIDogJ9Cz0L7QtNC40L3Rg1/Qs9C+0LTQuNC90Lhf0LPQvtC00LjQvScsXG4gICAgICAgICdkZCc6ICfQtNC10L3RjF/QtNC90ZZf0LTQvdGW0LInLFxuICAgICAgICAnTU0nOiAn0LzRltGB0Y/RhtGMX9C80ZbRgdGP0YbRll/QvNGW0YHRj9GG0ZbQsicsXG4gICAgICAgICd5eSc6ICfRgNGW0Lpf0YDQvtC60Lhf0YDQvtC60ZbQsidcbiAgICB9O1xuICAgIGlmIChrZXkgPT09ICdtJykge1xuICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCA/ICfRhdCy0LjQu9C40L3QsCcgOiAn0YXQstC40LvQuNC90YMnO1xuICAgIH1cbiAgICBlbHNlIGlmIChrZXkgPT09ICdoJykge1xuICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCA/ICfQs9C+0LTQuNC90LAnIDogJ9Cz0L7QtNC40L3Rgyc7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gbnVtYmVyICsgJyAnICsgcGx1cmFsKGZvcm1hdFtrZXldLCArbnVtYmVyKTtcbiAgICB9XG59XG5mdW5jdGlvbiB3ZWVrZGF5c0Nhc2VSZXBsYWNlKG0sIGZvcm1hdCkge1xuICAgIHZhciB3ZWVrZGF5cyA9IHtcbiAgICAgICAgJ25vbWluYXRpdmUnOiAn0L3QtdC00ZbQu9GPX9C/0L7QvdC10LTRltC70L7Qul/QstGW0LLRgtC+0YDQvtC6X9GB0LXRgNC10LTQsF/Rh9C10YLQstC10YBf0L/igJnRj9GC0L3QuNGG0Y9f0YHRg9Cx0L7RgtCwJy5zcGxpdCgnXycpLFxuICAgICAgICAnYWNjdXNhdGl2ZSc6ICfQvdC10LTRltC70Y5f0L/QvtC90LXQtNGW0LvQvtC6X9Cy0ZbQstGC0L7RgNC+0Lpf0YHQtdGA0LXQtNGDX9GH0LXRgtCy0LXRgF/Qv+KAmdGP0YLQvdC40YbRjl/RgdGD0LHQvtGC0YMnLnNwbGl0KCdfJyksXG4gICAgICAgICdnZW5pdGl2ZSc6ICfQvdC10LTRltC70ZZf0L/QvtC90LXQtNGW0LvQutCwX9Cy0ZbQstGC0L7RgNC60LBf0YHQtdGA0LXQtNC4X9GH0LXRgtCy0LXRgNCz0LBf0L/igJnRj9GC0L3QuNGG0ZZf0YHRg9Cx0L7RgtC4Jy5zcGxpdCgnXycpXG4gICAgfTtcblxuICAgIGlmICghbSkge1xuICAgICAgICByZXR1cm4gd2Vla2RheXNbJ25vbWluYXRpdmUnXTtcbiAgICB9XG5cbiAgICB2YXIgbm91bkNhc2UgPSAoLyhcXFtb0JLQstCj0YNdXFxdKSA/ZGRkZC8pLnRlc3QoZm9ybWF0KSA/XG4gICAgICAgICdhY2N1c2F0aXZlJyA6XG4gICAgICAgICgoL1xcWz8oPzrQvNC40L3Rg9C70L7Rl3zQvdCw0YHRgtGD0L/QvdC+0ZcpPyA/XFxdID9kZGRkLykudGVzdChmb3JtYXQpID9cbiAgICAgICAgICAgICdnZW5pdGl2ZScgOlxuICAgICAgICAgICAgJ25vbWluYXRpdmUnKTtcbiAgICByZXR1cm4gd2Vla2RheXNbbm91bkNhc2VdW20uZGF5KCldO1xufVxuZnVuY3Rpb24gcHJvY2Vzc0hvdXJzRnVuY3Rpb24oc3RyKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHN0ciArICfQvicgKyAodGhpcy5ob3VycygpID09PSAxMSA/ICfQsScgOiAnJykgKyAnXSBMVCc7XG4gICAgfTtcbn1cblxudmFyIHVrID0gbW9tZW50LmRlZmluZUxvY2FsZSgndWsnLCB7XG4gICAgbW9udGhzIDoge1xuICAgICAgICAnZm9ybWF0JzogJ9GB0ZbRh9C90Y9f0LvRjtGC0L7Qs9C+X9Cx0LXRgNC10LfQvdGPX9C60LLRltGC0L3Rj1/RgtGA0LDQstC90Y9f0YfQtdGA0LLQvdGPX9C70LjQv9C90Y9f0YHQtdGA0L/QvdGPX9Cy0LXRgNC10YHQvdGPX9C20L7QstGC0L3Rj1/Qu9C40YHRgtC+0L/QsNC00LBf0LPRgNGD0LTQvdGPJy5zcGxpdCgnXycpLFxuICAgICAgICAnc3RhbmRhbG9uZSc6ICfRgdGW0YfQtdC90Yxf0LvRjtGC0LjQuV/QsdC10YDQtdC30LXQvdGMX9C60LLRltGC0LXQvdGMX9GC0YDQsNCy0LXQvdGMX9GH0LXRgNCy0LXQvdGMX9C70LjQv9C10L3RjF/RgdC10YDQv9C10L3RjF/QstC10YDQtdGB0LXQvdGMX9C20L7QstGC0LXQvdGMX9C70LjRgdGC0L7Qv9Cw0LRf0LPRgNGD0LTQtdC90YwnLnNwbGl0KCdfJylcbiAgICB9LFxuICAgIG1vbnRoc1Nob3J0IDogJ9GB0ZbRh1/Qu9GO0YJf0LHQtdGAX9C60LLRltGCX9GC0YDQsNCyX9GH0LXRgNCyX9C70LjQv1/RgdC10YDQv1/QstC10YBf0LbQvtCy0YJf0LvQuNGB0YJf0LPRgNGD0LQnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXMgOiB3ZWVrZGF5c0Nhc2VSZXBsYWNlLFxuICAgIHdlZWtkYXlzU2hvcnQgOiAn0L3QtF/Qv9C9X9Cy0YJf0YHRgF/Rh9GCX9C/0YJf0YHQsScuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c01pbiA6ICfQvdC0X9C/0L1f0LLRgl/RgdGAX9GH0YJf0L/Rgl/RgdCxJy5zcGxpdCgnXycpLFxuICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgIEwgOiAnREQuTU0uWVlZWScsXG4gICAgICAgIExMIDogJ0QgTU1NTSBZWVlZINGALicsXG4gICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSDRgC4sIEhIOm1tJyxcbiAgICAgICAgTExMTCA6ICdkZGRkLCBEIE1NTU0gWVlZWSDRgC4sIEhIOm1tJ1xuICAgIH0sXG4gICAgY2FsZW5kYXIgOiB7XG4gICAgICAgIHNhbWVEYXk6IHByb2Nlc3NIb3Vyc0Z1bmN0aW9uKCdb0KHRjNC+0LPQvtC00L3RliAnKSxcbiAgICAgICAgbmV4dERheTogcHJvY2Vzc0hvdXJzRnVuY3Rpb24oJ1vQl9Cw0LLRgtGA0LAgJyksXG4gICAgICAgIGxhc3REYXk6IHByb2Nlc3NIb3Vyc0Z1bmN0aW9uKCdb0JLRh9C+0YDQsCAnKSxcbiAgICAgICAgbmV4dFdlZWs6IHByb2Nlc3NIb3Vyc0Z1bmN0aW9uKCdb0KNdIGRkZGQgWycpLFxuICAgICAgICBsYXN0V2VlazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgc3dpdGNoICh0aGlzLmRheSgpKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHJvY2Vzc0hvdXJzRnVuY3Rpb24oJ1vQnNC40L3Rg9C70L7Rl10gZGRkZCBbJykuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHByb2Nlc3NIb3Vyc0Z1bmN0aW9uKCdb0JzQuNC90YPQu9C+0LPQvl0gZGRkZCBbJykuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgc2FtZUVsc2U6ICdMJ1xuICAgIH0sXG4gICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICBmdXR1cmUgOiAn0LfQsCAlcycsXG4gICAgICAgIHBhc3QgOiAnJXMg0YLQvtC80YMnLFxuICAgICAgICBzIDogJ9C00LXQutGW0LvRjNC60LAg0YHQtdC60YPQvdC0JyxcbiAgICAgICAgbSA6IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgIG1tIDogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgaCA6ICfQs9C+0LTQuNC90YMnLFxuICAgICAgICBoaCA6IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgIGQgOiAn0LTQtdC90YwnLFxuICAgICAgICBkZCA6IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgIE0gOiAn0LzRltGB0Y/RhtGMJyxcbiAgICAgICAgTU0gOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICB5IDogJ9GA0ZbQuicsXG4gICAgICAgIHl5IDogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbFxuICAgIH0sXG4gICAgLy8gTS4gRS46IHRob3NlIHR3byBhcmUgdmlydHVhbGx5IHVudXNlZCBidXQgYSB1c2VyIG1pZ2h0IHdhbnQgdG8gaW1wbGVtZW50IHRoZW0gZm9yIGhpcy9oZXIgd2Vic2l0ZSBmb3Igc29tZSByZWFzb25cbiAgICBtZXJpZGllbVBhcnNlOiAv0L3QvtGH0ZZ80YDQsNC90LrRg3zQtNC90Y980LLQtdGH0L7RgNCwLyxcbiAgICBpc1BNOiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIC9eKNC00L3Rj3zQstC10YfQvtGA0LApJC8udGVzdChpbnB1dCk7XG4gICAgfSxcbiAgICBtZXJpZGllbSA6IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgaWYgKGhvdXIgPCA0KSB7XG4gICAgICAgICAgICByZXR1cm4gJ9C90L7Rh9GWJztcbiAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTIpIHtcbiAgICAgICAgICAgIHJldHVybiAn0YDQsNC90LrRgyc7XG4gICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDE3KSB7XG4gICAgICAgICAgICByZXR1cm4gJ9C00L3Rjyc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gJ9Cy0LXRh9C+0YDQsCc7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfS0o0Ll80LPQvikvLFxuICAgIG9yZGluYWw6IGZ1bmN0aW9uIChudW1iZXIsIHBlcmlvZCkge1xuICAgICAgICBzd2l0Y2ggKHBlcmlvZCkge1xuICAgICAgICAgICAgY2FzZSAnTSc6XG4gICAgICAgICAgICBjYXNlICdkJzpcbiAgICAgICAgICAgIGNhc2UgJ0RERCc6XG4gICAgICAgICAgICBjYXNlICd3JzpcbiAgICAgICAgICAgIGNhc2UgJ1cnOlxuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnLdC5JztcbiAgICAgICAgICAgIGNhc2UgJ0QnOlxuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnLdCz0L4nO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyO1xuICAgICAgICB9XG4gICAgfSxcbiAgICB3ZWVrIDoge1xuICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgZG95IDogNyAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gMXN0IGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgIH1cbn0pO1xuXG5yZXR1cm4gdWs7XG5cbn0pKSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS91ay5qcyIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBVcmR1IFt1cl1cbi8vISBhdXRob3IgOiBTYXdvb2QgQWxhbSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9pYm5lc2F5ZWVkXG4vLyEgYXV0aG9yIDogWmFjayA6IGh0dHBzOi8vZ2l0aHViLmNvbS9aYWNrVmlzaW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxudmFyIG1vbnRocyA9IFtcbiAgICAn2KzZhtmI2LHbjCcsXG4gICAgJ9mB2LHZiNix24wnLFxuICAgICfZhdin2LHahicsXG4gICAgJ9in2b7YsduM2YQnLFxuICAgICfZhdim24wnLFxuICAgICfYrNmI2YYnLFxuICAgICfYrNmI2YTYp9im24wnLFxuICAgICfYp9qv2LPYqicsXG4gICAgJ9iz2KrZhdio2LEnLFxuICAgICfYp9qp2KrZiNio2LEnLFxuICAgICfZhtmI2YXYqNixJyxcbiAgICAn2K/Ys9mF2KjYsSdcbl07XG52YXIgZGF5cyA9IFtcbiAgICAn2KfYqtmI2KfYsScsXG4gICAgJ9m+24zYsScsXG4gICAgJ9mF2Ybar9mEJyxcbiAgICAn2KjYr9q+JyxcbiAgICAn2KzZhdi52LHYp9iqJyxcbiAgICAn2KzZhdi524EnLFxuICAgICfbgdmB2KrbgSdcbl07XG5cbnZhciB1ciA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3VyJywge1xuICAgIG1vbnRocyA6IG1vbnRocyxcbiAgICBtb250aHNTaG9ydCA6IG1vbnRocyxcbiAgICB3ZWVrZGF5cyA6IGRheXMsXG4gICAgd2Vla2RheXNTaG9ydCA6IGRheXMsXG4gICAgd2Vla2RheXNNaW4gOiBkYXlzLFxuICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgTExMTCA6ICdkZGRk2IwgRCBNTU1NIFlZWVkgSEg6bW0nXG4gICAgfSxcbiAgICBtZXJpZGllbVBhcnNlOiAv2LXYqNitfNi02KfZhS8sXG4gICAgaXNQTSA6IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICByZXR1cm4gJ9i02KfZhScgPT09IGlucHV0O1xuICAgIH0sXG4gICAgbWVyaWRpZW0gOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgIGlmIChob3VyIDwgMTIpIHtcbiAgICAgICAgICAgIHJldHVybiAn2LXYqNitJztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJ9i02KfZhSc7XG4gICAgfSxcbiAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgc2FtZURheSA6ICdb2KLYrCDYqNmI2YLYql0gTFQnLFxuICAgICAgICBuZXh0RGF5IDogJ1vaqdmEINio2YjZgtiqXSBMVCcsXG4gICAgICAgIG5leHRXZWVrIDogJ2RkZGQgW9io2YjZgtiqXSBMVCcsXG4gICAgICAgIGxhc3REYXkgOiAnW9qv2LDYtNiq24Eg2LHZiNiyINio2YjZgtiqXSBMVCcsXG4gICAgICAgIGxhc3RXZWVrIDogJ1var9iw2LTYqtuBXSBkZGRkIFvYqNmI2YLYql0gTFQnLFxuICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgIH0sXG4gICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICBmdXR1cmUgOiAnJXMg2KjYudivJyxcbiAgICAgICAgcGFzdCA6ICclcyDZgtio2YQnLFxuICAgICAgICBzIDogJ9qG2YbYryDYs9uM2qnZhtqIJyxcbiAgICAgICAgbSA6ICfYp9uM2qkg2YXZhtm5JyxcbiAgICAgICAgbW0gOiAnJWQg2YXZhtm5JyxcbiAgICAgICAgaCA6ICfYp9uM2qkg2q/avtmG2bnbgScsXG4gICAgICAgIGhoIDogJyVkINqv2r7Zhtm525InLFxuICAgICAgICBkIDogJ9in24zaqSDYr9mGJyxcbiAgICAgICAgZGQgOiAnJWQg2K/ZhicsXG4gICAgICAgIE0gOiAn2KfbjNqpINmF2KfbgScsXG4gICAgICAgIE1NIDogJyVkINmF2KfbgScsXG4gICAgICAgIHkgOiAn2KfbjNqpINiz2KfZhCcsXG4gICAgICAgIHl5IDogJyVkINiz2KfZhCdcbiAgICB9LFxuICAgIHByZXBhcnNlOiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgv2IwvZywgJywnKTtcbiAgICB9LFxuICAgIHBvc3Rmb3JtYXQ6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC8sL2csICfYjCcpO1xuICAgIH0sXG4gICAgd2VlayA6IHtcbiAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICB9XG59KTtcblxucmV0dXJuIHVyO1xuXG59KSkpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvdXIuanMiLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogVXpiZWsgW3V6XVxuLy8hIGF1dGhvciA6IFNhcmRvciBNdW1pbm92IDogaHR0cHM6Ly9naXRodWIuY29tL211bWlub2ZmXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxudmFyIHV6ID0gbW9tZW50LmRlZmluZUxvY2FsZSgndXonLCB7XG4gICAgbW9udGhzIDogJ9GP0L3QstCw0YBf0YTQtdCy0YDQsNC7X9C80LDRgNGCX9Cw0L/RgNC10Ltf0LzQsNC5X9C40Y7QvV/QuNGO0Ltf0LDQstCz0YPRgdGCX9GB0LXQvdGC0Y/QsdGAX9C+0LrRgtGP0LHRgF/QvdC+0Y/QsdGAX9C00LXQutCw0LHRgCcuc3BsaXQoJ18nKSxcbiAgICBtb250aHNTaG9ydCA6ICfRj9C90LJf0YTQtdCyX9C80LDRgF/QsNC/0YBf0LzQsNC5X9C40Y7QvV/QuNGO0Ltf0LDQstCzX9GB0LXQvV/QvtC60YJf0L3QvtGPX9C00LXQuicuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5cyA6ICfQr9C60YjQsNC90LHQsF/QlNGD0YjQsNC90LHQsF/QodC10YjQsNC90LHQsF/Qp9C+0YDRiNCw0L3QsdCwX9Cf0LDQudGI0LDQvdCx0LBf0JbRg9C80LBf0KjQsNC90LHQsCcuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1Nob3J0IDogJ9Cv0LrRiF/QlNGD0Yhf0KHQtdGIX9Cn0L7RgF/Qn9Cw0Llf0JbRg9C8X9Co0LDQvScuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c01pbiA6ICfQr9C6X9CU0YNf0KHQtV/Qp9C+X9Cf0LBf0JbRg1/QqNCwJy5zcGxpdCgnXycpLFxuICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgTExMTCA6ICdEIE1NTU0gWVlZWSwgZGRkZCBISDptbSdcbiAgICB9LFxuICAgIGNhbGVuZGFyIDoge1xuICAgICAgICBzYW1lRGF5IDogJ1vQkdGD0LPRg9C9INGB0L7QsNGCXSBMVCBb0LTQsF0nLFxuICAgICAgICBuZXh0RGF5IDogJ1vQrdGA0YLQsNCz0LBdIExUIFvQtNCwXScsXG4gICAgICAgIG5leHRXZWVrIDogJ2RkZGQgW9C60YPQvdC4INGB0L7QsNGCXSBMVCBb0LTQsF0nLFxuICAgICAgICBsYXN0RGF5IDogJ1vQmtC10YfQsCDRgdC+0LDRgl0gTFQgW9C00LBdJyxcbiAgICAgICAgbGFzdFdlZWsgOiAnW9Cj0YLQs9Cw0L1dIGRkZGQgW9C60YPQvdC4INGB0L7QsNGCXSBMVCBb0LTQsF0nLFxuICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgIH0sXG4gICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICBmdXR1cmUgOiAn0K/QutC40L0gJXMg0LjRh9C40LTQsCcsXG4gICAgICAgIHBhc3QgOiAn0JHQuNGAINC90LXRh9CwICVzINC+0LvQtNC40L0nLFxuICAgICAgICBzIDogJ9GE0YPRgNGB0LDRgicsXG4gICAgICAgIG0gOiAn0LHQuNGAINC00LDQutC40LrQsCcsXG4gICAgICAgIG1tIDogJyVkINC00LDQutC40LrQsCcsXG4gICAgICAgIGggOiAn0LHQuNGAINGB0L7QsNGCJyxcbiAgICAgICAgaGggOiAnJWQg0YHQvtCw0YInLFxuICAgICAgICBkIDogJ9Cx0LjRgCDQutGD0L0nLFxuICAgICAgICBkZCA6ICclZCDQutGD0L0nLFxuICAgICAgICBNIDogJ9Cx0LjRgCDQvtC5JyxcbiAgICAgICAgTU0gOiAnJWQg0L7QuScsXG4gICAgICAgIHkgOiAn0LHQuNGAINC50LjQuycsXG4gICAgICAgIHl5IDogJyVkINC50LjQuydcbiAgICB9LFxuICAgIHdlZWsgOiB7XG4gICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICBkb3kgOiA3ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgfVxufSk7XG5cbnJldHVybiB1ejtcblxufSkpKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3V6LmpzIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IFV6YmVrIExhdGluIFt1ei1sYXRuXVxuLy8hIGF1dGhvciA6IFJhc3VsYmVrIE1pcnpheWV2IDogZ2l0aHViLmNvbS9SYXN1bGJlZWVrXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxudmFyIHV6TGF0biA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3V6LWxhdG4nLCB7XG4gICAgbW9udGhzIDogJ1lhbnZhcl9GZXZyYWxfTWFydF9BcHJlbF9NYXlfSXl1bl9JeXVsX0F2Z3VzdF9TZW50YWJyX09rdGFicl9Ob3lhYnJfRGVrYWJyJy5zcGxpdCgnXycpLFxuICAgIG1vbnRoc1Nob3J0IDogJ1lhbl9GZXZfTWFyX0Fwcl9NYXlfSXl1bl9JeXVsX0F2Z19TZW5fT2t0X05veV9EZWsnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXMgOiAnWWFrc2hhbmJhX0R1c2hhbmJhX1Nlc2hhbmJhX0Nob3JzaGFuYmFfUGF5c2hhbmJhX0p1bWFfU2hhbmJhJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzU2hvcnQgOiAnWWFrX0R1c2hfU2VzaF9DaG9yX1BheV9KdW1fU2hhbicuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c01pbiA6ICdZYV9EdV9TZV9DaG9fUGFfSnVfU2hhJy5zcGxpdCgnXycpLFxuICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgTExMTCA6ICdEIE1NTU0gWVlZWSwgZGRkZCBISDptbSdcbiAgICB9LFxuICAgIGNhbGVuZGFyIDoge1xuICAgICAgICBzYW1lRGF5IDogJ1tCdWd1biBzb2F0XSBMVCBbZGFdJyxcbiAgICAgICAgbmV4dERheSA6ICdbRXJ0YWdhXSBMVCBbZGFdJyxcbiAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCBba3VuaSBzb2F0XSBMVCBbZGFdJyxcbiAgICAgICAgbGFzdERheSA6ICdbS2VjaGEgc29hdF0gTFQgW2RhXScsXG4gICAgICAgIGxhc3RXZWVrIDogJ1tPXFwndGdhbl0gZGRkZCBba3VuaSBzb2F0XSBMVCBbZGFdJyxcbiAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICB9LFxuICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgZnV0dXJlIDogJ1lhcWluICVzIGljaGlkYScsXG4gICAgICAgIHBhc3QgOiAnQmlyIG5lY2hhICVzIG9sZGluJyxcbiAgICAgICAgcyA6ICdzb25peWEnLFxuICAgICAgICBtIDogJ2JpciBkYXFpcWEnLFxuICAgICAgICBtbSA6ICclZCBkYXFpcWEnLFxuICAgICAgICBoIDogJ2JpciBzb2F0JyxcbiAgICAgICAgaGggOiAnJWQgc29hdCcsXG4gICAgICAgIGQgOiAnYmlyIGt1bicsXG4gICAgICAgIGRkIDogJyVkIGt1bicsXG4gICAgICAgIE0gOiAnYmlyIG95JyxcbiAgICAgICAgTU0gOiAnJWQgb3knLFxuICAgICAgICB5IDogJ2JpciB5aWwnLFxuICAgICAgICB5eSA6ICclZCB5aWwnXG4gICAgfSxcbiAgICB3ZWVrIDoge1xuICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgZG95IDogNyAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gMXN0IGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgIH1cbn0pO1xuXG5yZXR1cm4gdXpMYXRuO1xuXG59KSkpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvdXotbGF0bi5qcyIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBWaWV0bmFtZXNlIFt2aV1cbi8vISBhdXRob3IgOiBCYW5nIE5ndXllbiA6IGh0dHBzOi8vZ2l0aHViLmNvbS9iYW5nbmtcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG52YXIgdmkgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCd2aScsIHtcbiAgICBtb250aHMgOiAndGjDoW5nIDFfdGjDoW5nIDJfdGjDoW5nIDNfdGjDoW5nIDRfdGjDoW5nIDVfdGjDoW5nIDZfdGjDoW5nIDdfdGjDoW5nIDhfdGjDoW5nIDlfdGjDoW5nIDEwX3Row6FuZyAxMV90aMOhbmcgMTInLnNwbGl0KCdfJyksXG4gICAgbW9udGhzU2hvcnQgOiAnVGgwMV9UaDAyX1RoMDNfVGgwNF9UaDA1X1RoMDZfVGgwN19UaDA4X1RoMDlfVGgxMF9UaDExX1RoMTInLnNwbGl0KCdfJyksXG4gICAgbW9udGhzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgd2Vla2RheXMgOiAnY2jhu6cgbmjhuq10X3Ro4bupIGhhaV90aOG7qSBiYV90aOG7qSB0xrBfdGjhu6kgbsSDbV90aOG7qSBzw6F1X3Ro4bupIGLhuqN5Jy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzU2hvcnQgOiAnQ05fVDJfVDNfVDRfVDVfVDZfVDcnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNNaW4gOiAnQ05fVDJfVDNfVDRfVDVfVDZfVDcnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICBtZXJpZGllbVBhcnNlOiAvc2F8Y2gvaSxcbiAgICBpc1BNIDogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgIHJldHVybiAvXmNoJC9pLnRlc3QoaW5wdXQpO1xuICAgIH0sXG4gICAgbWVyaWRpZW0gOiBmdW5jdGlvbiAoaG91cnMsIG1pbnV0ZXMsIGlzTG93ZXIpIHtcbiAgICAgICAgaWYgKGhvdXJzIDwgMTIpIHtcbiAgICAgICAgICAgIHJldHVybiBpc0xvd2VyID8gJ3NhJyA6ICdTQSc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gaXNMb3dlciA/ICdjaCcgOiAnQ0gnO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICBMTCA6ICdEIE1NTU0gW27Eg21dIFlZWVknLFxuICAgICAgICBMTEwgOiAnRCBNTU1NIFtuxINtXSBZWVlZIEhIOm1tJyxcbiAgICAgICAgTExMTCA6ICdkZGRkLCBEIE1NTU0gW27Eg21dIFlZWVkgSEg6bW0nLFxuICAgICAgICBsIDogJ0REL00vWVlZWScsXG4gICAgICAgIGxsIDogJ0QgTU1NIFlZWVknLFxuICAgICAgICBsbGwgOiAnRCBNTU0gWVlZWSBISDptbScsXG4gICAgICAgIGxsbGwgOiAnZGRkLCBEIE1NTSBZWVlZIEhIOm1tJ1xuICAgIH0sXG4gICAgY2FsZW5kYXIgOiB7XG4gICAgICAgIHNhbWVEYXk6ICdbSMO0bSBuYXkgbMO6Y10gTFQnLFxuICAgICAgICBuZXh0RGF5OiAnW05nw6B5IG1haSBsw7pjXSBMVCcsXG4gICAgICAgIG5leHRXZWVrOiAnZGRkZCBbdHXhuqduIHThu5tpIGzDumNdIExUJyxcbiAgICAgICAgbGFzdERheTogJ1tIw7RtIHF1YSBsw7pjXSBMVCcsXG4gICAgICAgIGxhc3RXZWVrOiAnZGRkZCBbdHXhuqduIHLhu5NpIGzDumNdIExUJyxcbiAgICAgICAgc2FtZUVsc2U6ICdMJ1xuICAgIH0sXG4gICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICBmdXR1cmUgOiAnJXMgdOG7m2knLFxuICAgICAgICBwYXN0IDogJyVzIHRyxrDhu5tjJyxcbiAgICAgICAgcyA6ICd2w6BpIGdpw6J5JyxcbiAgICAgICAgbSA6ICdt4buZdCBwaMO6dCcsXG4gICAgICAgIG1tIDogJyVkIHBow7p0JyxcbiAgICAgICAgaCA6ICdt4buZdCBnaeG7nScsXG4gICAgICAgIGhoIDogJyVkIGdp4budJyxcbiAgICAgICAgZCA6ICdt4buZdCBuZ8OgeScsXG4gICAgICAgIGRkIDogJyVkIG5nw6B5JyxcbiAgICAgICAgTSA6ICdt4buZdCB0aMOhbmcnLFxuICAgICAgICBNTSA6ICclZCB0aMOhbmcnLFxuICAgICAgICB5IDogJ23hu5l0IG7Eg20nLFxuICAgICAgICB5eSA6ICclZCBuxINtJ1xuICAgIH0sXG4gICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9LyxcbiAgICBvcmRpbmFsIDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICByZXR1cm4gbnVtYmVyO1xuICAgIH0sXG4gICAgd2VlayA6IHtcbiAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICB9XG59KTtcblxucmV0dXJuIHZpO1xuXG59KSkpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvdmkuanMiLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogUHNldWRvIFt4LXBzZXVkb11cbi8vISBhdXRob3IgOiBBbmRyZXcgSG9vZCA6IGh0dHBzOi8vZ2l0aHViLmNvbS9hbmRyZXdob29kMTI1XG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxudmFyIHhQc2V1ZG8gPSBtb21lbnQuZGVmaW5lTG9jYWxlKCd4LXBzZXVkbycsIHtcbiAgICBtb250aHMgOiAnSn7DocOxw7rDoX5yw71fRn7DqWJyw7p+w6Fyw71ffk3DoXJjfmhfw4FwfnLDrWxffk3DocO9X35Kw7rDscOpfl9Kw7psfsO9X8OBw7p+Z8O6c3R+X1PDqXB+dMOpbWJ+w6lyX8OTfmN0w7NifsOpcl/DkX7Ds3bDqW1+YsOpcl9+RMOpY8Opfm1iw6lyJy5zcGxpdCgnXycpLFxuICAgIG1vbnRoc1Nob3J0IDogJ0p+w6HDsV9+RsOpYl9+TcOhcl9+w4Fwcl9+TcOhw71ffkrDusOxX35Kw7psX37DgcO6Z19+U8OpcF9+w5NjdF9+w5HDs3ZffkTDqWMnLnNwbGl0KCdfJyksXG4gICAgbW9udGhzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgd2Vla2RheXMgOiAnU37DusOxZMOhfsO9X03Ds37DsWTDocO9fl9Uw7rDqX5zZMOhw71+X1fDqWR+w7HDqXNkfsOhw71fVH5ow7pyc35kw6HDvV9+RnLDrWR+w6HDvV9TfsOhdMO6cn5kw6HDvScuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1Nob3J0IDogJ1N+w7rDsV9+TcOzw7FfflTDusOpX35Xw6lkX35UaMO6X35GcsOtX35Tw6F0Jy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzTWluIDogJ1N+w7pfTcOzfl9Uw7pfflfDqV9UfmhfRnJ+X1PDoScuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgTExMTCA6ICdkZGRkLCBEIE1NTU0gWVlZWSBISDptbSdcbiAgICB9LFxuICAgIGNhbGVuZGFyIDoge1xuICAgICAgICBzYW1lRGF5IDogJ1tUfsOzZMOhfsO9IMOhdF0gTFQnLFxuICAgICAgICBuZXh0RGF5IDogJ1tUfsOzbcOzfnJyw7N+dyDDoXRdIExUJyxcbiAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCBbw6F0XSBMVCcsXG4gICAgICAgIGxhc3REYXkgOiAnW8OdfsOpc3R+w6lyZMOhfsO9IMOhdF0gTFQnLFxuICAgICAgICBsYXN0V2VlayA6ICdbTH7DoXN0XSBkZGRkIFvDoXRdIExUJyxcbiAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICB9LFxuICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgZnV0dXJlIDogJ8OtfsOxICVzJyxcbiAgICAgICAgcGFzdCA6ICclcyDDoX5nw7MnLFxuICAgICAgICBzIDogJ8OhIH5mw6l3IH5zw6ljw7N+w7FkcycsXG4gICAgICAgIG0gOiAnw6Egfm3DrcOxfsO6dMOpJyxcbiAgICAgICAgbW0gOiAnJWQgbX7DrcOxw7p+dMOpcycsXG4gICAgICAgIGggOiAnw6F+w7EgaMOzfsO6cicsXG4gICAgICAgIGhoIDogJyVkIGh+w7PDunJzJyxcbiAgICAgICAgZCA6ICfDoSB+ZMOhw70nLFxuICAgICAgICBkZCA6ICclZCBkfsOhw71zJyxcbiAgICAgICAgTSA6ICfDoSB+bcOzw7F+dGgnLFxuICAgICAgICBNTSA6ICclZCBtfsOzw7F0fmhzJyxcbiAgICAgICAgeSA6ICfDoSB+w73DqcOhcicsXG4gICAgICAgIHl5IDogJyVkIMO9fsOpw6FycydcbiAgICB9LFxuICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfSh0aHxzdHxuZHxyZCkvLFxuICAgIG9yZGluYWwgOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgIHZhciBiID0gbnVtYmVyICUgMTAsXG4gICAgICAgICAgICBvdXRwdXQgPSAofn4obnVtYmVyICUgMTAwIC8gMTApID09PSAxKSA/ICd0aCcgOlxuICAgICAgICAgICAgKGIgPT09IDEpID8gJ3N0JyA6XG4gICAgICAgICAgICAoYiA9PT0gMikgPyAnbmQnIDpcbiAgICAgICAgICAgIChiID09PSAzKSA/ICdyZCcgOiAndGgnO1xuICAgICAgICByZXR1cm4gbnVtYmVyICsgb3V0cHV0O1xuICAgIH0sXG4gICAgd2VlayA6IHtcbiAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICB9XG59KTtcblxucmV0dXJuIHhQc2V1ZG87XG5cbn0pKSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS94LXBzZXVkby5qcyIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBZb3J1YmEgTmlnZXJpYSBbeW9dXG4vLyEgYXV0aG9yIDogQXRvbGFnYmUgQWJpc295ZSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9hbmRlbGEtYmF0b2xhZ2JlXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxudmFyIHlvID0gbW9tZW50LmRlZmluZUxvY2FsZSgneW8nLCB7XG4gICAgbW9udGhzIDogJ1PhurnMgXLhurnMgV9FzIByZcyAbGXMgF/hurhy4bq5zIBuYcyAX0nMgGdiZcyBX0XMgGJpYmlfT8yAa3XMgGR1X0Fn4bq5bW9fT8yAZ3XMgW5fT3dld2Vf4buMzIB3YcyAcmHMgF9CZcyBbHXMgV/hu4zMgHDhurnMgMyAJy5zcGxpdCgnXycpLFxuICAgIG1vbnRoc1Nob3J0IDogJ1PhurnMgXJfRcyAcmxf4bq4cm5fScyAZ2JfRcyAYmlfT8yAa3XMgF9BZ+G6uV9PzIBndcyBX093ZV/hu4zMgHdhzIBfQmXMgWxf4buMzIBw4bq5zIDMgCcuc3BsaXQoJ18nKSxcbiAgICB3ZWVrZGF5cyA6ICdBzIBpzIBrdcyBX0FqZcyBX0nMgHPhurnMgWd1bl/hu4xq4buNzIFydcyBX+G7jGrhu43MgWLhu41f4bq4dGnMgF9BzIBiYcyBbeG6ucyBdGEnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNTaG9ydCA6ICdBzIBpzIBrX0FqZcyBX0nMgHPhurnMgV/hu4xqcl/hu4xqYl/hurh0acyAX0HMgGJhzIEnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXNNaW4gOiAnQcyAacyAX0FqX0nMgHNf4buMcl/hu4xiX+G6uHRfQcyAYicuc3BsaXQoJ18nKSxcbiAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgTFQgOiAnaDptbSBBJyxcbiAgICAgICAgTFRTIDogJ2g6bW06c3MgQScsXG4gICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIGg6bW0gQScsXG4gICAgICAgIExMTEwgOiAnZGRkZCwgRCBNTU1NIFlZWVkgaDptbSBBJ1xuICAgIH0sXG4gICAgY2FsZW5kYXIgOiB7XG4gICAgICAgIHNhbWVEYXkgOiAnW0/MgG5pzIAgbmldIExUJyxcbiAgICAgICAgbmV4dERheSA6ICdb4buMzIBsYSBuaV0gTFQnLFxuICAgICAgICBuZXh0V2VlayA6ICdkZGRkIFvhu4xz4bq5zIAgdG/MgW5cXCdi4buNXSBbbmldIExUJyxcbiAgICAgICAgbGFzdERheSA6ICdbQcyAbmEgbmldIExUJyxcbiAgICAgICAgbGFzdFdlZWsgOiAnZGRkZCBb4buMc+G6ucyAIHRvzIFs4buNzIFdIFtuaV0gTFQnLFxuICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgIH0sXG4gICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICBmdXR1cmUgOiAnbmnMgSAlcycsXG4gICAgICAgIHBhc3QgOiAnJXMga+G7jWphzIEnLFxuICAgICAgICBzIDogJ2nMgHPhurlqdcyBIGFheWHMgSBkaWUnLFxuICAgICAgICBtIDogJ2nMgHPhurlqdcyBIGthbicsXG4gICAgICAgIG1tIDogJ2nMgHPhurlqdcyBICVkJyxcbiAgICAgICAgaCA6ICd3YcyBa2F0aSBrYW4nLFxuICAgICAgICBoaCA6ICd3YcyBa2F0aSAlZCcsXG4gICAgICAgIGQgOiAn4buNauG7jcyBIGthbicsXG4gICAgICAgIGRkIDogJ+G7jWrhu43MgSAlZCcsXG4gICAgICAgIE0gOiAnb3N1zIAga2FuJyxcbiAgICAgICAgTU0gOiAnb3N1zIAgJWQnLFxuICAgICAgICB5IDogJ+G7jWR1zIFuIGthbicsXG4gICAgICAgIHl5IDogJ+G7jWR1zIFuICVkJ1xuICAgIH0sXG4gICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZSA6IC/hu41q4buNzIFcXHNcXGR7MSwyfS8sXG4gICAgb3JkaW5hbCA6ICfhu41q4buNzIEgJWQnLFxuICAgIHdlZWsgOiB7XG4gICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICBkb3kgOiA0IC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICB9XG59KTtcblxucmV0dXJuIHlvO1xuXG59KSkpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUveW8uanMiLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogQ2hpbmVzZSAoQ2hpbmEpIFt6aC1jbl1cbi8vISBhdXRob3IgOiBzdXVwaWMgOiBodHRwczovL2dpdGh1Yi5jb20vc3V1cGljXG4vLyEgYXV0aG9yIDogWmVubyBaZW5nIDogaHR0cHM6Ly9naXRodWIuY29tL3plbm96ZW5nXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxudmFyIHpoQ24gPSBtb21lbnQuZGVmaW5lTG9jYWxlKCd6aC1jbicsIHtcbiAgICBtb250aHMgOiAn5LiA5pyIX+S6jOaciF/kuInmnIhf5Zub5pyIX+S6lOaciF/lha3mnIhf5LiD5pyIX+WFq+aciF/kuZ3mnIhf5Y2B5pyIX+WNgeS4gOaciF/ljYHkuozmnIgnLnNwbGl0KCdfJyksXG4gICAgbW9udGhzU2hvcnQgOiAnMeaciF8y5pyIXzPmnIhfNOaciF815pyIXzbmnIhfN+aciF845pyIXznmnIhfMTDmnIhfMTHmnIhfMTLmnIgnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXMgOiAn5pif5pyf5pelX+aYn+acn+S4gF/mmJ/mnJ/kuoxf5pif5pyf5LiJX+aYn+acn+Wbm1/mmJ/mnJ/kupRf5pif5pyf5YWtJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzU2hvcnQgOiAn5ZGo5pelX+WRqOS4gF/lkajkuoxf5ZGo5LiJX+WRqOWbm1/lkajkupRf5ZGo5YWtJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzTWluIDogJ+aXpV/kuIBf5LqMX+S4iV/lm5tf5LqUX+WFrScuc3BsaXQoJ18nKSxcbiAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICBMIDogJ1lZWVnlubRNTU1E5pelJyxcbiAgICAgICAgTEwgOiAnWVlZWeW5tE1NTUTml6UnLFxuICAgICAgICBMTEwgOiAnWVlZWeW5tE1NTUTml6VBaOeCuW1t5YiGJyxcbiAgICAgICAgTExMTCA6ICdZWVlZ5bm0TU1NROaXpWRkZGRBaOeCuW1t5YiGJyxcbiAgICAgICAgbCA6ICdZWVlZ5bm0TU1NROaXpScsXG4gICAgICAgIGxsIDogJ1lZWVnlubRNTU1E5pelJyxcbiAgICAgICAgbGxsIDogJ1lZWVnlubRNTU1E5pelIEhIOm1tJyxcbiAgICAgICAgbGxsbCA6ICdZWVlZ5bm0TU1NROaXpWRkZGQgSEg6bW0nXG4gICAgfSxcbiAgICBtZXJpZGllbVBhcnNlOiAv5YeM5pmofOaXqeS4inzkuIrljYh85Lit5Y2IfOS4i+WNiHzmmZrkuIovLFxuICAgIG1lcmlkaWVtSG91cjogZnVuY3Rpb24gKGhvdXIsIG1lcmlkaWVtKSB7XG4gICAgICAgIGlmIChob3VyID09PSAxMikge1xuICAgICAgICAgICAgaG91ciA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lcmlkaWVtID09PSAn5YeM5pmoJyB8fCBtZXJpZGllbSA9PT0gJ+aXqeS4iicgfHxcbiAgICAgICAgICAgICAgICBtZXJpZGllbSA9PT0gJ+S4iuWNiCcpIHtcbiAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn5LiL5Y2IJyB8fCBtZXJpZGllbSA9PT0gJ+aZmuS4iicpIHtcbiAgICAgICAgICAgIHJldHVybiBob3VyICsgMTI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyAn5Lit5Y2IJ1xuICAgICAgICAgICAgcmV0dXJuIGhvdXIgPj0gMTEgPyBob3VyIDogaG91ciArIDEyO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBtZXJpZGllbSA6IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgdmFyIGhtID0gaG91ciAqIDEwMCArIG1pbnV0ZTtcbiAgICAgICAgaWYgKGhtIDwgNjAwKSB7XG4gICAgICAgICAgICByZXR1cm4gJ+WHjOaZqCc7XG4gICAgICAgIH0gZWxzZSBpZiAoaG0gPCA5MDApIHtcbiAgICAgICAgICAgIHJldHVybiAn5pep5LiKJztcbiAgICAgICAgfSBlbHNlIGlmIChobSA8IDExMzApIHtcbiAgICAgICAgICAgIHJldHVybiAn5LiK5Y2IJztcbiAgICAgICAgfSBlbHNlIGlmIChobSA8IDEyMzApIHtcbiAgICAgICAgICAgIHJldHVybiAn5Lit5Y2IJztcbiAgICAgICAgfSBlbHNlIGlmIChobSA8IDE4MDApIHtcbiAgICAgICAgICAgIHJldHVybiAn5LiL5Y2IJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAn5pma5LiKJztcbiAgICAgICAgfVxuICAgIH0sXG4gICAgY2FsZW5kYXIgOiB7XG4gICAgICAgIHNhbWVEYXkgOiAnW+S7iuWkqV1MVCcsXG4gICAgICAgIG5leHREYXkgOiAnW+aYjuWkqV1MVCcsXG4gICAgICAgIG5leHRXZWVrIDogJ1vkuItdZGRkZExUJyxcbiAgICAgICAgbGFzdERheSA6ICdb5pio5aSpXUxUJyxcbiAgICAgICAgbGFzdFdlZWsgOiAnW+S4il1kZGRkTFQnLFxuICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgIH0sXG4gICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9KOaXpXzmnIh85ZGoKS8sXG4gICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIsIHBlcmlvZCkge1xuICAgICAgICBzd2l0Y2ggKHBlcmlvZCkge1xuICAgICAgICAgICAgY2FzZSAnZCc6XG4gICAgICAgICAgICBjYXNlICdEJzpcbiAgICAgICAgICAgIGNhc2UgJ0RERCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICfml6UnO1xuICAgICAgICAgICAgY2FzZSAnTSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICfmnIgnO1xuICAgICAgICAgICAgY2FzZSAndyc6XG4gICAgICAgICAgICBjYXNlICdXJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJ+WRqCc7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXI7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgZnV0dXJlIDogJyVz5YaFJyxcbiAgICAgICAgcGFzdCA6ICclc+WJjScsXG4gICAgICAgIHMgOiAn5Yeg56eSJyxcbiAgICAgICAgbSA6ICcxIOWIhumSnycsXG4gICAgICAgIG1tIDogJyVkIOWIhumSnycsXG4gICAgICAgIGggOiAnMSDlsI/ml7YnLFxuICAgICAgICBoaCA6ICclZCDlsI/ml7YnLFxuICAgICAgICBkIDogJzEg5aSpJyxcbiAgICAgICAgZGQgOiAnJWQg5aSpJyxcbiAgICAgICAgTSA6ICcxIOS4quaciCcsXG4gICAgICAgIE1NIDogJyVkIOS4quaciCcsXG4gICAgICAgIHkgOiAnMSDlubQnLFxuICAgICAgICB5eSA6ICclZCDlubQnXG4gICAgfSxcbiAgICB3ZWVrIDoge1xuICAgICAgICAvLyBHQi9UIDc0MDgtMTk5NOOAiuaVsOaNruWFg+WSjOS6pOaNouagvOW8j8K35L+h5oGv5Lqk5o2iwrfml6XmnJ/lkozml7bpl7TooajnpLrms5XjgIvkuI5JU08gODYwMToxOTg4562J5pWIXG4gICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgfVxufSk7XG5cbnJldHVybiB6aENuO1xuXG59KSkpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvemgtY24uanMiLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogQ2hpbmVzZSAoSG9uZyBLb25nKSBbemgtaGtdXG4vLyEgYXV0aG9yIDogQmVuIDogaHR0cHM6Ly9naXRodWIuY29tL2Jlbi1saW5cbi8vISBhdXRob3IgOiBDaHJpcyBMYW0gOiBodHRwczovL2dpdGh1Yi5jb20vaGVoYWNocmlzXG4vLyEgYXV0aG9yIDogS29uc3RhbnRpbiA6IGh0dHBzOi8vZ2l0aHViLmNvbS9za2ZkXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxudmFyIHpoSGsgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCd6aC1oaycsIHtcbiAgICBtb250aHMgOiAn5LiA5pyIX+S6jOaciF/kuInmnIhf5Zub5pyIX+S6lOaciF/lha3mnIhf5LiD5pyIX+WFq+aciF/kuZ3mnIhf5Y2B5pyIX+WNgeS4gOaciF/ljYHkuozmnIgnLnNwbGl0KCdfJyksXG4gICAgbW9udGhzU2hvcnQgOiAnMeaciF8y5pyIXzPmnIhfNOaciF815pyIXzbmnIhfN+aciF845pyIXznmnIhfMTDmnIhfMTHmnIhfMTLmnIgnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXMgOiAn5pif5pyf5pelX+aYn+acn+S4gF/mmJ/mnJ/kuoxf5pif5pyf5LiJX+aYn+acn+Wbm1/mmJ/mnJ/kupRf5pif5pyf5YWtJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzU2hvcnQgOiAn6YCx5pelX+mAseS4gF/pgLHkuoxf6YCx5LiJX+mAseWbm1/pgLHkupRf6YCx5YWtJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzTWluIDogJ+aXpV/kuIBf5LqMX+S4iV/lm5tf5LqUX+WFrScuc3BsaXQoJ18nKSxcbiAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICBMIDogJ1lZWVnlubRNTU1E5pelJyxcbiAgICAgICAgTEwgOiAnWVlZWeW5tE1NTUTml6UnLFxuICAgICAgICBMTEwgOiAnWVlZWeW5tE1NTUTml6UgSEg6bW0nLFxuICAgICAgICBMTExMIDogJ1lZWVnlubRNTU1E5pelZGRkZCBISDptbScsXG4gICAgICAgIGwgOiAnWVlZWeW5tE1NTUTml6UnLFxuICAgICAgICBsbCA6ICdZWVlZ5bm0TU1NROaXpScsXG4gICAgICAgIGxsbCA6ICdZWVlZ5bm0TU1NROaXpSBISDptbScsXG4gICAgICAgIGxsbGwgOiAnWVlZWeW5tE1NTUTml6VkZGRkIEhIOm1tJ1xuICAgIH0sXG4gICAgbWVyaWRpZW1QYXJzZTogL+WHjOaZqHzml6nkuIp85LiK5Y2IfOS4reWNiHzkuIvljYh85pma5LiKLyxcbiAgICBtZXJpZGllbUhvdXIgOiBmdW5jdGlvbiAoaG91ciwgbWVyaWRpZW0pIHtcbiAgICAgICAgaWYgKGhvdXIgPT09IDEyKSB7XG4gICAgICAgICAgICBob3VyID0gMDtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVyaWRpZW0gPT09ICflh4zmmagnIHx8IG1lcmlkaWVtID09PSAn5pep5LiKJyB8fCBtZXJpZGllbSA9PT0gJ+S4iuWNiCcpIHtcbiAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn5Lit5Y2IJykge1xuICAgICAgICAgICAgcmV0dXJuIGhvdXIgPj0gMTEgPyBob3VyIDogaG91ciArIDEyO1xuICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn5LiL5Y2IJyB8fCBtZXJpZGllbSA9PT0gJ+aZmuS4iicpIHtcbiAgICAgICAgICAgIHJldHVybiBob3VyICsgMTI7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIG1lcmlkaWVtIDogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICB2YXIgaG0gPSBob3VyICogMTAwICsgbWludXRlO1xuICAgICAgICBpZiAoaG0gPCA2MDApIHtcbiAgICAgICAgICAgIHJldHVybiAn5YeM5pmoJztcbiAgICAgICAgfSBlbHNlIGlmIChobSA8IDkwMCkge1xuICAgICAgICAgICAgcmV0dXJuICfml6nkuIonO1xuICAgICAgICB9IGVsc2UgaWYgKGhtIDwgMTEzMCkge1xuICAgICAgICAgICAgcmV0dXJuICfkuIrljYgnO1xuICAgICAgICB9IGVsc2UgaWYgKGhtIDwgMTIzMCkge1xuICAgICAgICAgICAgcmV0dXJuICfkuK3ljYgnO1xuICAgICAgICB9IGVsc2UgaWYgKGhtIDwgMTgwMCkge1xuICAgICAgICAgICAgcmV0dXJuICfkuIvljYgnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuICfmmZrkuIonO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgc2FtZURheSA6ICdb5LuK5aSpXUxUJyxcbiAgICAgICAgbmV4dERheSA6ICdb5piO5aSpXUxUJyxcbiAgICAgICAgbmV4dFdlZWsgOiAnW+S4i11kZGRkTFQnLFxuICAgICAgICBsYXN0RGF5IDogJ1vmmKjlpKldTFQnLFxuICAgICAgICBsYXN0V2VlayA6ICdb5LiKXWRkZGRMVCcsXG4gICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgfSxcbiAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0o5pelfOaciHzpgLEpLyxcbiAgICBvcmRpbmFsIDogZnVuY3Rpb24gKG51bWJlciwgcGVyaW9kKSB7XG4gICAgICAgIHN3aXRjaCAocGVyaW9kKSB7XG4gICAgICAgICAgICBjYXNlICdkJyA6XG4gICAgICAgICAgICBjYXNlICdEJyA6XG4gICAgICAgICAgICBjYXNlICdEREQnIDpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJ+aXpSc7XG4gICAgICAgICAgICBjYXNlICdNJyA6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICfmnIgnO1xuICAgICAgICAgICAgY2FzZSAndycgOlxuICAgICAgICAgICAgY2FzZSAnVycgOlxuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAn6YCxJztcbiAgICAgICAgICAgIGRlZmF1bHQgOlxuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXI7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgZnV0dXJlIDogJyVz5YWnJyxcbiAgICAgICAgcGFzdCA6ICclc+WJjScsXG4gICAgICAgIHMgOiAn5bm+56eSJyxcbiAgICAgICAgbSA6ICcxIOWIhumQmCcsXG4gICAgICAgIG1tIDogJyVkIOWIhumQmCcsXG4gICAgICAgIGggOiAnMSDlsI/mmYInLFxuICAgICAgICBoaCA6ICclZCDlsI/mmYInLFxuICAgICAgICBkIDogJzEg5aSpJyxcbiAgICAgICAgZGQgOiAnJWQg5aSpJyxcbiAgICAgICAgTSA6ICcxIOWAi+aciCcsXG4gICAgICAgIE1NIDogJyVkIOWAi+aciCcsXG4gICAgICAgIHkgOiAnMSDlubQnLFxuICAgICAgICB5eSA6ICclZCDlubQnXG4gICAgfVxufSk7XG5cbnJldHVybiB6aEhrO1xuXG59KSkpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvemgtaGsuanMiLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogQ2hpbmVzZSAoVGFpd2FuKSBbemgtdHddXG4vLyEgYXV0aG9yIDogQmVuIDogaHR0cHM6Ly9naXRodWIuY29tL2Jlbi1saW5cbi8vISBhdXRob3IgOiBDaHJpcyBMYW0gOiBodHRwczovL2dpdGh1Yi5jb20vaGVoYWNocmlzXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxudmFyIHpoVHcgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCd6aC10dycsIHtcbiAgICBtb250aHMgOiAn5LiA5pyIX+S6jOaciF/kuInmnIhf5Zub5pyIX+S6lOaciF/lha3mnIhf5LiD5pyIX+WFq+aciF/kuZ3mnIhf5Y2B5pyIX+WNgeS4gOaciF/ljYHkuozmnIgnLnNwbGl0KCdfJyksXG4gICAgbW9udGhzU2hvcnQgOiAnMeaciF8y5pyIXzPmnIhfNOaciF815pyIXzbmnIhfN+aciF845pyIXznmnIhfMTDmnIhfMTHmnIhfMTLmnIgnLnNwbGl0KCdfJyksXG4gICAgd2Vla2RheXMgOiAn5pif5pyf5pelX+aYn+acn+S4gF/mmJ/mnJ/kuoxf5pif5pyf5LiJX+aYn+acn+Wbm1/mmJ/mnJ/kupRf5pif5pyf5YWtJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzU2hvcnQgOiAn6YCx5pelX+mAseS4gF/pgLHkuoxf6YCx5LiJX+mAseWbm1/pgLHkupRf6YCx5YWtJy5zcGxpdCgnXycpLFxuICAgIHdlZWtkYXlzTWluIDogJ+aXpV/kuIBf5LqMX+S4iV/lm5tf5LqUX+WFrScuc3BsaXQoJ18nKSxcbiAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICBMIDogJ1lZWVnlubRNTU1E5pelJyxcbiAgICAgICAgTEwgOiAnWVlZWeW5tE1NTUTml6UnLFxuICAgICAgICBMTEwgOiAnWVlZWeW5tE1NTUTml6UgSEg6bW0nLFxuICAgICAgICBMTExMIDogJ1lZWVnlubRNTU1E5pelZGRkZCBISDptbScsXG4gICAgICAgIGwgOiAnWVlZWeW5tE1NTUTml6UnLFxuICAgICAgICBsbCA6ICdZWVlZ5bm0TU1NROaXpScsXG4gICAgICAgIGxsbCA6ICdZWVlZ5bm0TU1NROaXpSBISDptbScsXG4gICAgICAgIGxsbGwgOiAnWVlZWeW5tE1NTUTml6VkZGRkIEhIOm1tJ1xuICAgIH0sXG4gICAgbWVyaWRpZW1QYXJzZTogL+WHjOaZqHzml6nkuIp85LiK5Y2IfOS4reWNiHzkuIvljYh85pma5LiKLyxcbiAgICBtZXJpZGllbUhvdXIgOiBmdW5jdGlvbiAoaG91ciwgbWVyaWRpZW0pIHtcbiAgICAgICAgaWYgKGhvdXIgPT09IDEyKSB7XG4gICAgICAgICAgICBob3VyID0gMDtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVyaWRpZW0gPT09ICflh4zmmagnIHx8IG1lcmlkaWVtID09PSAn5pep5LiKJyB8fCBtZXJpZGllbSA9PT0gJ+S4iuWNiCcpIHtcbiAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn5Lit5Y2IJykge1xuICAgICAgICAgICAgcmV0dXJuIGhvdXIgPj0gMTEgPyBob3VyIDogaG91ciArIDEyO1xuICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn5LiL5Y2IJyB8fCBtZXJpZGllbSA9PT0gJ+aZmuS4iicpIHtcbiAgICAgICAgICAgIHJldHVybiBob3VyICsgMTI7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIG1lcmlkaWVtIDogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICB2YXIgaG0gPSBob3VyICogMTAwICsgbWludXRlO1xuICAgICAgICBpZiAoaG0gPCA2MDApIHtcbiAgICAgICAgICAgIHJldHVybiAn5YeM5pmoJztcbiAgICAgICAgfSBlbHNlIGlmIChobSA8IDkwMCkge1xuICAgICAgICAgICAgcmV0dXJuICfml6nkuIonO1xuICAgICAgICB9IGVsc2UgaWYgKGhtIDwgMTEzMCkge1xuICAgICAgICAgICAgcmV0dXJuICfkuIrljYgnO1xuICAgICAgICB9IGVsc2UgaWYgKGhtIDwgMTIzMCkge1xuICAgICAgICAgICAgcmV0dXJuICfkuK3ljYgnO1xuICAgICAgICB9IGVsc2UgaWYgKGhtIDwgMTgwMCkge1xuICAgICAgICAgICAgcmV0dXJuICfkuIvljYgnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuICfmmZrkuIonO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgc2FtZURheSA6ICdb5LuK5aSpXUxUJyxcbiAgICAgICAgbmV4dERheSA6ICdb5piO5aSpXUxUJyxcbiAgICAgICAgbmV4dFdlZWsgOiAnW+S4i11kZGRkTFQnLFxuICAgICAgICBsYXN0RGF5IDogJ1vmmKjlpKldTFQnLFxuICAgICAgICBsYXN0V2VlayA6ICdb5LiKXWRkZGRMVCcsXG4gICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgfSxcbiAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0o5pelfOaciHzpgLEpLyxcbiAgICBvcmRpbmFsIDogZnVuY3Rpb24gKG51bWJlciwgcGVyaW9kKSB7XG4gICAgICAgIHN3aXRjaCAocGVyaW9kKSB7XG4gICAgICAgICAgICBjYXNlICdkJyA6XG4gICAgICAgICAgICBjYXNlICdEJyA6XG4gICAgICAgICAgICBjYXNlICdEREQnIDpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJ+aXpSc7XG4gICAgICAgICAgICBjYXNlICdNJyA6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICfmnIgnO1xuICAgICAgICAgICAgY2FzZSAndycgOlxuICAgICAgICAgICAgY2FzZSAnVycgOlxuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAn6YCxJztcbiAgICAgICAgICAgIGRlZmF1bHQgOlxuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXI7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgZnV0dXJlIDogJyVz5YWnJyxcbiAgICAgICAgcGFzdCA6ICclc+WJjScsXG4gICAgICAgIHMgOiAn5bm+56eSJyxcbiAgICAgICAgbSA6ICcxIOWIhumQmCcsXG4gICAgICAgIG1tIDogJyVkIOWIhumQmCcsXG4gICAgICAgIGggOiAnMSDlsI/mmYInLFxuICAgICAgICBoaCA6ICclZCDlsI/mmYInLFxuICAgICAgICBkIDogJzEg5aSpJyxcbiAgICAgICAgZGQgOiAnJWQg5aSpJyxcbiAgICAgICAgTSA6ICcxIOWAi+aciCcsXG4gICAgICAgIE1NIDogJyVkIOWAi+aciCcsXG4gICAgICAgIHkgOiAnMSDlubQnLFxuICAgICAgICB5eSA6ICclZCDlubQnXG4gICAgfVxufSk7XG5cbnJldHVybiB6aFR3O1xuXG59KSkpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvemgtdHcuanMiLCIvLyBBdm9pZCBgY29uc29sZWAgZXJyb3JzIGluIGJyb3dzZXJzIHRoYXQgbGFjayBhIGNvbnNvbGUuXG4oZnVuY3Rpb24oKSB7XG4gICAgdmFyIG1ldGhvZDtcbiAgICB2YXIgbm9vcCA9IGZ1bmN0aW9uICgpIHt9O1xuICAgIHZhciBtZXRob2RzID0gW1xuICAgICAgICAnYXNzZXJ0JywgJ2NsZWFyJywgJ2NvdW50JywgJ2RlYnVnJywgJ2RpcicsICdkaXJ4bWwnLCAnZXJyb3InLFxuICAgICAgICAnZXhjZXB0aW9uJywgJ2dyb3VwJywgJ2dyb3VwQ29sbGFwc2VkJywgJ2dyb3VwRW5kJywgJ2luZm8nLCAnbG9nJyxcbiAgICAgICAgJ21hcmtUaW1lbGluZScsICdwcm9maWxlJywgJ3Byb2ZpbGVFbmQnLCAndGFibGUnLCAndGltZScsICd0aW1lRW5kJyxcbiAgICAgICAgJ3RpbWVsaW5lJywgJ3RpbWVsaW5lRW5kJywgJ3RpbWVTdGFtcCcsICd0cmFjZScsICd3YXJuJ1xuICAgIF07XG4gICAgdmFyIGxlbmd0aCA9IG1ldGhvZHMubGVuZ3RoO1xuICAgIHZhciBjb25zb2xlID0gKHdpbmRvdy5jb25zb2xlID0gd2luZG93LmNvbnNvbGUgfHwge30pO1xuXG4gICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIG1ldGhvZCA9IG1ldGhvZHNbbGVuZ3RoXTtcblxuICAgICAgICAvLyBPbmx5IHN0dWIgdW5kZWZpbmVkIG1ldGhvZHMuXG4gICAgICAgIGlmICghY29uc29sZVttZXRob2RdKSB7XG4gICAgICAgICAgICBjb25zb2xlW21ldGhvZF0gPSBub29wO1xuICAgICAgICB9XG4gICAgfVxufSgpKTtcblxuLy8gUGxhY2UgYW55IGpRdWVyeS9oZWxwZXIgcGx1Z2lucyBpbiBoZXJlLlxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vanMvcGx1Z2lucy5qcyIsIi8qIGdsb2JhbHMgX193ZWJwYWNrX2FtZF9vcHRpb25zX18gKi9cclxubW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfYW1kX29wdGlvbnNfXztcclxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gKHdlYnBhY2spL2J1aWxkaW4vYW1kLW9wdGlvbnMuanNcbi8vIG1vZHVsZSBpZCA9IDEyMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJpbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudCc7XG5cbmxldCBnZXRSYW5kb21BcmJpdHJhcnkgPSAobWluLCBtYXgpID0+IHtcbiAgICByZXR1cm4gTWF0aC5yYW5kb20oKSAqIChtYXggLSBtaW4pICsgbWluO1xufTtcblxubGV0IGNpdGllcyA9IFtcbiAgICB7XG4gICAgICAgIG5hbWU6ICfQn9C+0YLQvtGH0L3QtSDQvNGW0YHRhtC10LfQvdCw0YXQvtC00LbQtdC90L3RjycsXG4gICAgICAgIC8vbG9uZ2l0dWRlOiBjdXJyZW50UG9zaXRpb24ubG9uZ2l0dWRlLFxuICAgICAgICAvL2xhdGl0dWRlOiBjdXJyZW50UG9zaXRpb24ubG9uZ2l0dWRlXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6ICdLeWl2JyxcbiAgICAgICAgbG9uZ2l0dWRlOiAzMC40OTAwNjQwOTk5OTk5OTQsXG4gICAgICAgIGxhdGl0dWRlOiA1MC40MzQ2MTQ3XG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6ICdLaGFya2l2JyxcbiAgICAgICAgbG9uZ2l0dWRlOiAzNi4yMzI4LFxuICAgICAgICBsYXRpdHVkZTogNDkuOTk4NFxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiAnTHZpdicsXG4gICAgICAgIGxvbmdpdHVkZTogMjMuOTkzNSxcbiAgICAgICAgbGF0aXR1ZGU6IDQ5LjgzOThcbiAgICB9XG5dO1xuXG5sZXQgZGljID0ge1xuICAgICdUaHVuZGVyc3Rvcm0nIDoge1xuICAgICAgICBpbmQ6IFsyMDAsIDIwMSwgMjAyLCAyMTAsIDIxMSwgMjEyLCAyMjEsIDIzMCwgMjMxLCAyMzJdLFxuICAgICAgICBpbWc6ICdpbWcvaW1hZ2VfZm9yX1RodW5kZXJzdG9ybS5qcGcnXG4gICAgfSxcbiAgICAnRHJpenpsZSc6IHtcbiAgICAgICAgaW5kOiBbMzAwLCAzMDEsIDMwMiwgMzEwLCAzMTEsIDMxMiwgMzEzLCAzMTQsIDMyMV0sXG4gICAgICAgIGltZzogJ2ltZy9pbWFnZV9mb3JfRHJpenpsZS5qcGcnXG4gICAgfSxcbiAgICAnUmFpbic6IHtcbiAgICAgICAgaW5kOiBbNTAwLCA1MDEsIDUwMiwgNTAzLCA1MDQsIDUxMSwgNTIwLCA1MjEsIDUyMiwgNTMxXSxcbiAgICAgICAgaW1nOiAnaW1nL2ltYWdlX2Zvcl9SYWluLmpwZydcbiAgICB9LFxuICAgICdTbm93Jzoge1xuICAgICAgICBpbmQ6IFs2MDAsIDYwMSwgNjAyLCA2MTEsIDYxMiwgNjE1LCA2MTYsIDYyMCwgNjIxLCA2MjJdLFxuICAgICAgICBpbWc6ICdpbWcvaW1hZ2VfZm9yX1Nub3cuanBnJ1xuICAgIH0sXG4gICAgJ01pc3QnOiB7XG4gICAgICAgIGluZDogWzcwMSwgNzExLCA3MjEsIDczMSwgNzQxLCA3NTEsIDc2MSwgNzYyLCA3NzEsIDc4MV0sXG4gICAgICAgIGltZzogJ2ltZy9pbWFnZV9mb3JfTWlzdC5qcGcnXG4gICAgfSxcbiAgICAnQ2xlYXInOiB7XG4gICAgICAgIGluZDogWzgwMF0sXG4gICAgICAgIGltZzogJ2ltZy9pbWFnZV9mb3JfQ2xlYXIuanBnJ1xuICAgIH0sXG4gICAgJ0Nsb3Vkcyc6IHtcbiAgICAgICAgaW5kOiBbODAxLCA4MDIsIDgwMywgODA0XSxcbiAgICAgICAgaW1nOiAnaW1nL2ltYWdlX2Zvcl9DbG91ZHMuanBnJ1xuICAgIH0sXG4gICAgJ1N0b3JtJzoge1xuICAgICAgICBpbmQ6IFs5NjAsIDk2MSwgOTYyLCA5NTksIDk1OCwgOTU3LCA5NTZdLFxuICAgICAgICBpbWc6ICdpbWcvaW1hZ2VfZm9yX1N0b3JtLmpwZydcbiAgICB9LFxuICAgICdIdXJyaWNhbmUnOiB7XG4gICAgICAgIGluZDogWzkwMiwgOTAxLCA5MDBdLFxuICAgICAgICBpbWc6ICdpbWcvaW1hZ2VfZm9yX0h1cnJpY2FuZS5qcGcnXG4gICAgfVxufTtcblxubGV0IGdldFdlYXRoZXJDbG90aGVzID0gKGlkKSA9PiB7XG4gICAgbGV0IGluZGV4ZXMgPSBPYmplY3Qua2V5cyhkaWMpO1xuXG4gICAgJCgnI2Nsb3RoZXNXcmFwcGVyJykuaHRtbCgnJyk7XG5cbiAgICBpbmRleGVzLmZvckVhY2goKGNoaWxkKSA9PiB7XG4gICAgICAgIGRpY1tjaGlsZF0uaW5kLmZvckVhY2goKHdlYXRoZXIpID0+IHtcbiAgICAgICAgICAgIGlmKHdlYXRoZXIgPT0gaWQpIHtcbiAgICAgICAgICAgICAgICAkKCcjY2xvdGhlc1dyYXBwZXInKS5hcHBlbmQoYDxpbWcgY2xhc3M9XCJpbWctcmVzcG9uc2l2ZSBjbG90aGVzXCIgXG4gICAgICAgICAgICAgICAgICAgIHNyYz1cIiR7ZGljW2NoaWxkXS5pbWd9XCIgYWx0PVwiSW1hZ2UgZm9yICR7Y2hpbGR9XCIgLz5gKVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9KVxufTtcblxubGV0IHdlYXRoZXJDdHJsID0gKCkgPT4ge1xuICAgIGxldCBjdXJyZW50UG9zaXRpb247XG4gICAgY29uc3QgYXBpS2V5ID0gJzA2YjM1Yjc5ZDk1MGMxNjM2Y2VkOTFiOWI2MmY1MDZiJztcbiAgICBjb25zdCBhcGlLZXlfcGl4YWJheSA9ICc3MzQ1ODA0LWQyZGQ3NzhkY2RkNzE1YzA4YTU3YmViZjMnO1xuICAgICQoJyNub3cnKS5odG1sKGAke21vbWVudCgpLmZvcm1hdCgnSEg6bW0nKX1gKSA7XG5cbiAgICBsZXQgZ2V0V2VhdGhlckltYWdlID0gKHNlYXJjaCkgPT4ge1xuICAgICAgICBsZXQgc2V0dGluZ3MgPSB7XG4gICAgICAgICAgICBcImFzeW5jXCI6IHRydWUsXG4gICAgICAgICAgICBcImNyb3NzRG9tYWluXCI6IHRydWUsXG4gICAgICAgICAgICBcInVybFwiOiBgaHR0cHM6Ly9waXhhYmF5LmNvbS9hcGkvP2tleT0ke2FwaUtleV9waXhhYmF5fSZxPSR7c2VhcmNofSZpbWFnZV90eXBlPXBob3RvYCxcbiAgICAgICAgICAgIFwibWV0aG9kXCI6IFwiR0VUXCJcbiAgICAgICAgfTtcblxuICAgICAgICAkLmFqYXgoc2V0dGluZ3MpLmRvbmUoZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAkKCcjZm91bnRhaW5HJykuY3NzKCdkaXNwbGF5JywgJ25vbmUnKTtcbiAgICAgICAgICAgIGxldCBmYWN0b3IgPSBNYXRoLnJvdW5kKGdldFJhbmRvbUFyYml0cmFyeSgwLCArcmVzcG9uc2UuaGl0cy5sZW5ndGgpKTtcbiAgICAgICAgICAgICQoJy5qdW1ib3Ryb25BZnRlcicpLmNzcygnYmFja2dyb3VuZC1pbWFnZScsIGB1cmwoJHtyZXNwb25zZS5oaXRzW2ZhY3Rvcl0ud2ViZm9ybWF0VVJMfSlgKTtcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIGxldCBwYXJzZURhdGEgPSAoZGF0YSkgPT4ge1xuICAgICAgICBsZXQgdGVtcCA9ICBNYXRoLnJvdW5kKGRhdGEubWFpbi50ZW1wIC0gMjczLjE1KTtcblxuICAgICAgICAkKCcjdGVtcCcpLmh0bWwoYCR7dGVtcH0gwrBDYCk7XG4gICAgICAgICQoJyNodW1pZGl0eScpLmh0bWwoYCR7ZGF0YS5tYWluLmh1bWlkaXR5fSAlYCk7XG4gICAgICAgICQoJyNwcmVzc3VyZScpLmh0bWwoYCR7ZGF0YS5tYWluLnByZXNzdXJlfSDQvNC8INGA0YIuINGB0YIuYCk7XG4gICAgICAgICQoJyNjbG91ZHMnKS5odG1sKGAke2RhdGEuY2xvdWRzLmFsbH0gJWApO1xuICAgICAgICAkKCcjdmlzaWJpbGl0eScpLmh0bWwoYCR7ZGF0YS52aXNpYmlsaXR5fSDQvGApO1xuICAgICAgICAkKCcjd2luZCcpLmh0bWwoYCR7ZGF0YS53aW5kLnNwZWVkfSDQvC/RgWApO1xuXG4gICAgICAgIGxldCBzdHJpbmcgPSAnJztcbiAgICAgICAgJCgnI3dlYXRoZXInKS5odG1sKCcnKTtcblxuICAgICAgICBkYXRhLndlYXRoZXIuZm9yRWFjaCgoY2hpbGQpID0+IHtcbiAgICAgICAgICAgJCgnI3dlYXRoZXInKS5hcHBlbmQoYDxwPiR7Y2hpbGQuZGVzY3JpcHRpb259XG4gICAgICAgICAgICAgICAgPGltZyBzcmM9XCJodHRwOi8vb3BlbndlYXRoZXJtYXAub3JnL2ltZy93LyR7Y2hpbGQuaWNvbn0ucG5nXCIgXG4gICAgICAgICAgICAgICAgICAgIGFsdD1cIiR7Y2hpbGQuZGVzY3JpcHRpb259XCIgY2xhc3M9XCJ3ZWF0aGVySWNvblwiPlxuICAgICAgICAgICAgICAgIDwvcD5gKVxuXG4gICAgICAgICAgICBzdHJpbmcgKz0gYCR7Y2hpbGQubWFpbn0rYDtcbiAgICAgICAgICAgIGdldFdlYXRoZXJDbG90aGVzKGNoaWxkLmlkKVxuICAgICAgICB9KTtcbiAgICAgICAgJCgnI2ZvdW50YWluRycpLmNzcygnZGlzcGxheScsICdub25lJyk7XG4gICAgICAgIC8vZ2V0V2VhdGhlckltYWdlKHN0cmluZyk7XG4gICAgfTtcblxuICAgIGxldCBnZXRDdXJyZW50V2VhdGhlciA9IChkYXRhKSA9PiB7XG4gICAgICAgIGxldCBzZXR0aW5ncyA9IHtcbiAgICAgICAgICAgIFwiYXN5bmNcIjogdHJ1ZSxcbiAgICAgICAgICAgIFwiY3Jvc3NEb21haW5cIjogdHJ1ZSxcbiAgICAgICAgICAgIFwidXJsXCI6XG4gICAgICAgICAgICAgICAgYGh0dHA6Ly9hcGkub3BlbndlYXRoZXJtYXAub3JnL2RhdGEvMi41L3dlYXRoZXI/bGF0PSR7ZGF0YS5sYXRpdHVkZX0mbG9uPSR7ZGF0YS5sb25naXR1ZGV9JmFwcGlkPSR7YXBpS2V5fSZsYW5nPXVhYCxcbiAgICAgICAgICAgIFwibWV0aG9kXCI6IFwiR0VUXCJcbiAgICAgICAgfTtcblxuICAgICAgICAkLmFqYXgoc2V0dGluZ3MpLmRvbmUoZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICBwYXJzZURhdGEocmVzcG9uc2UpO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgaWYgKG5hdmlnYXRvci5nZW9sb2NhdGlvbil7XG4gICAgICAgICQoJyNmb3VudGFpbkcnKS5jc3MoJ2Rpc3BsYXknLCAnYmxvY2snKTtcbiAgICAgICAgbmF2aWdhdG9yLmdlb2xvY2F0aW9uLmdldEN1cnJlbnRQb3NpdGlvbigocmVzKT0+e1xuICAgICAgICAgICAgY3VycmVudFBvc2l0aW9uID0gcmVzLmNvb3JkcztcbiAgICAgICAgICAgIGdldEN1cnJlbnRXZWF0aGVyKGN1cnJlbnRQb3NpdGlvbik7XG4gICAgICAgIO+7vyAgIGNpdGllc1swXS5sb25naXR1ZGUgPSBjdXJyZW50UG9zaXRpb24ubG9uZ2l0dWRlO1xuICAgICAgICAgICAgY2l0aWVzWzBdLmxhdGl0dWRlID0gY3VycmVudFBvc2l0aW9uLmxhdGl0dWRlO1xuICAgICAgICAgICAgbWFwSW5pdChjdXJyZW50UG9zaXRpb24pO1xuICAgICAgICB9LCAoZXJyb3IpID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICAkKCcjc2VsZWN0V2VhdGhlcicpLmNoYW5nZShmdW5jdGlvbiAoKSB7XG4gICAgICAgIGdldEN1cnJlbnRXZWF0aGVyKGNpdGllc1skKHRoaXMpLnZhbCgpXSk7XG4gICAgICAgIG1hcEluaXQoY2l0aWVzWyQodGhpcykudmFsKCldKTtcbiAgICB9KVxufTtcblxubGV0IG1hcDtcblxubGV0IG1hcEluaXQgPSAocG9zaXRpb24pID0+IHtcbiAgICBjb25zb2xlLmxvZyhwb3NpdGlvbik7XG4gICAgbWFwLnNldENlbnRlcihuZXcgZ29vZ2xlLm1hcHMuTGF0TG5nKCBwb3NpdGlvbi5sYXRpdHVkZSwgcG9zaXRpb24ubG9uZ2l0dWRlICkgKTtcbn07XG5cbiQoZG9jdW1lbnQpLnJlYWR5KCgpPT57XG4gICAgd2VhdGhlckN0cmwoKTtcbn0pO1xuXG5mdW5jdGlvbiBpbml0KCl7XG4gICAgbGV0IGxhdGxuZyA9IG5ldyBnb29nbGUubWFwcy5MYXRMbmcoMCwgMCk7XG4gICAgbGV0IG15T3B0aW9ucyA9IHtcbiAgICAgICAgem9vbTogMTIsXG4gICAgICAgIGNlbnRlcjogbGF0bG5nLFxuICAgICAgICBtYXBUeXBlSWQ6IGdvb2dsZS5tYXBzLk1hcFR5cGVJZC5ST0FETUFQXG4gICAgfTtcbiAgICBtYXAgPSBuZXcgZ29vZ2xlLm1hcHMuTWFwKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibWFwXCIpLCBteU9wdGlvbnMpO1xufVxuXG5nb29nbGUubWFwcy5ldmVudC5hZGREb21MaXN0ZW5lcih3aW5kb3csICdsb2FkJywgaW5pdCk7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vanMvbWFpbi5qcyIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obW9kdWxlKSB7XHJcblx0aWYoIW1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcclxuXHRcdG1vZHVsZS5kZXByZWNhdGUgPSBmdW5jdGlvbigpIHt9O1xyXG5cdFx0bW9kdWxlLnBhdGhzID0gW107XHJcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcclxuXHRcdGlmKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xyXG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJsb2FkZWRcIiwge1xyXG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxyXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHJldHVybiBtb2R1bGUubDtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImlkXCIsIHtcclxuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcclxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmk7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XHJcblx0fVxyXG5cdHJldHVybiBtb2R1bGU7XHJcbn07XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAod2VicGFjaykvYnVpbGRpbi9tb2R1bGUuanMiLCJ2YXIgbWFwID0ge1xuXHRcIi4vYWZcIjogMixcblx0XCIuL2FmLmpzXCI6IDIsXG5cdFwiLi9hclwiOiAzLFxuXHRcIi4vYXItZHpcIjogNCxcblx0XCIuL2FyLWR6LmpzXCI6IDQsXG5cdFwiLi9hci1rd1wiOiA1LFxuXHRcIi4vYXIta3cuanNcIjogNSxcblx0XCIuL2FyLWx5XCI6IDYsXG5cdFwiLi9hci1seS5qc1wiOiA2LFxuXHRcIi4vYXItbWFcIjogNyxcblx0XCIuL2FyLW1hLmpzXCI6IDcsXG5cdFwiLi9hci1zYVwiOiA4LFxuXHRcIi4vYXItc2EuanNcIjogOCxcblx0XCIuL2FyLXRuXCI6IDksXG5cdFwiLi9hci10bi5qc1wiOiA5LFxuXHRcIi4vYXIuanNcIjogMyxcblx0XCIuL2F6XCI6IDEwLFxuXHRcIi4vYXouanNcIjogMTAsXG5cdFwiLi9iZVwiOiAxMSxcblx0XCIuL2JlLmpzXCI6IDExLFxuXHRcIi4vYmdcIjogMTIsXG5cdFwiLi9iZy5qc1wiOiAxMixcblx0XCIuL2JtXCI6IDEzLFxuXHRcIi4vYm0uanNcIjogMTMsXG5cdFwiLi9iblwiOiAxNCxcblx0XCIuL2JuLmpzXCI6IDE0LFxuXHRcIi4vYm9cIjogMTUsXG5cdFwiLi9iby5qc1wiOiAxNSxcblx0XCIuL2JyXCI6IDE2LFxuXHRcIi4vYnIuanNcIjogMTYsXG5cdFwiLi9ic1wiOiAxNyxcblx0XCIuL2JzLmpzXCI6IDE3LFxuXHRcIi4vY2FcIjogMTgsXG5cdFwiLi9jYS5qc1wiOiAxOCxcblx0XCIuL2NzXCI6IDE5LFxuXHRcIi4vY3MuanNcIjogMTksXG5cdFwiLi9jdlwiOiAyMCxcblx0XCIuL2N2LmpzXCI6IDIwLFxuXHRcIi4vY3lcIjogMjEsXG5cdFwiLi9jeS5qc1wiOiAyMSxcblx0XCIuL2RhXCI6IDIyLFxuXHRcIi4vZGEuanNcIjogMjIsXG5cdFwiLi9kZVwiOiAyMyxcblx0XCIuL2RlLWF0XCI6IDI0LFxuXHRcIi4vZGUtYXQuanNcIjogMjQsXG5cdFwiLi9kZS1jaFwiOiAyNSxcblx0XCIuL2RlLWNoLmpzXCI6IDI1LFxuXHRcIi4vZGUuanNcIjogMjMsXG5cdFwiLi9kdlwiOiAyNixcblx0XCIuL2R2LmpzXCI6IDI2LFxuXHRcIi4vZWxcIjogMjcsXG5cdFwiLi9lbC5qc1wiOiAyNyxcblx0XCIuL2VuLWF1XCI6IDI4LFxuXHRcIi4vZW4tYXUuanNcIjogMjgsXG5cdFwiLi9lbi1jYVwiOiAyOSxcblx0XCIuL2VuLWNhLmpzXCI6IDI5LFxuXHRcIi4vZW4tZ2JcIjogMzAsXG5cdFwiLi9lbi1nYi5qc1wiOiAzMCxcblx0XCIuL2VuLWllXCI6IDMxLFxuXHRcIi4vZW4taWUuanNcIjogMzEsXG5cdFwiLi9lbi1uelwiOiAzMixcblx0XCIuL2VuLW56LmpzXCI6IDMyLFxuXHRcIi4vZW9cIjogMzMsXG5cdFwiLi9lby5qc1wiOiAzMyxcblx0XCIuL2VzXCI6IDM0LFxuXHRcIi4vZXMtZG9cIjogMzUsXG5cdFwiLi9lcy1kby5qc1wiOiAzNSxcblx0XCIuL2VzLXVzXCI6IDM2LFxuXHRcIi4vZXMtdXMuanNcIjogMzYsXG5cdFwiLi9lcy5qc1wiOiAzNCxcblx0XCIuL2V0XCI6IDM3LFxuXHRcIi4vZXQuanNcIjogMzcsXG5cdFwiLi9ldVwiOiAzOCxcblx0XCIuL2V1LmpzXCI6IDM4LFxuXHRcIi4vZmFcIjogMzksXG5cdFwiLi9mYS5qc1wiOiAzOSxcblx0XCIuL2ZpXCI6IDQwLFxuXHRcIi4vZmkuanNcIjogNDAsXG5cdFwiLi9mb1wiOiA0MSxcblx0XCIuL2ZvLmpzXCI6IDQxLFxuXHRcIi4vZnJcIjogNDIsXG5cdFwiLi9mci1jYVwiOiA0Myxcblx0XCIuL2ZyLWNhLmpzXCI6IDQzLFxuXHRcIi4vZnItY2hcIjogNDQsXG5cdFwiLi9mci1jaC5qc1wiOiA0NCxcblx0XCIuL2ZyLmpzXCI6IDQyLFxuXHRcIi4vZnlcIjogNDUsXG5cdFwiLi9meS5qc1wiOiA0NSxcblx0XCIuL2dkXCI6IDQ2LFxuXHRcIi4vZ2QuanNcIjogNDYsXG5cdFwiLi9nbFwiOiA0Nyxcblx0XCIuL2dsLmpzXCI6IDQ3LFxuXHRcIi4vZ29tLWxhdG5cIjogNDgsXG5cdFwiLi9nb20tbGF0bi5qc1wiOiA0OCxcblx0XCIuL2d1XCI6IDQ5LFxuXHRcIi4vZ3UuanNcIjogNDksXG5cdFwiLi9oZVwiOiA1MCxcblx0XCIuL2hlLmpzXCI6IDUwLFxuXHRcIi4vaGlcIjogNTEsXG5cdFwiLi9oaS5qc1wiOiA1MSxcblx0XCIuL2hyXCI6IDUyLFxuXHRcIi4vaHIuanNcIjogNTIsXG5cdFwiLi9odVwiOiA1Myxcblx0XCIuL2h1LmpzXCI6IDUzLFxuXHRcIi4vaHktYW1cIjogNTQsXG5cdFwiLi9oeS1hbS5qc1wiOiA1NCxcblx0XCIuL2lkXCI6IDU1LFxuXHRcIi4vaWQuanNcIjogNTUsXG5cdFwiLi9pc1wiOiA1Nixcblx0XCIuL2lzLmpzXCI6IDU2LFxuXHRcIi4vaXRcIjogNTcsXG5cdFwiLi9pdC5qc1wiOiA1Nyxcblx0XCIuL2phXCI6IDU4LFxuXHRcIi4vamEuanNcIjogNTgsXG5cdFwiLi9qdlwiOiA1OSxcblx0XCIuL2p2LmpzXCI6IDU5LFxuXHRcIi4va2FcIjogNjAsXG5cdFwiLi9rYS5qc1wiOiA2MCxcblx0XCIuL2trXCI6IDYxLFxuXHRcIi4va2suanNcIjogNjEsXG5cdFwiLi9rbVwiOiA2Mixcblx0XCIuL2ttLmpzXCI6IDYyLFxuXHRcIi4va25cIjogNjMsXG5cdFwiLi9rbi5qc1wiOiA2Myxcblx0XCIuL2tvXCI6IDY0LFxuXHRcIi4va28uanNcIjogNjQsXG5cdFwiLi9reVwiOiA2NSxcblx0XCIuL2t5LmpzXCI6IDY1LFxuXHRcIi4vbGJcIjogNjYsXG5cdFwiLi9sYi5qc1wiOiA2Nixcblx0XCIuL2xvXCI6IDY3LFxuXHRcIi4vbG8uanNcIjogNjcsXG5cdFwiLi9sdFwiOiA2OCxcblx0XCIuL2x0LmpzXCI6IDY4LFxuXHRcIi4vbHZcIjogNjksXG5cdFwiLi9sdi5qc1wiOiA2OSxcblx0XCIuL21lXCI6IDcwLFxuXHRcIi4vbWUuanNcIjogNzAsXG5cdFwiLi9taVwiOiA3MSxcblx0XCIuL21pLmpzXCI6IDcxLFxuXHRcIi4vbWtcIjogNzIsXG5cdFwiLi9tay5qc1wiOiA3Mixcblx0XCIuL21sXCI6IDczLFxuXHRcIi4vbWwuanNcIjogNzMsXG5cdFwiLi9tclwiOiA3NCxcblx0XCIuL21yLmpzXCI6IDc0LFxuXHRcIi4vbXNcIjogNzUsXG5cdFwiLi9tcy1teVwiOiA3Nixcblx0XCIuL21zLW15LmpzXCI6IDc2LFxuXHRcIi4vbXMuanNcIjogNzUsXG5cdFwiLi9teVwiOiA3Nyxcblx0XCIuL215LmpzXCI6IDc3LFxuXHRcIi4vbmJcIjogNzgsXG5cdFwiLi9uYi5qc1wiOiA3OCxcblx0XCIuL25lXCI6IDc5LFxuXHRcIi4vbmUuanNcIjogNzksXG5cdFwiLi9ubFwiOiA4MCxcblx0XCIuL25sLWJlXCI6IDgxLFxuXHRcIi4vbmwtYmUuanNcIjogODEsXG5cdFwiLi9ubC5qc1wiOiA4MCxcblx0XCIuL25uXCI6IDgyLFxuXHRcIi4vbm4uanNcIjogODIsXG5cdFwiLi9wYS1pblwiOiA4Myxcblx0XCIuL3BhLWluLmpzXCI6IDgzLFxuXHRcIi4vcGxcIjogODQsXG5cdFwiLi9wbC5qc1wiOiA4NCxcblx0XCIuL3B0XCI6IDg1LFxuXHRcIi4vcHQtYnJcIjogODYsXG5cdFwiLi9wdC1ici5qc1wiOiA4Nixcblx0XCIuL3B0LmpzXCI6IDg1LFxuXHRcIi4vcm9cIjogODcsXG5cdFwiLi9yby5qc1wiOiA4Nyxcblx0XCIuL3J1XCI6IDg4LFxuXHRcIi4vcnUuanNcIjogODgsXG5cdFwiLi9zZFwiOiA4OSxcblx0XCIuL3NkLmpzXCI6IDg5LFxuXHRcIi4vc2VcIjogOTAsXG5cdFwiLi9zZS5qc1wiOiA5MCxcblx0XCIuL3NpXCI6IDkxLFxuXHRcIi4vc2kuanNcIjogOTEsXG5cdFwiLi9za1wiOiA5Mixcblx0XCIuL3NrLmpzXCI6IDkyLFxuXHRcIi4vc2xcIjogOTMsXG5cdFwiLi9zbC5qc1wiOiA5Myxcblx0XCIuL3NxXCI6IDk0LFxuXHRcIi4vc3EuanNcIjogOTQsXG5cdFwiLi9zclwiOiA5NSxcblx0XCIuL3NyLWN5cmxcIjogOTYsXG5cdFwiLi9zci1jeXJsLmpzXCI6IDk2LFxuXHRcIi4vc3IuanNcIjogOTUsXG5cdFwiLi9zc1wiOiA5Nyxcblx0XCIuL3NzLmpzXCI6IDk3LFxuXHRcIi4vc3ZcIjogOTgsXG5cdFwiLi9zdi5qc1wiOiA5OCxcblx0XCIuL3N3XCI6IDk5LFxuXHRcIi4vc3cuanNcIjogOTksXG5cdFwiLi90YVwiOiAxMDAsXG5cdFwiLi90YS5qc1wiOiAxMDAsXG5cdFwiLi90ZVwiOiAxMDEsXG5cdFwiLi90ZS5qc1wiOiAxMDEsXG5cdFwiLi90ZXRcIjogMTAyLFxuXHRcIi4vdGV0LmpzXCI6IDEwMixcblx0XCIuL3RoXCI6IDEwMyxcblx0XCIuL3RoLmpzXCI6IDEwMyxcblx0XCIuL3RsLXBoXCI6IDEwNCxcblx0XCIuL3RsLXBoLmpzXCI6IDEwNCxcblx0XCIuL3RsaFwiOiAxMDUsXG5cdFwiLi90bGguanNcIjogMTA1LFxuXHRcIi4vdHJcIjogMTA2LFxuXHRcIi4vdHIuanNcIjogMTA2LFxuXHRcIi4vdHpsXCI6IDEwNyxcblx0XCIuL3R6bC5qc1wiOiAxMDcsXG5cdFwiLi90em1cIjogMTA4LFxuXHRcIi4vdHptLWxhdG5cIjogMTA5LFxuXHRcIi4vdHptLWxhdG4uanNcIjogMTA5LFxuXHRcIi4vdHptLmpzXCI6IDEwOCxcblx0XCIuL3VrXCI6IDExMCxcblx0XCIuL3VrLmpzXCI6IDExMCxcblx0XCIuL3VyXCI6IDExMSxcblx0XCIuL3VyLmpzXCI6IDExMSxcblx0XCIuL3V6XCI6IDExMixcblx0XCIuL3V6LWxhdG5cIjogMTEzLFxuXHRcIi4vdXotbGF0bi5qc1wiOiAxMTMsXG5cdFwiLi91ei5qc1wiOiAxMTIsXG5cdFwiLi92aVwiOiAxMTQsXG5cdFwiLi92aS5qc1wiOiAxMTQsXG5cdFwiLi94LXBzZXVkb1wiOiAxMTUsXG5cdFwiLi94LXBzZXVkby5qc1wiOiAxMTUsXG5cdFwiLi95b1wiOiAxMTYsXG5cdFwiLi95by5qc1wiOiAxMTYsXG5cdFwiLi96aC1jblwiOiAxMTcsXG5cdFwiLi96aC1jbi5qc1wiOiAxMTcsXG5cdFwiLi96aC1oa1wiOiAxMTgsXG5cdFwiLi96aC1oay5qc1wiOiAxMTgsXG5cdFwiLi96aC10d1wiOiAxMTksXG5cdFwiLi96aC10dy5qc1wiOiAxMTlcbn07XG5mdW5jdGlvbiB3ZWJwYWNrQ29udGV4dChyZXEpIHtcblx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18od2VicGFja0NvbnRleHRSZXNvbHZlKHJlcSkpO1xufTtcbmZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0UmVzb2x2ZShyZXEpIHtcblx0dmFyIGlkID0gbWFwW3JlcV07XG5cdGlmKCEoaWQgKyAxKSkgLy8gY2hlY2sgZm9yIG51bWJlciBvciBzdHJpbmdcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiICsgcmVxICsgXCInLlwiKTtcblx0cmV0dXJuIGlkO1xufTtcbndlYnBhY2tDb250ZXh0LmtleXMgPSBmdW5jdGlvbiB3ZWJwYWNrQ29udGV4dEtleXMoKSB7XG5cdHJldHVybiBPYmplY3Qua2V5cyhtYXApO1xufTtcbndlYnBhY2tDb250ZXh0LnJlc29sdmUgPSB3ZWJwYWNrQ29udGV4dFJlc29sdmU7XG5tb2R1bGUuZXhwb3J0cyA9IHdlYnBhY2tDb250ZXh0O1xud2VicGFja0NvbnRleHQuaWQgPSAxMjU7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZSBeXFwuXFwvLiokXG4vLyBtb2R1bGUgaWQgPSAxMjVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gcmVtb3ZlZCBieSBleHRyYWN0LXRleHQtd2VicGFjay1wbHVnaW5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2Nzcy9ib290c3RyYXAubWluLmNzc1xuLy8gbW9kdWxlIGlkID0gMTI2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIHJlbW92ZWQgYnkgZXh0cmFjdC10ZXh0LXdlYnBhY2stcGx1Z2luXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9jc3MvbWFpbi5jc3Ncbi8vIG1vZHVsZSBpZCA9IDEyN1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyByZW1vdmVkIGJ5IGV4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vY3NzL25vcm1hbGl6ZS5jc3Ncbi8vIG1vZHVsZSBpZCA9IDEyOFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9
